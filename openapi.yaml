openapi: 3.0.1
info:
  contact:
    name: Bitbucket Data Center Jira Project
    url: https://jira.atlassian.com/projects/BSERV/summary
  description: "This is the reference document for the Atlassian Bitbucket REST API.\
    \ The REST API is for developers who want to: \n\n - integrate Bitbucket with\
    \ other applications;\n\n - create scripts that interact with Bitbucket; or\n\n\
    \ - develop plugins that enhance the Bitbucket UI, using REST to interact with\
    \ the backend. \n\n You can read more about developing Bitbucket plugins in the\
    \ [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/)."
  termsOfService: https://www.atlassian.com/legal/software-license-agreement
  title: Bitbucket Data Center
  version: "9.6"
servers:
- url: "http://{baseurl}/rest"
  variables:
    baseurl:
      default: example.com:7990
      description: Address of your Bitbucket instance
tags:
- name: Authentication
- name: Builds and Deployments
- name: Capabilities
- name: Dashboard
- name: Deprecated
- name: Jira Integration
- name: Markup
- name: Mirroring (Mirror)
- name: Mirroring (Upstream)
- name: Permission Management
- name: Project
- name: Pull Requests
- name: Repository
- name: SAML certificate configuration
- name: Search
- name: Security
- name: System Maintenance
paths:
  /access-tokens/latest/projects/{projectKey}:
    get:
      deprecated: false
      description: Get all access tokens associated with the given project.
      operationId: getAllAccessTokens
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: "Start number for the page (inclusive). If not passed, first\
          \ page is assumed."
        example: 0
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 0
          type: number
        style: form
      - description: "Number of items to return. If not passed, a page size of 25\
          \ is used."
        example: 25
        explode: true
        in: query
        name: limit
        required: false
        schema:
          example: 25
          type: number
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_200_response"
          description: A response containing a page of access tokens and associated
            details.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user is not permitted to get access
            tokens for this project or authentication failed.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified project does not exist.
      summary: Get project HTTP tokens
      tags:
      - Authentication
    put:
      deprecated: false
      description: Create an access token for the project according to the given request.
      operationId: createAccessToken
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestAccessTokenRequest"
        description: The request containing the details of the access token to create.
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestRawAccessToken"
          description: A response containing the raw access token and associated details.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: |
            One of the following error cases occurred (check the error message for more details).

            - The request does not contain a token name
            - The request does not contain a list of permissions, or the list of permissions is empty
            - One of the provided permission levels are unknown
            - The project already has the maximum number of tokens
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user is not permitted to create
            an access token for this project or authentication failed.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified project does not exist.
      summary: Create project HTTP token
      tags:
      - Authentication
  /access-tokens/latest/projects/{projectKey}/repos/{repositorySlug}:
    get:
      deprecated: false
      description: Get all access tokens associated with the given repository.
      operationId: getAllAccessTokens_1
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      - description: "Start number for the page (inclusive). If not passed, first\
          \ page is assumed."
        example: 0
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 0
          type: number
        style: form
      - description: "Number of items to return. If not passed, a page size of 25\
          \ is used."
        example: 25
        explode: true
        in: query
        name: limit
        required: false
        schema:
          example: 25
          type: number
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_200_response"
          description: A response containing a page of access tokens and associated
            details.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user is not permitted to get access
            tokens for this repository or authentication failed.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified repository does not exist.
      summary: Get repository HTTP tokens
      tags:
      - Authentication
    put:
      deprecated: false
      description: Create an access token for the repository according to the given
        request.
      operationId: createAccessToken_1
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestAccessTokenRequest"
        description: The request containing the details of the access token to create.
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestRawAccessToken"
          description: A response containing the raw access token and associated details.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: |-
            One of the following error cases occurred (check the error message for more details).

            - The request does not contain a token name- The request does not contain a list of permissions, or the list of permissions is empty- One of the provided permission levels are unknown- The repository already has the maximum number of tokens
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user is not permitted to create
            an access token for this repository or authentication failed.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified repository does not exist.
      summary: Create repository HTTP token
      tags:
      - Authentication
  /access-tokens/latest/projects/{projectKey}/repos/{repositorySlug}/{tokenId}:
    delete:
      deprecated: false
      description: Delete the access token identified by the given ID.
      operationId: deleteById_1
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The token id.
        explode: false
        in: path
        name: tokenId
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: An empty response indicating that the token has been deleted.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user is not permitted to delete
            an access token on behalf of this user or authentication failed.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified user or token does not exist.
      summary: Delete a HTTP token
      tags:
      - Authentication
    get:
      deprecated: false
      description: Get the access token identified by the given ID.
      operationId: getById_1
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The token id.
        explode: false
        in: path
        name: tokenId
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestAccessToken"
          description: A response containing the access token and associated details.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user is not permitted to get access
            tokens on behalf of this user or authentication failed.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified user or token does not exist.
      summary: Get HTTP token by ID
      tags:
      - Authentication
    post:
      deprecated: false
      description: Modify an access token according to the given request. Any fields
        not specified will not be altered.
      operationId: updateAccessToken_1
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The token id.
        explode: false
        in: path
        name: tokenId
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestAccessTokenRequest"
        description: The request containing the details of the access token to modify
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestAccessToken"
          description: A response containing the updated access token and associated
            details.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: One of the provided permission levels are unknown.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user is not permitted to update
            an access token on behalf of this user or authentication failed.
      summary: Update HTTP token
      tags:
      - Authentication
  /access-tokens/latest/projects/{projectKey}/{tokenId}:
    delete:
      deprecated: false
      description: Delete the access token identified by the given ID.
      operationId: deleteById
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The token id.
        explode: false
        in: path
        name: tokenId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: An empty response indicating that the token has been deleted.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user is not permitted to delete
            an access token on behalf of this user or authentication failed.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified user or token does not exist.
      summary: Delete a HTTP token
      tags:
      - Authentication
    get:
      deprecated: false
      description: Get the access token identified by the given ID.
      operationId: getById
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The token id.
        explode: false
        in: path
        name: tokenId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestAccessToken"
          description: A response containing the access token and associated details.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user is not permitted to get access
            tokens on behalf of this user or authentication failed.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified user or token does not exist.
      summary: Get HTTP token by ID
      tags:
      - Authentication
    post:
      deprecated: false
      description: Modify an access token according to the given request. Any fields
        not specified will not be altered.
      operationId: updateAccessToken
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The token id.
        explode: false
        in: path
        name: tokenId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestAccessTokenRequest"
        description: The request containing the details of the access token to modify
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestAccessToken"
          description: A response containing the updated access token and associated
            details.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: One of the provided permission levels are unknown.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user is not permitted to update
            an access token on behalf of this user or authentication failed.
      summary: Update HTTP token
      tags:
      - Authentication
  /access-tokens/latest/users/{userSlug}:
    get:
      deprecated: false
      description: Get all access tokens associated with the given user.
      operationId: getAllAccessTokens_2
      parameters:
      - description: The user slug.
        explode: false
        in: path
        name: userSlug
        required: true
        schema:
          type: string
        style: simple
      - description: "Start number for the page (inclusive). If not passed, first\
          \ page is assumed."
        example: 0
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 0
          type: number
        style: form
      - description: "Number of items to return. If not passed, a page size of 25\
          \ is used."
        example: 25
        explode: true
        in: query
        name: limit
        required: false
        schema:
          example: 25
          type: number
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_200_response"
          description: A response containing a page of access tokens and associated
            details.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user is not permitted to get access
            tokens on behalf of this user or authentication failed.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified user does not exist.
      summary: Get personal HTTP tokens
      tags:
      - Authentication
    put:
      deprecated: false
      description: Create an access token for the user according to the given request.
      operationId: createAccessToken_2
      parameters:
      - description: The user slug.
        explode: false
        in: path
        name: userSlug
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestAccessTokenRequest"
        description: The request containing the details of the access token to create.
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestRawAccessToken"
          description: A response containing the raw access token and associated details.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: |
            One of the following error cases occurred (check the error message for more details).

            - The request does not contain a token name
            - The request does not contain a list of permissions, or the list of permissions is empty
            - One of the provided permission levels are unknown
            - The user already has their maximum number of tokens
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user is not permitted to create
            an access token on behalf of this user or authentication failed
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified user does not exist.
      summary: Create personal HTTP token
      tags:
      - Authentication
  /access-tokens/latest/users/{userSlug}/{tokenId}:
    delete:
      deprecated: false
      description: Delete the access token identified by the given ID.
      operationId: deleteById_2
      parameters:
      - description: The token id.
        explode: false
        in: path
        name: tokenId
        required: true
        schema:
          type: string
        style: simple
      - description: The user slug.
        explode: false
        in: path
        name: userSlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: An empty response indicating that the token has been deleted.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user is not permitted to delete
            an access token on behalf of this user or authentication failed.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified user or token does not exist.
      summary: Delete a HTTP token
      tags:
      - Authentication
    get:
      deprecated: false
      description: Get the access token identified by the given ID.
      operationId: getById_2
      parameters:
      - description: The token id.
        explode: false
        in: path
        name: tokenId
        required: true
        schema:
          type: string
        style: simple
      - description: The user slug.
        explode: false
        in: path
        name: userSlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestAccessToken"
          description: A response containing the access token and associated details.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user is not permitted to get access
            tokens on behalf of this user or authentication failed.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified user or token does not exist.
      summary: Get HTTP token by ID
      tags:
      - Authentication
    post:
      deprecated: false
      description: Modify an access token according to the given request. Any fields
        not specified will not be altered.
      operationId: updateAccessToken_2
      parameters:
      - description: The token id.
        explode: false
        in: path
        name: tokenId
        required: true
        schema:
          type: string
        style: simple
      - description: The user slug.
        explode: false
        in: path
        name: userSlug
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestAccessTokenRequest"
        description: The request containing the details of the access token to modify
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestAccessToken"
          description: A response containing the updated access token and associated
            details.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: One of the provided permission levels are unknown.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user is not permitted to update
            an access token on behalf of this user or authentication failed.
      summary: Update HTTP token
      tags:
      - Authentication
  /branch-utils/latest/projects/{projectKey}/repos/{repositorySlug}/branches:
    delete:
      deprecated: false
      description: |2-
         Deletes a branch in the specified repository.


         If the branch does not exist, this operation will not raise an error. In other words after calling this resource
         and receiving a 204 response the branch provided in the request is guaranteed to not exist in the specified
         repository any more, regardless of its existence beforehand.


         The optional 'endPoint' parameter of the request may contain a commit ID that the provided ref name is
         expected to point to. Should the ref point to a different commit ID, a 400 response will be returned with
         appropriate error details.


         The authenticated user must have an effective <strong>REPO_WRITE</strong> permission to call this resource. If
         branch permissions are set up in the repository, the authenticated user must also have access to the branch name
         that is to be deleted.
      operationId: deleteBranch
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: An empty response indicating that the branch no longer exists
            in the repository
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: |-
            The branch was not deleted because the request was invalid, e.g. no ref name
            to delete was provided, or the provided ref name points to the default branch
            in the repository that cannot be deleted
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: |-
            The currently authenticated user has insufficient permissions to delete a
            branch. This could be due to insufficient repository permissions, or lack of
            branch permission for the provided ref name.
      summary: Delete branch
      tags:
      - Repository
    post:
      deprecated: false
      description: |2-
         Creates a branch in the specified repository.


        The authenticated user must have an effective <strong>REPO_WRITE</strong> permission to call this resource. If
        branch permissions are set up in the repository, the authenticated user must also have access to the branch name
        that is to be created.
      operationId: createBranch
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestBranchCreateRequest"
        required: true
      responses:
        "201":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestBranch"
          description: JSON representation of the newly created branch
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: |-
            The branch was not created because the request was invalid, e.g. the provided
            ref name already existed in the repository, or was not a valid ref name in the
            repository
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "The currently authenticated user has insufficient permissions\
            \ to create a branch. This could be due to insufficient repository permissions,\
            \ or lack of branch permission for the provided ref name"
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The branch name overlapped with an existing branch
      summary: Create branch
      tags:
      - Repository
  /branch-utils/latest/projects/{projectKey}/repos/{repositorySlug}/branches/info/{commitId}:
    get:
      deprecated: false
      description: Gets the branch information associated with a single commit from
        a given repository.
      operationId: findByCommit
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - content:
          application/json:
            schema:
              maxLength: 40
              type: string
        in: path
        name: commitId
        required: true
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      - description: "Start number for the page (inclusive). If not passed, first\
          \ page is assumed."
        example: 0
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 0
          type: number
        style: form
      - description: "Number of items to return. If not passed, a page size of 25\
          \ is used."
        example: 25
        explode: true
        in: query
        name: limit
        required: false
        schema:
          example: 25
          type: number
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/findByCommit_200_response"
          description: A page of branch refs associated with the commit
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The request has timed out processing the branch request
      summary: Get branch
      tags:
      - Repository
  /audit/latest/notification-settings/retention-config-review:
    delete:
      deprecated: false
      description: Dismisses the retention config review notification displayed by
        the audit plugin for the user that's currently logged in.
      operationId: dismissRetentionConfigReviewNotification
      responses:
        "200":
          content:
            application/json;charset=UTF-8: {}
          description: A blank response
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to dismiss the notification.
      summary: Dismiss retention config notification
      tags:
      - System Maintenance
  /build-status/latest/commits/stats:
    post:
      deprecated: false
      description: "Produces a list of the build statistics for multiple commits.\
        \ Commits <em>without any builds associated with them</em> will not be returned.<br>\
        \ For example if the commit <code>e00cf62997a027bbf785614a93e2e55bb331d268</code>\
        \ does not have any build statuses associated with it, it will not be present\
        \ in the response."
      operationId: getMultipleBuildStatusStats
      requestBody:
        content:
          application/json:
            schema:
              items:
                example: db0dd118fa6ccdf1d593fef00df839dd27702df7
                type: string
              type: array
        description: full SHA1 of each commit
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestMultipleBuildStats"
          description: The number of successful/failed/in-progress/cancelled/unknown
            builds for each commit (with the caveat that the commits <em>without any
            builds associated with them</em> will not be present in the response)
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The user is not authenticated or does not have the <strong>LICENSED</strong>
            permission
      summary: Get build status statistics for multiple commits
      tags:
      - Builds and Deployments
      - Deprecated
  /build-status/latest/commits/stats/{commitId}:
    get:
      deprecated: false
      description: Gets statistics regarding the builds associated with a commit
      operationId: getBuildStatusStats
      parameters:
      - description: "include a unique build result if there is either only one failed\
          \ build, only one in-progress build or only one successful build"
        explode: true
        in: query
        name: includeUnique
        required: false
        schema:
          type: boolean
        style: form
      - description: full SHA1 of the commit
        example: e00cf62997a027bbf785614a93e2e55bb331d268
        explode: false
        in: path
        name: commitId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestBuildStats"
          description: The number of successful/failed/in-progress/cancelled/unknown
            builds for the commit
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The user is not authenticated or does not have the <b>LICENSED</b>
            permission.
      summary: Get build status statistics for commit
      tags:
      - Builds and Deployments
      - Deprecated
  /build-status/latest/commits/{commitId}:
    get:
      deprecated: true
      description: |-
        Gets build statuses associated with a commit.

        <strong>Deprecated in 7.14, please use the repository based builds resource instead.</strong>
      operationId: getBuildStatus
      parameters:
      - description: "How the results should be ordered. Options are NEWEST, OLDEST,\
          \ STATUS"
        example: "newest, oldest, or status"
        explode: true
        in: query
        name: orderBy
        required: false
        schema:
          type: string
        style: form
      - description: "Full SHA1 of the commit (ex: <code>e00cf62997a027bbf785614a93e2e55bb331d268</code>)"
        explode: false
        in: path
        name: commitId
        required: true
        schema:
          type: string
        style: simple
      - description: "Start number for the page (inclusive). If not passed, first\
          \ page is assumed."
        example: 0
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 0
          type: number
        style: form
      - description: "Number of items to return. If not passed, a page size of 25\
          \ is used."
        example: 25
        explode: true
        in: query
        name: limit
        required: false
        schema:
          example: 25
          type: number
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getBuildStatus_200_response"
          description: A Page of build statuses associated with the commit <br />
            (limited to the most recent 100 build statuses associated with the commit)
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The user is not authenticated or does not have the <b>LICENSED</b>
            permission.
      summary: Get build statuses for commit
      tags:
      - Deprecated
    post:
      deprecated: true
      description: |-
        Associates a build status with a commit.The <code>state</code>, the <code>key</code> and the <code>url</code> fields are mandatory. The <code>name</code> and<code>description</code> fields are optional.All fields (mandatory or optional) are limited to 255 characters, except for the <code>url</code>,which is limited to 450 characters.Supported values for the <code>state</code> are <code>SUCCESSFUL</code>, <code>FAILED</code>and <code>INPROGRESS</code>.The authenticated user must have <strong>LICENSED</strong> permission or higher to call this resource.

        <strong>Deprecated in 7.14, please use the repository based builds resource instead.</strong>
      operationId: addBuildStatus
      parameters:
      - description: full SHA1 of the commit
        example: e00cf62997a027bbf785614a93e2e55bb331d268
        explode: false
        in: path
        name: commitId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestBuildStatus"
        description: build status to associate with the commit
      responses:
        "204":
          description: An empty response if the build status was successfully stored
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "An error message if the <code>commitId</code> is not a full\
            \ 40-characters SHA1, if the build status has a missing mandatory field\
            \ or if the fields are too large"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The user is not authenticated or does not have the <strong>LICENSED</strong>
            permission
      summary: Create build status for commit
      tags:
      - Deprecated
  /required-builds/latest/projects/{projectKey}/repos/{repositorySlug}/condition:
    post:
      deprecated: false
      description: |+
        Create a required build merge check for the given repository.

        The authenticated user must have **REPO_ADMIN** permission for the target repository to register a required build merge check.

        The contents of the required build merge check request are:

        These fields are **required**:

        - **buildParentKeys**: A non-empty list of build parent keys that require green builds for this merge check to pass
        - **refMatcher.id**: The value to match refs against in the target branch
        - **refMatcher.type.id**: The type of ref matcher, one of: "ANY_REF", "BRANCH", "PATTERN", "MODEL_CATEGORY" or "MODEL_BRANCH"


        These fields are optional:

        - **exemptRefMatcher.id** The value to exempt refs in the source branch from this check
        - **exemptRefMatcher.type.id**: The type of exempt ref matcher, one of: "ANY_REF", "BRANCH", "PATTERN", "MODEL_CATEGORY" or "MODEL_BRANCH"


      operationId: createRequiredBuildsMergeCheck
      parameters:
      - description: The project that the repository belongs to
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The repository being used
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          '*/*':
            schema:
              $ref: "#/components/schemas/RestRequiredBuildConditionSetRequest"
        description: "The request specifying the required build parent keys, ref matcher\
          \ and exemption matcher"
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestRequiredBuildCondition"
          description: A response containing the newly created required build merge
            check.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: |+
            The request was malformed. This could be caused because:

            - The build parent key list is empty
            - Either of the provided ref matchers is of an unrecognized type
            - Either of the provided ref matchers could not be created with the provided type and id


        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to create a required build merge check in this repository.
      summary: Create a required builds merge check
      tags:
      - Builds and Deployments
  /required-builds/latest/projects/{projectKey}/repos/{repositorySlug}/condition/{id}:
    delete:
      deprecated: false
      description: |-
        Deletes a required build existing merge check, given it's ID.

        The authenticated user must have **REPO_ADMIN** permission for the target repository to delete a required build merge check.
      operationId: deleteRequiredBuildsMergeCheck
      parameters:
      - description: The project that the repository belongs to
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      - description: The repository being used
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: "An empty response indicating the merge check was successfully\
            \ deleted, or was never present."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to delete a required build merge check in this repository.
      summary: Delete a required builds merge check
      tags:
      - Builds and Deployments
    put:
      deprecated: false
      description: |+
        Update the required builds merge check for the given ID.

        The authenticated user must have **REPO_ADMIN** permission for the target repository to update a required build merge check.

        The contents of the required build merge check request are:

        These fields are **required**:

        - **buildParentKeys**: A non-empty list of build parent keys that require green builds for this merge check to pass
        - **refMatcher.id**: The value to match refs against in the target branch
        - **refMatcher.type.id**: The type of ref matcher, one of: "ANY_REF", "BRANCH", "PATTERN", "MODEL_CATEGORY" or "MODEL_BRANCH"


        These fields are optional:

        - **exemptRefMatcher.id** The value to exempt refs in the source branch from this check
        - **exemptRefMatcher.type.id**: The type of exempt ref matcher, one of: "ANY_REF", "BRANCH", "PATTERN", "MODEL_CATEGORY" or "MODEL_BRANCH"


      operationId: updateRequiredBuildsMergeCheck
      parameters:
      - description: The project that the repository belongs to
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      - description: The repository being used
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          '*/*':
            schema:
              $ref: "#/components/schemas/RestRequiredBuildConditionSetRequest"
        description: "The request specifying the required build parent keys, ref matcher\
          \ and exemption matcher"
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestRequiredBuildCondition"
          description: The details needed to update a required build merge check.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: |+
            The request was malformed. This could be caused because:

            - The build parent key list is empty
            - Either of the provided ref matchers is of an unrecognized type
            - Either of the provided ref matchers could not be created with the provided type and id


        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to create a required build merge check in this repository.
      summary: Update a required builds merge check
      tags:
      - Builds and Deployments
  /required-builds/latest/projects/{projectKey}/repos/{repositorySlug}/conditions:
    get:
      deprecated: false
      description: |-
        Returns a page of required build merge checks that have been configured for this repository.

        The authenticated user must have **REPO_READ** permission for the target repository to request a page of required build merge checks.
      operationId: getPageOfRequiredBuildsMergeChecks
      parameters:
      - description: The project that the repository belongs to
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The repository being used
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      - description: "Start number for the page (inclusive). If not passed, first\
          \ page is assumed."
        example: 0
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 0
          type: number
        style: form
      - description: "Number of items to return. If not passed, a page size of 25\
          \ is used."
        example: 25
        explode: true
        in: query
        name: limit
        required: false
        schema:
          example: 25
          type: number
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/getPageOfRequiredBuildsMergeChecks_200_response"
          description: The required build merge checks associated with the provided
            repository.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to request a page of required build merge checks in this repository.
      summary: Get required builds merge checks
      tags:
      - Builds and Deployments
  /insights/latest/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}/annotations:
    get:
      deprecated: false
      description: "Get annotations for the given commit ID, filtered by any query\
        \ parameters given."
      operationId: getAnnotations_1
      parameters:
      - description: "Return only annotations that have one of the given severities.\
          \ Can be specified more than once to filter by more than one severity. Valid\
          \ severities are <code>LOW</code>, <code>MEDIUM</code> and <code>HIGH</code>."
        explode: true
        in: query
        name: severity
        required: false
        schema:
          type: string
        style: form
      - description: Return only annotations that appear on one of the provided paths.
          Can be specified more than once to filter by more than one path.
        explode: true
        in: query
        name: path
        required: false
        schema:
          type: string
        style: form
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: Return only annotations that have one of the provided external
          IDs. Can be specified more than once to filter by more than one external
          ID.
        explode: true
        in: query
        name: externalId
        required: false
        schema:
          type: string
        style: form
      - description: The commit ID on which to record the annotation. This must be
          a full 40 character commit hash.
        explode: false
        in: path
        name: commitId
        required: true
        schema:
          type: string
        style: simple
      - description: "Return only annotations that have one of the given types. Can\
          \ be specified more than once to filter by multiple types. Valid types are\
          \ <code>BUG</code>, <code>CODE_SMELL</code>, and <code>VULNERABILITY</code>."
        explode: true
        in: query
        name: type
        required: false
        schema:
          type: string
        style: form
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      - description: Return only annotations that belong to one of the provided report
          keys. Can be specified more than once to filter by more than one report
        explode: true
        in: query
        name: key
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestInsightAnnotationsResponse"
          description: The requested annotations.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            (<code>REPO_READ</code>) to get insight annotations.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "The specified project, repository, commit, or report does\
            \ not exist."
      summary: Get Code Insights annotations for a commit
      tags:
      - Builds and Deployments
  /insights/latest/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}/reports:
    get:
      deprecated: false
      description: Retrieve all reports for the given commit.
      operationId: getReports
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The commit ID on which to record the annotation. This must be
          a full 40 character commit hash.
        explode: false
        in: path
        name: commitId
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      - description: "Start number for the page (inclusive). If not passed, first\
          \ page is assumed."
        example: 0
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 0
          type: number
        style: form
      - description: "Number of items to return. If not passed, a page size of 25\
          \ is used."
        example: 25
        explode: true
        in: query
        name: limit
        required: false
        schema:
          example: 25
          type: number
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/getReports_200_response"
          description: A page of reports
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            (<code>REPO_READ</code>) to get insight reports.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "The specified project, repository or commit does not exist."
      summary: Get all Code Insights reports for a commit
      tags:
      - Builds and Deployments
  /insights/latest/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}/reports/{key}:
    delete:
      deprecated: false
      description: Delete a report for the given commit. Also deletes any annotations
        associated with this report.
      operationId: deleteACodeInsightsReport
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The commit ID on which to record the annotation. This must be
          a full 40 character commit hash.
        explode: false
        in: path
        name: commitId
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      - description: The key of the report to which this annotation belongs.
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The report and associated annotations were successfully deleted.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to delete insight reports or was not the author (<code>REPO_READ</code>
            for author otherwise <code>REPO_ADMIN</code>).
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "The specified project, repository, commit or report does not\
            \ exist."
      summary: Delete a Code Insights report
      tags:
      - Builds and Deployments
    get:
      deprecated: false
      description: Retrieve the specified report.
      operationId: getACodeInsightsReport
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The commit ID on which to record the annotation. This must be
          a full 40 character commit hash.
        explode: false
        in: path
        name: commitId
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      - description: The report key.
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestInsightReport"
          description: The specified report.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            (<code>REPO_READ needed</code>) to get insight reports.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "The specified project, repository, commit, or report does\
            \ not exist."
      summary: Get a Code Insights report
      tags:
      - Builds and Deployments
    put:
      deprecated: false
      description: |-
        Create a new insight report, or replace the existing one if a report already exists for the given repository, commit, and report key. A request to replace an existing report will be rejected if the authenticated user was not the creator of the specified report.

        The report key should be a unique string chosen by the reporter and should be unique enough not to potentially clash with report keys from other reporters. We recommend using reverse DNS namespacing or a similar standard to ensure that collision is avoided.<h1>Report parameters</h1><table summary="Report parameters">    <tr>        <th>Parameter</th>        <th>Description</th>        <th>Required?</th>        <th>Restrictions</th>        <th>Type</th>    </tr>    <tr>        <td>title</td>        <td>A short string representing the name of the report</td>        <td>Yes</td>        <td>Max length: 450 characters (but we recommend that it is shorter so that the display is nicer)</td>        <td>String</td>    </tr>    <tr>        <td>details</td>        <td>             A string to describe the purpose of the report. This string may contain             escaped newlines and if it does it will display the content accordingly.        </td>        <td>No</td>        <td>Max length: 2000 characters</td>        <td>String</td>    </tr>    <tr>        <td>result</td>        <td>Indicates whether the report is in a passed or failed state</td>        <td>No</td>        <td>One of: PASS, FAIL</td>        <td>String</td>    </tr>    <tr>        <td>data</td>        <td>An array of data fields (described below) to display information on the report</td>        <td>No</td>        <td>Maximum 6 data fields</td>        <td>Array</td>    </tr>    <tr>        <td>reporter</td>        <td>A string to describe the tool or company who created the report</td>        <td>No</td>        <td>Max length: 450 characters</td>        <td>String</td>    </tr>    <tr>        <td>link</td>        <td>A URL linking to the results of the report in an external tool.</td>        <td>No</td>        <td>Must be a valid http or https URL</td>        <td>String</td>    </tr>    <tr>        <td>logoUrl</td>        <td>A URL to the report logo. If none is provided, the default insights logo will be used.</td>        <td>No</td>        <td>Must be a valid http or https URL</td>        <td>String</td>    </tr></table><h1>Data parameters</h1>The data field on the report is an array with at most 6 data fields (JSON maps) containing information that is to be displayed on the report (see the request example).<table summary="Data parameters">    <tr>        <th>Parameter</th>        <th>Description</th>        <th>Type</th>    </tr>    <tr>        <td>title</td>        <td>A string describing what this data field represents</td>        <td>String</td>    </tr>    <tr>        <td>type</td>        <td>             The type of data contained in the value field. If not provided,             then the value will be detected as a boolean, number or string.             One of: BOOLEAN, DATE, DURATION, LINK, NUMBER, PERCENTAGE, TEXT        </td>        <td>String</td>    </tr>    <tr>        <td>value</td>        <td>            A value based on the type provided. Either a raw value             (string, number or boolean) or a map. See below.        </td>    </tr></table><table summary="Types">    <tr>        <th>Type Field</th>        <th>Value Field Type</th>        <th>Value Field Display</th>    </tr>    <tr>        <td>None/Omitted</td>        <td>Number, String or Boolean (not an array or object)</td>        <td>Plain text</td>    </tr>    <tr>        <td>BOOLEAN</td>        <td>Boolean</td>        <td>The value will be read as a JSON boolean and displayed as 'Yes' or 'No'.</td>    </tr>    <tr>        <td>DATE</td>        <td>Number</td>        <td>             The value will be read as a JSON number in the form of a Unix timestamp              (milliseconds) and will be displayed as a relative date if the date is less             than one week ago, otherwise it will be displayed as an absolute date.        </td>    </tr>    <tr>        <td>DURATION</td>        <td>Number</td>        <td>             The value will be read as a JSON number in milliseconds and             will be displayed in a human readable duration format.        </td>    </tr>    <tr>        <td>LINK</td>        <td>Object: {"linktext": "Link text here", "href": "https://link.to.annotation/in/external/tool"}</td>        <td>             The value will be read as a JSON object containing the fields "linktext"             and "href" and will be displayed as a clickable link on the report.        </td>    </tr>    <tr>        <td>NUMBER</td>        <td>Number</td>        <td>             The value will be read as a JSON number and large numbers will             be displayed in a human readable format (e.g. 14.3k).        </td>    </tr>    <tr>        <td>PERCENTAGE</td>        <td>Number (between 0 and 100)</td>        <td>             The value will be read as a JSON number between 0 and 100              and will be displayed with a percentage sign.        </td>    </tr>    <tr>        <td>TEXT</td>        <td>String</td>        <td>The value will be read as a JSON string and will be displayed as-is</td>    </tr></table>
      externalDocs:
        description: Tutorial adding Code Insights to your CI system
        url: https://developer.atlassian.com/server/bitbucket/tutorials-and-examples/code-insights-tutorial/
      operationId: setACodeInsightsReport
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The commit ID on which to record the annotation. This must be
          a full 40 character commit hash.
        explode: false
        in: path
        name: commitId
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      - description: "A unique string representing the report as chosen by the reporter.\
          \ This should be unique enough to not clash with other report's keys. To\
          \ do this, we recommend namespacing the key using reverse DNS"
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestSetInsightReportRequest"
        description: The request object containing the details of the report to create
          (see example).
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestInsightReport"
          description: The created report.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: |
            One of the following error cases occurred (check the error message for more details):

            - The request does not contain a report title.
            - The data field contains unsupported objects.
            - The request does not contain a report key/
            - The provided commit hash is invalid, according to  the validation rules mentioned for the commitId above.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user is not permitted to create
            an insight report or authentication failed.
      summary: Create a Code Insights report
      tags:
      - Builds and Deployments
  /insights/latest/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}/reports/{key}/annotations:
    delete:
      deprecated: false
      description: "Delete annotations for a given report that match the given external\
        \ IDs, or all annotations if no external IDs are provided."
      operationId: deleteAnnotations
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: "The external IDs for the annotations that are to be deleted.\
          \ Can be specified more than once to delete by more than one external ID,\
          \ or can be unspecified to delete all annotations."
        explode: true
        in: query
        name: externalId
        required: false
        schema:
          type: string
        style: form
      - description: The commit ID on which to record the annotation. This must be
          a full 40 character commit hash.
        explode: false
        in: path
        name: commitId
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      - description: The key of the report to which this annotation belongs.
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The annotations were successfully deleted.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to delete insight reports or was not the author (<code>REPO_READ</code>
            for author otherwise <code>REPO_ADMIN</code>).
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "The specified project, repository, commit or report does not\
            \ exist."
      summary: Delete Code Insights annotations
      tags:
      - Builds and Deployments
    get:
      deprecated: false
      description: Retrieve the specified report's annotations.
      operationId: getAnnotations
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The commit ID on which to record the annotation. This must be
          a full 40 character commit hash.
        explode: false
        in: path
        name: commitId
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      - description: The report key.
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestInsightAnnotationsResponse"
          description: The specified annotations.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            (<code>REPO_READ needed</code>) to get insight reports.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "The specified project, repository, commit, or report does\
            \ not exist."
      summary: Get Code Insights annotations for a report
      tags:
      - Builds and Deployments
    post:
      deprecated: false
      description: "Add annotations to the given report. The request should be a JSON\
        \ object mapping the string \"annotations\" to an array of maps containing\
        \ the annotation data, as described below. See also the example request.\n\
        \nA few things to note:- Annotations are an extension of a report, so a report\
        \ must first exist in order to post annotations.   Annotations are posted\
        \ separately from the report, and can be posted in bulk using this endpoint.\n\
        - Only the annotations that are on lines changed in the unified diff will\
        \ be displayed. This means it is  likely not all annotations posted will be\
        \ displayed on the pull request  It also means that if the user is viewing\
        \ a side-by-side diff,  commit diff or iterative review diff they will not\
        \ be able to view the annotations.\n- A report cannot have more than 1000\
        \ annotations by default, however this property is congurable at an  instance\
        \ level. If the request would result in more than the maximum number of annotations\
        \ being stored  then the entire request is rejected and no new annotations\
        \ are stored. \n- There is no de-duplication of annotations on Bitbucket so\
        \ be sure that reruns of builds will first  delete the report and annotations\
        \ before creating them.\n\n# Annotation parameters\n\n|Parameter|Description|Required?|Restrictions|Type|\n\
        |--- |--- |--- |--- |--- |\n|path|The path of the file on which this annotation\
        \ should be placed. This is the path of the filerelative to the git repository.\
        \ If no path is provided, then it will appear in the overview modalon all\
        \ pull requests where the tip of the branch is the given commit, regardless\
        \ of which files weremodified.|No||String|\n|line|The line number that the\
        \ annotation should belong to. If no line number is provided, then it willdefault\
        \ to 0 and in a pull request it will appear at the top of the file specified\
        \ by the path field.|No|Non-negative integer|Integer|\n|message|The message\
        \ to display to users|Yes|The maximum length accepted is 2000 characters,\
        \ however the user interface may truncate this valuefor display purposes.\
        \ We recommend that the message is short and succinct, with further detailsavailable\
        \ to the user if needed on the page linked to by the the annotation link.|String|\n\
        |severity|The severity of the annotation|Yes|One of: LOW, MEDIUM, HIGH|String|\n\
        |link|An http or https URL representing the location of the annotation in\
        \ the external tool|No||String|\n|type|The type of annotation posted|No|One\
        \ of: VULNERABILITY, CODE_SMELL, BUG|String|\n|externalId|If the caller requires\
        \ a link to get or modify this annotation, then an ID must be provided. It\
        \ isnot used or required by Bitbucket, but only by the annotation creator\
        \ for updating or deleting thisspecific annotation.|No|A string value shorter\
        \ than 450 characters|String|"
      operationId: addAnnotations
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The commit ID on which to record the annotation. This must be
          a full 40 character commit hash.
        explode: false
        in: path
        name: commitId
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      - description: The key of the report to which this annotation belongs.
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestBulkAddInsightAnnotationRequest"
        description: The annotations to add.
      responses:
        "204":
          description: An empty response indicating that the request succeeded.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "The currently authenticated user is not the author of the\
            \ report, or the author no longer has sufficient permissions (<code>REPO_READ</code>)."
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "The specified project, repository, commit, or report does\
            \ not exist."
      summary: Add Code Insights annotations
      tags:
      - Builds and Deployments
  /insights/latest/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}/reports/{key}/annotations/{externalId}:
    put:
      deprecated: false
      description: "Create an annotation with the given external ID, or replace it\
        \ if it already exists. A request to replace an existing annotation will be\
        \ rejected if the authenticated user was not the creator of the specified\
        \ report."
      operationId: setAnnotation
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The external ID of the annotation that is to be updated or created
        explode: false
        in: path
        name: externalId
        required: true
        schema:
          type: string
        style: simple
      - description: The commit ID on which to record the annotation. This must be
          a full 40 character commit hash.
        explode: false
        in: path
        name: commitId
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      - description: The key of the report to which this annotation belongs
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestSingleAddInsightAnnotationRequest"
        description: The new annotation that is to replace the existing one.
      responses:
        "204":
          description: "No content, indicating that the request succeeded."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "The currently authenticated user is not the author of the\
            \ report, or the author no longer has sufficient permissions (<code>REPO_READ</code>)."
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "The specified project, repository, commit, report or annotation\
            \ does not exist."
      summary: Create or replace a Code Insights annotation
      tags:
      - Builds and Deployments
  /default-reviewers/latest/projects/{projectKey}/condition:
    post:
      deprecated: false
      description: Create a default reviewer pull request condition for the given
        project.
      operationId: createPullRequestCondition
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestDefaultReviewersRequest"
        description: The details needed to create a default reviewer pull request
          condition.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestPullRequestCondition"
          description: The default reviewer pull request condition that was created.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The request was malformed.
      summary: Create default reviewer condition
      tags:
      - Pull Requests
  /default-reviewers/latest/projects/{projectKey}/condition/{id}:
    delete:
      deprecated: false
      description: Delete the default reviewer pull request condition associated with
        the given ID.
      operationId: deletePullRequestCondition
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The ID of the pull request condition.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: An empty response indicating that the pull request condition
            was deleted.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: An empty response indicating a pull request condition with
            the given ID could not be found.
      summary: Delete default reviewer condition
      tags:
      - Pull Requests
    put:
      deprecated: false
      description: Update the default reviewer pull request condition for the given
        ID.
      operationId: updatePullRequestCondition
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The ID of the pull request condition.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestDefaultReviewersRequest"
        description: The new details for the default reviewer pull request condition.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestPullRequestCondition"
          description: The updated default reviewer pull request condition.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The request was malformed
      summary: Update default reviewer condition
      tags:
      - Pull Requests
  /default-reviewers/latest/projects/{projectKey}/conditions:
    get:
      deprecated: false
      description: Return a page of default reviewer pull request conditions that
        have been configured for this project.
      operationId: getPullRequestConditions
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/RestPullRequestCondition"
                type: array
          description: The default reviewer pull request conditions associated with
            the given project.
      summary: Get default reviewer conditions
      tags:
      - Pull Requests
  /default-reviewers/latest/projects/{projectKey}/repos/{repositorySlug}/condition:
    post:
      deprecated: false
      description: Create a default reviewer pull request condition for the given
        repository.
      operationId: createPullRequestCondition_1
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestDefaultReviewersRequest"
        description: The details needed to create a default reviewer pull request
          condition.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestPullRequestCondition"
          description: The default reviewer pull request condition that was created.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The request was malformed.
      summary: Create default reviewer condition
      tags:
      - Pull Requests
  /default-reviewers/latest/projects/{projectKey}/repos/{repositorySlug}/condition/{id}:
    delete:
      deprecated: false
      description: Delete the default reviewer pull request condition associated with
        the given ID.
      operationId: deletePullRequestCondition_1
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: An empty response indicating that the pull request condition
            was deleted
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: An empty response indicating a pull request condition with
            the given ID could not be found.
      summary: Delete default reviewer condition
      tags:
      - Pull Requests
    put:
      deprecated: false
      description: Update the default reviewer pull request condition for the given
        ID.
      operationId: updatePullRequestCondition_1
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The ID of the pull request condition
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/updatePullRequestCondition_1_request"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestPullRequestCondition"
          description: The updated default reviewer pull request condition.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The request was malformed.
      summary: Update default reviewer condition
      tags:
      - Pull Requests
  /default-reviewers/latest/projects/{projectKey}/repos/{repositorySlug}/conditions:
    get:
      deprecated: false
      description: Return a page of default reviewer pull request conditions that
        have been configured for this repository.
      operationId: getPullRequestConditions_1
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/RestPullRequestCondition"
                type: array
          description: The default reviewer pull request conditions associated with
            the given repository.
      summary: Get default reviewer conditions
      tags:
      - Pull Requests
  /default-reviewers/latest/projects/{projectKey}/repos/{repositorySlug}/reviewers:
    get:
      deprecated: false
      description: Return a set of users who are required reviewers for pull requests
        created from the given source repository and ref to the given target ref in
        this repository.
      operationId: getReviewers
      parameters:
      - description: The ID of the repository in which the target ref exists
        explode: true
        in: query
        name: targetRepoId
        required: false
        schema:
          type: string
        style: form
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The ID of the repository in which the source ref exists
        explode: true
        in: query
        name: sourceRepoId
        required: false
        schema:
          type: string
        style: form
      - description: The ID of the source ref
        explode: true
        in: query
        name: sourceRefId
        required: false
        schema:
          type: string
        style: form
      - description: The ID of the target ref
        explode: true
        in: query
        name: targetRefId
        required: false
        schema:
          type: string
        style: form
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/RestPullRequestCondition"
                type: array
          description: The default reviewer pull request conditions associated with
            the given repository.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestErrors"
          description: The request was malformed.
      summary: Get required reviewers for PR creation
      tags:
      - Pull Requests
  /default-tasks/latest/projects/{projectKey}/repos/{repositorySlug}/tasks:
    delete:
      deprecated: false
      description: |-
        Delete all the default tasks for the supplied repository

        The authenticated user must have **REPO_ADMIN** permission for this repository to call the resource.
      operationId: deleteAllDefaultTasks_1
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The default tasks have been deleted successfully.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to delete default tasks
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified repository does not exist
      summary: Deletes all default tasks for the repository
      tags:
      - Repository
    get:
      deprecated: false
      description: |-
        Retrieves the default tasks for the supplied repository.

        The authenticated user must have **REPO_VIEW** permission for this repository to call the resource.
      operationId: getDefaultTasks_1
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: "If present or `\"true\"`, includes a markup-rendered description"
        explode: true
        in: query
        name: markup
        required: false
        schema:
          type: string
        style: form
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      - description: "Start number for the page (inclusive). If not passed, first\
          \ page is assumed."
        example: 0
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 0
          type: number
        style: form
      - description: "Number of items to return. If not passed, a page size of 25\
          \ is used."
        example: 25
        explode: true
        in: query
        name: limit
        required: false
        schema:
          example: 25
          type: number
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getDefaultTasks_1_200_response"
          description: A page of default tasks
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to delete default tasks
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified repository does not exist
      summary: Get a page of default tasks
      tags:
      - Repository
    post:
      deprecated: false
      description: |-
        Creates a default task for the supplied repository.

        The authenticated user must have **REPO_ADMIN** permission for this repository to call the resource.
      operationId: addDefaultTask_1
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestDefaultTaskRequest"
        description: The task to be added
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestDefaultTask"
          description: The default task
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "One or more of the following error cases occurred (check the\
            \ error message for more details): \n\n\n- the description is empty- the\
            \ sourceMatcher or targetMatcher is invalid"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to add a default task
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified repository does not exist
      summary: Add a default task
      tags:
      - Repository
  /default-tasks/latest/projects/{projectKey}/repos/{repositorySlug}/tasks/{taskId}:
    delete:
      deprecated: false
      description: |-
        Delete a specific default task for a repository.

        The authenticated user must have **REPO_ADMIN** permission for this repository to call the resource.
      operationId: deleteDefaultTask_1
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      - description: The ID of the default task
        explode: false
        in: path
        name: taskId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The default task has been deleted successfully.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to delete default tasks
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified repository or task does not exist
      summary: Delete a specific default task
      tags:
      - Repository
    put:
      deprecated: false
      description: |-
        Updates a default task for the supplied repository.

        The authenticated user must have **REPO_ADMIN** permission for this repository to call the resource.
      operationId: updateDefaultTask_1
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      - description: The ID of the default task
        explode: false
        in: path
        name: taskId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestDefaultTaskRequest"
        description: The task to be updated
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestDefaultTask"
          description: The default task
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "One or more of the following error cases occurred (check the\
            \ error message for more details): \n\n\n- the provided taskId does not\
            \ exist- the description is empty- the sourceMatcher or targetMatcher\
            \ is invalid"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to add a default task
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified repository does not exist
      summary: Update a default task
      tags:
      - Repository
  /default-tasks/latest/projects/{projectKey}/tasks:
    delete:
      deprecated: false
      description: |-
        Delete all the default tasks for the supplied project

        The authenticated user must have **PROJECT_ADMIN** permission for this project to call the resource.
      operationId: deleteAllDefaultTasks
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The default tasks have been deleted successfully.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to delete default tasks
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified project does not exist
      summary: Deletes all default tasks for the project
      tags:
      - Project
    get:
      deprecated: false
      description: |-
        Retrieves the default tasks for the supplied project.

        The authenticated user must have **PROJECT_VIEW** permission for this project to call the resource.
      operationId: getDefaultTasks
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: "If present or \"true\", includes a markup-rendered description"
        explode: true
        in: query
        name: markup
        required: false
        schema:
          type: string
        style: form
      - description: "Start number for the page (inclusive). If not passed, first\
          \ page is assumed."
        example: 0
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 0
          type: number
        style: form
      - description: "Number of items to return. If not passed, a page size of 25\
          \ is used."
        example: 25
        explode: true
        in: query
        name: limit
        required: false
        schema:
          example: 25
          type: number
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getDefaultTasks_1_200_response"
          description: A page of default tasks
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to delete default tasks
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified project does not exist
      summary: Get a page of default tasks
      tags:
      - Project
    post:
      deprecated: false
      description: |-
        Creates a default task for the project.

        The authenticated user must have **PROJECT_ADMIN** permission for this project to call the resource.
      operationId: addDefaultTask
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestDefaultTaskRequest"
        description: The task to be added
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestDefaultTask"
          description: The default task
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "One or more of the following error cases occurred (check the\
            \ error message for more details): \n\n\n- the description is empty- the\
            \ sourceMatcher or targetMatcher is invalid"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to add a default task
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified project does not exist
      summary: Add a default task
      tags:
      - Project
  /default-tasks/latest/projects/{projectKey}/tasks/{taskId}:
    delete:
      deprecated: false
      description: |-
        Delete a specific default task for a project.

        The authenticated user must have **PROJECT_ADMIN** permission for this project to call the resource.
      operationId: deleteDefaultTask
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The ID of the default task
        explode: false
        in: path
        name: taskId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The default task has been deleted successfully.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to delete default tasks
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified project or task does not exist
      summary: Delete a specific default task
      tags:
      - Project
    put:
      deprecated: false
      description: |-
        Updates a default task for the supplied project.

        The authenticated user must have **PROJECT_ADMIN** permission for this project to call the resource.
      operationId: updateDefaultTask
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The ID of the default task
        explode: false
        in: path
        name: taskId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestDefaultTaskRequest"
        description: The task to be updated
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestDefaultTask"
          description: The default task
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "One or more of the following error cases occurred (check the\
            \ error message for more details): \n\n\n- the provided taskId does not\
            \ exist- the description is empty- the sourceMatcher or targetMatcher\
            \ is invalid"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to add a default task
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified project does not exist
      summary: Update a default task
      tags:
      - Project
  /jira/latest/comments/{commentId}/issues:
    post:
      deprecated: false
      description: "Create a Jira issue and associate it with a comment on a pull\
        \ request.\n\nThis resource can only be used with comments on a pull request.\
        \ Attempting to call this resource with a different type of comment (for example,\
        \ a comment on a commit) will result in an error. \n\n The authenticated user\
        \ must have <strong>REPO_READ</strong> permission for the repository containing\
        \ the comment to call this resource.\n\nThe JSON structure for the create\
        \ issue format is specified by Jira's REST v2 API."
      operationId: createIssue
      parameters:
      - description: the comment to associate the created Jira issue to
        explode: false
        in: path
        name: commentId
        required: true
        schema:
          type: string
        style: simple
      - description: id of the Jira server
        explode: true
        in: query
        name: applicationId
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              description: application/json
              type: string
        description: "A String representation of the JSON format Jira create issue\
          \ request see: <a href=\"https://docs.atlassian.com/jira/REST/server/#api/2/issue-createIssue\"\
          >Jira REST API</a>"
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestCommentJiraIssue"
          description: The created Jira issue key and the associated comment ID
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified application link ID does not match any linked
            Jira instance.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: Authentication with the Jira instance is required.
      summary: Create Jira Issue
      tags:
      - Jira Integration
  /jira/latest/issues/{issueKey}/commits:
    get:
      deprecated: false
      description: Retrieve a page of changesets associated with the given issue key.
      operationId: getCommitsByIssueKey
      parameters:
      - description: The issue key to search by
        explode: false
        in: path
        name: issueKey
        required: true
        schema:
          type: string
        style: simple
      - description: The maximum number of changes to retrieve for each changeset
        explode: true
        in: query
        name: maxChanges
        required: false
        schema:
          type: string
        style: form
      - description: "Start number for the page (inclusive). If not passed, first\
          \ page is assumed."
        example: 0
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 0
          type: number
        style: form
      - description: "Number of items to return. If not passed, a page size of 25\
          \ is used."
        example: 25
        explode: true
        in: query
        name: limit
        required: false
        schema:
          example: 25
          type: number
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/getCommitsByIssueKey_200_response"
          description: A page of detailed changesets
      summary: Get changesets for issue key
      tags:
      - Jira Integration
  /jira/latest/projects/{projectKey}/primary-enhanced-entitylink:
    get:
      deprecated: false
      description: "Retrieves the enchanced primary entitylink \n\nThe authenticated\
        \ user must have <strong>PROJECT_READ</strong> permission for the project\
        \ having the primary enhanced entitylink. \n\n"
      operationId: getEnhancedEntityLinkForProject
      parameters:
      - description: The project key
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestEnhancedEntityLink"
          description: The primary enhanced entitylink.
      summary: Get entity link
      tags:
      - Jira Integration
  /jira/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/issues:
    get:
      deprecated: false
      description: Retrieves Jira issue keys that are associated with the commits
        in the specified pull request. The number of commits checked for issues is
        limited to a default of 100.
      operationId: getIssueKeysForPullRequest
      parameters:
      - description: The project key
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The pull request id
        explode: false
        in: path
        name: pullRequestId
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                items:
                  $ref: "#/components/schemas/RestJiraIssue"
                type: array
          description: A list of Jira issues keys for the pull request
      summary: Get issues for a pull request
      tags:
      - Jira Integration
  /comment-likes/latest/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}/comments/{commentId}/reactions/{emoticon}:
    delete:
      deprecated: false
      description: Remove an emoticon reaction from a comment
      operationId: unReact
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The comment id
        explode: false
        in: path
        name: commentId
        required: true
        schema:
          type: string
        style: simple
      - description: The commit id
        explode: false
        in: path
        name: commitId
        required: true
        schema:
          type: string
        style: simple
      - description: The emoticon to remove
        explode: false
        in: path
        name: emoticon
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The added reaction
      summary: Remove a reaction from comment
      tags:
      - Repository
    put:
      deprecated: false
      description: Add an emoticon reaction to a comment
      operationId: react
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The comment id
        explode: false
        in: path
        name: commentId
        required: true
        schema:
          type: string
        style: simple
      - description: The commit id
        explode: false
        in: path
        name: commitId
        required: true
        schema:
          type: string
        style: simple
      - description: The emoticon to add
        explode: false
        in: path
        name: emoticon
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestUserReaction"
          description: The added reaction
      summary: React to a comment
      tags:
      - Repository
  ? /comment-likes/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/comments/{commentId}/reactions/{emoticon}
  : delete:
      deprecated: false
      description: Remove an emoticon reaction from a pull request comment
      operationId: unReact_1
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The comment id.
        explode: false
        in: path
        name: commentId
        required: true
        schema:
          type: string
        style: simple
      - description: The pull request id.
        explode: false
        in: path
        name: pullRequestId
        required: true
        schema:
          type: string
        style: simple
      - description: The emoticon to remove
        explode: false
        in: path
        name: emoticon
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The added reaction
      summary: Remove a reaction from a PR comment
      tags:
      - Pull Requests
    put:
      deprecated: false
      description: Add an emoticon reaction to a pull request comment
      operationId: react_1
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The comment id.
        explode: false
        in: path
        name: commentId
        required: true
        schema:
          type: string
        style: simple
      - description: The pull request id.
        explode: false
        in: path
        name: pullRequestId
        required: true
        schema:
          type: string
        style: simple
      - description: The emoticon to add
        explode: false
        in: path
        name: emoticon
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestUserReaction"
          description: The added reaction
      summary: React to a PR comment
      tags:
      - Pull Requests
  /git/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/rebase:
    get:
      deprecated: false
      description: |-
        Checks preconditions to determine whether the pull request can be rebased.

        Some of the preconditions are:

        - The pull request is between Git repositories
        - The pull request is currently open
        - The pull request's {@link PullRequest#getFromRef "from" ref} is a <i>branch</i>
           - In other words, the qualified ID for the "from" ref must start with <code>refs/heads/</code>
           - Tags, and other non-standard refs, cannot be rebased
        - The current user has an e-mail address
           - Pull requests cannot be rebased anonymously
           - `git rebase` records the current user as the committer for the rebased commits, which        requires a name and e-mail address
        - The current user has <i>write</i> access to the {@link PullRequest#getFromRef "from" ref}'s repository
           - Note that in order to <i>view</i> a pull request a user is only required to have <i>read</i>      access to the {@link PullRequest#getToRef toRef}'s repository, so just because a user can <i>see</i>      a pull request does not mean they can request a rebase


        This list is not exhaustive, and the exact set of preconditions applied can be extended by third-party add-ons.

        The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request targets to call this resource.
      operationId: canRebase
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The ID of the pull request within the repository.
        explode: false
        in: path
        name: pullRequestId
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestPullRequestRebaseability"
          description: The rebaseability status of the pull request.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to view the specified pull request.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified repository or pull request does not exist.
      summary: Check PR rebase precondition
      tags:
      - Pull Requests
    post:
      deprecated: false
      description: |-
        Rebases the specified pull request, rewriting the incoming commits to start from the tip commit of the pull request's target branch. <i>This operation alters the pull request's source branch and cannot be undone.</i>

        The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request targets <i>and</i> <strong>REPO_WRITE</strong> permission for the pull request's source repository to call this resource.
      operationId: rebase
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The ID of the pull request within the repository.
        explode: false
        in: path
        name: pullRequestId
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestPullRequestRebaseRequest"
        description: The pull request rebase request.
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestPullRequestRebaseResult"
          description: The merged pull request.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to view the pull request and/or to update its source branch.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified repository or pull request does not exist.
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: |-
            Any of the following error cases occurred (check the error message for more details):

            - The rebase encountered conflicts.
            - The rebase discarded all of the incoming commits and would have left the pull request empty
            - A <tt>PreRepositoryHook</tt> vetoed the rebase.
            - The specified version is out of date.
            - The specified pull request is not open.
            - The target repository is archived.
      summary: Rebase pull request
      tags:
      - Pull Requests
  /git/latest/projects/{projectKey}/repos/{repositorySlug}/tags:
    post:
      deprecated: false
      description: |-
        Creates a tag in the specified repository.

        The authenticated user must have an effective <strong>REPO_WRITE</strong> permission to call this resource.

        'LIGHTWEIGHT' and 'ANNOTATED' are the two type of tags that can be created. The 'startPoint' can either be a ref or a 'commit'.
      operationId: createTag
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestGitTagCreateRequest"
        description: The create git tag request.
      responses:
        "201":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestTag"
          description: A JSON representation of the newly created tag.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "The tag was not created because the request was invalid, e.g.\
            \ the provided ref name already existed in the repository, or was not\
            \ a valid ref name in the repository, or the start point is invalid."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to create a tag. This could be due to insufficient repository permissions.
      summary: Create tag
      tags:
      - Repository
  /git/latest/projects/{projectKey}/repos/{repositorySlug}/tags/{name}:
    delete:
      deprecated: false
      description: |-
        Deletes a tag in the specified repository.

        The authenticated user must have an effective <strong>REPO_WRITE</strong> permission to call this resource.
      operationId: deleteTag
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The name of the tag to be deleted.
        explode: false
        in: path
        name: name
        required: true
        schema:
          pattern: .*
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: An empty response indicating that the tag no longer exists
            in the repository.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "The tag was not deleted because repository is either empty,\
            \ or is not a git repository."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to delete a tag. This could be due to insufficient repository permissions.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: If the tag doesn't exist in the repository.
      summary: Delete tag
      tags:
      - Repository
  /gpg/latest/keys:
    delete:
      deprecated: false
      description: Delete all GPG keys for a supplied user.
      operationId: deleteForUser
      parameters:
      - description: "The username of the user to delete the keys for. If no username\
          \ is specified, the GPG keys will be deleted for the currently authenticated\
          \ user."
        explode: true
        in: query
        name: user
        required: false
        schema:
          type: string
        style: form
      responses:
        "204":
          description: The GPG keys matching the supplied <strong>user</strong> were
            deleted.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to delete the GPG keys. This is only possible when a <strong>user</strong>
            is explicitly supplied.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: No user matches the supplied <strong>user</strong>.
      summary: Delete all GPG keys for user
      tags:
      - Security
    get:
      deprecated: false
      description: |-
        Find all the keys for the currently authenticated user. Optionally, users with ADMIN and higher permissions may choose to specify the <code>user</code> parameter to retrieve GPG keys for another user.

        Only authenticated users may call this endpoint.
      operationId: getKeysForUser
      parameters:
      - description: The name of the user to get keys for (optional; requires ADMIN
          permission or higher).
        explode: true
        in: query
        name: user
        required: false
        schema:
          type: string
        style: form
      - description: "Start number for the page (inclusive). If not passed, first\
          \ page is assumed."
        example: 0
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 0
          type: number
        style: form
      - description: "Number of items to return. If not passed, a page size of 25\
          \ is used."
        example: 25
        explode: true
        in: query
        name: limit
        required: false
        schema:
          example: 25
          type: number
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getKeysForUser_200_response"
          description: Returns a paged response of of keys for the user.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to perform this operation.
      summary: Get all GPG keys
      tags:
      - Security
    post:
      deprecated: false
      description: |-
        Add a GPG key to the authenticated user's account. Optionally, users with ADMIN and higher permissions may choose to specify the <code>user</code> parameter to add a GPG key for another user.

        Only authenticated users may call this endpoint.
      operationId: addKey
      parameters:
      - description: The name of the user to add a key for (optional; requires ADMIN
          permission or higher).
        explode: true
        in: query
        name: user
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestGpgKey"
        description: The request body.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestGpgKey"
          description: Response contains the GPG key that was just created.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The request has failed validation.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to perform this operation.
      summary: Create a GPG key
      tags:
      - Security
  /gpg/latest/keys/{fingerprintOrId}:
    delete:
      deprecated: false
      description: Delete the GPG key with the specified ID or Key Fingerprint.
      operationId: deleteKey
      parameters:
      - description: The GPG fingerprint or ID.
        explode: false
        in: path
        name: fingerprintOrId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The key has been deleted successfully.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to perform this operation.
      summary: Delete a GPG key
      tags:
      - Security
  /mirroring/latest/account/settings/preferred-mirror:
    delete:
      deprecated: false
      description: Removes the current user's preferred mirror
      operationId: deletePreferredMirrorId
      responses:
        "204":
          description: an empty response indicating that the user setting has been
            updated
      summary: Remove preferred mirror
      tags:
      - Mirroring (Upstream)
    get:
      deprecated: false
      description: Retrieves the current user's preferred mirror server
      operationId: getPreferredMirrorId
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestMirrorServer"
          description: the preferred mirror server
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The user's preferred mirror server could not be found.
      summary: Get preferred mirror
      tags:
      - Mirroring (Upstream)
    post:
      deprecated: false
      description: Sets the mirror specified by a mirror ID as the current user's
        preferred mirror
      operationId: setPreferredMirrorId
      requestBody:
        content:
          application/json:
            schema:
              type: string
        description: the mirror ID
      responses:
        "204":
          description: an empty response indicating that the user setting has been
            updated
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The mirror could not be found.
      summary: Set preferred mirror
      tags:
      - Mirroring (Upstream)
  /mirroring/latest/analyticsSettings:
    get:
      deprecated: false
      description: Gets the analytics settings from the mirroring upstream
      operationId: analyticsSettings
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestAnalyticsSettings"
          description: The analytics settings from upstream
      summary: Get analytics settings from upstream
      tags:
      - Mirroring (Upstream)
  /mirroring/latest/authenticate:
    post:
      deprecated: false
      description: |-
        Authenticates on behalf of a user. Used by mirrors to check the credentials supplied to them by users. If successful a user and their effective permissions are returned as follows -

        * For SSH credentials - all the effective user permissions are returned.
        * For all other credentials - the highest global permission is returned along with highest repository permission if repository ID is also provided in the request.

        Currently only username/password, bearer token and SSH credentials are supported.
      operationId: mAuthenticate
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestAuthenticationRequest"
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestApplicationUserWithPermissions"
          description: "The user for the supplied credentials and their effective\
            \ permissions}."
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: If the supplied credentials are incomplete or not understood.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: ' The currently authenticated user is not permitted to authenticate
            on behalf of users or authentication with the supplied user credentials
            failed for some reason'
      summary: Authenticate on behalf of a user
      tags:
      - Mirroring (Upstream)
  /mirroring/latest/mirrorServers:
    get:
      deprecated: false
      description: Returns a list of mirrors
      operationId: listMirrors
      parameters:
      - description: "Start number for the page (inclusive). If not passed, first\
          \ page is assumed."
        example: 0
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 0
          type: number
        style: form
      - description: "Number of items to return. If not passed, a page size of 25\
          \ is used."
        example: 25
        explode: true
        in: query
        name: limit
        required: false
        schema:
          example: 25
          type: number
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/listMirrors_200_response"
          description: a page of mirrors
      summary: Get all mirrors
      tags:
      - Mirroring (Upstream)
  /mirroring/latest/mirrorServers/{mirrorId}:
    delete:
      deprecated: false
      description: "Removes a mirror, disabling all access and notifications for the\
        \ mirror server in question"
      operationId: remove
      parameters:
      - description: the ID of the mirror to remove
        explode: false
        in: path
        name: mirrorId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: an empty response indicating that the mirror has been removed
      summary: Delete mirror by ID
      tags:
      - Mirroring (Upstream)
    get:
      deprecated: false
      description: Returns the mirror specified by a mirror ID
      operationId: getMirror
      parameters:
      - description: the mirror ID
        explode: false
        in: path
        name: mirrorId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestMirrorServer"
          description: the mirror
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The mirror could not be found.
      summary: Get mirror by ID
      tags:
      - Mirroring (Upstream)
    put:
      deprecated: false
      description: Upgrades the mirror server in question with the provided details.This
        endpoint can only be called by the mirror instance or system administrators<br>Since
        5.8
      operationId: upgrade
      parameters:
      - description: the ID of the mirror to upgrade
        explode: false
        in: path
        name: mirrorId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestMirrorUpgradeRequest"
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestMirrorServer"
          description: the mirror
      summary: Upgrade mirror server
      tags:
      - Mirroring (Upstream)
  /mirroring/latest/mirrorServers/{mirrorId}/events:
    post:
      deprecated: false
      description: Publishes a RepositoryMirrorEvent on the event queue.
      operationId: publishEvent
      parameters:
      - description: the server id of the mirror that raised this event
        explode: false
        in: path
        name: mirrorId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestRepositoryMirrorEvent"
      responses:
        "204":
          description: The event was successfully placed on the queue
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified repository does not exist.
      summary: Publish RepositoryMirrorEvent
      tags:
      - Mirroring (Upstream)
  /mirroring/latest/projects/{projectId}:
    get:
      deprecated: false
      description: Returns the requested project using its primary key ID.<br> Since
        6.7
      operationId: getProjectById
      parameters:
      - description: the ID of the requested project
        explode: false
        in: path
        name: projectId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestProject"
          description: The project with the specified ID
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: Project not found
      summary: Get project
      tags:
      - Mirroring (Upstream)
  /mirroring/latest/projects/{projectId}/repos:
    get:
      deprecated: false
      description: "Returns a page of repositories for a given project, enriched with\
        \ a content hash"
      operationId: getAllReposForProject
      parameters:
      - description: "includes defaultBranchId in the response, if <code>true</code>.\
          \ Default value is <code>false</code>"
        explode: true
        in: query
        name: includeDefaultBranch
        required: false
        schema:
          default: "false"
          enum:
          - "true"
          - "false"
          type: string
        style: form
      - description: the id of the requested project
        explode: false
        in: path
        name: projectId
        required: true
        schema:
          type: string
        style: simple
      - description: "Start number for the page (inclusive). If not passed, first\
          \ page is assumed."
        example: 0
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 0
          type: number
        style: form
      - description: "Number of items to return. If not passed, a page size of 25\
          \ is used."
        example: 25
        explode: true
        in: query
        name: limit
        required: false
        schema:
          example: 25
          type: number
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/getAllReposForProject_200_response"
          description: A page of repositories with content hashes
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: Mirroring is not available
      summary: Get hashes for repositories in project
      tags:
      - Mirroring (Upstream)
  /mirroring/latest/repos:
    get:
      deprecated: false
      description: Returns a page of repositories enriched with a content hash and
        default branch
      operationId: getAllContentHashes
      parameters:
      - description: "includes defaultBranchId for each repository in the response,\
          \ if <code>true</code>. Default value is <code>false</code>."
        explode: true
        in: query
        name: includeDefaultBranch
        required: false
        schema:
          default: "false"
          enum:
          - "true"
          - "false"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/EnrichedRepository"
          description: A page of repositories with content hashes and default branch
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: Mirroring is not available
      summary: Get content hashes for repositories
      tags:
      - Mirroring (Upstream)
  /mirroring/latest/repos/{repoId}:
    get:
      deprecated: false
      description: Returns a repository enriched with a content hash and default branch
      operationId: getContentHashById
      parameters:
      - description: the ID of the requested repository
        explode: false
        in: path
        name: repoId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: includeDefaultBranch
        required: false
        schema:
          default: false
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/EnrichedRepository"
          description: The repository with the specified repoId
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: Repository not found
      summary: Get content hash for a repository
      tags:
      - Mirroring (Upstream)
  /mirroring/latest/repos/{repoId}/mirrors:
    get:
      deprecated: false
      description: "Returns a page of mirrors for a repository. This resource will\
        \ return <strong>all mirrors</strong> along with authorized links to the mirror's\
        \ repository REST resource. To determine if a repository is available on the\
        \ mirror, the returned URL needs to be called."
      operationId: getRepositoryMirrors
      parameters:
      - description: the ID of the requested repository
        explode: false
        in: path
        name: repoId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: preAuthorized
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestMirroredRepositoryDescriptor"
          description: The mirrored repository descriptor
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: Mirroring is not available
      summary: Get mirrors for repository
      tags:
      - Mirroring (Upstream)
  /mirroring/latest/requests:
    get:
      deprecated: false
      description: Retrieves a mirroring request
      operationId: listRequests
      parameters:
      - description: (optional) the request state to filter on
        explode: true
        in: query
        name: state
        required: false
        schema:
          enum:
          - PENDING
          - ACCEPTED
          - REJECTED
          type: string
        style: form
      - description: "Start number for the page (inclusive). If not passed, first\
          \ page is assumed."
        example: 0
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 0
          type: number
        style: form
      - description: "Number of items to return. If not passed, a page size of 25\
          \ is used."
        example: 25
        explode: true
        in: query
        name: limit
        required: false
        schema:
          example: 25
          type: number
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/listRequests_200_response"
          description: A page of mirroring requests
      summary: Get mirroring requests
      tags:
      - Mirroring (Upstream)
    post:
      deprecated: false
      description: Creates a new mirroring request
      operationId: register
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestMirroringRequest"
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestMirroringRequest"
          description: The created mirroring request
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The request was invalid or missing
      summary: Create a mirroring request
      tags:
      - Mirroring (Upstream)
  /mirroring/latest/requests/{mirroringRequestId}:
    delete:
      deprecated: false
      description: Deletes a mirroring request
      operationId: deleteMirroringRequest
      parameters:
      - description: the ID of the mirroring request to delete
        explode: false
        in: path
        name: mirroringRequestId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The request was deleted
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The request could not be found
      summary: Delete a mirroring request
      tags:
      - Mirroring (Upstream)
    get:
      deprecated: false
      description: Retrieves a mirroring request
      operationId: getMirroringRequest
      parameters:
      - description: the ID of the mirroring request to retrieve
        explode: false
        in: path
        name: mirroringRequestId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestMirroringRequest"
          description: The mirroring request
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The request could not be found
      summary: Get a mirroring request
      tags:
      - Mirroring (Upstream)
  /mirroring/latest/requests/{mirroringRequestId}/accept:
    post:
      deprecated: false
      description: Accepts a mirroring request
      operationId: accept
      parameters:
      - description: the ID of the request to accept
        explode: false
        in: path
        name: mirroringRequestId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestMirrorServer"
          description: The accepted mirror server
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The request could not be found
      summary: Accept a mirroring request
      tags:
      - Mirroring (Upstream)
  /mirroring/latest/requests/{mirroringRequestId}/reject:
    post:
      deprecated: false
      description: Rejects a mirroring request
      operationId: reject
      parameters:
      - description: the ID of the request to reject
        explode: false
        in: path
        name: mirroringRequestId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestMirrorServer"
          description: The rejected mirror server
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The request could not be found
      summary: Reject a mirroring request
      tags:
      - Mirroring (Upstream)
  /mirroring/latest/farmNodes:
    get:
      deprecated: false
      description: Retrieves the list of farm nodes in this cluster
      operationId: getFarmNodes
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                items:
                  $ref: "#/components/schemas/RestClusterNode"
                type: array
          description: The list of farm nodes
        "404":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestErrors"
          description: The upstream server could not be found
      summary: Get farm nodes
      tags:
      - Mirroring (Mirror)
  /mirroring/latest/mirrorRepos/delayed-sync:
    get:
      deprecated: false
      description: "Retrieves a list of repositories which have not synced on one\
        \ or more mirror nodes for at least the threshold time limit after the content\
        \ was changed in the corresponding upstream repositories. The threshold time\
        \ limit is defined by a configuration property <code>plugin.mirroring.repository.diagnostics.sync.tolerance</code>.\
        \ The detection of out of sync repositories is dependent on the timing of\
        \ a scheduled job which is controlled by a configuration property <code>plugin.mirroring.synchronization.interval</code>\
        \ which means in worst case it can take upto <code>plugin.mirroring.repository.diagnostics.sync.tolerance</code>\
        \ + <code>plugin.mirroring.synchronization.interval</code> time to detect\
        \ an out-of-sync repository.<p>Note: If <code>plugin.mirroring.repository.diagnostics.sync.enabled=false</code>\
        \ is set on any of the mirror farm nodes, results will not be reported from\
        \ that node."
      operationId: getDelayedSyncRepositories
      parameters:
      - description: Returns only those repositories that are delayed for the given
          duration. The minimum allowed value is the configured value for the property
          <code>plugin.mirroring.synchronization.interval</code>
        explode: true
        in: query
        name: delayThreshold
        required: false
        schema:
          type: string
        style: form
      - description: "Limit the number of delayed sync repositories returned, the\
          \ maximum allowed value is 100"
        explode: true
        in: query
        name: limit
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                items:
                  $ref: "#/components/schemas/RestDelayedSyncRepository"
                type: array
          description: "The upstream ID, project key and repository slug of the delayed\
            \ sync repositories"
        "401":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestErrors"
          description: The currently authenticated user has insufficient permissions
            to call this resource.
      summary: Get delayed sync repositories
      tags:
      - Mirroring (Mirror)
  /mirroring/latest/mirrorRepos/{externalRepositoryId}:
    get:
      deprecated: false
      description: Retrieves all available clone urls for the specified repository.
      operationId: getMirroredRepository
      parameters:
      - description: the repository ID
        explode: false
        in: path
        name: externalRepositoryId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestMirroredRepository"
          description: The mirrored repository's information.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The upstream server or the repository could not be found.
      summary: Get clone URLs
      tags:
      - Mirroring (Mirror)
  /mirroring/latest/progress:
    get:
      deprecated: false
      description: " Retrieves synchronization progress state.If there's no progress\
        \ to report, this resource will return <pre><code> {\"discovering\":false,\"\
        syncedRepos\":0,\"totalRepos\":0}</code></pre> If there are repositories in\
        \ the process of synchronizing, but the precise number hasn't been discovered\
        \ yet, this resource will return: <pre><code> {\"discovering\":true,\"syncedRepos\"\
        :3,\"totalRepos\":100}</code></pre> If there is progress to report and the\
        \ total number of repositories is known, this resource will return: <pre>\
        \ <code> {\"discovering\":false,\"syncedRepos\":242,\"totalRepos\":1071}</code>\
        \ </pre>"
      operationId: getSynchronizationProgress
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestSyncProgress"
          description: the synchronization progress state
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The upstream server could not be found.
      summary: Get synchronization progress state
      tags:
      - Mirroring (Mirror)
  /mirroring/latest/supportInfo/projects/{projectKey}/repos/{repositorySlug}/repo-lock-owner:
    get:
      deprecated: false
      description: Retrieves the information about the process owning the sync lock
        for this repository. The process owning the lock could be running on any of
        the nodes in the mirror farm
      operationId: getRepositoryLockOwner
      parameters:
      - description: The project key
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestRepositoryLockOwner"
          description: "The information about the repository lock owner for the syncing\
            \ process, if the lock is currently being held, otherwise an empty response"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: When the user doesn't have ADMIN permission
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified repository does not exist
      summary: Get the repository lock owner for the syncing process
      tags:
      - Mirroring (Mirror)
  /mirroring/latest/supportInfo/projects/{projectKey}/repos/{repositorySlug}/repoSyncStatus:
    get:
      deprecated: false
      description: Retrieves information about an external repository mirrored by
        the mirror server. Particularly the local ID & external ID of the repository
      operationId: getRepoSyncStatus_1
      parameters:
      - description: The project key
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestMirrorRepositorySynchronizationStatus"
          description: The sync status of the repository on this node
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: When the user doesn't have ADMIN permission
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified repository does not exist
      summary: Gets information about the mirrored repository
      tags:
      - Mirroring (Mirror)
  /mirroring/latest/supportInfo/refChangesQueue:
    get:
      deprecated: false
      description: "Retrieves a list of up to <code>plugin.mirroring.farm.max.ref.change.queue.dump.size</code>\
        \ items currently in the ref changes queue. The ref changes queue is an internal\
        \ component of every mirror farm, and is shared between all nodes. When the\
        \ contents of an upstream repository changes, an item is added to this queue\
        \ so that the mirror farm nodes know to synchronize. The mirror farm constantly\
        \ polls and removes items from this queue for processing, so it is empty most\
        \ of the time."
      operationId: getRefChangesQueue
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestRefSyncQueue"
          description: The contents of the ref changes queue
        "401":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestErrors"
          description: The currently authenticated user has insufficient permissions
            to call this resource.
      summary: Get items in ref changes queue
      tags:
      - Mirroring (Mirror)
  /mirroring/latest/supportInfo/refChangesQueue/count:
    get:
      deprecated: false
      description: Retrieves the total number of items currently in the ref changes
        queue
      operationId: getRefChangesQueueCount
      responses:
        "200":
          content:
            application/json;charset=UTF-8: {}
          description: The total number of items currently in the ref changes queue
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: When the user doesn't have ADMIN permission
      summary: Get total number of items in ref changes queue
      tags:
      - Mirroring (Mirror)
  /mirroring/latest/supportInfo/repo-lock-owners:
    get:
      deprecated: false
      description: Retrieves the information about all the processes from the all
        the nodes in the mirror farm owning sync lock for any repository
      operationId: getRepositoryLockOwners
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                items:
                  $ref: "#/components/schemas/RestRepositoryLockOwner"
                type: array
          description: A list of all the repository lock owners for the syncing process
        "401":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestErrors"
          description: When the user doesn't have ADMIN permission
      summary: Get all the repository lock owners for the syncing process
      tags:
      - Mirroring (Mirror)
  /mirroring/latest/supportInfo/repoSyncStatus:
    get:
      deprecated: false
      description: Retrieves a page of sync statuses of the repositories on this mirror
        node
      operationId: getRepoSyncStatus
      parameters:
      - description: "Start number for the page (inclusive). If not passed, first\
          \ page is assumed."
        example: 0
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 0
          type: number
        style: form
      - description: "Number of items to return. If not passed, a page size of 25\
          \ is used."
        example: 25
        explode: true
        in: query
        name: limit
        required: false
        schema:
          example: 25
          type: number
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/getRepoSyncStatus_200_response"
          description: The sync status of the repositories on this node
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: When the user doesn't have ADMIN permission
      summary: Get sync status of repositories
      tags:
      - Mirroring (Mirror)
  /mirroring/latest/syncSettings:
    get:
      deprecated: false
      description: Retrieves upstream settings
      operationId: getMirrorSettings
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestUpstreamSettings"
          description: the mirror settings
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: When the user is not a service user for the currently registered
            upstream or doesn't have ADMIN permission
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The upstream server could not be found.
      summary: Get upstream settings
      tags:
      - Mirroring (Mirror)
    put:
      deprecated: false
      description: Sets the settings for the specified upstream
      operationId: setMirrorSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestUpstreamSettings"
        description: the mirror settings to update to
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestUpstreamSettings"
          description: the updated mirror settings
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: When the user is not a service user for the currently registered
            upstream or doesn't have ADMIN permission
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The upstream server could not be found.
      summary: Update upstream settings
      tags:
      - Mirroring (Mirror)
  /mirroring/latest/syncSettings/mode:
    get:
      deprecated: false
      description: Gets the current mirror mode
      operationId: getMirrorMode
      responses:
        "200":
          content:
            application/json;charset=UTF-8: {}
          description: the current mirror mode
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: When the user is not a service user for the currently registered
            upstream or doesn't have ADMIN permission
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The upstream server could not be found.
      summary: Get mirror mode
      tags:
      - Mirroring (Mirror)
    put:
      deprecated: false
      description: Sets the mirror mode for the specified upstream
      operationId: setMirrorMode
      requestBody:
        content:
          application/json:
            schema:
              type: string
      responses:
        "200":
          content:
            application/json;charset=UTF-8: {}
          description: the mode to set
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The provided mode is invalid
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: When the user is not a service user for the currently registered
            upstream or doesn't have ADMIN permission
      summary: Update mirror mode
      tags:
      - Mirroring (Mirror)
  /mirroring/latest/syncSettings/projects:
    get:
      deprecated: false
      description: Returns the IDs of the projects that the mirror is configured to
        mirror
      operationId: getMirroredProjects
      responses:
        "200":
          content:
            application/json;charset=UTF-8: {}
          description: the currently mirrored project IDs
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: When the user is not a service user for the currently registered
            upstream or doesn't have ADMIN permission
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The upstream server could not be found.
      summary: Get mirrored project IDs
      tags:
      - Mirroring (Mirror)
    post:
      deprecated: false
      description: Configures the mirror to mirror the provided projects
      operationId: startMirroringProjects
      requestBody:
        content:
          application/json:
            schema:
              items:
                type: string
              type: array
      responses:
        "200":
          content:
            application/json;charset=UTF-8: {}
          description: the currently mirrored project IDs
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: When the user is not a service user for the currently registered
            upstream or doesn't have ADMIN permission
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The upstream server could not be found.
      summary: Add multiple projects to be mirrored
      tags:
      - Mirroring (Mirror)
  /mirroring/latest/syncSettings/projects/{projectId}:
    delete:
      deprecated: false
      description: Configures the mirror to no longer mirror the provided project
      operationId: stopMirroringProject
      parameters:
      - description: the project ID to stop mirroring
        explode: false
        in: path
        name: projectId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: the request has been processed
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: When the user is not a service user for the currently registered
            upstream or doesn't have ADMIN permission
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The upstream server could not be found.
      summary: Stop mirroring project
      tags:
      - Mirroring (Mirror)
    post:
      deprecated: false
      description: Configures the mirror to mirror the provided project
      operationId: startMirroringProject
      parameters:
      - explode: false
        in: path
        name: projectId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8: {}
          description: the currently mirrored project IDs
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: When the user is not a service user for the currently registered
            upstream or doesn't have ADMIN permission
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The upstream server could not be found.
      summary: Add project to be mirrored
      tags:
      - Mirroring (Mirror)
  /mirroring/latest/upstreamServer:
    get:
      deprecated: false
      description: Retrieves upstream server details.
      operationId: getUpstreamServer
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestUpstreamServer"
          description: The upstream server.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The upstream server could not be found
      summary: Get upstream server
      tags:
      - Mirroring (Mirror)
  /mirroring/latest/zdu/end:
    post:
      deprecated: false
      description: Finalizes the ZDU upgrade on the mirror farm denying heterogeneous
        cluster formation
      operationId: endRollingUpgrade
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestRollingUpgradeState"
          description: The state of the rolling upgrade which includes the current
            version on all the nodes in the farm.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: When the user doesn't have SYS_ADMIN permission
      summary: End ZDU upgrade on mirror farm
      tags:
      - Mirroring (Mirror)
  /mirroring/latest/zdu/start:
    post:
      deprecated: false
      description: "Enables upgrading of individual nodes within the cluster, allowing\
        \ a heterogeneous cluster formation"
      operationId: startRollingUpgrade
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestRollingUpgradeState"
          description: The state of the rolling upgrade which includes the minimum
            version of all the nodes in the farm.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: When the user doesn't have SYS_ADMIN permission
      summary: Start ZDU upgrade on mirror farm
      tags:
      - Mirroring (Mirror)
  /secrets/1.0/keys/inactive:
    delete:
      description: "Delete the inactive AES encryption key(s). Post rotation, inactive\
        \ AES key(s) can be cleaned up."
      operationId: deleteInactiveKeys
      responses:
        "200":
          description: Returned if the keys were deleted successfully
        "401":
          description: Returned if user is not authorized
        "500":
          description: Returned if an error occurs when deleting the keys
      summary: Delete inactive AES key(s)
      tags:
      - Security
    get:
      description: Retrieves a list of inactive AES encryption key(s). An AES key
        becomes inactive after it has been rotated.
      operationId: getInactiveKeys
      responses:
        "200":
          description: Returned if the keys were retrieved successfully
        "401":
          description: Returned if user is not authorized
        "500":
          description: Returned if an error occurs when retrieving the keys
      summary: Retrieve inactive AES key(s)
      tags:
      - Security
  /secrets/1.0/keys/rotate:
    post:
      description: Rotate the current AES encryption key. Existing secrets will be
        re-encrypted with the new key.
      operationId: rotateKey
      responses:
        "200":
          description: Returned if the key was rotated successfully
        "401":
          description: Returned if user is not authorized
        "406":
          description: Returned if the rotation cannot occur
        "500":
          description: Returned if an error occurs when rotating the key
        "501":
          description: Returned if the rotation is not supported on the instance
      summary: Rotate the current AES key
      tags:
      - Security
  /branch-permissions/latest/projects/{projectKey}/repos/{repositorySlug}/restrictions:
    get:
      deprecated: false
      description: |-
        Search for restrictions using the supplied parameters.

        The authenticated user must have <strong>REPO_ADMIN</strong> permission or higher to call this resource. Only authenticated users may call this resource.
      operationId: getRestrictions_1
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: Matcher type to filter on
        explode: true
        in: query
        name: matcherType
        required: false
        schema:
          enum:
          - BRANCH
          - PATTERN
          - MODEL_CATEGORY
          - MODEL_BRANCH
          type: string
        style: form
      - description: Matcher id to filter on. Requires the matcherType parameter to
          be specified also.
        explode: true
        in: query
        name: matcherId
        required: false
        schema:
          type: string
        style: form
      - description: Types of restrictions to filter on.
        explode: true
        in: query
        name: type
        required: false
        schema:
          enum:
          - read-only
          - no-deletes
          - fast-forward-only
          - pull-request-only
          - no-creates
          type: string
        style: form
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      - description: "Start number for the page (inclusive). If not passed, first\
          \ page is assumed."
        example: 0
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 0
          type: number
        style: form
      - description: "Number of items to return. If not passed, a page size of 25\
          \ is used."
        example: 25
        explode: true
        in: query
        name: limit
        required: false
        schema:
          example: 25
          type: number
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/getRestrictions_1_200_response"
          description: A response containing a page of restrictions.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The request has failed validation.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user is not permitted to get restrictions
            on the provided project
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: No restriction exists for the provided ID.
      summary: Search for ref restrictions
      tags:
      - Repository
    post:
      deprecated: false
      description: Allows creating multiple restrictions at once.
      operationId: createRestrictions_1
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/vnd.atl.bitbucket.bulk+json:
            schema:
              items:
                $ref: "#/components/schemas/RestRestrictionRequest"
              type: array
        description: The request containing a list of the details of the restrictions
          to create.
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestRefRestriction"
          description: Response contains the ref restriction that was just created.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The request has failed validation.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to perform this operation.
      summary: Create multiple ref restrictions
      tags:
      - Repository
  /branch-permissions/latest/projects/{projectKey}/repos/{repositorySlug}/restrictions/{id}:
    delete:
      deprecated: false
      description: |-
        Deletes a restriction as specified by a restriction id.

        The authenticated user must have <strong>REPO_ADMIN</strong> permission or higher to call this resource. Only authenticated users may call this resource.
      operationId: deleteRestriction_1
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The restriction id.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: An empty response indicating that the operation was successful
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The request has failed validation.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user is not permitted to delete
            restrictions on the provided project
      summary: Delete a ref restriction
      tags:
      - Repository
    get:
      deprecated: false
      description: "Returns a restriction as specified by a restriction id. \n\nThe\
        \ authenticated user must have <strong>REPO_ADMIN</strong> permission or higher\
        \ to call this resource. Only authenticated users may call this resource."
      operationId: getRestriction_1
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The restriction id.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestRefRestriction"
          description: A response containing the restriction.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The request has failed validation.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user is not permitted to get restrictions
            on the provided project
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: No restriction exists for the provided ID.
      summary: Get a ref restriction
      tags:
      - Repository
  /branch-permissions/latest/projects/{projectKey}/restrictions:
    get:
      deprecated: false
      description: |-
        Search for restrictions using the supplied parameters.

        The authenticated user must have <strong>PROJECT_ADMIN</strong> permission or higher to call this resource. Only authenticated users may call this resource.
      operationId: getRestrictions
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: Matcher type to filter on
        explode: true
        in: query
        name: matcherType
        required: false
        schema:
          enum:
          - BRANCH
          - PATTERN
          - MODEL_CATEGORY
          - MODEL_BRANCH
          type: string
        style: form
      - description: Matcher id to filter on. Requires the matcherType parameter to
          be specified also.
        explode: true
        in: query
        name: matcherId
        required: false
        schema:
          type: string
        style: form
      - description: Types of restrictions to filter on.
        explode: true
        in: query
        name: type
        required: false
        schema:
          enum:
          - read-only
          - no-deletes
          - fast-forward-only
          - pull-request-only
          - no-creates
          type: string
        style: form
      - description: "Start number for the page (inclusive). If not passed, first\
          \ page is assumed."
        example: 0
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 0
          type: number
        style: form
      - description: "Number of items to return. If not passed, a page size of 25\
          \ is used."
        example: 25
        explode: true
        in: query
        name: limit
        required: false
        schema:
          example: 25
          type: number
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/getRestrictions_1_200_response"
          description: A response containing a page of restrictions.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The request has failed validation.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user is not permitted to get restrictions
            on the provided project
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: No restriction exists for the provided ID.
      summary: Search for ref restrictions
      tags:
      - Project
    post:
      deprecated: false
      description: Allows creating multiple restrictions at once.
      operationId: createRestrictions
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/vnd.atl.bitbucket.bulk+json:
            schema:
              items:
                $ref: "#/components/schemas/RestRestrictionRequest"
              type: array
        description: The request containing a list of the details of the restrictions
          to create.
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestRefRestriction"
          description: Response contains the ref restriction that was just created.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The request has failed validation.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to perform this operation.
      summary: Create multiple ref restrictions
      tags:
      - Project
  /branch-permissions/latest/projects/{projectKey}/restrictions/{id}:
    delete:
      deprecated: false
      description: |-
        Deletes a restriction as specified by a restriction id.

        The authenticated user must have <strong>PROJECT_ADMIN</strong> permission or higher to call this resource. Only authenticated users may call this resource.
      operationId: deleteRestriction
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The restriction id.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: An empty response indicating that the operation was successful
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The request has failed validation.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user is not permitted to delete
            restrictions on the provided project
      summary: Delete a ref restriction
      tags:
      - Project
    get:
      deprecated: false
      description: |-
        Returns a restriction as specified by a restriction id.

        The authenticated user must have <strong>PROJECT_ADMIN</strong> permission or higher to call this resource. Only authenticated users may call this resource.
      operationId: getRestriction
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The restriction id.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestRefRestriction"
          description: A response containing the restriction.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The request has failed validation.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user is not permitted to get restrictions
            on the provided project
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: No restriction exists for the provided ID.
      summary: Get a ref restriction
      tags:
      - Project
  /policies/latest/admin/repos/archive:
    get:
      deprecated: false
      description: |-
        Retrieves the repository archive policy for the instance.

        The user must be authenticated to access this resource.
      operationId: getRepositoryArchivePolicy
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestRepositoryPolicy"
          description: A response containing the repository archive policy for the
            instance
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to retrieve the repository archive policy
      summary: Get repository archive policy
      tags:
      - System Maintenance
    put:
      deprecated: false
      description: |-
        Sets the repository archive policy for the instance.

        The authenticated user must have <b>SYS_ADMIN</b> permission.
      operationId: setRepositoryArchivePolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestRepositoryPolicy"
        description: The request containing the details of the policy.
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestRepositoryPolicy"
          description: A response containing the repository archive policy for the
            instance
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The permission was invalid or does not exist
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to set the repository archive policy
      summary: Update repository archive policy
      tags:
      - System Maintenance
  /policies/latest/admin/repos/delete:
    get:
      deprecated: false
      description: |-
        Retrieves the repository delete policy for the instance.

        The user must be authenticated to access this resource.
      operationId: getRepositoryDeletePolicy
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestRepositoryPolicy"
          description: A response containing the repository delete policy for the
            instance
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to retrieve the repository delete policy
      summary: Get repository delete policy
      tags:
      - System Maintenance
    put:
      deprecated: false
      description: |-
        Sets the repository delete policy for the instance.

        The authenticated user must have <b>SYS_ADMIN</b> permission.
      operationId: setRepositoryDeletePolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestRepositoryPolicy"
        description: The request containing the details of the policy.
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestRepositoryPolicy"
          description: A response containing the repository delete policy for the
            instance
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The permission was invalid or does not exist
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to set the repository delete policy
      summary: Update the repository delete policy
      tags:
      - System Maintenance
  /sync/latest/projects/{projectKey}/repos/{repositorySlug}:
    get:
      deprecated: false
      description: |-
        Retrieves the synchronization status for the specified repository. In addition to listing refs which cannot be synchronized, if any, the status also provides the timestamp for the most recent synchronization and indicates whether synchronization is available and enabled. If "?at" is specified in the URL, the synchronization status for the specified ref is returned, rather than the complete repository status.

        The authenticated user must have <b>REPO_READ</b> permission for the repository, or it must be public if the request is anonymous. Additionally, after synchronization is enabled for a repository, meaning synchronization was available at that time, permission changes and other actions can cause it to become unavailable. Even when synchronization is enabled, if it is no longer available for the repository it will not be performed.
      operationId: mGetStatus
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: "Retrieves the synchronization status for the specified ref within\
          \ the repository, rather than for the entire repository"
        explode: true
        in: query
        name: at
        required: false
        schema:
          type: string
        style: form
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestRefSyncStatus"
          description: "Synchronization status for the specified repository, or specific\
            \ ref within that repository."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "The currently authenticated user has insufficient permissions\
            \ to view the repository, or the repository is not public if the request\
            \ is anonymous."
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified repository does not exist.
      summary: Get synchronization status
      tags:
      - Repository
    post:
      deprecated: false
      description: |-
        Enables or disables synchronization for the specified repository. When synchronization is enabled, branches within the repository are immediately synchronized and the status is updated with the outcome. That initial synchronization is performed before the REST request returns, allowing it to return the updated status.

        The authenticated user must have <b>REPO_ADMIN</b> permission for the specified repository. Anonymous users cannot manage synchronization, even on public repositories. Additionally, synchronization must be available for the specified repository. Synchronization is only available if:

        - The repository is a fork, since its origin is used as upstream
        - The owning user still has access to the fork's origin,  if the repository is a <i>personalfork</i>
      operationId: setEnabled
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestRefSyncStatus"
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestRefSyncStatus"
          description: "The updated synchronization status for the repository, after\
            \ enabling synchronization. 204 NO CONTENT is returned instead after disabling\
            \ synchronization."
        "204":
          description: "Synchronization has successfully been disabled. 200 OK, with\
            \ updated status information, is returned instead after enabling synchronization."
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The JSON payload for the request did not define the "enabled"
            property.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to manage synchronization in the specified repository.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified repository does not exist.
      summary: Disable synchronization
      tags:
      - Repository
  /sync/latest/projects/{projectKey}/repos/{repositorySlug}/synchronize:
    post:
      deprecated: false
      description: |-
        Allows developers to apply a manual operation to bring a ref back in sync with upstream when it becomes out of sync due to conflicting changes. The following actions are supported:

        - <tt>MERGE</tt>: Merges in commits from the upstream ref. After applying this action, the   synchronized ref will be <tt>AHEAD</tt> (as it still includes commits that do not exist   upstream.
           - This action is only supported for <tt>DIVERGED</tt> refs
           - If a "commitMessage" is provided in the context, it will be used on the merge commit.      Otherwise a default message is used.
        - <tt>DISCARD</tt>: <i>Throws away</i> local changes in favour of those made upstream. This is a   <i>destructive</i> operation where commits in the local repository are lost.
           - No context entries are supported for this action
           - If the upstream ref has been deleted, the local ref is deleted as well
           - Otherwise, the local ref is updated to reference the same commit as upstream, even if      the update is not fast-forward (similar to a forced push)


        The authenticated user must have <b>REPO_WRITE</b> permission for the specified repository. Anonymous users cannot synchronize refs, even on public repositories. Additionally, synchronization must be <i>enabled</i> and <i>available</i> for the specified repository.
      operationId: synchronize
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestRefSyncRequest"
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestRejectedRef"
          description: "The requested action was successfully performed, and has updated\
            \ the ref's state, but the ref if is still not in sync with upstream.\
            \ For example, after applying the <tt>MERGE</tt> action, the ref will\
            \ still be <tt>AHEAD</tt> of upstream. If the action brings the ref in\
            \ sync with upstream, 204 NO CONTENT is returned instead."
        "204":
          description: "The requested action was successfully performed and the ref\
            \ is now in sync with upstream. If the action updates the ref but does\
            \ not bring it in sync with upstream, 200 OK is returned instead."
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The requested synchronization action was not understood.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to update refs within the specified repository.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified repository does not exist.
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "Synchronization is not available or enabled for the specified\
            \ repository, or the ref is already in sync with upstream."
        "501":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "The requested synchronization action was understood by the\
            \ server, but the mechanism to apply it has not been implemented."
      summary: Manual synchronization
      tags:
      - Repository
  /authconfig/latest/idps:
    get:
      description: "Returns a page of configured IdPs. \n\nThis endpoint makes no\
        \ guarantees to ordering besides the ordering being consistent."
      operationId: getIdps
      parameters:
      - description: "Start number for the page (inclusive). If not passed, first\
          \ page is assumed."
        example: 0
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 0
          type: number
        style: form
      - description: "Number of items to return. If not passed, a page size of 50\
          \ is used. A limit of -1 means that the request will fetch all results."
        example: 50
        explode: true
        in: query
        name: limit
        required: false
        schema:
          example: 50
          type: number
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getIdps_200_response"
          description: A page of configured IdPs.
      summary: Get all configured IdPs
      tags:
      - Authentication
    post:
      description: Creates a new IdP configuration.
      operationId: addIdp
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IdpConfigEntity"
        description: The configuration of the new IdP to add. The ID must be null.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdpConfigEntity"
          description: The newly created IdP configuration.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorEntity"
          description: The provided IdP configuration was either incorrect or invalid.
      summary: Create IdP configuration
      tags:
      - Authentication
  /authconfig/latest/idps/{id}:
    delete:
      description: Removes the configuration for the IdP that matches the given ID.
      operationId: removeIdp
      parameters:
      - description: The ID of the IdP
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdpConfigEntity"
          description: The IdP configuration was successfully deleted.
      summary: Delete IdP configuration
      tags:
      - Authentication
    get:
      description: Returns the configuration for the IdP that matches the given ID.
      operationId: getIdp
      parameters:
      - description: The ID of the IdP
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdpConfigEntity"
          description: The configuration for the given IdP.
      summary: Get IdP configuration
      tags:
      - Authentication
    patch:
      description: "Updates the configuration for the IdP that matches the given ID.\
        \ \n\nOnly the provided properties will be applied to the IdP configuration."
      operationId: updateIdp
      parameters:
      - description: The ID of the IdP
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IdpConfigEntity"
        description: A request containing the IdP configuration to update. The ID
          must either be null or equal to the ID specified in the path.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdpConfigEntity"
          description: The updated configuration for the given IdP.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorEntity"
          description: The provided IdP configuration was either incorrect or invalid.
      summary: Update IdP configuration
      tags:
      - Authentication
  /authconfig/latest/jit-users:
    get:
      description: |-
        Returns a list of all the users created by JIT (Just-in-time) provisioning.

        Just-in-time user provisioning (JIT provisioning) allows users to be created and updated automatically when they log in through SAML SSO or OpenID Connect (OIDC) SSO.
      operationId: getJitProvisionedUsers
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JitUserEntity"
          description: A list of JIT users
      summary: Get all JIT provisioned users
      tags:
      - Authentication
  /authconfig/latest/login-options:
    get:
      description: |-
        Returns a list of available login options, which contains details about the metadata required for the login page.

        Only enabled login options will be returned. Login options can either be the native login form or the configured IdPs.
      operationId: getLoginOptions
      parameters:
      - description: "Start number for the page (inclusive). If not passed, first\
          \ page is assumed."
        example: 0
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 0
          type: number
        style: form
      - description: "Number of items to return. If not passed, a page size of 50\
          \ is used. A limit of -1 means that the request will fetch all results."
        example: 50
        explode: true
        in: query
        name: limit
        required: false
        schema:
          example: 50
          type: number
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getLoginOptions_200_response"
          description: A list of login options
      summary: Get available login options
      tags:
      - Authentication
  /authconfig/latest/saml/certificate:
    get:
      description: returns the currently used certificate for signing SAML authentication
        requests
      operationId: getSamlCertificate
      responses:
        "200":
          content:
            application/json: {}
          description: Currently used certificate in PEM format
      tags:
      - SAML certificate configuration
  /authconfig/latest/saml/certificate/reset:
    post:
      description: generates a new certificate for signing SAML authentication requests
      operationId: regenerateCertificate
      responses:
        "200":
          content:
            application/json: {}
          description: The new certificate in PEM format
      tags:
      - SAML certificate configuration
  /authconfig/latest/sso:
    get:
      description: Returns the SSO configuration.
      operationId: getConfig
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SsoConfigEntity"
          description: The SSO configuration
      summary: Get SSO configuration
      tags:
      - Authentication
    patch:
      description: Update the SSO configuration.
      operationId: updateConfig
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SsoConfigEntity"
        description: A request containing the SSO configuration to update.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SsoConfigEntity"
          description: The updated SSO Configuration
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorEntity"
          description: The provided SSO configuration was invalid.
      summary: Update SSO configuration
      tags:
      - Authentication
  /basicauth/latest/config:
    get:
      description: Get the current configuration for blocking basic authentication
        requests.
      operationId: aGet
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicAuthConfigEntity"
          description: The blocking basic authentication configuration.
      summary: Get basic auth configuration
      tags:
      - Authentication
    put:
      description: Store a new configuration for blocking basic authentication requests.
      operationId: put
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BasicAuthConfigEntity"
        description: A request containing the new basic authentication configuration.
      responses:
        "204":
          description: The basic authentication blocking configuration was successfully
            created or updated.
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorEntity"
          description: Unable to update the basic authentication blocking configuration
            as another update is currently being performed.
      summary: Update basic auth configuration
      tags:
      - Authentication
  /tsv/latest/authenticate:
    post:
      description: |-
        Authenticates as the given user. This endpoint <strong>may</strong>:

        - Ask for two-step verification if the user has enrolled; or
        - Enforce enrollment in two-step verification if two-step verification enforcement is configured for the instance and the user is not yet enrolled.
      operationId: authenticate
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthenticationEntity"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationResponse"
          description: The user has successfully authenticated.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CredentialsCheckFailedDTO"
          description: The given user failed authentication.
        "412":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NextLoginStepDTO"
          description: The user must undergo additional verification or enroll in
            two-step verification in order to authenticate
      summary: Authenticate with 2SV
      tags:
      - Authentication
  /tsv/latest/authenticate/captcha:
    get:
      description: Provides data for a CAPTCHA challenge.
      operationId: getCaptchaData
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CaptchaDataEntity"
          description: The CAPTCHA challenge
      summary: Get CAPTCHA challenge
      tags:
      - Authentication
  /tsv/latest/authenticate/recovery-code:
    post:
      description: Authenticate as the given user using a recovery code.
      operationId: authenticateWithRecoveryCode
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TotpRecoveryCodeAuthenticationDTO"
        description: A request containing a recovery code for the specified user.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationResponse"
          description: The user was successfully logged in.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorEntity"
          description: The requested conversation cannot be found or is not valid
            in the requested context.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorEntity"
          description: The recovery code provided was incorrect.
      summary: Authenticate using recovery code
      tags:
      - Authentication
  /tsv/latest/authenticate/totp-code:
    post:
      description: Authenticate as the given user using a TOTP code.
      operationId: verifyCode
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TotpCodeVerificationDTO"
        description: A request containing a TOTP code for the given user.
      responses:
        "204":
          description: The user was successfully logged in.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorEntity"
          description: The requested conversation cannot be found or is not valid
            in the requested context.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorEntity"
          description: The TOTP code provided was incorrect.
      summary: Authenticate using TOTP code
      tags:
      - Authentication
  /tsv/latest/elevate-permissions:
    get:
      description: Checks the state of an elevated session for the currently authenticated
        user.
      operationId: getElevatedPermissionStatus
      parameters:
      - description: The type of action being performed.
        explode: true
        in: query
        name: actionType
        required: false
        schema:
          enum:
          - unlock-user-2sv-settings
          type: string
        style: form
      responses:
        "204":
          description: An elevated session exists for the currently authenticated
            user.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ElevationMethodRestDTO"
          description: The currently authenticated user requires an elevated session
            to perform this request.
      summary: Get elevated session status
      tags:
      - Authentication
  /tsv/latest/elevate-permissions/password:
    post:
      description: Elevate permissions by providing the password for the currently
        authenticated user. This will create an elevated session.
      operationId: elevatePermissionsWithPassword
      parameters:
      - description: The type of action being performed.
        explode: true
        in: query
        name: actionType
        required: false
        schema:
          enum:
          - unlock-user-2sv-settings
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TotpElevationRestDTO"
        description: A request containing the password for the currently authenticated
          user.
      responses:
        "204":
          description: Permissions were successfully elevated.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorEntity"
          description: The user has entered an incorrect password or the requested
            action cannot be confirmed with a password.
        "403":
          content:
            application/json: {}
          description: The user cannot perform the requested action.
      summary: Create elevated session with password
      tags:
      - Authentication
  /tsv/latest/elevate-permissions/recovery-code:
    post:
      description: Elevate permissions by providing a recovery code for the currently
        authenticated user. This will create an elevated session.
      operationId: elevatePermissionsWithRecoveryCode
      parameters:
      - description: The type of action being performed.
        explode: true
        in: query
        name: actionType
        required: false
        schema:
          enum:
          - unlock-user-2sv-settings
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TotpRecoveryCodeDTO"
        description: A request containing a recovery code for the currently authenticated
          user.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TotpRecoveryCodeDTO"
          description: Permissions were successfully elevated.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorEntity"
          description: The recovery code provided was incorrect.
        "403":
          content:
            application/json: {}
          description: The user cannot perform the requested action.
      summary: Create elevated session with recovery code
      tags:
      - Authentication
  /tsv/latest/elevate-permissions/totp:
    post:
      description: Elevate permissions by providing a TOTP code for the currently
        authenticated user. This will create an elevated session.
      operationId: elevatePermissionsWithTotp
      parameters:
      - description: The type of action being performed.
        explode: true
        in: query
        name: actionType
        required: false
        schema:
          enum:
          - unlock-user-2sv-settings
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TotpElevationRestDTO"
        description: A request containing a TOTP code for the given user.
      responses:
        "204":
          description: Permissions were successfully elevated.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorEntity"
          description: |
            One of the following error cases occurred (check the error message for more details).

            - The user has entered an incorrect TOTP code
            - The requested action cannot be confirmed with a TOTP code
            - The user is not enrolled in two-step verification
        "403":
          content:
            application/json: {}
          description: The user cannot perform the requested action.
      summary: Create elevated session with TOTP
      tags:
      - Authentication
  /tsv/latest/sso-management-status:
    get:
      description: Retrieves the status of the SSO management for the currently authenticated
        user.
      operationId: getSsoManagementStatus
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SsoManagementStatusDTO"
          description: Successfully retrieved SSO management status
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorEntity"
          description: Failed to retrieve SSO management status due to unauthenticated
            user
      summary: Get SSO management status
      tags:
      - Authentication
  /tsv/latest/status:
    get:
      description: Retrieves the status of two-step verification for the currently
        authenticated user.
      operationId: getStatus
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatusDTO"
          description: Successfully retrieved the two-step verification status.
      summary: Get two-step verification status
      tags:
      - Authentication
  /tsv/latest/totp/complete-enforced-enrollment:
    post:
      description: Complete enforced enrollment in two-step verification by verifying
        the provided TOTP code and creating a new session for the given user.
      operationId: completeEnforcedEnrollment
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TotpCodeVerificationDTO"
        description: A request containing a TOTP code for the given user.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TotpRecoveryCodeDTO"
          description: Enrollment successfully completed.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorEntity"
          description: The requested enrollment conversation cannot be found or the
            user is already enrolled in two-step verification.
      summary: Complete enforced enrollment in 2SV
      tags:
      - Authentication
  /tsv/latest/totp/complete-enrollment-update:
    post:
      description: Complete update of the authentication app used for two-step verification
        by verifying the provided TOTP code.
      operationId: completeAuthenticationChange
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TotpCodeVerificationDTO"
        description: A request containing a TOTP code for the given user.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TotpUserEnrollmentDTO"
          description: Authentication app successfully updated.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorEntity"
          description: The requested authentication app conversation cannot be found
            or the user is not enrolled in two-step verification
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ElevationMethodRestDTO"
          description: The currently authenticated user requires an elevated session
            to perform this request.
      summary: Complete authentication app update for 2SV
      tags:
      - Authentication
  /tsv/latest/totp/complete-voluntary-enrollment:
    post:
      description: Complete voluntary enrollment in two-step verification by verifying
        the provided TOTP code and creating a new session for the given user.
      operationId: completeVoluntaryEnrollment
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TotpCodeVerificationDTO"
        description: A request containing a TOTP code for the given user.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TotpUserEnrollmentDTO"
          description: Enrollment successfully completed.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorEntity"
          description: The requested enrollment conversation cannot be found or the
            user is already enrolled in two-step verification.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ElevationMethodRestDTO"
          description: The currently authenticated user requires an elevated session
            to perform this request.
      summary: Complete voluntary enrollment in 2SV
      tags:
      - Authentication
  /tsv/latest/totp/recovery-code/rotate:
    post:
      description: Rotates the recovery code for the currently authentication user.
      operationId: rotateRecoverCode
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TotpRecoveryCodeDTO"
          description: The recovery code has been successfully rotated.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorEntity"
          description: The request has failed due to the user not being enrolled in
            two-step verification.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ElevationMethodRestDTO"
          description: The currently authenticated user requires an elevated session
            to perform this request.
      summary: Rotate recovery code
      tags:
      - Authentication
  /tsv/latest/totp/start-enforced-enrollment:
    post:
      description: |-
        Start or resume enforced enrollment in two-step verification by returning the conversation details.

        There are two ways to enroll in two-step verification: voluntary and enforced. Enrollment is a two-step process. First, the user starts the enrollment process via <code>/start-voluntary-enrollment</code> or <code>/start-enforced-enrollment</code>. Second and final step is to complete the enrollment via <code>/complete-voluntary-enrollment</code> or <code>/complete-enforced-enrollment</code>. In the case of enforced enrollment, the conversation is started at the time of login via <code>/authenticate</code>.
      operationId: startEnforcedEnrollment
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConversationDTO"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TotpUserEnrollmentDTO"
          description: A conversation has successfully started.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorEntity"
          description: The requested enrollment conversation cannot be found or is
            not valid in the requested context.
      summary: Start enforced enrollment in 2SV
      tags:
      - Authentication
  /tsv/latest/totp/start-enrollment-update:
    post:
      description: Start the process of changing the authentication app used for two-step
        verification by creating a conversation.
      operationId: startEnrollmentUpdate
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TotpUserEnrollmentDTO"
          description: A conversation has successfully started.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorEntity"
          description: The user is not enrolled in two-step verification using TOTP.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ElevationMethodRestDTO"
          description: The currently authenticated user requires an elevated session
            to perform this request.
      summary: Start authentication app update for 2SV
      tags:
      - Authentication
  /tsv/latest/totp/start-voluntary-enrollment:
    post:
      description: |-
        Start voluntary enrollment in two-step verification by creating a conversation.

        There are two ways to enroll in two-step verification: voluntary and enforced. Enrollment is a two-step process. First, the user starts the enrollment process via <code>/start-voluntary-enrollment</code> or <code>/start-enforced-enrollment</code>. Second and final step is to complete the enrollment via <code>/complete-voluntary-enrollment</code> or <code>/complete-enforced-enrollment</code>. In the case of enforced enrollment, the conversation is started at the time of login via <code>/authenticate</code>.
      operationId: startVoluntaryEnrollment
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TotpUserEnrollmentDTO"
          description: A conversation has successfully started.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorEntity"
          description: The user is already enrolled in two-step verification using
            TOTP.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ElevationMethodRestDTO"
          description: The currently authenticated user requires an elevated session
            to perform this request.
      summary: Start voluntary enrollment in 2SV
      tags:
      - Authentication
  /tsv/latest/totp/unenroll:
    delete:
      description: Unenroll the currently authenticated user from two-step verification.
      operationId: unenroll
      responses:
        "204":
          description: User successfully unenrolled from two-step verification.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorEntity"
          description: No enrollment found for the currently authenticated user.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ElevationMethodRestDTO"
          description: The currently authenticated user requires an elevated session
            to perform this request.
      summary: Uneroll current user from two-step verification
      tags:
      - Authentication
  /tsv/latest/totp/unenroll/user/{userName}:
    delete:
      description: Unenroll a user from two-step verification specified by the given
        username.
      operationId: unenrollUser
      parameters:
      - description: username
        explode: false
        in: path
        name: userName
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: User successfully unenrolled from two-step verification.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorEntity"
          description: No enrollment found for the specified user.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorEntity"
          description: The user has entered an invalid TOTP code.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorEntity"
          description: The user cannot unenroll themselves.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorEntity"
          description: No user matches the supplied <strong>username</strong>.
      summary: Unenroll specific user from two-step verification
      tags:
      - Authentication
  /indexing/latest/projects/{projectKey}/repos/{repositorySlug}:
    get:
      deprecated: false
      description: |-
        Retrieve the search indexing details of a repository. This includes the current status, and the commit and timestamp of the last successful index.

        If the status is <b>BROKEN</b> then the <code>indexingError</code> will also be included in the response. The <code>indexingError</code> is the error that the application encountered during the last failed indexing attempt before the repository was removed from indexing.

        The authenticated user must have <b>REPO_ADMIN</b> permission for the specified repository to call this resource.
      operationId: getDetails
      parameters:
      - description: The project key
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestRepositoryIndexingDetails"
          description: The indexing details of the repository.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to view the repository.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The repository does not exist.
      summary: Get repository search indexing details.
      tags:
      - Search
  /indexing/latest/projects/{projectKey}/repos/{repositorySlug}/indexing-queue-details:
    get:
      deprecated: false
      description: |-
        Provides a snapshot of the queue status for a specified repository at the time of the request.

        The authenticated user must have <b>REPO_ADMIN</b> permission for the specified repository to call this resource.
      operationId: getQueueDetails
      parameters:
      - description: The project key
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestRepositoryIndexingQueueDetails"
          description: A snapshot containing the indexing queue information for the
            repository.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to view the repository.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified repository could not be found.
      summary: Retrieve detailed queue information for a repository
      tags:
      - Search
  /indexing/latest/projects/{projectKey}/repos/{repositorySlug}/indexing-queued-status:
    get:
      deprecated: false
      description: |-
        Checks if a repository has been queued for indexing.

        The authenticated user must have <b>REPO_ADMIN</b> permission for the specified repository to call this resource.
      operationId: indexingQueuedStatus
      parameters:
      - description: The project key
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestIndexingIsRepositoryQueued"
          description: |-
            Returns true if the repository has been queued for indexing.

            In a clustered environment, this will return true if the repository has been queued for indexing on <i>any</i> node.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to view the repository.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified repository could not be found.
      summary: Checks if a repository has been queued for indexing.
      tags:
      - Search
  /indexing/latest/reindex:
    post:
      deprecated: false
      description: Forces the provided repositories to reindex with the search server.
        For each repository the current index on the search server will be deleted
        and it will be queued for re-indexing. Note that this can result in diminished
        instance performance as deleting and reindexing a large repository can take
        some time
      operationId: reindexRepositories
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/RestRepositorySelector"
              type: array
      responses:
        "204":
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: Some or all of the provided repositories could not be located.
            See the error message for repositories that could not be located.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: Insufficient permissions for the current user. Requires SYS_ADMIN
            permissions.
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: Some or all of the provided repositories could not be queued
            for re-indexing. Partial completion of the request may have occurred.
            See the error message for repository repositories that could not be queued
      summary: Re-indexes the search index of the provided list of repositories
  /indexing/latest/restart:
    post:
      deprecated: false
      description: Restarts the search indexing worker thread. By default this will
        cause the currently running queue event to be terminated. This behaviour can
        be modified by providing the graceful shutdown flag in the request.
      operationId: restartIndexingThreadWorker
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestIndexingWorkerRestartRequest"
      responses:
        "200":
          content:
            application/json: {}
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: Insufficient permissions for the current user. Requires SYS_ADMIN
            permissions.
      summary: Restarts the search indexing worker thread
  /indexing/latest/support-info/broken-index-status-repos:
    get:
      deprecated: false
      description: |-
        Retrieve repositories which are in the <code>BROKEN</code> indexing state.

        When a repository has a <code>BROKEN</code> indexing status it will no longer attempt to be re-indexed by the system, even when changes are made to its code. A repository is given a <code>BROKEN</code> indexing status when it fails to index too many times.

        The authenticated user must have <b>SYS_ADMIN</b> permission to call this resource.
      operationId: getBrokenIndexStatusRepos
      parameters:
      - description: "Start number for the page (inclusive). If not passed, first\
          \ page is assumed."
        example: 0
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 0
          type: number
        style: form
      - description: "Number of items to return. If not passed, a page size of 25\
          \ is used."
        example: 25
        explode: true
        in: query
        name: limit
        required: false
        schema:
          example: 25
          type: number
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getBrokenIndexStatusRepos_200_response"
          description: Page of repositories where <code>STATE = BROKEN<code>
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The supplied page limit exceeds the allowed maximum of 1000
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to call this resource.
      summary: Retrieve a paged list of repositories which have exceeded the configured
        maximum indexing retries.
      tags:
      - Search
  /indexing/latest/support-info/indexing-thread-snapshot:
    get:
      deprecated: false
      description: "Fetches a snapshot of the indexing thread details at the moment\
        \ the request is processed. Note that the result represents the thread's status\
        \ at a specific point in time, and the state may have changed by the time\
        \ this endpoint responds."
      operationId: getIndexingThreadSnapshot
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/RestIndexingThreadDetails"
                type: array
          description: A snapshot containing the details of the indexing threads.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestErrors"
          description: Insufficient permissions for the current user. Requires SYS_ADMIN
            permissions.
      summary: Retrieve a snapshot of the indexing thread details.
      tags:
      - Search
  /admin:
    get:
      deprecated: false
      description: Gets the global settings that enforce the maximum expiry of SSH
        keys and restrictions on SSH key types.
      operationId: getGlobalSettings
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestSshKeySettings"
          description: The global ssh key settings configuration.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to retrieve the ssh keys global settings configuration.
      summary: Get global SSH key settings
      tags:
      - System Maintenance
    put:
      deprecated: false
      description: Updates the global settings that enforces the maximum expiry of
        SSH keys and restrictions on SSH key types.
      operationId: updateGlobalSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestSshKeySettings"
        description: A request containing expiry length to be set for SSH keys and
          a list of SSH key type restrictions.
      responses:
        "204":
          description: The ssh key global settings were updated.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: |-
            The request was invalid, which may be due to:


            - attempted to set expiry to less than 1 day
            - attempted to set expiry using partial days
            - attempted to set a restriction on a key type which was invalid


            The exact reason for the error will be provided in the error message.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to update these settings.
      summary: Update global SSH key settings
      tags:
      - System Maintenance
  /admin/supported-key-types:
    get:
      deprecated: false
      description: Retrieves a list of all supported SSH key algorithms and lengths.
      operationId: getSupportedKeyTypes
      responses:
        "200":
          content:
            application/json;charset=UTF-8: {}
          description: A list of supported SSH key algorithms and lengths.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to retrieve this list.
      summary: Get supported SSH key algorithms and lengths
      tags:
      - System Maintenance
  /keys/latest/projects/{projectKey}/repos/{repositorySlug}/ssh:
    get:
      deprecated: false
      description: Retrieves the access keys for the repository identified in the
        URL.
      operationId: getForRepository_1
      parameters:
      - description: If specified only SSH access keys with a label prefixed with
          the supplied string will be returned
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: "Controls whether SSH access keys configured at the project level\
          \ should be included in the results or not. When set to <code>true</code>\
          \ all keys that have <em>access</em> to the repository (including project\
          \ level keys) are included in the results. When set to <code>false</code>,\
          \ only access keys configured for the specified <code>repository</code>\
          \ are considered. Default is <code>false</code>."
        explode: true
        in: query
        name: effective
        required: false
        schema:
          type: string
        style: form
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: If specified only SSH access keys with at least the supplied
          permission will be returned. Default is <code>Permission.REPO_READ</code>.
        explode: true
        in: query
        name: minimumPermission
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: permission
        required: false
        schema:
          type: string
        style: form
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      - description: "Start number for the page (inclusive). If not passed, first\
          \ page is assumed."
        example: 0
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 0
          type: number
        style: form
      - description: "Number of items to return. If not passed, a page size of 25\
          \ is used."
        example: 25
        explode: true
        in: query
        name: limit
        required: false
        schema:
          example: 25
          type: number
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/getForRepository_1_200_response"
          description: A single page of access keys for the repository.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to retrieve the access keys for this repository
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified repository does not exist
      summary: Get repository SSH keys
      tags:
      - Authentication
    post:
      deprecated: false
      description: Register a new SSH key and grants access to the repository identified
        in the URL.
      operationId: addForRepository
      parameters:
      - description: The project key
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestSshAccessKey"
      responses:
        "201":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestSshAccessKey"
          description: The newly created access key.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The current request contains invalid or missing values.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to add an access key to the repository.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified repository does not exist.
      summary: Add repository SSH key
      tags:
      - Authentication
  /keys/latest/projects/{projectKey}/repos/{repositorySlug}/ssh/{keyId}:
    delete:
      deprecated: false
      description: "Remove an existing access key for the repository identified in\
        \ the URL. If the same SSH key is used as an access key for multiple projects\
        \ or repositories, only the access to the repository identified in the URL\
        \ will be revoked."
      operationId: revokeForRepository
      parameters:
      - description: The project key
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The key id
        explode: false
        in: path
        name: keyId
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The access key was deleted (or none was found matching the
            given id).
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to remove access keys for this repository
      summary: Revoke repository SSH key
      tags:
      - Authentication
    get:
      deprecated: false
      description: Retrieves the access key for the SSH key with id <code>keyId</code>
        on the repository identified in the URL.
      operationId: getForRepository
      parameters:
      - description: The project key
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The key id
        explode: false
        in: path
        name: keyId
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestSshAccessKey"
          description: The access key for the repository and SSH key with ID <code>keyId</code>.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to retrieve the access keys for this repository.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified repository or key does not exist or the key does
            not have access on the repository.
      summary: Get repository SSH key
      tags:
      - Authentication
  /keys/latest/projects/{projectKey}/repos/{repositorySlug}/ssh/{keyId}/permission/{permission}:
    put:
      deprecated: false
      description: Updates the permission granted to the specified SSH key to the
        repository identified in the URL.
      operationId: updatePermission_1
      parameters:
      - description: The project key
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The newly created access key
        explode: false
        in: path
        name: keyId
        required: true
        schema:
          type: string
        style: simple
      - description: The new permission to be granted to the SSH key
        explode: false
        in: path
        name: permission
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestSshAccessKey"
          description: The newly created access key.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            on the repository to edit its access keys.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified repository does not exist.
      summary: Update repository SSH key permission
      tags:
      - Authentication
  /keys/latest/projects/{projectKey}/ssh:
    get:
      deprecated: false
      description: Retrieves the access keys for the project identified in the URL.
      operationId: getSshKeysForProject
      parameters:
      - description: If specified only SSH access keys with a label prefixed with
          the supplied string will be returned.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: The project key
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: If specified only SSH access keys with at least the supplied
          permission will be returned Default is PROJECT_READ.
        explode: true
        in: query
        name: permission
        required: false
        schema:
          type: string
        style: form
      - description: "Start number for the page (inclusive). If not passed, first\
          \ page is assumed."
        example: 0
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 0
          type: number
        style: form
      - description: "Number of items to return. If not passed, a page size of 25\
          \ is used."
        example: 25
        explode: true
        in: query
        name: limit
        required: false
        schema:
          example: 25
          type: number
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/getForRepository_1_200_response"
          description: A single page of access keys associated with the project.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to retrieve the access keys for this project.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified project does not exist.
      summary: Get SSH key
      tags:
      - Authentication
    post:
      deprecated: false
      description: Register a new SSH key and grants access to the project identified
        in the URL.
      operationId: addForProject
      parameters:
      - description: The project key
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestSshAccessKey"
      responses:
        "201":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestSshAccessKey"
          description: The newly created access key.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The current request contains invalid or missing values.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to add an access key to the project.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified project does not exist.
      summary: Add project SSH key
      tags:
      - Authentication
  /keys/latest/projects/{projectKey}/ssh/{keyId}:
    delete:
      deprecated: false
      description: "Remove an existing access key for the project identified in the\
        \ URL. If the same SSH key is used as an access key for multiple projects\
        \ or repositories, only the access to the project identified in the URL will\
        \ be revoked."
      operationId: revokeForProject
      parameters:
      - description: The project key
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The key id
        explode: false
        in: path
        name: keyId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The access key was deleted (or none was found matching the
            given id).
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to remove access keys for this project.
      summary: Revoke project SSH key
      tags:
      - Authentication
    get:
      deprecated: false
      description: Retrieves the access key for the SSH key with id <code>keyId</code>
        on the project identified in the URL.
      operationId: getForProject
      parameters:
      - description: The project key
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The key id
        explode: false
        in: path
        name: keyId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestSshAccessKey"
          description: The access key for the repository and SSH key with ID <code>keyId</code>.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to retrieve the access keys for this repository.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified repository or key does not exist or the key does
            not have access on the repository.
      summary: Get project SSH key
      tags:
      - Authentication
  /keys/latest/projects/{projectKey}/ssh/{keyId}/permission/{permission}:
    put:
      deprecated: false
      description: Updates the permission granted to the specified SSH key to the
        project identified in the URL.
      operationId: updatePermission
      parameters:
      - description: The project key
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The newly created access key
        explode: false
        in: path
        name: keyId
        required: true
        schema:
          type: string
        style: simple
      - description: The new permission to be granted to the SSH key
        explode: false
        in: path
        name: permission
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestSshAccessKey"
          description: The newly created access key.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            on the project to edit its access keys.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified project does not exist.
      summary: Update project SSH key permission
      tags:
      - Authentication
  /keys/latest/ssh/{keyId}:
    delete:
      deprecated: false
      description: "Remove an existing access key for the projects and repositories\
        \ in the submitted entity. If the same SSH key is used as an access key for\
        \ multiple projects or repositories not supplied, only the access to the projects\
        \ or repositories identified will be revoked."
      operationId: revokeMany
      parameters:
      - description: The identifier of the SSH key
        explode: false
        in: path
        name: keyId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The access keys were deleted (or none was found matching the
            given id and repositories or projects).
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to remove access keys for one or more of the specified projects or repositories.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: On or more of the specified repositories or projects does not
            exist or the key itself does not exist.
      summary: Revoke project SSH key
      tags:
      - Authentication
  /keys/latest/ssh/{keyId}/projects:
    get:
      deprecated: false
      description: "Retrieves all project-related access keys for the SSH key with\
        \ id <code>keyId</code>. If the current user is not an admin any of the projects\
        \ the key provides access to, none are returned."
      operationId: getForProjects
      parameters:
      - explode: false
        in: path
        name: keyId
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8: {}
          description: The SSH key with ID <code>keyId</code>.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified key does not exist
      summary: Get project SSH keys
      tags:
      - Authentication
  /keys/latest/ssh/{keyId}/repos:
    get:
      deprecated: false
      description: "Retrieves all repository-related access keys for the SSH key with\
        \ id <code>keyId</code>. If the current user is not an admin of any of the\
        \ projects the key provides access to, none are returned."
      operationId: getForRepositories
      parameters:
      - description: The key id
        explode: false
        in: path
        name: keyId
        required: true
        schema:
          type: string
        style: simple
      - description: Include the readOnly field. The `readOnly` field is contextual
          for the user making the request. `readOnly` returns true if there is a restriction
          and the user does not have`PROJECT_ADMIN` access for the repository the
          key is associated with.
        explode: true
        in: query
        name: withRestrictions
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8: {}
          description: The SSH key with ID <code>keyId</code>.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified key does not exist.
      summary: Get repository SSH key
      tags:
      - Authentication
  /ssh/latest/keys:
    delete:
      deprecated: false
      description: Delete all SSH keys for a supplied user.
      operationId: deleteSshKeys
      parameters:
      - description: "the username of the user to delete the keys for. If no username\
          \ is specified, the SSH keys will be deleted for the current authenticated\
          \ user."
        explode: true
        in: query
        name: userName
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: user
        required: false
        schema:
          type: string
        style: form
      responses:
        "204":
          description: The SSH keys matching the supplied <strong>user</strong> were
            deleted.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to delete the SSH keys. This is only possible when a <strong>user</strong>
            is explicitly supplied.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: No user matches the supplied <strong>user</strong>
      summary: Delete all user SSH key
      tags:
      - Authentication
    get:
      deprecated: false
      description: Retrieve a page of SSH keys.
      operationId: getSshKeys
      parameters:
      - description: "the username of the user to retrieve the keys for. If no username\
          \ is specified, the SSH keys will be retrieved for the current authenticated\
          \ user."
        explode: true
        in: query
        name: userName
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: user
        required: false
        schema:
          type: string
        style: form
      - description: "Start number for the page (inclusive). If not passed, first\
          \ page is assumed."
        example: 0
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 0
          type: number
        style: form
      - description: "Number of items to return. If not passed, a page size of 25\
          \ is used."
        example: 25
        explode: true
        in: query
        name: limit
        required: false
        schema:
          example: 25
          type: number
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/getSshKeys_200_response"
          description: A page of SSH keys.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissionsto
            retrieve the SSH keys. This is only possible when a<strong>user</strong>
            is explicitly supplied.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: No user matches the supplied <strong>user</strong>
      summary: Get SSH keys for user
      tags:
      - Authentication
    post:
      deprecated: false
      description: Add a new SSH key to a supplied user.
      operationId: addSshKey
      parameters:
      - content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestSshKey"
        description: "the username of the user to add the SSH key for. If no username\
          \ is specified, the SSH key will be added for the current authenticated\
          \ user."
        in: query
        name: user
        required: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/addSshKey_request"
      responses:
        "201":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestSshKey"
          description: The newly created SSH key.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The SSH key was not created because the key was not a valid
            RSA/DSA/ECDSA/Ed25519 key of a supported length.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: Either there is no authenticated user or the currently authenticated
            user has insufficient permissions to add an SSH key. The latter is only
            possible when a <strong>user</strong> is explicitly supplied.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: No user matches the supplied <strong>user</strong>
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The SSH key already exists on the system.
      summary: Add SSH key for user
      tags:
      - Authentication
  /ssh/latest/keys/{keyId}:
    delete:
      deprecated: false
      description: |-
        Delete an SSH key.

        The authenticated user must have <strong>ADMIN</strong> permission or higher to call this resource.
      operationId: deleteSshKey
      parameters:
      - description: the id of the key to delete.
        explode: false
        in: path
        name: keyId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The SSH key matching the supplied <strong>id</strong> was deleted
            or did not exist.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to delete the SSH key.
      summary: Remove SSH key
      tags:
      - Authentication
    get:
      deprecated: false
      description: |-
        Retrieve an SSH key by keyId

        The authenticated user must have <strong>ADMIN</strong> permission or higher to call this resource.
      operationId: getSshKey
      parameters:
      - description: the ID of the key to retrieve.
        explode: false
        in: path
        name: keyId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestSshKey"
          description: An SSH key.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissionsto
            retrieve the SSH key. This is only possible when a<strong>keyId</strong>
            is explicitly supplied.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: No SSH key matches the supplied <strong>keyId</strong>
      summary: Get SSH key for user by keyId
      tags:
      - Authentication
  /ssh/latest/settings:
    get:
      deprecated: false
      description: Gets the SSH settings from the upstream.
      operationId: sshSettings
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestSshSettings"
          description: The ssh settings from upstream
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The request was not authenticated
      summary: Get SSH settings
      tags:
      - Authentication
  /api/latest/admin/banner:
    delete:
      deprecated: false
      description: "Deletes a banner, if one is present in the database."
      operationId: deleteBanner
      responses:
        "204":
          description: "The query executed successfully, whether a banner was deleted\
            \ or not"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The user does not have permission to access the banner service
            through this endpoint
      summary: Delete announcement banner
      tags:
      - System Maintenance
    get:
      deprecated: false
      description: "Gets the announcement banner, if one exists and is available to\
        \ the user"
      operationId: getBanner
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestAnnouncementBanner"
          description: The requested banner
        "204":
          description: There is no banner to display
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The user does not have permission to access the banner service
            through this endpoint
      summary: Get announcement banner
      tags:
      - System Maintenance
    put:
      deprecated: false
      description: |-
        Sets the announcement banner with the provided JSON.
        Only users authenticated as Admins may call this resource
      operationId: setBanner
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/setBanner_request"
      responses:
        "204":
          description: The banner was set successfully
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: There was malformed or incorrect data in the provided JSON
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The user does not have permission to access the banner service
            through this endpoint
      summary: Update/Set announcement banner
      tags:
      - System Maintenance
  /api/latest/admin/cluster:
    get:
      deprecated: false
      description: |-
        Gets information about the nodes that currently make up the stash cluster.

        The authenticated user must have the <strong>SYS_ADMIN</strong> permission to call this resource.
      operationId: getInformation
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestClusterInformation"
          description: A response containing information about the cluster
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to retrieve the cluster information.
      summary: Get cluster node information
      tags:
      - System Maintenance
  /api/latest/admin/default-branch:
    delete:
      deprecated: false
      description: |-
        Clears the global default branch, which is used when creating new repositories if an explicit default branch is not specified, if one has been configured.

        The authenticated user must have <strong>ADMIN</strong> permission to call this resource.
      operationId: clearDefaultBranch
      responses:
        "204":
          description: The default branch has been cleared.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The current user does not have sufficient permissions to clear
            the global default branch.
      summary: Clear default branch
      tags:
      - System Maintenance
    get:
      deprecated: false
      description: |-
        Retrieves the configured global default branch, which is used when creating new repositories if an explicit default branch is not specified.

        The user must be authenticated to call this resource.
      operationId: getDefaultBranch
      responses:
        "200":
          content:
            application/json;charset=UTF-8: {}
          description: The configured global default branch.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: No global default branch has been configured.
      summary: Get the default branch
      tags:
      - System Maintenance
    put:
      deprecated: false
      description: |-
        Configures the global default branch, which is used when creating new repositories if an explicit default branch is not specified.

        The authenticated user must have <strong>ADMIN</strong> permission to call this resource.
      operationId: setDefaultBranch
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/setDefaultBranch_request"
      responses:
        "204":
          description: The default branch has been set.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The current user does not have sufficient permissions to configure
            the global default branch.
      summary: Update/Set default branch
      tags:
      - System Maintenance
  /api/latest/admin/git/mesh/config/control-plane.pem:
    get:
      deprecated: false
      description: |-
        Obtain the control plane PEM.

        The authenticated user must have **SYS_ADMIN** permission.
      operationId: getControlPlanePublicKey
      responses:
        "200":
          content:
            text/plain: {}
          description: The control plane PEM.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestErrors"
          description: The currently authenticated user has insufficient permissions
            to call this resource.
      summary: Get the control plane PEM
      tags:
      - System Maintenance
  /api/latest/admin/git/mesh/diagnostics/connectivity:
    get:
      deprecated: false
      description: |-
        Generates a connectivity report between the Bitbucket node(s) and the Mesh node(s).

        The authenticated user must have **SYS_ADMIN** permission.
      operationId: connectivity
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestMeshConnectivityReport"
          description: The connectivity report between the Bitbucket node(s) and Mesh
            node(s).
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to call this resource.
      summary: Generate Mesh connectivity report
      tags:
      - System Maintenance
  /api/latest/admin/git/mesh/nodes:
    get:
      deprecated: false
      description: |-
        Get all the registered Mesh nodes.

        The authenticated user must have **SYS_ADMIN** permission.
      operationId: getAllRegisteredMeshNodes
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestMeshNode"
          description: The list of registered Mesh nodes.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to call this resource.
      summary: Get all registered Mesh nodes
      tags:
      - System Maintenance
    post:
      deprecated: false
      description: |-
        Register a new Mesh node.

        The authenticated user must have **SYS_ADMIN** permission.
      operationId: registerNewMeshNode
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestMeshNode"
        description: The request specifying the new Mesh node.
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestMeshNode"
          description: The newly registered Mesh node.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The request was malformed.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to call this resource.
      summary: Register new Mesh node
      tags:
      - System Maintenance
  /api/latest/admin/git/mesh/nodes/{id}:
    delete:
      deprecated: false
      description: |-
        Delete a Mesh node

        The authenticated user must have **SYS_ADMIN** permission.
      operationId: delete_2
      parameters:
      - explode: true
        in: query
        name: force
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - explode: false
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        default:
          content:
            application/json;charset=UTF-8: {}
          description: default response
      summary: Delete Mesh node
      tags:
      - System Maintenance
    get:
      deprecated: false
      description: |-
        Get the registered Mesh node that matches the supplied ID.

        The authenticated user must have **SYS_ADMIN** permission.
      operationId: getRegisteredMeshNodeById
      parameters:
      - description: The ID of the Mesh node.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestMeshNode"
          description: The Mesh node that matches the ID.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to call this resource.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The Mesh node does not exist.
      summary: Get Mesh node
      tags:
      - System Maintenance
    put:
      deprecated: false
      description: |-
        Update a Mesh node.

        The authenticated user must have **SYS_ADMIN** permission.
      operationId: updateMeshNode
      parameters:
      - description: The ID of the Mesh node to update.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestMeshNode"
        description: The request specifying the updated Mesh node.
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestMeshNode"
          description: The updated Mesh node.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The request was malformed.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to call this resource.
      summary: Update Mesh node
      tags:
      - System Maintenance
  /api/latest/admin/git/mesh/support-zips:
    get:
      deprecated: false
      description: |-
        Get the support zips for all the Mesh nodes.

        The authenticated user must have **SYS_ADMIN** permission.
      operationId: getSupportZips
      responses:
        "200":
          content:
            application/octet-stream: {}
          description: The support zips for all the Mesh nodes.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestErrors"
          description: The currently authenticated user has insufficient permissions
            to call this resource.
      summary: Get support zips for all Mesh nodes
      tags:
      - System Maintenance
  /api/latest/admin/git/mesh/support-zips/{id}:
    get:
      deprecated: false
      description: |-
        Get the support zip for the Mesh node that matches the specified ID.

        The authenticated user must have **SYS_ADMIN** permission.
      operationId: getSupportZip
      parameters:
      - description: The ID of the Mesh node.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/octet-stream: {}
          description: The support zip for the Mesh node that matches the ID.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestErrors"
          description: The currently authenticated user has insufficient permissions
            to call this resource.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestErrors"
          description: The Mesh node does not exist.
      summary: Get support zip for node
      tags:
      - System Maintenance
  /api/latest/admin/groups:
    delete:
      deprecated: false
      description: |-
        Deletes the specified group, removing them from the system. This also removes any permissions that may have been granted to the group.

        A user may not delete the last group that is granting them administrative permissions, or a group with greater permissions than themselves.

        The authenticated user must have the <strong>ADMIN</strong> permission to call this resource.
      operationId: deleteGroup
      parameters:
      - description: The name identifying the group to delete.
        explode: true
        in: query
        name: name
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestDetailedGroup"
          description: The deleted group.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The request was malformed.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The authenticated user does not have the <strong>ADMIN</strong>
            permission.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The action was disallowed as the authenticated user has a lower
            permission level than the group being deleted.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified group does not exist.
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The action was disallowed as it would lower the authenticated
            user's permission level.
      summary: Remove group
      tags:
      - Permission Management
    get:
      deprecated: false
      description: "Retrieve a page of groups. \n\nThe authenticated user must have\
        \ <strong>LICENSED_USER</strong> permission or higher to call this resource."
      operationId: getGroups_1
      parameters:
      - description: If specified only group names containing the supplied string
          will be returned.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: "Start number for the page (inclusive). If not passed, first\
          \ page is assumed."
        example: 0
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 0
          type: number
        style: form
      - description: "Number of items to return. If not passed, a page size of 25\
          \ is used."
        example: 25
        explode: true
        in: query
        name: limit
        required: false
        schema:
          example: 25
          type: number
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/getGroups_1_200_response"
          description: A page of groups.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user is not a licensed user.
      summary: Get groups
      tags:
      - Permission Management
    post:
      deprecated: false
      description: "Create a new group. \n\nThe authenticated user must have <strong>ADMIN</strong>\
        \ permission or higher to call this resource."
      operationId: createGroup
      parameters:
      - description: Name of the group.
        explode: true
        in: query
        name: name
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestDetailedGroup"
          description: The newly created group.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The request was malformed.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user is not an administrator.
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: A group with this name already exists.
      summary: Create group
      tags:
      - Permission Management
  /api/latest/admin/groups/add-user:
    post:
      deprecated: true
      description: |-
        <strong>Deprecated since 2.10</strong>. Use /rest/users/add-groups instead.

        Add a user to a group.

        In the request entity, the <em>context</em> attribute is the group and the <em>itemName</em> is the user.

        The authenticated user must have the <strong>ADMIN</strong> permission to call this resource.
      operationId: addUserToGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserPickerContext"
      responses:
        "200":
          content:
            application/json;charset=UTF-8: {}
          description: The user was added to the group.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The authenticated user does not have the <strong>ADMIN</strong>
            permission.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "The action was disallowed as it would exceed the server's\
            \ licensing limit, or the groups permissions exceed the authenticated\
            \ user's permission level."
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified user or group does not exist.
      summary: Add user to group
      tags:
      - Deprecated
      - Permission Management
  /api/latest/admin/groups/add-users:
    post:
      deprecated: false
      description: "Add multiple users to a group. \n\nThe authenticated user must\
        \ have the <strong>ADMIN</strong> permission to call this resource."
      operationId: addUsersToGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GroupAndUsers"
      responses:
        "200":
          content:
            application/json;charset=UTF-8: {}
          description: <em>All</em> the users were added to the group
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The authenticated user does not have the <strong>ADMIN</strong>
            permission.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "The action was disallowed as it would exceed the server's\
            \ licensing limit, or the groups permissions exceed the authenticated\
            \ user's permission level."
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified user or group does not exist.
      summary: Add multiple users to group
      tags:
      - Permission Management
  /api/latest/admin/groups/more-members:
    get:
      deprecated: false
      description: Retrieves a list of users that are members of a specified group.
        <p>The authenticated user must have the <strong>LICENSED_USER</strong> permission
        to call this resource.
      operationId: findUsersInGroup
      parameters:
      - description: "If specified only users with usernames, display names or email\
          \ addresses containing the supplied string will be returned."
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: The group which should be used to locate members.
        explode: true
        in: query
        name: context
        required: true
        schema:
          type: string
        style: form
      - description: "Start number for the page (inclusive). If not passed, first\
          \ page is assumed."
        example: 0
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 0
          type: number
        style: form
      - description: "Number of items to return. If not passed, a page size of 25\
          \ is used."
        example: 25
        explode: true
        in: query
        name: limit
        required: false
        schema:
          example: 25
          type: number
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/findUsersInGroup_200_response"
          description: A page of users.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user is not a licensed user.
      summary: Get group members
      tags:
      - Permission Management
  /api/latest/admin/groups/more-non-members:
    get:
      deprecated: false
      description: Retrieves a list of users that are <em>not</em> members of a specified
        group. <p>The authenticated user must have the <strong>LICENSED_USER</strong>
        permission to call this resource.
      operationId: findUsersNotInGroup
      parameters:
      - description: "If specified only users with usernames, display names or email\
          \ addresses containing the supplied string will be returned."
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: The group which should be used to locate members.
        explode: true
        in: query
        name: context
        required: true
        schema:
          type: string
        style: form
      - description: "Start number for the page (inclusive). If not passed, first\
          \ page is assumed."
        example: 0
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 0
          type: number
        style: form
      - description: "Number of items to return. If not passed, a page size of 25\
          \ is used."
        example: 25
        explode: true
        in: query
        name: limit
        required: false
        schema:
          example: 25
          type: number
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/findUsersInGroup_200_response"
          description: A page of users.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user is not a licensed user.
      summary: Get members not in group
      tags:
      - Permission Management
  /api/latest/admin/groups/remove-user:
    post:
      deprecated: true
      description: |-
        <strong>Deprecated since 2.10</strong>. Use /rest/users/remove-groups instead.

        Remove a user from a group.

        The authenticated user must have the <strong>ADMIN</strong> permission to call this resource.

        In the request entity, the <em>context</em> attribute is the group and the <em>itemName</em> is the user.
      operationId: removeUserFromGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserPickerContext"
      responses:
        "200":
          content:
            application/json;charset=UTF-8: {}
          description: The user was removed from the group.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The authenticated user does not have the <strong>ADMIN</strong>
            permission.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The action was disallowed as the group has a higher permission
            level than the context user.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified user or group does not exist.
      summary: Remove user from group
      tags:
      - Deprecated
      - Permission Management
  /api/latest/admin/license:
    get:
      deprecated: false
      description: "Retrieves details about the current license, as well as the current\
        \ status of the system with regards to the installed license. The status includes\
        \ the current number of users applied toward the license limit, as well as\
        \ any status messages about the license (warnings about expiry or user counts\
        \ exceeding license limits). \n\nThe authenticated user must have <b>ADMIN</b>\
        \ permission. Unauthenticated users, and non-administrators, are not permitted\
        \ to access license details."
      operationId: get_2
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestBitbucketLicense"
          description: The currently-installed license.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "The currently authenticated user has insufficient permissions\
            \ to view the license, or the request is anonymous."
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: No license has been installed.
      summary: Get license details
      tags:
      - System Maintenance
    post:
      deprecated: false
      description: "Decodes the provided encoded license and sets it as the active\
        \ license. If no license was provided, a 400 is returned. If the license cannot\
        \ be decoded, or cannot be applied, a 409 is returned. Some possible reasons\
        \ a license may not be applied include: \n\n- It is for a different product\n\
        - It is already expired\n\n\nOtherwise, if the license is updated successfully,\
        \ details for the new license are returned with a 200 response.\n\n<b>Warning</b>:\
        \ It is possible to downgrade the license during update, applying a license\
        \ with a lower number of permitted users. If the number of currently-licensed\
        \ users exceeds the limits of the new license, pushing will be disabled until\
        \ the licensed user count is brought into compliance with the new license.\n\
        \nThe authenticated user must have <b>SYS_ADMIN</b> permission. <b>ADMIN</b>\
        \ users may <i>view</i> the current license details, but they may not <i>update</i>\
        \ the license."
      operationId: updateLicense
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestBitbucketLicense"
        description: a JSON payload containing the encoded license to apply
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestBitbucketLicense"
          description: The newly-installed license.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: No encoded license was provided in the JSON body for the POST.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to update the license.
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "The encoded license could not be decoded, or it is not valid\
            \ for use on this server. Some possible reasons a license may not be applied\
            \ include: it may be for a different product, it may have already expired,\
            \ or this Bitbucket version doesn't support Server licenses."
      summary: Update license
      tags:
      - System Maintenance
  /api/latest/admin/mail-server:
    delete:
      deprecated: false
      description: |-
        Deletes the current mail configuration.

        The authenticated user must have the <strong>SYS_ADMIN</strong> permission to call this resource.
      operationId: deleteMailConfig
      responses:
        "204":
          description: The mail configuration was successfully deleted.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to delete the mail server configuration.
      summary: Delete mail configuration
      tags:
      - System Maintenance
    get:
      deprecated: false
      description: "Retrieves the current mail configuration. \n\nThe authenticated\
        \ user must have the <strong>SYS_ADMIN</strong> permission to call this resource."
      operationId: getMailConfig
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestMailConfiguration"
          description: The mail configuration
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to retrieve the mail configuration.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The mail server hasn't been configured
      summary: Get mail configuration
      tags:
      - System Maintenance
    put:
      deprecated: false
      description: "Updates the mail configuration. \n\nThe authenticated user must\
        \ have the <strong>SYS_ADMIN</strong> permission to call this resource."
      operationId: setMailConfig
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/setMailConfig_request"
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestMailConfiguration"
          description: The updated mail configuration.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The mail configuration was not updated due to a validation
            error.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to update themail configuration.
      summary: Update mail configuration
      tags:
      - System Maintenance
  /api/latest/admin/mail-server/sender-address:
    delete:
      deprecated: false
      description: |-
        Clears the server email address.

        The authenticated user must have the <strong>ADMIN</strong> permission to call this resource.
      operationId: clearSenderAddress
      responses:
        "204":
          description: he server email address was successfully cleared.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            toclear the server email address.
      summary: Update mail configuration
      tags:
      - System Maintenance
    get:
      deprecated: false
      description: Retrieves the server email address
      operationId: getSenderAddress
      responses:
        "200":
          content:
            application/json;charset=UTF-8: {}
          description: The server email address
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: he currently authenticated user has insufficient permissions
            to retrieve the server email address.
      summary: Get server mail address
      tags:
      - System Maintenance
    put:
      deprecated: false
      description: "Updates the server email address \n\nThe authenticated user must\
        \ have the <strong>ADMIN</strong> permission to call this resource."
      operationId: setSenderAddress
      requestBody:
        content:
          application/json:
            schema:
              type: string
      responses:
        "200":
          content:
            application/json;charset=UTF-8: {}
          description: The from address used in notification emails
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The server email address was not updated due to a validation
            error.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to update the server email address.
      summary: Update server mail address
      tags:
      - System Maintenance
  /api/latest/admin/permissions/groups:
    delete:
      deprecated: false
      description: |-
        Revoke all global permissions for a group.



        The authenticated user must have:


        - <strong>ADMIN</strong> permission or higher; and
        - greater or equal permissions than the current permission level of the group (a user may not demote the     permission level of a group with higher permissions than them)


        to call this resource. In addition, a user may not revoke a group's permissions if their own permission level
        would be reduced as a result.
      operationId: revokePermissionsForGroup
      parameters:
      - description: The name of the group
        explode: true
        in: query
        name: name
        required: true
        schema:
          type: string
        style: form
      responses:
        "204":
          description: All global permissions were revoked from the group.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: TThe currently authenticated user is not an administrator.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified group does not exist.
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: |-
            The action was disallowed as it would reduce the currently authenticated user's
            permission level or the currently authenticated user has a lower permission
            level than the group they are attempting to modify.
      summary: Revoke all global permissions for group
      tags:
      - Permission Management
    get:
      deprecated: false
      description: |-
        Retrieve a page of groups that have been granted at least one global permission.


        The authenticated user must have <strong>ADMIN</strong> permission or higher to call this resource.
      operationId: getGroupsWithAnyPermission
      parameters:
      - description: If specified only group names containing the supplied string
          will be returned
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: "Start number for the page (inclusive). If not passed, first\
          \ page is assumed."
        example: 0
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 0
          type: number
        style: form
      - description: "Number of items to return. If not passed, a page size of 25\
          \ is used."
        example: 25
        explode: true
        in: query
        name: limit
        required: false
        schema:
          example: 25
          type: number
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/getGroupsWithAnyPermission_200_response"
          description: A page of groups and their highest global permissions.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user is not an administrator.
      summary: Get groups with a global permission
      tags:
      - Permission Management
    put:
      deprecated: false
      description: |-
        Promote or demote a group's global permission level. Available global permissions are:


        - LICENSED_USER
        - PROJECT_CREATE
        - ADMIN
        - SYS_ADMIN

        See the <a href="https://confluence.atlassian.com/display/BitbucketServer/Global+permissions">Bitbucket Data Center documentation</a> for a detailed explanation of what each permission entails.


        The authenticated user must have:


        - <strong>ADMIN</strong> permission or higher; and
        - the permission they are attempting to grant or higher; and
        - greater or equal permissions than the current permission level of the group (a user may not demote the     permission level of a group with higher permissions than them)


        to call this resource. In addition, a user may not demote a group's permission level if their own permission
        level would be reduced as a result.
      operationId: setPermissionForGroups
      parameters:
      - description: The names of the groups
        explode: true
        in: query
        name: name
        required: true
        schema:
          items:
            type: string
          type: array
        style: form
      - description: The permission to grant
        explode: true
        in: query
        name: permission
        required: true
        schema:
          enum:
          - LICENSED_USER
          - PROJECT_CREATE
          - ADMIN
          - SYS_ADMIN
          type: string
        style: form
      responses:
        "204":
          description: The specified permission was granted to the specified user.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The request was malformed or the specified permission does
            not exist.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: |-
            The currently authenticated user is not an administrator or doesn't have the
            specified permission they are attempting to grant.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The action was disallowed as it would exceed the server's license
            limits.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified group does not exist.
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: |-
            The action was disallowed as it would reduce the currently authenticated user's
            permission level or the currently authenticated user has a lower permission
            level than the group they are attempting to modify.
      summary: Update global permission for group
      tags:
      - Permission Management
  /api/latest/admin/permissions/groups/none:
    get:
      deprecated: false
      description: |-
        Retrieve a page of groups that have no granted global permissions.


        The authenticated user must have <strong>ADMIN</strong> permission or higher to call this resource.
      operationId: getGroupsWithoutAnyPermission
      parameters:
      - description: If specified only user names containing the supplied string will
          be returned
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: "Start number for the page (inclusive). If not passed, first\
          \ page is assumed."
        example: 0
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 0
          type: number
        style: form
      - description: "Number of items to return. If not passed, a page size of 25\
          \ is used."
        example: 25
        explode: true
        in: query
        name: limit
        required: false
        schema:
          example: 25
          type: number
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/getGroups_1_200_response"
          description: A page of groups that have not been granted any global permissions.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user is not an administrator.
      summary: Get groups with no global permission
      tags:
      - Permission Management
  /api/latest/admin/permissions/users:
    delete:
      deprecated: false
      description: |-
        Revoke all global permissions for a user.


        The authenticated user must have:


        - <strong>ADMIN</strong> permission or higher; and
        - greater or equal permissions than the current permission level of the user (a user may not demote the     permission level of a user with higher permissions than them)


        to call this resource. In addition, a user may not demote their own permission level.
      operationId: revokePermissionsForUser
      parameters:
      - description: The name of the user
        explode: true
        in: query
        name: name
        required: true
        schema:
          type: string
        style: form
      responses:
        "204":
          description: All global permissions were revoked from the user.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user is not an administrator.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified user does not exist.
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: |-
            The action was disallowed as it would reduce the currently authenticated user's
            permission level or the currently authenticated user has a lower permission
            level than the user they are attempting to modify.
      summary: Revoke all global permissions for user
      tags:
      - Permission Management
    get:
      deprecated: false
      description: |-
        Retrieve a page of users that have been granted at least one global permission.


        The authenticated user must have <strong>ADMIN</strong> permission or higher to call this resource.
      operationId: getUsersWithAnyPermission
      parameters:
      - description: If specified only user names containing the supplied string will
          be returned
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: "Start number for the page (inclusive). If not passed, first\
          \ page is assumed."
        example: 0
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 0
          type: number
        style: form
      - description: "Number of items to return. If not passed, a page size of 25\
          \ is used."
        example: 25
        explode: true
        in: query
        name: limit
        required: false
        schema:
          example: 25
          type: number
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/getGroupsWithAnyPermission_200_response"
          description: A page of users and their highest global permissions.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user is not an administrator.
      summary: Get users with a global permission
      tags:
      - Permission Management
    put:
      deprecated: false
      description: |-
        Promote or demote the global permission level of a user. Available global permissions are:


        - LICENSED_USER
        - PROJECT_CREATE
        - ADMIN
        - SYS_ADMIN


        See the <a href="https://confluence.atlassian.com/display/BitbucketServer/Global+permissions">Bitbucket Data Center documentation</a> for a detailed explanation of what each permission entails.


        The authenticated user must have:


        - <strong>ADMIN</strong> permission or higher; and
        - the permission they are attempting to grant; and
        - greater or equal permissions than the current permission level of the user (a user may not demote the     permission level of a user with higher permissions than them)


        to call this resource. In addition, a user may not demote their own permission level.
      operationId: setPermissionForUsers
      parameters:
      - description: The names of the users
        explode: true
        in: query
        name: name
        required: true
        schema:
          items:
            type: string
          type: array
        style: form
      - description: The permission to grant
        explode: true
        in: query
        name: permission
        required: true
        schema:
          enum:
          - LICENSED_USER
          - PROJECT_CREATE
          - ADMIN
          - SYS_ADMIN
          type: string
        style: form
      responses:
        "204":
          description: The requested permission was granted.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The request was malformed or the specified permission does
            not exist.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: |-
            The currently authenticated user is not an administrator or doesn't have the
            specified permission they are attempting to grant.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The action was disallowed as it would exceed the server's license
            limits.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified user does not exist.
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: |-
            The action was disallowed as it would reduce the currently authenticated user's
            permission level or the currently authenticated user has a lower permission
            level than the user they are attempting to modify.
      summary: Update global permission for user
      tags:
      - Permission Management
  /api/latest/admin/permissions/users/none:
    get:
      deprecated: false
      description: |-
        Retrieve a page of users that have no granted global permissions.


        The authenticated user must have <strong>ADMIN</strong> permission or higher to call this resource.
      operationId: getUsersWithoutAnyPermission
      parameters:
      - description: If specified only user names containing the supplied string will
          be returned
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: "Start number for the page (inclusive). If not passed, first\
          \ page is assumed."
        example: 0
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 0
          type: number
        style: form
      - description: "Number of items to return. If not passed, a page size of 25\
          \ is used."
        example: 25
        explode: true
        in: query
        name: limit
        required: false
        schema:
          example: 25
          type: number
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/getUsersWithoutAnyPermission_200_response"
          description: A page of users that have not been granted any global permissions.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user is not an administrator.
      summary: Get users with no global permission
      tags:
      - Permission Management
  /api/latest/admin/pull-requests/{scmId}:
    get:
      deprecated: false
      description: "Retrieve the merge strategies available for this instance. \n\n\
        The user must be authenticated to call this resource."
      operationId: getMergeConfig
      parameters:
      - description: the id of the scm to get strategies for
        explode: false
        in: path
        name: scmId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestPullRequestMergeConfig"
          description: The merge configuration of this instance.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to see the request repository.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The request repository does not exist
      summary: Get merge strategies
      tags:
      - Pull Requests
    post:
      deprecated: false
      description: "Update the pull request merge strategies for the context repository.\
        \ \n\nThe authenticated user must have <strong>ADMIN</strong> permission to\
        \ call this resource. \n\nOnly the strategies provided will be enabled, only\
        \ one may be set to default \n\nThe commit message template will not be updated\
        \ if not provided, and will be deleted if the `commitMessageTemplate` attribute\
        \ is empty, i.e: `commitMessageTemplate: {}`.\n\nAn explicitly set pull request\
        \ merge strategy configuration can be deleted by POSTing a document with an\
        \ empty `mergeConfig` attribute. i.e:\n```\n{ \n    \"mergeConfig\": {} \n\
        } \n```\n\nUpon completion of this request, the effective configuration will\
        \ be the default configuration."
      operationId: setMergeConfig
      parameters:
      - description: the id of the scm to get strategies for
        explode: false
        in: path
        name: scmId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestPullRequestSettings"
        description: the settings
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestPullRequestMergeConfig"
          description: The repository pull request merge strategies for the context
            repository.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The repository pull request merge strategies were not updated
            due to a validation error.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to administrate thespecified repository.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified repository does not exist.
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: Setting or deleting merge configurations isn't supported on
            archived repositories.
      summary: Update merge strategies
      tags:
      - Pull Requests
  /api/latest/admin/rate-limit/history:
    get:
      deprecated: false
      description: |-
        Retrieves the recent rate limit history for the instance.

        The authenticated user must have the <strong>ADMIN</strong> permission to call this resource.
      operationId: getHistory
      parameters:
      - description: An optional sort category to arrange the results in descending
          order
        explode: true
        in: query
        name: order
        required: false
        schema:
          enum:
          - NEWEST
          - FREQUENCY
          type: string
        style: form
      - description: "Start number for the page (inclusive). If not passed, first\
          \ page is assumed."
        example: 0
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 0
          type: number
        style: form
      - description: "Number of items to return. If not passed, a page size of 25\
          \ is used."
        example: 25
        explode: true
        in: query
        name: limit
        required: false
        schema:
          example: 25
          type: number
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/getHistory_200_response"
          description: A response containing a page of aggregated counters for users
            who have been recently rate limited.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The sort query parameter is invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to retrieve rate limit history.
      summary: Get rate limit history
      tags:
      - System Maintenance
  /api/latest/admin/rate-limit/settings:
    get:
      deprecated: false
      description: |-
        Retrieves the rate limit settings for the instance.

        The user must be authenticated to call this resource.
      operationId: getSettings_3
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestRateLimitSettings"
          description: A response containing the rate limit plugin settings for the
            instance.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to retrieve rate limit settings.
      summary: Get rate limit settings
      tags:
      - System Maintenance
    put:
      deprecated: false
      description: |-
        Sets the rate limit settings for the instance.

        The authenticated user must have <strong>ADMIN</strong> permission to call this resource.
      operationId: setSettings_3
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestRateLimitSettings"
        description: |-
          Sets the rate limit settings for the instance.

          The authenticated user must have <strong>ADMIN</strong> permission to call this resource.
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestRateLimitSettings"
          description: A response containing the updated rate limit plugin settings
            for the instance.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: |+
            One of the following error cases occurred (check the error message for more details):

            - The request is empty
            - The enabled field of the request is not a boolean
            - The defaultSettings field of the request does not contain both capacity and fillRate
            - The capacity and fillRate are not positive integers


        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to set rate limit settings.
      summary: Set rate limit
      tags:
      - System Maintenance
  /api/latest/admin/rate-limit/settings/users:
    get:
      deprecated: false
      description: |-
        Retrieves the user-specific rate limit settings for the given user.

        The authenticated user must have <strong>ADMIN</strong> permission to call this resource.
      operationId: getAllRateLimitSettings
      parameters:
      - description: Optional filter
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: "Start number for the page (inclusive). If not passed, first\
          \ page is assumed."
        example: 0
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 0
          type: number
        style: form
      - description: "Number of items to return. If not passed, a page size of 25\
          \ is used."
        example: 25
        explode: true
        in: query
        name: limit
        required: false
        schema:
          example: 25
          type: number
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/getAllRateLimitSettings_200_response"
          description: A response containing all the user-specific rate limit settings
            filtered by the optional filter.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to retrieve rate limit settings.
      summary: Get rate limit settings for user
      tags:
      - System Maintenance
    post:
      deprecated: false
      description: |-
        Sets the given rate limit settings for the given users.

        The authenticated user must have <strong>ADMIN</strong> permission to call this resource.
      operationId: set_2
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestBulkUserRateLimitSettingsUpdateRequest"
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestUserRateLimitSettings"
          description: A response containing the updated user settings.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: |
            One of the following valid state error cases occurred (check the error message for more details):

            - The request is empty
            - No users are provided in the request
            - One or more of the users are invalid
            - Whitelisted is false or not provided, and no settings are provided either
            - Whitelisted is false or not provided, settings are provided,   but do not contain both capacity and fillRate
            - Whitelisted is false or not provided, settings are provided,   but capacity and fillRate are not positive integers
            - Whitelisted is true, and settings are provided (only one must be provided)
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to set user settings.
      summary: Set rate limit settings for users
      tags:
      - System Maintenance
  /api/latest/admin/rate-limit/settings/users/{userSlug}:
    delete:
      deprecated: false
      description: |-
        Deletes the user-specific rate limit settings for the given user.

        The authenticated user must have <strong>ADMIN</strong> permission to call this resource.
      operationId: delete_8
      parameters:
      - description: The user slug.
        explode: false
        in: path
        name: userSlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: An empty response indicating that the user settings have been
            deleted.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to retrieve rate limit settings.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "The specified user does not exist, or has no settings."
      summary: Delete user specific rate limit settings
      tags:
      - System Maintenance
    get:
      deprecated: false
      description: |-
        Retrieves the user-specific rate limit settings for the given user.

        To call this resource, the user must be authenticated and either have <strong>ADMIN</strong> permission or be the same user as the one whose settings are requested. A user with <strong>ADMIN</strong> permission cannot get the settings of a user with <strong>SYS_ADMIN</strong> permission.
      operationId: get_6
      parameters:
      - description: The user slug.
        explode: false
        in: path
        name: userSlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestUserRateLimitSettings"
          description: A response containing the user-specific rate limit settings
            for the given user.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to retrieve rate limit settings.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "The specified user does not exist, or has no settings."
      summary: Get user specific rate limit settings
      tags:
      - System Maintenance
    put:
      deprecated: false
      description: |-
        Sets the given rate limit settings for the given user.

        The authenticated user must have <strong>ADMIN</strong> permission to call this resource.
      operationId: set_3
      parameters:
      - description: The user slug.
        explode: false
        in: path
        name: userSlug
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestUserRateLimitSettingsUpdateRequest"
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestUserRateLimitSettings"
          description: A response containing the updated user settings
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: |+
            One of the following valid state error cases occurred (check the error message for more details):

            - The request is empty
            - Whitelisted is false or not provided, and no settings are provided either
            - Whitelisted is false or not provided, settings are provided,   but do not contain both capacity and fillRate
            - Whitelisted is false or not provided, settings are provided,   but capacity and fillRate are not positive integers
            - Whitelisted is true, and settings are provided (only one must be provided)


        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to set user settings.
      summary: Set rate limit settings for user
      tags:
      - System Maintenance
  /api/latest/admin/user-directories:
    get:
      deprecated: false
      description: "Retrieve a list of active directories. \n\n The authenticated\
        \ user must have the <strong>ADMIN</strong> permission to call this resource."
      operationId: getUserDirectories
      parameters:
      - description: "Set <code>true</code> to include inactive directories; otherwise,\
          \ <code>false</code> to only return active directories."
        explode: true
        in: query
        name: includeInactive
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestUserDirectory"
          description: A list of directories
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user is not an administrator
      summary: Get directories
      tags:
      - Permission Management
  /api/latest/admin/users:
    delete:
      deprecated: false
      description: |-
        Deletes the specified user, removing them from the system. This also removes any permissions that may have been granted to the user.

        A user may not delete themselves, and a user with <strong>ADMIN</strong> permissions may not delete a user with <strong>SYS_ADMIN</strong> permissions.

        The authenticated user must have the <strong>ADMIN</strong> permission to call this resource.

        Note: The permission removal process occurs 7 days after the user deletion.
      operationId: deleteUser
      parameters:
      - description: The username identifying the user to delete.
        explode: true
        in: query
        name: name
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestDetailedUser"
          description: The deleted user.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The request was malformed.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The authenticated user does not have the <strong>ADMIN</strong>
            permission.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The action was disallowed as the authenticated user has a lower
            permission level than the user being deleted.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified user does not exist.
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The action was disallowed as a user can not delete themselves.
      summary: Remove user
      tags:
      - Permission Management
    get:
      deprecated: false
      description: "Retrieve a page of users. \n\n The authenticated user must have\
        \ the <strong>LICENSED_USER</strong> permission to call this resource."
      operationId: getUsers_1
      parameters:
      - description: "If specified only users with usernames, display name or email\
          \ addresses containing the supplied string will be returned."
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: "Start number for the page (inclusive). If not passed, first\
          \ page is assumed."
        example: 0
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 0
          type: number
        style: form
      - description: "Number of items to return. If not passed, a page size of 25\
          \ is used."
        example: 25
        explode: true
        in: query
        name: limit
        required: false
        schema:
          example: 25
          type: number
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/findUsersInGroup_200_response"
          description: A page of users.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user is not a licensed user.
      summary: Get users
      tags:
      - Permission Management
    post:
      deprecated: false
      description: |-
        Creates a new user from the assembled query parameters.

        The default group can be used to control initial permissions for new users, such as granting users the ability to login or providing read access to certain projects or repositories. If the user is not added to the default group, they may not be able to login after their account is created until explicit permissions are configured.

        The authenticated user must have the <strong>ADMIN</strong> permission to call this resource.
      operationId: createUser
      parameters:
      - description: The e-mail address for the new user.
        explode: true
        in: query
        name: emailAddress
        required: true
        schema:
          type: string
        style: form
      - description: The password for the new user. Required if the <code>notify</code>
          parameter is not present or is set to <code>false</false>
        explode: true
        in: query
        name: password
        required: false
        schema:
          type: string
        style: form
      - description: "Set <code>true</code> to add the user to the default group,\
          \ which can be used to grant them a set of initial permissions; otherwise,\
          \ <code>false</code> to not add them to a group."
        explode: true
        in: query
        name: addToDefaultGroup
        required: false
        schema:
          default: true
          type: boolean
        style: form
      - description: The display name for the new user.
        explode: true
        in: query
        name: displayName
        required: true
        schema:
          type: string
        style: form
      - description: The username for the new user.
        explode: true
        in: query
        name: name
        required: true
        schema:
          type: string
        style: form
      - description: "If present and not <code>false</code> instead of requiring a\
          \ password, the create user will be notified via email their account has\
          \ been created and requires a password to be reset. This option can only\
          \ be used if a mail server has been configured."
        explode: true
        in: query
        name: notify
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "204":
          description: The user was successfully created.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The request was malformed.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The authenticated user is not an administrator.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: Adding the user to the default group would exceed the server's
            license limit.
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: Another user with the same name already exists.
      summary: Create user
      tags:
      - Permission Management
    put:
      deprecated: false
      description: "Update a user's details. \n\nThe authenticated user must have\
        \ the <strong>ADMIN</strong> permission to call this resource."
      operationId: updateUserDetails
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdate"
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestDetailedUser"
          description: The updated user.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The request was malformed.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The authenticated user does not have the <strong>ADMIN</strong>
            permission or has a lower permission level than the user being updated.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified user does not exist.
      summary: Update user details
      tags:
      - Permission Management
  /api/latest/admin/users/add-group:
    post:
      deprecated: true
      description: |-
        <strong>Deprecated since 2.10</strong>. Use /rest/users/add-groups instead.

        Add a user to a group. This is very similar to <code>groups/add-user</code>, but with the <em>context</em> and <em>itemName</em> attributes of the supplied request entity reversed. On the face of it this may appear redundant, but it facilitates a specific UI component in the application.

        In the request entity, the <em>context</em> attribute is the user and the <em>itemName</em> is the group.

        The authenticated user must have the <strong>ADMIN</strong> permission to call this resource.
      operationId: addGroupToUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GroupPickerContext"
      responses:
        "200":
          content:
            application/json;charset=UTF-8: {}
          description: The user was added to the group
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The authenticated user does not have the <strong>ADMIN</strong>
            permission.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "The action was disallowed as it would exceed the server's\
            \ licensing limit, or the groups permissions exceed the authenticated\
            \ user's permission level."
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified user or group does not exist.
      summary: Add user to group
      tags:
      - Deprecated
      - Permission Management
  /api/latest/admin/users/add-groups:
    post:
      deprecated: false
      description: "Add a user to one or more groups. \n\n The authenticated user\
        \ must have the <strong>ADMIN</strong> permission to call this resource."
      operationId: addUserToGroups
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserAndGroups"
      responses:
        "200":
          content:
            application/json;charset=UTF-8: {}
          description: The user was added to <em>all</em> the groups
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The authenticated user does not have the <strong>ADMIN</strong>
            permission.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "The action was disallowed as it would exceed the server's\
            \ licensing limit, or the groups permissions exceed the authenticated\
            \ user's permission level."
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified user or group does not exist.
      summary: Add user to groups
      tags:
      - Permission Management
  /api/latest/admin/users/captcha:
    delete:
      deprecated: false
      description: |-
        Clears any CAPTCHA challenge that may constrain the user with the supplied username when they authenticate. Additionally any counter or metric that contributed towards the user being issued the CAPTCHA challenge (for instance too many consecutive failed logins) will also be reset.

        The authenticated user must have the <strong>ADMIN</strong> permission to call this resource, and may not clear the CAPTCHA of a user with greater permissions than themselves.
      operationId: clearUserCaptchaChallenge
      parameters:
      - description: The username
        explode: true
        in: query
        name: name
        required: true
        schema:
          type: string
        style: form
      responses:
        "204":
          description: The CAPTCHA was successfully cleared.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The request was malformed.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The authenticated user does not have the <strong>ADMIN</strong>
            permission.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The action was disallowed as the authenticated user has a lower
            permission level than the user to clear captcha for.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified user does not exist.
      summary: Clear CAPTCHA for user
      tags:
      - Permission Management
  /api/latest/admin/users/credentials:
    put:
      deprecated: false
      description: "Update a user's password. \n\nThe authenticated user must have\
        \ the <strong>ADMIN</strong> permission to call this resource, and may not\
        \ update the password of a user with greater permissions than themselves."
      operationId: updateUserPassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AdminPasswordUpdate"
      responses:
        "204":
          description: The user's password was successfully updated.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The request was malformed.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The authenticated user does not have the <strong>ADMIN</strong>
            permission or has a lower permission level than the user having their
            password updated.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified user does not exist.
      summary: Set password for user
      tags:
      - Permission Management
  /api/latest/admin/users/erasure:
    get:
      deprecated: false
      description: |-
        Validate if a user can be erased.

        A username is only valid for erasure if it exists as the username of a deleted user. This endpoint will return an appropriate error response if the supplied username is invalid for erasure.

        This endpoint does <strong>not</strong> perform the actual user erasure, and will not modify the application in any way.

        The authenticated user must have the <strong>ADMIN</strong> permission to call this resource.
      operationId: validateErasable
      parameters:
      - description: The username of the user to validate erasability for.
        explode: true
        in: query
        name: name
        required: true
        schema:
          type: string
        style: form
      responses:
        "204":
          description: the user is erasable
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The request was malformed (e.g. if no username was supplied).
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The authenticated user does not have the <strong>ADMIN</strong>
            permission or has a lower permission level than the user being erased.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The requested username does not exist.
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The requested username is the username of a not deleted user.
      summary: Check user removal
      tags:
      - Permission Management
    post:
      deprecated: false
      description: |-
        Erases personally identifying user data for a deleted user.

        References in the application to the original username will be either removed or updated to a new non-identifying username. Refer to the <a href="https://confluence.atlassian.com/gdpr/bitbucket-right-to-erasure-949770560.html">support guide</a> for details about what data is and isn't erased.

        User erasure can only be performed on a deleted user. If the user has not been deleted first then this endpoint will return a bad request and no erasure will be performed.

        Erasing user data is <strong>irreversible</strong> and may lead to a degraded user experience. This method should not be used as part of a standard user deletion and cleanup process.

        Plugins can participate in user erasure by defining a <code>&lt;user-erasure-handler&gt;</code> module. If one or more plugin modules fail, an error summary of the failing modules is returned.

        The authenticated user must have the <strong>ADMIN</strong> permission to call this resource.
      operationId: eraseUser
      parameters:
      - description: The username identifying the user to erase.
        explode: true
        in: query
        name: name
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestErasedUser"
          description: The identifier of the erased user.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The request was malformed (e.g. if no username was supplied).
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The authenticated user does not have the <strong>ADMIN</strong>
            permission or has a lower permission level than the user being erased.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The requested username does not exist.
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The requested username is the username of a not deleted user.
      summary: Erase user information
      tags:
      - Permission Management
  /api/latest/admin/users/more-members:
    get:
      deprecated: false
      description: Retrieves a list of users that are <em>not</em> members of a specified
        group. <p>The authenticated user must have the <strong>LICENSED_USER</strong>
        permission to call this resource.
      operationId: findGroupsForUser
      parameters:
      - description: "If specified only users with usernames, display names or email\
          \ addresses containing the supplied string will be returned."
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: The group which should be used to locate members.
        explode: true
        in: query
        name: context
        required: true
        schema:
          type: string
        style: form
      - description: "Start number for the page (inclusive). If not passed, first\
          \ page is assumed."
        example: 0
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 0
          type: number
        style: form
      - description: "Number of items to return. If not passed, a page size of 25\
          \ is used."
        example: 25
        explode: true
        in: query
        name: limit
        required: false
        schema:
          example: 25
          type: number
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/findUsersInGroup_200_response"
          description: A page of users.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user is not a licensed user.
      summary: Get groups for user
      tags:
      - Permission Management
  /api/latest/admin/users/more-non-members:
    get:
      deprecated: false
      description: Retrieves a list of groups the specified user is <em>not</em> a
        member of. <p>The authenticated user must have the <strong>LICENSED_USER</strong>
        permission to call this resource.
      operationId: findOtherGroupsForUser
      parameters:
      - description: If specified only groups with names containing the supplied string
          will be returned.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: The user which should be used to locate groups.
        explode: true
        in: query
        name: context
        required: true
        schema:
          type: string
        style: form
      - description: "Start number for the page (inclusive). If not passed, first\
          \ page is assumed."
        example: 0
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 0
          type: number
        style: form
      - description: "Number of items to return. If not passed, a page size of 25\
          \ is used."
        example: 25
        explode: true
        in: query
        name: limit
        required: false
        schema:
          example: 25
          type: number
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/getGroups_1_200_response"
          description: A page of groups.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user is not a licensed user.
      summary: Find other groups for user
      tags:
      - Permission Management
  /api/latest/admin/users/remove-group:
    post:
      deprecated: false
      description: |-
        Remove a user from a group. This is very similar to <code>groups/remove-user</code>, but with the <em>context</em> and <em>itemName</em> attributes of the supplied request entity reversed. On the face of it this may appear redundant, but it facilitates a specific UI component in the application.

        In the request entity, the <em>context</em> attribute is the user and the <em>itemName</em> is the group.

        The authenticated user must have the <strong>ADMIN</strong> permission to call this resource.
      operationId: removeGroupFromUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GroupPickerContext"
      responses:
        "200":
          content:
            application/json;charset=UTF-8: {}
          description: The user was removed from the group.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The authenticated user does not have the <strong>ADMIN</strong>
            permission.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The action was disallowed as the group has a higher permission
            level than the context user.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified user or group does not exist.
      summary: Remove user from group
      tags:
      - Permission Management
  /api/latest/admin/users/rename:
    post:
      deprecated: false
      description: "Rename a user. \n\nThe authenticated user must have the <strong>ADMIN</strong>\
        \ permission to call this resource."
      operationId: renameUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRename"
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestDetailedUser"
          description: The renamed user.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The request was malformed.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The authenticated user does not have the <strong>ADMIN</strong>
            permission or has a lower permission level than the user being renamed.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified user does not exist.
      summary: Rename user
      tags:
      - Permission Management
  /api/latest/application-properties:
    get:
      deprecated: false
      description: |-
        Retrieve version information and other application properties.

        No authentication is required to call this resource.
      operationId: getApplicationProperties
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestApplicationProperties"
          description: The application properties
      summary: Get application properties
      tags:
      - System Maintenance
  /api/latest/build/capabilities:
    get:
      deprecated: false
      description: Returns the build capabilities of this instance
      operationId: getCapabilities
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestBuildCapabilities"
          description: capabilities
      summary: Get build capabilities
      tags:
      - Capabilities
  /api/latest/dashboard/pull-request-suggestions:
    get:
      deprecated: false
      description: "Retrieves a page of suggestions for pull requests that the currently\
        \ authenticated user may wish to raise. Such suggestions are based on ref\
        \ changes occurring and so contain the ref change that prompted the suggestion\
        \ plus the time the change event occurred. Changes will be returned in descending\
        \ order based on the time the change that prompted the suggestion occurred.\
        \ \n\nNote that although the response is a page object, the interface does\
        \ not support paging, however a limit can be applied to the size of the returned\
        \ page."
      operationId: getPullRequestSuggestions
      parameters:
      - description: "restrict pull request suggestions to be based on events that\
          \ occurred since some timein the past. This is expressed in seconds since\
          \ \"now\". So to return suggestionsbased only on activity within the past\
          \ 48 hours, pass a value of 172800."
        explode: true
        in: query
        name: changesSince
        required: false
        schema:
          type: string
        style: form
      - description: restricts the result set to return at most this many suggestions.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/getPullRequestSuggestions_200_response"
          description: A page of pull requests that match the search criteria.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The request was malformed.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The current user is not authenticated
      summary: Get pull request suggestions
      tags:
      - Dashboard
  /api/latest/dashboard/pull-requests:
    get:
      deprecated: false
      description: "Retrieve a page of pull requests where a user is involved as either\
        \ a reviewer, author or a participant. The request may be filtered by pull\
        \ request state, role or participant status."
      operationId: getPullRequests_1
      parameters:
      - description: "(optional, defaults to returning pull requests regardless of\
          \ closed since date). Permits returning only pull requests with a closed\
          \ timestamp set more recently that (now - closedSince). Units are in seconds.\
          \ So for example if closed since 86400 is set only pull requests closed\
          \ in the previous 24 hours will be returned."
        explode: true
        in: query
        name: closedSince
        required: false
        schema:
          type: string
        style: form
      - description: "(optional, defaults to returning pull requests for any role).\
          \ If a role is supplied only pull requests where the authenticated user\
          \ is a participant in the given role will be returned. Either <strong>REVIEWER</strong>,\
          \ <strong>AUTHOR</strong> or <strong>PARTICIPANT</strong>."
        explode: true
        in: query
        name: role
        required: false
        schema:
          type: string
        style: form
      - description: "(optional, defaults to returning pull requests with any participant\
          \ status). A comma separated list of participant status. That is, one or\
          \ more of <strong>UNAPPROVED</strong>, <strong>NEEDS_WORK</strong>, or <strong>APPROVED</strong>."
        explode: true
        in: query
        name: participantStatus
        required: false
        schema:
          type: string
        style: form
      - description: "(optional, defaults to returning pull requests in any state).\
          \ If a state is supplied only pull requests in the specified state will\
          \ be returned. Either <strong>OPEN</strong>, <strong>DECLINED</strong> or\
          \ <strong>MERGED</strong>. Omit this parameter to return pull request in\
          \ any state."
        explode: true
        in: query
        name: state
        required: false
        schema:
          type: string
        style: form
      - description: "The name of the involved user, defaults to the current user."
        explode: true
        in: query
        name: user
        required: false
        schema:
          type: string
        style: form
      - description: "(optional, defaults to <strong>NEWEST</strong>) the order/(s)\
          \ to return pull requests in; can choose from <strong>OLDEST</strong> (as\
          \ in: \"oldest first\"), <strong>NEWEST</strong>, <strong>DRAFT_STATUS</strong>,\
          \ <strong>PARTICIPANT_STATUS</strong>, and/or <strong>CLOSED_DATE</strong>.\
          \ Where <strong>CLOSED_DATE</strong> is specified and the result set includes\
          \ pull requests that are not in the closed state, these pull requests will\
          \ appear first in the result set, followed by most recently closed pull\
          \ requests."
        explode: true
        in: query
        name: order
        required: false
        schema:
          type: string
        style: form
      - description: "Start number for the page (inclusive). If not passed, first\
          \ page is assumed."
        example: 0
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 0
          type: number
        style: form
      - description: "Number of items to return. If not passed, a page size of 25\
          \ is used."
        example: 25
        explode: true
        in: query
        name: limit
        required: false
        schema:
          example: 25
          type: number
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/getPullRequests_1_200_response"
          description: A page of pull requests that match the search criteria.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The request was malformed.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The current user is not authenticated
      summary: Get pull requests for a user
      tags:
      - Dashboard
  /api/latest/deployment/capabilities:
    get:
      deprecated: false
      description: Returns the Deployment capabilities of this instance
      operationId: getCapabilities_1
      responses:
        "200":
          content:
            application/json;charset=UTF-8: {}
          description: capabilities
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "This instance of Bitbucket Data Center does not support deployments\
            \ (for example, it has been disabled using the property 'plugin.deployment.capability.disabled')."
      summary: Get deployment capabilities
      tags:
      - Capabilities
  /api/latest/groups:
    get:
      deprecated: false
      description: |-
        Retrieve a page of group names.

        The authenticated user must have <strong>LICENSED_USER</strong> permission or higher to call this resource.
      operationId: getGroups
      parameters:
      - explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: "Start number for the page (inclusive). If not passed, first\
          \ page is assumed."
        example: 0
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 0
          type: number
        style: form
      - description: "Number of items to return. If not passed, a page size of 25\
          \ is used."
        example: 25
        explode: true
        in: query
        name: limit
        required: false
        schema:
          example: 25
          type: number
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/getGroups_200_response"
          description: A page of group names.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user is not a project administrator.
      summary: Get group names
      tags:
      - Permission Management
  /api/latest/hook-scripts:
    post:
      deprecated: false
      description: |-
        Create a new hook script.

        This endpoint requires **SYS_ADMIN** permission.
      operationId: createHookScript
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/ExamplePostMultipartFormData"
        description: The multipart form data containing the hook script
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestHookScript"
          description: The newly created hook script.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The hook script was not created due to a validation error.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions.
      summary: Create a new hook script
      tags:
      - System Maintenance
  /api/latest/hook-scripts/{scriptId}:
    delete:
      deprecated: false
      description: |-
        Deletes a registered hook script.

        This endpoint requires **SYS_ADMIN** permission.
      operationId: deleteHookScript
      parameters:
      - description: The ID of the hook script to delete
        explode: false
        in: path
        name: scriptId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The hook script was deleted.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: Unable to find the supplied hook script ID.
      summary: Delete a hook script.
      tags:
      - System Maintenance
    get:
      deprecated: false
      description: Retrieves a hook script by ID.
      operationId: getHookScript
      parameters:
      - description: The ID of the hook script to retrieve
        explode: false
        in: path
        name: scriptId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestHookScript"
          description: The hook script.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The hook script ID supplied does not exist.
      summary: Get a hook script
      tags:
      - System Maintenance
    put:
      deprecated: false
      description: |-
        Updates a hook script.

        This endpoint requires **SYS_ADMIN** permission.
      operationId: updateHookScript
      parameters:
      - description: The ID of the hook script
        explode: false
        in: path
        name: scriptId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          '*/*':
            schema:
              $ref: "#/components/schemas/ExamplePutMultipartFormData"
        description: The multipart form data containing the hook script
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestHookScript"
          description: The updated hook script.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The hook script ID supplied does not exist.
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: A hook script with the same name already exists.
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "One or more fields to update must be specified: content, description\
            \ and/or name."
      summary: Update a hook script
      tags:
      - System Maintenance
  /api/latest/hook-scripts/{scriptId}/content:
    get:
      deprecated: false
      description: |-
        Retrieves the hook script content.

        This endpoint requires **SYS_ADMIN** permission.
      operationId: read
      parameters:
      - description: The ID of the hook script
        explode: false
        in: path
        name: scriptId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/octet-stream: {}
            text/plain;charset=UTF-8: {}
          description: The hook script content.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The hook script ID supplied does not exist.
      summary: Get hook script content
      tags:
      - System Maintenance
  /api/latest/hooks/{hookKey}/avatar:
    get:
      deprecated: false
      description: Retrieve the avatar for the project matching the supplied <strong>moduleKey</strong>.
      operationId: getAvatar
      parameters:
      - description: The complete module key of the hook module.
        explode: false
        in: path
        name: hookKey
        required: true
        schema:
          type: string
        style: simple
      - description: (optional) Version used for HTTP caching only - any non-blank
          version will result in a large max-age Cache-Control header. Note that this
          does not affect the Last-Modified header.
        explode: true
        in: query
        name: version
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json: {}
          description: The avatar of the project matching the supplied <strong>moduleKey</strong>.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to view the project.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified project does not exist.
      summary: Get project avatar
      tags:
      - Project
  /api/latest/inbox/pull-requests:
    get:
      deprecated: false
      description: Returns a page of pull requests in the user's inbox.
      operationId: getPullRequests_2
      parameters:
      - explode: true
        in: query
        name: role
        required: false
        schema:
          default: reviewer
          type: string
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 25
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: start
        required: false
        schema:
          default: 0
          format: int32
          type: integer
        style: form
      responses:
        default:
          content:
            application/json;charset=UTF-8: {}
          description: default response
      summary: Get pull requests in inbox
  /api/latest/inbox/pull-requests/count:
    get:
      deprecated: false
      description: Returns the total number of pull requests in the user's inbox
      operationId: getPullRequestCount
      responses:
        default:
          content:
            application/json;charset=UTF-8: {}
          description: default response
      summary: Get total number of pull requests in inbox
  /api/latest/labels:
    get:
      deprecated: false
      description: |-
        Returns a paged response of all the labels in the system.

        The user needs to be authenticated to use this resource.
      operationId: getLabels
      parameters:
      - description: (optional) prefix to filter the labels on.
        explode: true
        in: query
        name: prefix
        required: false
        schema:
          type: string
        style: form
      - description: "Start number for the page (inclusive). If not passed, first\
          \ page is assumed."
        example: 0
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 0
          type: number
        style: form
      - description: "Number of items to return. If not passed, a page size of 25\
          \ is used."
        example: 25
        explode: true
        in: query
        name: limit
        required: false
        schema:
          example: 25
          type: number
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/getLabels_200_response"
          description: Page of returned labels.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The user is currently not authenticated.
      summary: Get all labels
      tags:
      - System Maintenance
  /api/latest/labels/{labelName}:
    get:
      deprecated: false
      description: |-
        Returns a label.

        The user needs to be authenticated to use this resource.
      operationId: getLabel
      parameters:
      - description: the label name
        explode: false
        in: path
        name: labelName
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestLabel"
          description: The label.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The user is currently not authenticated.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified label does not exist.
      summary: Get label
      tags:
      - System Maintenance
  /api/latest/labels/{labelName}/labeled:
    get:
      deprecated: false
      description: |-
        Returns a page of labelables for a given label.

        Only labelables that the authenticated user has view access to will be returned.
      operationId: getLabelables
      parameters:
      - description: " the type of labelables to be returned. Supported values: REPOSITORY"
        explode: true
        in: query
        name: type
        required: false
        schema:
          type: string
        style: form
      - description: The page of labelables.
        explode: false
        in: path
        name: labelName
        required: true
        schema:
          type: string
        style: simple
      - description: "Start number for the page (inclusive). If not passed, first\
          \ page is assumed."
        example: 0
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 0
          type: number
        style: form
      - description: "Number of items to return. If not passed, a page size of 25\
          \ is used."
        example: 25
        explode: true
        in: query
        name: limit
        required: false
        schema:
          example: 25
          type: number
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/getLabelables_200_response"
          description: The page of labelables.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "The type of labelable is incorrect, correct values are REPOSITORY."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to retrieve the labelables
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified label does not exist.
      summary: Get labelables for label
      tags:
      - System Maintenance
  /api/latest/logs/logger/{loggerName}:
    get:
      deprecated: false
      description: |-
        Retrieve the current log level for a given logger.

        The authenticated user must have <strong>SYS_ADMIN</strong> permission or higher to call this resource.
      operationId: getLevel
      parameters:
      - description: The name of the logger.
        explode: false
        in: path
        name: loggerName
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestLogLevel"
          description: The log level of the logger.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to retrieve the log level.
      summary: Get current log level
      tags:
      - System Maintenance
  /api/latest/logs/logger/{loggerName}/{levelName}:
    put:
      deprecated: false
      description: |-
        Set the current log level for a given logger.

        The authenticated user must have <strong>SYS_ADMIN</strong> permission or higher to call this resource.
      operationId: setLevel
      parameters:
      - description: "The level to set the logger to. Either TRACE, DEBUG, INFO, WARN\
          \ or ERROR"
        explode: false
        in: path
        name: levelName
        required: true
        schema:
          type: string
        style: simple
      - description: The name of the logger.
        explode: false
        in: path
        name: loggerName
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The log level was successfully changed.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The log level was invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to set the log level.
      summary: Set log level
      tags:
      - System Maintenance
  /api/latest/logs/rootLogger:
    get:
      deprecated: false
      description: |-
        Retrieve the current log level for the root logger.

        The authenticated user must have <strong>SYS_ADMIN</strong> permission or higher to call this resource.
      operationId: getRootLevel
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestLogLevel"
          description: The log level of the logger.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to retrieve the log level.
      summary: Get root log level
      tags:
      - System Maintenance
  /api/latest/logs/rootLogger/{levelName}:
    put:
      deprecated: false
      description: |-
        Set the current log level for the root logger.

        The authenticated user must have <strong>SYS_ADMIN</strong> permission or higher to call this resource.
      operationId: setRootLevel
      parameters:
      - description: "the level to set the logger to. Either TRACE, DEBUG, INFO, WARN\
          \ or ERROR"
        explode: false
        in: path
        name: levelName
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The log level was successfully changed.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The log level was invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to set the log level.
      summary: Set root log level
      tags:
      - System Maintenance
  /api/latest/logs/settings:
    get:
      deprecated: false
      description: |-
        Returns whether debug logging and profiling are enabled.

        The authenticated user must have <strong>SYS_ADMIN</strong> permission to call this resource.
      operationId: getSettings_2
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestLoggingSettings"
          description: Whether debug logging and profiling are enabled.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to retrieve these settings.
      summary: Get debug logging and profiling
      tags:
      - System Maintenance
    put:
      deprecated: false
      description: |-
        Set whether debug logging and profiling should be enabled. This setting persists on restarts.

        The authenticated user must have <strong>SYS_ADMIN</strong> permission to call this resource.
      operationId: setSettings_2
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/setSettings_2_request"
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestLoggingSettings"
          description: Debug logging and profiling were successfully updated.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The settings were not correctly specified.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to update these settings.
      summary: Set debug logging and profiling
      tags:
      - System Maintenance
  /api/latest/markup/preview:
    post:
      deprecated: false
      description: |-
        Preview generated HTML for the given markdown content.

        Only authenticated users may call this resource.
      operationId: preview
      parameters:
      - description: "(Optional) true if HTML should be escaped in the input markup,\
          \ false otherwise."
        explode: true
        in: query
        name: htmlEscape
        required: false
        schema:
          type: string
        style: form
      - description: "(Optional) The mode to use when building URLs. One of: ABSOLUTE,\
          \ RELATIVE or, CONFIGURED. By default this is RELATIVE."
        explode: true
        in: query
        name: urlMode
        required: false
        schema:
          type: string
        style: form
      - description: (Optional) true if headers should contain an ID based on the
          heading content.
        explode: true
        in: query
        name: includeHeadingId
        required: false
        schema:
          type: string
        style: form
      - description: (Optional) Whether the markup implementation should convert newlines
          to breaks. By default this is false which reflects the standard markdown
          specification.
        explode: true
        in: query
        name: hardwrap
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          '*/*':
            schema:
              example: "# Hello World!"
              type: string
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestMarkup"
          description: The rendered markdown.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The markdown was invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            preview rendered markdown.
      summary: Preview markdown render
      tags:
      - Markup
  /api/latest/migration/exports:
    post:
      deprecated: false
      description: |-
        Starts a background job that exports the selected repositories.

        Only 2 concurrent exports are supported _per cluster node_. If a request ends up on a node that is already running that many export jobs, the request will be rejected and an error returned.

        The response includes a description of the job that has been started, and its ID can be used to query these details again, including the current progress, warnings and errors that occurred while processing the job, and to interrupt and cancel the execution of this job.

        The request to start an export is similar to the one for previewing an export. Additionally, it accepts an optional parameter, `exportLocation`, which can be used to specify a _relative_ path within `data/migration/export` in the shared home directory. No locations outside of that directory will be accepted for exports.

        There are essentially three ways to select repositories for export. Regardless of which you use, a few general rules apply:

        - You can supply a list of selectors. The selection will be additive.
        - Repositories that are selected more than once due to overlapping selectors will be de-duplicated and effectively exported only once.
        - For every selected repository, its full fork hierarchy will be considered selected, even if parts of that hierarchy would otherwise not be matched by the provided selectors. For example, when you explicitly select a single repository only, but that repository is a fork, then its origin will be exported (and eventually imported), too.

        Now, a single repository can be selected like this:

        ```



        {
              "projectKey": "PRJ",
              "slug": "my-repo"
        }

        ```

        Second, all repositories in a specific project can be selected like this:

        ```



        {
              "projectKey": "PRJ",
              "slug": *"
        }

        ```

        And third, all projects and repositories in the system would be selected like this:

        ```



        {
              "projectKey": "*",
              "slug": *"
        }

        ```

        The authenticated user must have **ADMIN** permission or higher to call this resource.
      operationId: startExport
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestExportRequest"
        description: The request
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestJob"
          description: Details about the export job.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The request was malformed.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to start anexport
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The export could not be started because the limit of concurrent
            migration jobs has been reached.
      summary: Start export job
      tags:
      - System Maintenance
  /api/latest/migration/exports/preview:
    post:
      deprecated: false
      description: |-
        Enumerates the projects and repositories that would be exported for a given export request.

        All affected repositories will be enumerated explicitly, and while projects are listed as individual items in responses from this endpoint, their presence does not imply that all their repositories are included.

        While this endpoint can be used to verify that all selectors in the request apply as intended, it should be noted that a subsequent, actual export might contain a different set of repositories, as they might have been added or deleted in the meantime.

        Note that the overall response from this endpoint can become very large when a lot of repositories end up in the selection. This is why the server is streaming the response while it is being generated (as opposed to creating it in memory and then sending it all at once) and it can be consumed in a streaming way, too.

        Also, due to the potential size of the response, projects and repositories are listed with fewer details than in other REST responses.

        For a more detailed description of selectors, see the endpoint documentation for starting an export.

        The authenticated user must have **ADMIN** permission or higher to call this resource.
      operationId: previewExport
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestExportRequest"
        description: the export request
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestScopesExample"
          description: The effectively selected projects and repositories.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The request was malformed.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to generate a preview.
      summary: Preview export
      tags:
      - System Maintenance
  /api/latest/migration/exports/{jobId}:
    get:
      deprecated: false
      description: |-
        Gets the details, including the current status and progress, of the export job identified by the given ID.

        The authenticated user must have **ADMIN** permission or higher to call this resource.
      operationId: getExportJob
      parameters:
      - description: the ID of the job
        explode: false
        in: path
        name: jobId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestJob"
          description: "The job, including status and progress information."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to retrieve information about this job.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified job does not exist.
      summary: Get export job details
      tags:
      - System Maintenance
  /api/latest/migration/exports/{jobId}/cancel:
    post:
      deprecated: false
      description: |-
        Requests the cancellation of an export job.

        The request to cancel a job will be processed successfully if the job is actually still running. If it has already finished (successfully or with errors) or if it has already been canceled before, then an error will be returned.

        There might be a small delay between accepting the request and actually cancelling the job. In most cases, the delay will be close to instantaneously. In the unlikely case of communication issues across a cluster, it can however take a few seconds to cancel a job.

        A client should always actively query the job status to confirm that a job has been successfully canceled.

        The authenticated user must have **ADMIN** permission or higher to call this resource.
      operationId: cancelExportJob
      parameters:
      - description: the ID of the job to cancel
        explode: false
        in: path
        name: jobId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The job has successfully been marked for cancellation
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to cancel this job.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified job does not exist.
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "The job was in a state that does not allow cancellation, e.g.\
            \ it has already finished."
      summary: Cancel export job
      tags:
      - System Maintenance
  /api/latest/migration/exports/{jobId}/messages:
    get:
      deprecated: false
      description: |-
        Gets the messages generated by the job.

        Without any filter, all messages will be returned, but the response can optionally be filtered for the following severities. The severity parameter can be repeated to include multiple severities in one response.

        - INFO
        - WARN
        - ERROR

        The authenticated user must have **ADMIN** permission or higher to call this resource.
      operationId: getExportJobMessages
      parameters:
      - description: The severity to include in the results
        explode: true
        in: query
        name: severity
        required: false
        schema:
          type: string
        style: form
      - description: The ID of the job
        explode: false
        in: path
        name: jobId
        required: true
        schema:
          type: string
        style: simple
      - description: The subject
        explode: true
        in: query
        name: subject
        required: false
        schema:
          type: string
        style: form
      - description: "Start number for the page (inclusive). If not passed, first\
          \ page is assumed."
        example: 0
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 0
          type: number
        style: form
      - description: "Number of items to return. If not passed, a page size of 25\
          \ is used."
        example: 25
        explode: true
        in: query
        name: limit
        required: false
        schema:
          example: 25
          type: number
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/getExportJobMessages_200_response"
          description: The messages generated by this job.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to retrieve information about this job.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified job does not exist.
      summary: Get job messages
      tags:
      - System Maintenance
  /api/latest/migration/imports:
    post:
      deprecated: false
      description: |-
        Starts a background job that imports the specified archive.

        Only 1 import at a time is supported _per cluster_. If another request is made while an import is already running, the request will be rejected and an error returned.

        The path in the request must point to a valid archive file. The file must be located within the `data/migration/import` directory in the shared home directory.

        The authenticated user must have **ADMIN** permission or higher to call this resource.
      operationId: startImport
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestImportRequest"
        description: The request
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestJob"
          description: Details about the export job.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The request was malformed.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to start an import.
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The import could not be started because the limit of concurrent
            migration jobs has been reached.
      summary: Start import job
      tags:
      - System Maintenance
  /api/latest/migration/imports/{jobId}:
    get:
      deprecated: false
      description: |-
        Gets the details, including the current status and progress, of the import job identified by the given ID.

        The authenticated user must have **ADMIN** permission or higher to call this resource.
      operationId: getImportJob
      parameters:
      - description: The ID of the job
        explode: false
        in: path
        name: jobId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestJob"
          description: "The job, including status and progress information."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to retrieve information about this job.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified job does not exist.
      summary: Get import job status
      tags:
      - System Maintenance
  /api/latest/migration/imports/{jobId}/cancel:
    post:
      deprecated: false
      description: |-
        Requests the cancellation of an import job.

        The request to cancel a job will be processed successfully if the job is actually still running. If it has already finished (successfully or with errors) or if it has already been canceled before, then an error will be returned.

        Note that import jobs are not canceled as instantaneously as export jobs. Rather, once the request has been accepted, there are a number of checkpoints at which the job will actually apply it and stop. This is to keep the system in a reasonably consistent state:

        - After the current fork hierarchy has been imported and verified.
        - Before the next repository is imported.
        - Before the next pull request is imported.

        A client should always actively query the job status to confirm that a job has been successfully canceled.

        The authenticated user must have **ADMIN** permission or higher to call this resource.
      operationId: cancelImportJob
      parameters:
      - description: the ID of the job to cancel
        explode: false
        in: path
        name: jobId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The job has successfully been marked for cancellation.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to cancel this job.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified job does not exist.
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "The job was in a state that does not allow cancellation, e.g.\
            \ it has already finished."
      summary: Cancel import job
      tags:
      - System Maintenance
  /api/latest/migration/imports/{jobId}/messages:
    get:
      deprecated: false
      description: |-
        Gets the messages generated by the job.

        Without any filter, all messages will be returned, but the response can optionally be filtered for the following severities. The severity parameter can be repeated to include multiple severities in one response.

        - INFO
        - WARN
        - ERROR

        The authenticated user must have **ADMIN** permission or higher to call this resource.
      operationId: getImportJobMessages
      parameters:
      - description: The severity to include in the results
        explode: true
        in: query
        name: severity
        required: false
        schema:
          type: string
        style: form
      - description: The ID of the job
        explode: false
        in: path
        name: jobId
        required: true
        schema:
          type: string
        style: simple
      - description: The subject
        explode: true
        in: query
        name: subject
        required: false
        schema:
          type: string
        style: form
      - description: "Start number for the page (inclusive). If not passed, first\
          \ page is assumed."
        example: 0
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 0
          type: number
        style: form
      - description: "Number of items to return. If not passed, a page size of 25\
          \ is used."
        example: 25
        explode: true
        in: query
        name: limit
        required: false
        schema:
          example: 25
          type: number
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/getExportJobMessages_200_response"
          description: The messages generated by this job.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to retrieve information about this job.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified job does not exist.
      summary: Get import job messages
      tags:
      - System Maintenance
  /api/latest/migration/mesh:
    post:
      deprecated: false
      description: "Starts a background job that migrates selected projects/repositories\
        \ to Mesh. \n\nOnly 1 job is supported _per cluster_.\n\nThe response includes\
        \ a description of the job that has been started, and its ID can be used to\
        \ query these details again, including the current progress, and to interrupt\
        \ and cancel the execution of this job. \n\nThe request to start a migration\
        \ is similar to the one for previewing a migration. \n\nThere are essentially\
        \ three ways to select repositories for migration. Regardless of which you\
        \ use, a few general rules apply: \n\n    - You can supply a list of repository\
        \ IDs and project IDs. The selection will be additive. All repositories  \
        \   in the system are migrated if both lists are empty.     - Repositories\
        \ that are selected more than once due to overlapping IDs will be de-duplicated\
        \ and     effectively migrated only once.     - For every selected repository,\
        \ its full fork hierarchy will be considered selected, even if parts of that\
        \     hierarchy would otherwise not be matched by the provided IDs. For example,\
        \ when you explicitly     select a single repository only, but that repository\
        \ is a fork, then its origin will be migrated too. \n\nNow, a single repository\
        \ can be selected like this: \n\n```\n\n     {\n     \"repositoryIds\": [1]\n\
        \     }\n```\n\nMultiple repositories can be selected like this:\n\n\n\n```\n\
        \n     {\n     \"repositoryIds\": [1, 2]\n     }\n```\n\nSecond, all repositories\
        \ in a specific project can be selected like this:\n\n\n\n```\n\n     {\n\
        \     \"projectIds\": [1]\n     }\n```\n\nAnd third, all projects and repositories\
        \ in the system would be selected like this:\n\n\n\n```\n\n     {\n     \"\
        projectIds\": [],\n     \"repositoryIds\": []\n     }\n```\n\nThe authenticated\
        \ user must have **SYS_ADMIN** permission to call this resource."
      operationId: startMeshMigration
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/startMeshMigration_request"
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestJob"
          description: The started job
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The migration request failed one/more validation checks.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to call this resource.
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: A migration job is already in progress
      summary: Start Mesh migration job
      tags:
      - System Maintenance
  /api/latest/migration/mesh/preview:
    post:
      deprecated: false
      description: |-
        Enumerates the projects and repositories that would be migrated for a given request.

        All affected repositories will be enumerated explicitly, and while projects are listed as individual items in responses from this endpoint, their presence does not imply that all their repositories are included.

        While this endpoint can be used to verify that all selectors in the request apply as intended, it should be noted that a subsequent, actual export might contain a different set of repositories, as they might have been added or deleted in the meantime.

        Note that the overall response from this endpoint can become very large when a lot of repositories end up in the selection. This is why the server is streaming the response while it is being generated (as opposed to creating it in memory and then sending it all at once) and it can be consumed in a streaming way, too.

        Also, due to the potential size of the response, projects and repositories are listed with fewer details than in other REST responses.

        The authenticated user must have **SYS_ADMIN** permission to call this resource.
      operationId: previewMeshMigration
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestMeshMigrationRequest"
        description: The export request
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ExamplePreviewMigration"
          description: Enumeration of projects and repositories that would be migrated
            for a given request.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The request was invalid or missing.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to call this resource.
      summary: Preview Mesh migration
      tags:
      - System Maintenance
  /api/latest/migration/mesh/repos:
    get:
      deprecated: false
      description: "Searches for repositories in the system matching the specified\
        \ criteria and enriches their MeshMigrationQueueState migration state if a\
        \ migration is currently in progress. \n\nThe currently active migration can\
        \ optionally be specified by passing a migrationId, if known. If this isn't\
        \ passed, an attempt is made to locate the active migration and its ID is\
        \ used. \n\nIf a migration is currently active, only repositories that are\
        \ a part of the migration are filtered and returned. Otherwise, all repositories\
        \ in the systems are filtered and returned. \n\nFiltering by state is ignored\
        \ when no migration is currently in progress. In such a case, results are\
        \ not enriched with their MeshMigrationQueueState migration state. \n\nThe\
        \ authenticated user must have **SYS_ADMIN** permission to call this resource."
      operationId: searchMeshMigrationRepos
      parameters:
      - description: "(optional) The currently active migration job. If not passed,\
          \ this is looked up internally."
        explode: true
        in: query
        name: migrationId
        required: false
        schema:
          type: string
        style: form
      - description: (optional) The project key. Can be specified more than once to
          filter by more than one project.
        explode: true
        in: query
        name: projectKey
        required: false
        schema:
          type: string
        style: form
      - description: (optional) The repository name
        explode: true
        in: query
        name: name
        required: false
        schema:
          type: string
        style: form
      - description: "(optional) If a migration is active, the MeshMigrationQueueState\
          \ state to filter results by. Can be specified more than once to filter\
          \ by more than one state."
        explode: true
        in: query
        name: state
        required: false
        schema:
          type: string
        style: form
      - description: "(optional) Whether the repository has been fully migrated to\
          \ Mesh. If not present, all repositories are considered regardless of where\
          \ they're located."
        explode: true
        in: query
        name: remote
        required: false
        schema:
          type: string
        style: form
      - description: "Start number for the page (inclusive). If not passed, first\
          \ page is assumed."
        example: 0
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 0
          type: number
        style: form
      - description: "Number of items to return. If not passed, a page size of 25\
          \ is used."
        example: 25
        explode: true
        in: query
        name: limit
        required: false
        schema:
          example: 25
          type: number
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/searchMeshMigrationRepos_200_response"
          description: A page of repositories matching the specified criteria.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The request was malformed.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to call this resource.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: No migration job with the given ID exists.
      summary: Find repositories by Mesh migration state
      tags:
      - System Maintenance
  /api/latest/migration/mesh/summaries:
    get:
      deprecated: false
      description: "Retrieve a page of Mesh migration job summaries. Jobs are ordered\
        \ by when they were started, newest first. \n\nThe authenticated user must\
        \ have **SYS_ADMIN** permission to call this resource."
      operationId: getAllMeshMigrationSummaries
      parameters:
      - description: "Start number for the page (inclusive). If not passed, first\
          \ page is assumed."
        example: 0
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 0
          type: number
        style: form
      - description: "Number of items to return. If not passed, a page size of 25\
          \ is used."
        example: 25
        explode: true
        in: query
        name: limit
        required: false
        schema:
          example: 25
          type: number
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/getAllMeshMigrationSummaries_200_response"
          description: The summary of the migration job.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to call this resource.
      summary: Get all Mesh migration job summaries
      tags:
      - System Maintenance
  /api/latest/migration/mesh/summary:
    get:
      deprecated: false
      description: |-
        Gets the summary, including the queue status and progress, of the currently active Mesh migration job.

        The authenticated user must have **SYS_ADMIN** permission to call this resource.
      operationId: getActiveMeshMigrationSummary
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestMeshMigrationSummary"
          description: The summary of the currently active migration job.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to call this resource.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: No active migration job found.
      summary: Get summary for Mesh migration job
      tags:
      - System Maintenance
  /api/latest/migration/mesh/{jobId}:
    get:
      deprecated: false
      description: |-
        Gets the details, including the current status and progress, of the job identified by the given ID.

        The authenticated user must have **SYS_ADMIN** permission to call this resource.
      operationId: getMeshMigrationJob
      parameters:
      - description: The ID of the job
        explode: false
        in: path
        name: jobId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8: {}
          description: The details of the migration job.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The job ID parameter was not supplied.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to call this resource.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified job ID does not exist.
      summary: Get Mesh migration job details
      tags:
      - System Maintenance
  /api/latest/migration/mesh/{jobId}/cancel:
    post:
      deprecated: false
      description: "Requests the cancellation of a migration job. \n\nThe request\
        \ to cancel a job will be processed successfully if the job is actually still\
        \ running. If it has already finished (successfully or with errors) or if\
        \ it has already been canceled before, then an error will be returned. \n\n\
        There might be a small delay between accepting the request and actually cancelling\
        \ the job. In most cases, the delay will be close to instantaneously. In the\
        \ unlikely case of communication issues across a cluster, it can however take\
        \ a few seconds to cancel a job.\n\nA client should always actively query\
        \ the job status to confirm that a job has been successfully canceled.\n\n\
        The authenticated user must have **SYS_ADMIN** permission to call this resource."
      operationId: cancelMeshMigrationJob
      parameters:
      - description: The ID of the job to cancel
        explode: false
        in: path
        name: jobId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The migration job was successfully marked for cancellation.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to call this resource.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified job ID does not exist.
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The migration job has already been canceled or finished.
      summary: Cancel Mesh migration job
      tags:
      - System Maintenance
  /api/latest/migration/mesh/{jobId}/messages:
    get:
      deprecated: false
      description: "Gets the messages generated by the job. \n\nWithout any filter,\
        \ all messages will be returned, but the response can optionally be filtered\
        \ for the following severities. The severity parameter can be repeated to\
        \ include multiple severities in one response. \n\n     - INFO\n     - WARN\n\
        \     - ERROR\n\n\nThe authenticated user must have **SYS_ADMIN** permission\
        \ to call this resource."
      operationId: getMeshMigrationJobMessages
      parameters:
      - description: The severity to include in the results
        explode: true
        in: query
        name: severity
        required: false
        schema:
          type: string
        style: form
      - description: The ID of the job
        explode: false
        in: path
        name: jobId
        required: true
        schema:
          type: string
        style: simple
      - description: The subject
        explode: true
        in: query
        name: subject
        required: false
        schema:
          type: string
        style: form
      - description: "Start number for the page (inclusive). If not passed, first\
          \ page is assumed."
        example: 0
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 0
          type: number
        style: form
      - description: "Number of items to return. If not passed, a page size of 25\
          \ is used."
        example: 25
        explode: true
        in: query
        name: limit
        required: false
        schema:
          example: 25
          type: number
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/getExportJobMessages_200_response"
          description: The details of the migration job.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The job ID parameter was not supplied.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to call this resource.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified job ID does not exist.
      summary: Get Mesh migration job messages
      tags:
      - System Maintenance
  /api/latest/migration/mesh/{jobId}/summary:
    get:
      deprecated: false
      description: "Gets the summary, including the queue status and progress, of\
        \ a Mesh migration job. \n\nThe authenticated user must have **SYS_ADMIN**\
        \ permission to call this resource."
      operationId: getMeshMigrationJobSummary
      parameters:
      - description: The ID of the job
        explode: false
        in: path
        name: jobId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestMeshMigrationSummary"
          description: The summary of the migration job.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The job ID parameter was not supplied.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to call this resource.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified job ID does not exist.
      summary: Get Mesh migration job summary
      tags:
      - System Maintenance
  /api/latest/profile/recent/repos:
    get:
      deprecated: false
      description: "Retrieve a page of recently accessed repositories for the currently\
        \ authenticated user. \n\nRepositories are ordered from most recently to least\
        \ recently accessed. <p>Only authenticated users may call this resource."
      operationId: getRepositoriesRecentlyAccessed
      parameters:
      - description: "(optional) If specified, it must be a valid repository permission\
          \ level name and will limit the resulting repository list to ones that the\
          \ requesting user has the specified permission level to. If not specified,\
          \ the default <code>REPO_READ</code> permission level will be assumed."
        explode: true
        in: query
        name: permission
        required: false
        schema:
          default: REPO_READ
          type: string
        style: form
      - description: "Start number for the page (inclusive). If not passed, first\
          \ page is assumed."
        example: 0
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 0
          type: number
        style: form
      - description: "Number of items to return. If not passed, a page size of 25\
          \ is used."
        example: 25
        explode: true
        in: query
        name: limit
        required: false
        schema:
          example: 25
          type: number
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/getRepositoriesRecentlyAccessed_200_response"
          description: A page of recently accessed repositories.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The permission level is unknown or not related to repository.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The request is unauthenticated.
      summary: Get recently accessed repositories
      tags:
      - Repository
  /api/latest/projects:
    get:
      deprecated: false
      description: "Retrieve a page of projects. \n\nOnly projects for which the authenticated\
        \ user has the <strong>PROJECT_VIEW</strong> permission will be returned."
      operationId: getProjects
      parameters:
      - description: Name to filter by.
        explode: true
        in: query
        name: name
        required: false
        schema:
          type: string
        style: form
      - description: Permission to filter by
        explode: true
        in: query
        name: permission
        required: false
        schema:
          type: string
        style: form
      - description: "Start number for the page (inclusive). If not passed, first\
          \ page is assumed."
        example: 0
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 0
          type: number
        style: form
      - description: "Number of items to return. If not passed, a page size of 25\
          \ is used."
        example: 25
        explode: true
        in: query
        name: limit
        required: false
        schema:
          example: 25
          type: number
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/getProjects_200_response"
          description: A page of projects.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The permission level is unknown or not related to projects.
      summary: Get projects
      tags:
      - Project
    post:
      deprecated: false
      description: "Create a new project. \n\nTo include a custom avatar for the project,\
        \ the project definition should contain an additional attribute with the key\
        \ <code>avatar</code> and the value a data URI containing Base64-encoded image\
        \ data. The URI should be in the following format: <pre>    data:(content\
        \ type, e.g. image/png);base64,(data) </pre>If the data is not Base64-encoded,\
        \ or if a character set is defined in the URI, or the URI is otherwise invalid,\
        \ <em>project creation will fail</em>. \n\nThe authenticated user must have\
        \ <strong>PROJECT_CREATE</strong> permission to call this resource."
      operationId: createProject
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestProject"
        description: The project.
      responses:
        "201":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestProject"
          description: The newly created project.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to update the project.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to create a project.
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The project key or name is already in use.
      summary: Create a new project
      tags:
      - Project
  /api/latest/projects/{projectKey}:
    delete:
      deprecated: false
      description: "Delete the project matching the supplied <strong>projectKey</strong>.\
        \ \n\nThe authenticated user must have <strong>PROJECT_ADMIN</strong> permission\
        \ for the specified project to call this resource."
      operationId: deleteProject
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The project matching the supplied <strong>projectKey</strong>
            was deleted.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to delete the project.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified project does not exist.
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The project can not be deleted as it contains repositories.
      summary: Delete project
      tags:
      - Project
    get:
      deprecated: false
      description: "Retrieve the project matching the supplied <strong>projectKey</strong>.\
        \ \n\nThe authenticated user must have <strong>PROJECT_VIEW</strong> permission\
        \ for the specified project to call this resource."
      operationId: getProject
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestProject"
          description: The project matching the supplied <strong>projectKey</strong>.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to view the project.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified project does not exist.
      summary: Get a project
      tags:
      - Project
    put:
      deprecated: false
      description: "Update the project matching the <strong>projectKey</strong> supplied\
        \ in the resource path. \n\nTo include a custom avatar for the updated project,\
        \ the project definition should contain an additional attribute with the key\
        \ <code>avatar</code> and the value a data URI containing Base64-encoded image\
        \ data. The URI should be in the following format: \n```    data:(content\
        \ type, e.g. image/png);base64,(data)```\n\nIf the data is not Base64-encoded,\
        \ or if a character set is defined in the URI, or the URI is otherwise invalid,\
        \ <em>project creation will fail</em>. \n\nThe authenticated user must have\
        \ <strong>PROJECT_ADMIN</strong> permission for the specified project to call\
        \ this resource."
      operationId: updateProject
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestProject"
        description: Project parameters to update.
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestProject"
          description: The updated project. The project's key <strong>was not</strong>
            updated.
        "201":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestProject"
          description: The updated project. The project's key <strong>was</strong>
            updated.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The project was not updated due to a validation error.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to update the project.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified project does not exist.
      summary: Update project
      tags:
      - Project
  /api/latest/projects/{projectKey}/avatar.png:
    get:
      deprecated: false
      description: "Retrieve the avatar for the project matching the supplied <strong>projectKey</strong>.\
        \ \n\nThe authenticated user must have <strong>PROJECT_VIEW</strong> permission\
        \ for the specified project to call this resource."
      operationId: getProjectAvatar
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The desired size of the image. The server will return an image
          as close as possible to the specified size.
        explode: true
        in: query
        name: s
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            image/png: {}
          description: The avatar of the project matching the supplied <strong>projectKey</strong>.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to view the project.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified project does not exist.
      summary: Get avatar for project
      tags:
      - Project
    post:
      deprecated: false
      description: "Update the avatar for the project matching the supplied <strong>projectKey</strong>.\
        \ \n\nThis resource accepts POST multipart form data, containing a single\
        \ image in a form-field named 'avatar'. \n\nThere are configurable server\
        \ limits on both the dimensions (1024x1024 pixels by default) and uploaded\
        \ file size (1MB by default). Several different image formats are supported,\
        \ but <strong>PNG</strong> and <strong>JPEG</strong> are preferred due to\
        \ the file size limit. \n\nThis resource has Cross-Site Request Forgery (XSRF)\
        \ protection. To allow the request to pass the XSRF check the caller needs\
        \ to send an <code>X-Atlassian-Token</code> HTTP header with the value <code>no-check</code>.\
        \ \n\nAn example <a href=\"http://curl.haxx.se/\">curl</a> request to upload\
        \ an image name 'avatar.png' would be: ```curl -X POST -u username:password\
        \ -H \"X-Atlassian-Token: no-check\" http://example.com/rest/api/1.0/projects/STASH/avatar.png\
        \ -F avatar=@avatar.png ```\n\nThe authenticated user must have <strong>PROJECT_ADMIN</strong>\
        \ permission for the specified project to call this resource."
      operationId: uploadAvatar
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/ExampleAvatarMultipartFormData"
        description: The mutlipart form data containing the file.
      responses:
        "201":
          content:
            application/json;charset=UTF-8: {}
          description: The avatar was uploaded successfully.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to update the project.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified project does not exist.
      summary: Update project avatar
      tags:
      - Project
  /api/latest/projects/{projectKey}/hook-scripts:
    get:
      deprecated: false
      description: "Return a page of hook scripts configured for the specified project.\
        \ \n\nThis endpoint requires **PROJECT_ADMIN** permission."
      operationId: getConfigurations
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: "Start number for the page (inclusive). If not passed, first\
          \ page is assumed."
        example: 0
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 0
          type: number
        style: form
      - description: "Number of items to return. If not passed, a page size of 25\
          \ is used."
        example: 25
        explode: true
        in: query
        name: limit
        required: false
        schema:
          example: 25
          type: number
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/getConfigurations_200_response"
          description: A page of hook scripts.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to view the specified project.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified project does not exist.
      summary: Get configured hook scripts
      tags:
      - Project
  /api/latest/projects/{projectKey}/hook-scripts/{scriptId}:
    delete:
      deprecated: false
      description: "Removes the hook script from the set of hook scripts configured\
        \ to run in all repositories under the project. \n\nThis endpoint requires\
        \ **PROJECT_ADMIN** permission."
      operationId: removeConfiguration
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The ID of the hook script
        explode: false
        in: path
        name: scriptId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The hook script was successfully deleted.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to view the specified project.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The project key or hook script ID supplied does not exist.
      summary: Remove a hook script
      tags:
      - Project
    put:
      deprecated: false
      description: "Creates/updates the hook script configuration for the provided\
        \ hook script and project. \n\nThis endpoint requires **PROJECT_ADMIN** permission."
      operationId: setConfiguration
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The ID of the hook script
        explode: false
        in: path
        name: scriptId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestHookScriptTriggers"
        description: The hook triggers for which the hook script should be run
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestHookScriptConfig"
          description: The updated hook script.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The hook script was not created/updated due to a validation
            error.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to view the specified project.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The project key supplied does not exist.
      summary: Create/update a hook script
      tags:
      - Project
  /api/latest/projects/{projectKey}/permissions:
    delete:
      deprecated: false
      description: |-
        Revoke all permissions for the specified project for the given groups and users.

        The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project or a higher global permission to call this resource.

        In addition, a user may not revoke a group's permission if their own permission would be revoked as a result, nor may they revoke their own permission unless they have a global permission that already implies that permission.
      operationId: revokePermissions
      parameters:
      - description: The project key
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The names of the users
        explode: true
        in: query
        name: user
        required: false
        schema:
          type: string
        style: form
      - description: The names of the groups
        explode: true
        in: query
        name: group
        required: false
        schema:
          type: string
        style: form
      responses:
        "204":
          description: All project permissions were revoked from the users and groups
            for the specified project.
        "400":
          content:
            application/json;charset=UTF-8: {}
          description: No permissions were revoked because the request was invalid.
            No users or groups were provided.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user is not an administrator for
            the specifiedspecified project.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "The specified project does not exist, or one or more of the\
            \ users or groups provided does not exist."
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The action was disallowed as it would revoke the currently
            authenticated user's permission on the project.
      summary: Revoke project permissions
      tags:
      - Project
  /api/latest/projects/{projectKey}/permissions/groups:
    delete:
      deprecated: false
      description: |2-
         Revoke all permissions for the specified project for a group.

        The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project or a higher global permission to call this resource.

        In addition, a user may not revoke a group's permissions if it will reduce their own permission level.
      operationId: revokePermissionsForGroup_1
      parameters:
      - description: The project key
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The name of the group
        explode: true
        in: query
        name: name
        required: false
        schema:
          type: string
        style: form
      responses:
        "204":
          description: All project permissions were revoked from the group for the
            specified project.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user is not an administrator for
            the specifiedspecified project.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified project does not exist.
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: ' The action was disallowed as it would reduce the currently
            authenticated user''spermission level.'
      summary: Revoke group project permission
      tags:
      - Project
    get:
      deprecated: false
      description: |-
        Retrieve a page of groups that have been granted at least one permission for the specified project.

        The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project or a higher global permission to call this resource.
      operationId: getGroupsWithAnyPermission_1
      parameters:
      - description: If specified only group names containing the supplied string
          will be returned
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: The project key
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: "Start number for the page (inclusive). If not passed, first\
          \ page is assumed."
        example: 0
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 0
          type: number
        style: form
      - description: "Number of items to return. If not passed, a page size of 25\
          \ is used."
        example: 25
        explode: true
        in: query
        name: limit
        required: false
        schema:
          example: 25
          type: number
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/getGroupsWithAnyPermission_200_response"
          description: A page of groups and their highest permissions for the specified
            project.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user is not a project administrator
            for the specified project.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified project does not exist.
      summary: Get groups with permission to project
      tags:
      - Project
    put:
      deprecated: false
      description: |-
        Promote or demote a group's permission level for the specified project.

        The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project or a higher global permission to call this resource. In addition, a user may not demote a group's permission level if theirown permission level would be reduced as a result.
      operationId: setPermissionForGroups_1
      parameters:
      - description: The project key
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The names of the groups
        explode: true
        in: query
        name: name
        required: false
        schema:
          type: string
        style: form
      - description: |+
          The permission to grant.See the [permissions documentation](https://confluence.atlassian.com/display/BitbucketServer/Using+project+permissions)for a detailed explanation of what each permission entails. Available project permissions are:

          - PROJECT_READ
          - PROJECT_WRITE
          - PROJECT_ADMIN


        explode: true
        in: query
        name: permission
        required: false
        schema:
          type: string
        style: form
      responses:
        "204":
          description: The requested permission was granted.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The request was malformed or the specified permission does
            not exist.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user is not an administrator for
            the specifiedspecified project.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The action was disallowed as it would reduce the currently
            authenticated user'spermission level.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified project does not exist.
      summary: Update group project permission
      tags:
      - Project
  /api/latest/projects/{projectKey}/permissions/groups/none:
    get:
      deprecated: false
      description: |-
        Retrieve a page of groups that have no granted permissions for the specified project.

        The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project or a higher
      operationId: getGroupsWithoutAnyPermission_1
      parameters:
      - description: If specified only group names containing the supplied string
          will be returned
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: The project key
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: "Start number for the page (inclusive). If not passed, first\
          \ page is assumed."
        example: 0
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 0
          type: number
        style: form
      - description: "Number of items to return. If not passed, a page size of 25\
          \ is used."
        example: 25
        explode: true
        in: query
        name: limit
        required: false
        schema:
          example: 25
          type: number
        style: form
      responses:
        "202":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/getGroups_1_200_response"
          description: A page of groups that have not been granted any permissions
            for the specifiedproject.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user is not a project administrator
            for thespecified project.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified project does not exist.
      summary: Get groups without project permission
      tags:
      - Project
  /api/latest/projects/{projectKey}/permissions/search:
    get:
      deprecated: false
      description: |-
        Search direct and implied permissions of principals (users and groups). This endpoint returns a superset of the results returned by the /users and /groups endpoints because it allows filtering by global permissions too.

        The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project or a higher global permission to call this resource.
      operationId: searchPermissions
      parameters:
      - description: The project key
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: |+
          Permissions to filter by. See the [permissions documentation](https://confluence.atlassian.com/display/BitbucketServer/Using+project+permissions)for a detailed explanation of what each permission entails. This parameter can be specified multiple times to filter by more than one permission, and can contain global and project permissions.

        explode: true
        in: query
        name: permission
        required: false
        schema:
          type: string
        style: form
      - description: Name of the user or group to filter the name of
        explode: true
        in: query
        name: filterText
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Type of entity (user or group)Valid entity types are:

          - USER- GROUP
        explode: true
        in: query
        name: type
        required: false
        schema:
          type: string
        style: form
      responses:
        default:
          content:
            application/json;charset=UTF-8: {}
          description: default response
      summary: Search project permissions
      tags:
      - Project
  /api/latest/projects/{projectKey}/permissions/users:
    delete:
      deprecated: false
      description: |-
        Revoke all permissions for the specified project for a user.

        The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project or a higher global permission to call this resource.

        In addition, a user may not revoke their own project permissions if they do not have a higher global permission.
      operationId: revokePermissionsForUser_1
      parameters:
      - description: The project key
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The name of the user
        explode: true
        in: query
        name: name
        required: false
        schema:
          type: string
        style: form
      responses:
        "204":
          description: All project permissions were revoked from the user for the
            specified project.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user is not an administrator for
            the specifiedspecified project.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified project does not exist.
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: ' The action was disallowed as it would reduce the currently
            authenticated user''spermission level.'
      summary: Revoke user project permission
      tags:
      - Project
    get:
      deprecated: false
      description: |-
        Retrieve a page of users that have been granted at least one permission for the specified project.

        The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project or a higher global permission to call this resource.
      operationId: getUsersWithAnyPermission_1
      parameters:
      - description: If specified only user names containing the supplied string will
          be returned
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: The project key
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: "Start number for the page (inclusive). If not passed, first\
          \ page is assumed."
        example: 0
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 0
          type: number
        style: form
      - description: "Number of items to return. If not passed, a page size of 25\
          \ is used."
        example: 25
        explode: true
        in: query
        name: limit
        required: false
        schema:
          example: 25
          type: number
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/getUsersWithAnyPermission_1_200_response"
          description: A page of users and their highest permissions for the specified
            project.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user is not a project administrator
            for thespecified project.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified project does not exist.
      summary: Get users with permission to project
      tags:
      - Project
    put:
      deprecated: false
      description: |-
        Promote or demote a user's permission level for the specified project.


        The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project or a higher global permission to call this resource. In addition, a user may not reduce their own permission level unless they have a global permission that already implies that permission.
      operationId: setPermissionForUsers_1
      parameters:
      - description: The project key
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The names of the users
        explode: true
        in: query
        name: name
        required: false
        schema:
          type: string
        style: form
      - description: |+
          The permission to grant.See the [permissions documentation](https://confluence.atlassian.com/display/BitbucketServer/Using+project+permissions)for a detailed explanation of what each permission entails. Available project permissions are:

          - PROJECT_READ
          - PROJECT_WRITE
          - PROJECT_ADMIN


        explode: true
        in: query
        name: permission
        required: false
        schema:
          type: string
        style: form
      responses:
        "204":
          description: The requested permission was granted.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The request was malformed or the specified permission does
            not exist.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user is not an administrator for
            the specifiedspecified project.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The action was disallowed as it would reduce the currently
            authenticated user'spermission level.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified project does not exist.
      summary: Update user project permission
      tags:
      - Project
  /api/latest/projects/{projectKey}/permissions/users/none:
    get:
      deprecated: false
      description: |-
        Retrieve a page of <i>licensed</i> users that have no granted permissions for the specified project.

        The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project or a higher global permission to call this resource.
      operationId: getUsersWithoutPermission
      parameters:
      - description: If specified only user names containing the supplied string will
          be returned
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: The project key
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: "Start number for the page (inclusive). If not passed, first\
          \ page is assumed."
        example: 0
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 0
          type: number
        style: form
      - description: "Number of items to return. If not passed, a page size of 25\
          \ is used."
        example: 25
        explode: true
        in: query
        name: limit
        required: false
        schema:
          example: 25
          type: number
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/getUsersWithoutAnyPermission_200_response"
          description: A page of users that have not been granted any permissions
            for the specified project
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user is not a project administrator
            for thespecified project.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified project does not exist.
      summary: Get users without project permission
      tags:
      - Project
  /api/latest/projects/{projectKey}/permissions/{permission}/all:
    get:
      deprecated: false
      description: |-
        Check whether the specified permission is the default permission (granted to all users) for a project.

        The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project or a higher global permission to call this resource.
      operationId: hasAllUserPermission
      parameters:
      - description: The project key
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: |+
          The permission to grant. Available project permissions are:

          - PROJECT_READ
          - PROJECT_WRITE
          - PROJECT_ADMIN


        explode: false
        in: path
        name: permission
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestPermitted"
          description: A simple entity indicating whether the specified permission
            is the defaultpermission for this project.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The request was malformed or the specified permission does
            not exist.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user is not an administrator for
            the specifiedspecified project.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The action was disallowed as it would reduce the currently
            authenticated user'spermission level.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified project does not exist.
      summary: Check default project permission
      tags:
      - Project
    post:
      deprecated: false
      description: |-
        Grant or revoke a project permission to all users, i.e. set the default permission.


        The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified project or a higher
        global permission to call this resource.
      operationId: modifyAllUserPermission
      parameters:
      - description: "<em>true</em> to grant the specified permission to all users,\
          \ or <em>false</em> to revoke it"
        explode: true
        in: query
        name: allow
        required: false
        schema:
          type: string
        style: form
      - description: The project key
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: |+
          The permission to grant. Available project permissions are:

          - PROJECT_READ
          - PROJECT_WRITE
          - PROJECT_ADMIN


        explode: false
        in: path
        name: permission
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The requested permission was successfully granted or revoked.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The request was malformed or the specified permission does
            not exist.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user is not an administrator for
            the specified project.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified project does not exist.
      summary: Grant project permission
      tags:
      - Project
  /api/latest/projects/{projectKey}/repos:
    get:
      deprecated: false
      description: "Retrieve repositories from the project corresponding to the supplied\
        \ <strong>projectKey</strong>. \n\nThe authenticated user must have <strong>PROJECT_READ</strong>\
        \ permission for the specified project to call this resource."
      operationId: getRepositories
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: "Start number for the page (inclusive). If not passed, first\
          \ page is assumed."
        example: 0
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 0
          type: number
        style: form
      - description: "Number of items to return. If not passed, a page size of 25\
          \ is used."
        example: 25
        explode: true
        in: query
        name: limit
        required: false
        schema:
          example: 25
          type: number
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/getRepositoriesRecentlyAccessed_200_response"
          description: The repositories matching the supplied <strong>projectKey</strong>.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to see the specified project.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified project does not exist.
      summary: Get repositories for project
      tags:
      - Project
    post:
      deprecated: false
      description: "Create a new repository. Requires an existing project in which\
        \ this repository will be created. The only parameters which will be used\
        \ are name and scmId. \n\nThe authenticated user must have <strong>REPO_CREATE</strong>\
        \ permission or higher, for the context project to call this resource."
      operationId: createRepository
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestRepository"
        description: The repository
      responses:
        "201":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestRepository"
          description: The newly created repository.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The repository was not created due to a validation error.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to create a repository.
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: A repository with same name already exists.
      summary: Create repository
      tags:
      - Project
  /api/latest/projects/{projectKey}/repos/{repositorySlug}:
    delete:
      deprecated: false
      description: "Schedule the repository matching the supplied <strong>projectKey</strong>\
        \ and <strong>repositorySlug</strong> to be deleted. \n\nThe authenticated\
        \ user must have sufficient permissions specified by the repository delete\
        \ policy to call this resource. The default permission required is <strong>REPO_ADMIN</strong>\
        \ permission."
      operationId: deleteRepository
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "202":
          content:
            application/json;charset=UTF-8: {}
          description: The repository has been scheduled for deletion.
        "204":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: No repository matching the supplied <strong>projectKey</strong>
            and <strong>repositorySlug</strong> was found.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to delete the repository.
      summary: Delete repository
      tags:
      - Project
    get:
      deprecated: false
      description: "Retrieve the repository matching the supplied <strong>projectKey</strong>\
        \ and <strong>repositorySlug</strong>. \n\nThe authenticated user must have\
        \ <strong>REPO_READ</strong> permission for the specified repository to call\
        \ this resource."
      operationId: getRepository
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestRepository"
          description: The repository which matches the supplied <strong>projectKey</strong>
            and <strong>repositorySlug</strong>.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to see the specified repository.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified repository does not exist.
      summary: Get repository
      tags:
      - Project
    post:
      deprecated: false
      description: "Create a new repository forked from an existing repository. \n\
        \nThe JSON body for this <code>POST</code> is not required to contain <i>any</i>\
        \ properties. Even the name may be omitted. The following properties will\
        \ be used, if provided: \n\n- <code>\"name\":\"Fork name\"</code> - Specifies\
        \ the forked repository's name \n  - Defaults to the name of the origin repository\
        \ if not specified\n- <code>\"defaultBranch\":\"main\"</code> - Specifies\
        \ the forked repository's default branch\n  - Defaults to the origin repository's\
        \ default branch if not specified\n- <code>\"project\":{\"key\":\"TARGET_KEY\"\
        }</code> - Specifies the forked repository's target project by key\n  - Defaults\
        \ to the current user's personal project if not specified\n\n\nThe authenticated\
        \ user must have <strong>REPO_READ</strong> permission for the specified repository\
        \ and <strong>PROJECT_ADMIN</strong> on the target project to call this resource.\
        \ Note that users <i>always</i> have <b>PROJECT_ADMIN</b> permission on their\
        \ personal projects."
      operationId: forkRepository
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestRepository"
        description: The rest fork.
      responses:
        "201":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestRepository"
          description: The newly created fork.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "A validation error prevented the fork from being created.\
            \ Possible validation errors include: The name or slug for the fork collides\
            \ with another repository in the target project; an SCM type was specified\
            \ in the JSON body; a project was specified in the JSON body without a\
            \ \"key\" property."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to create a fork.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "The specified repository does not exist, or, if a target project\
            \ was specified, the target project does not exist."
      summary: Fork repository
      tags:
      - Project
    put:
      deprecated: false
      description: "Update the repository matching the <strong>repositorySlug</strong>\
        \ supplied in the resource path. \n\nThe repository's slug is derived from\
        \ its name. If the name changes the slug may also change. \n\nThis resource\
        \ can be used to change the repository's default branch by specifying a new\
        \ default branch in the request. For example: <code>\"defaultBranch\":\"main\"\
        </code>\n\nThis resource can be used to move the repository to a different\
        \ project by specifying a new project in the request. For example: <code>\"\
        project\":{\"key\":\"NEW_KEY\"}</code>\n\nThe authenticated user must have\
        \ <strong>REPO_ADMIN</strong> permission for the specified repository to call\
        \ this resource."
      operationId: updateRepository
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestRepository"
        description: The updated repository.
      responses:
        "201":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestRepository"
          description: The updated repository.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The repository was not updated due to a validation error.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to update a repository.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: Cannot archive repository because it has open pull requests.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified repository does not exist.
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "A repository with the same name as the target already exists,\
            \ or the repository is archived."
      summary: Update repository
      tags:
      - Project
  /api/latest/projects/{projectKey}/repos/{repositorySlug}/archive:
    get:
      deprecated: false
      description: "Streams an archive of the repository's contents at the requested\
        \ commit. If no `at=` commit is requested, an archive of the default branch\
        \ is streamed.\n\nThe <code>filename=</code> query parameter may be used to\
        \ specify the exact filename to include in the \"Content-Disposition\" header.\
        \ If an explicit filename is not provided, one will be automatically generated\
        \ based on what is being archived. Its format depends on the at= value: \n\
        \n- No <code>at=</code> commit:     &lt;slug&gt;-&lt;default-branch-name&gt;@&lt;commit&gt;.&lt;format&gt;;\
        \     e.g. example-master@43c2f8a0fe8.zip\n- <code>at=</code>sha: &lt;slug&gt;-&lt;at&gt;.&lt;format&gt;;\
        \ e.g.     example-09bcbb00100cfbb5310fb6834a1d5ce6cac253e9.tar.gz\n- <code>at=</code>branchOrTag:\
        \ &lt;slug&gt;-&lt;branchOrTag&gt;@&lt;commit&gt;.&lt;format&gt;;     e.g.\
        \ example-feature@bbb225f16e1.tar \n\n    - If the branch or tag is qualified\
        \ (e.g. refs/heads/master, the short name         (master) will be included\
        \ in the filename\n    - If the branch or tag's <i>short name</i> includes\
        \ slashes (e.g. release/4.6),         they will be converted to hyphens in\
        \ the filename (release-4.5)\n\n\n\n\nArchives may be requested in the following\
        \ formats by adding the <code>format=</code> query parameter: \n\n- zip: A\
        \ zip file using standard compression (Default)\n- tar: An uncompressed tarball\n\
        - tar.gz or tgz: A GZip-compressed tarball\n\n\nThe contents of the archive\
        \ may be filtered by using the <code>path=</code> query parameter to specify\
        \ paths to include. <code>path=</code> may be specified multiple times to\
        \ include multiple paths. \n\nThe <code>prefix=</code> query parameter may\
        \ be used to define a directory (or multiple directories) where the archive's\
        \ contents should be placed. If the prefix does not end with /, one will be\
        \ added automatically. The prefix is <i>always</i> treated as a directory;\
        \ it is not possible to use it to prepend characters to the entries in the\
        \ archive. \n\nArchives of public repositories may be streamed by any authenticated\
        \ or anonymous user. Streaming archives for non-public repositories requires\
        \ an <i>authenticated user</i> with at least <b>REPO_READ</b> permission."
      operationId: getArchive
      parameters:
      - description: Paths to include in the streamed archive; may be repeated to
          include multiple paths
        explode: true
        in: query
        name: path
        required: false
        schema:
          type: string
        style: form
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: A filename to include the "Content-Disposition" header
        explode: true
        in: query
        name: filename
        required: false
        schema:
          type: string
        style: form
      - description: "The commit to stream an archive of; if not supplied, an archive\
          \ of the default branch is streamed"
        explode: true
        in: query
        name: at
        required: false
        schema:
          type: string
        style: form
      - description: "A prefix to apply to all entries in the streamed archive; if\
          \ the supplied prefix does not end with a trailing /, one will be added\
          \ automatically"
        explode: true
        in: query
        name: prefix
        required: false
        schema:
          type: string
        style: form
      - description: "The format to stream the archive in; must be one of: zip, tar,\
          \ tar.gz or tgz"
        explode: true
        in: query
        name: format
        required: false
        schema:
          type: string
        style: form
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/octet-stream: {}
            application/x-tar: {}
          description: "An archive or the requested commit, in zip, tar or gzipped-tar\
            \ format."
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The requested format is not supported.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to view the repository.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The repository does not exist or does not contain the at commit.
      summary: Stream archive of repository
      tags:
      - Repository
  /api/latest/projects/{projectKey}/repos/{repositorySlug}/attachments/{attachmentId}:
    delete:
      deprecated: false
      description: |-
        Delete an attachment.

        The user must be authenticated and have <strong>REPO_ADMIN</strong> permission for the specified repository.
      operationId: deleteAttachment
      parameters:
      - description: The project key
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: the attachment ID
        explode: false
        in: path
        name: attachmentId
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to delete the attachment
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The attachment does not exist
      summary: Delete an attachment
      tags:
      - Repository
    get:
      deprecated: false
      description: |-
        Retrieve the attachment.

        The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository that is associated to the attachment.

        Range requests (see IETF RFC7233) are supported. However only a single range issupported. If multiple ranges are passed the ranges will be ignored and the entire content will be returned in the response.
      operationId: getAttachment
      parameters:
      - description: The project key
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: User-Agent
        required: false
        schema:
          type: string
        style: simple
      - description: the attachment ID
        explode: false
        in: path
        name: attachmentId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: Range
        required: false
        schema:
          type: string
        style: simple
      - description: The repository slug
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json: {}
          description: the attachment
        "206":
          content:
            application/json: {}
          description: the requested range of bytes from the attachment
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: the user is currently not authenticated
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The attachment does not exist
      summary: Get an attachment
      tags:
      - Repository
  /api/latest/projects/{projectKey}/repos/{repositorySlug}/attachments/{attachmentId}/metadata:
    delete:
      deprecated: false
      description: |-
        Delete attachment metadata.

        The user must be authenticated and have <strong>REPO_ADMIN</strong> permission for the specified repository.
      operationId: deleteAttachmentMetadata
      parameters:
      - description: The project key
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: the attachment ID
        explode: false
        in: path
        name: attachmentId
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to delete theattachment metadata
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The attachment or the attachment metadata does not exist
      summary: Delete attachment metadata
      tags:
      - Repository
    get:
      deprecated: false
      description: |-
        Retrieve the attachment metadata.

        The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository that is associated to the attachment that has the attachment metadata.
      operationId: getAttachmentMetadata
      parameters:
      - description: The project key
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: the attachment ID
        explode: false
        in: path
        name: attachmentId
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestAttachmentMetadata"
          description: The attachment metadata
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to retrieve the attachment metadata
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The attachment or the attachment metadata does not exist
      summary: Get attachment metadata
      tags:
      - Repository
    put:
      deprecated: false
      description: |-
        Save attachment metadata.

        The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository that is associated to the attachment that has the attachment metadata.
      operationId: saveAttachmentMetadata
      parameters:
      - description: The project key
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: the attachment ID
        explode: false
        in: path
        name: attachmentId
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              description: any valid JSON content
              type: string
        description: The attachment metadata can be any valid JSON content
      responses:
        "200":
          content:
            application/json;charset=UTF-8: {}
          description: The attachment metadata
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The supplied content is not valid JSON
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to save theattachment metadata
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The repository or the attachment does not exist
      summary: Save attachment metadata
      tags:
      - Repository
  /api/latest/projects/{projectKey}/repos/{repositorySlug}/branches:
    get:
      deprecated: false
      description: "Retrieve the branches matching the supplied <strong>filterText</strong>\
        \ param. \n\nThe authenticated user must have <strong>REPO_READ</strong> permission\
        \ for the specified repository to call this resource."
      operationId: getBranches
      parameters:
      - description: Controls whether exact and prefix matches will be boosted to
          the top
        explode: true
        in: query
        name: boostMatches
        required: false
        schema:
          type: boolean
        style: form
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: context
        required: false
        schema:
          type: string
        style: form
      - description: Ordering of refs either ALPHABETICAL (by name) or MODIFICATION
          (last updated)
        explode: true
        in: query
        name: orderBy
        required: false
        schema:
          enum:
          - ALPHABETICAL
          - MODIFICATION
          type: string
        style: form
      - description: Whether to retrieve plugin-provided metadata about each branch
        explode: true
        in: query
        name: details
        required: false
        schema:
          type: boolean
        style: form
      - description: The text to match on
        explode: true
        in: query
        name: filterText
        required: false
        schema:
          type: string
        style: form
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      - description: Base branch or tag to compare each branch to (for the metadata
          providers that uses that information
        explode: true
        in: query
        name: base
        required: false
        schema:
          type: string
        style: form
      - description: "Start number for the page (inclusive). If not passed, first\
          \ page is assumed."
        example: 0
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 0
          type: number
        style: form
      - description: "Number of items to return. If not passed, a page size of 25\
          \ is used."
        example: 25
        explode: true
        in: query
        name: limit
        required: false
        schema:
          example: 25
          type: number
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/getBranches_200_response"
          description: The branches matching the supplied <strong>filterText</strong>.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to read the repository.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified repository does not exist.
      summary: Find branches
      tags:
      - Repository
    post:
      deprecated: false
      description: "Creates a branch using the information provided in the RestCreateBranchRequest\
        \ request \n\nThe authenticated user must have <strong>REPO_WRITE</strong>\
        \ permission for the context repository to call this resource."
      operationId: createBranchForRepository
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestCreateBranchRequest"
        description: "The request to create a branch containing a <strong>name</strong>,\
          \ <strong>startPoint</strong>, and optionally a <strong>message</strong>"
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestBranch"
          description: The created branch.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to write to the repository.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified repository does not exist.
      summary: Create branch
      tags:
      - Repository
  /api/latest/projects/{projectKey}/repos/{repositorySlug}/branches/default:
    get:
      deprecated: true
      description: "Retrieves the repository's default branch, if it has been created.\
        \ If the repository is empty, 204 No Content will be returned. For non-empty\
        \ repositories, if the configured default branch has not yet been created\
        \ a 404 Not Found will be returned. \n\nThis URL is deprecated. Callers should\
        \ use <code>GET /projects/{key}/repos/{slug}/default-branch</code> instead,\
        \ which allows retrieving the <i>configured</i> default branch even if the\
        \ ref has not been created yet. \n\nThe authenticated user must have <strong>REPO_READ</strong>\
        \ permission for the specified repository to call this resource."
      operationId: getDefaultBranch_1
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestBranch"
          description: The configured default branch for the repository.
        "204":
          description: "The repository is empty, and has no default branch."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to read the repository.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "The specified repository does not exist, or its configured\
            \ default branch does not exist."
      summary: Get default branch
      tags:
      - Deprecated
      - Repository
    put:
      deprecated: true
      description: "Update the default branch of a repository. \n\nThis URL is deprecated.\
        \ Callers should use <code>PUT /projects/{key}/repos/{slug}/default-branch</code>\
        \ instead. \n\nThe authenticated user must have <strong>REPO_ADMIN</strong>\
        \ permission for the specified repository to call this resource."
      operationId: setDefaultBranch_1
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestBranch"
        description: The branch to set as default
      responses:
        "204":
          description: The operation was successful.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to update the repository.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified repository does not exist.
      summary: Update default branch
      tags:
      - Deprecated
      - Repository
  /api/latest/projects/{projectKey}/repos/{repositorySlug}/browse:
    get:
      deprecated: false
      description: "Retrieve a page of content for a file path at a specified revision.\
        \ \n\nResponses from this endpoint vary widely depending on the query parameters.\
        \ The example JSON is for a request that does not use size, type, blame or\
        \ noContent. \n\n1. size will return a response like {\"size\":10000}\n2.\
        \ type will return a response like {\"type\":\"FILE\"}, where possible values\
        \ are    \"DIRECTORY\", \"FILE\" and \"SUBMODULE\"\n3. blame <i>without</i>\
        \ noContent will include blame for the lines of    content returned on the\
        \ page\n4. blame <i>with</i> noContent will omit file contents and only return\
        \    blame for the requested lines\n5. noContent without blame is ignored\
        \ and does nothing\n\n\nThe various parameters are \"processed\" in the above\
        \ order. That means ?size=true&amp;type=truewill return a size response, not\
        \ a type one; the type parameter will be ignored. \n\nThe blame and noContent\
        \ query parameters are handled differently from size and type. For blame and\
        \ noContent, the <i>presence</i> of the parameter implies \"true\" if no value\
        \ is specified; size and and type both require an explicit=true or they're\
        \ treated as \"false\". \n\n- ?blame is the same as ?blame=true\n- ?blame&amp;noContent\
        \ is the same as ?blame=true&amp;noContent=true\n- ?size is the same as ?size=false\n\
        - ?type is the same as ?type=false\n\n\nThe authenticated user must have <strong>REPO_READ</strong>\
        \ permission for the specified repository to call this resource."
      operationId: getContent
      parameters:
      - description: If blame&amp;noContent only the blame is retrieved instead of
          the contents
        explode: true
        in: query
        name: noContent
        required: false
        schema:
          type: string
        style: form
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The commit ID or ref to retrieve the content for
        explode: true
        in: query
        name: at
        required: false
        schema:
          type: string
        style: form
      - description: If true only the size will be returned for the file path instead
          of the contents
        explode: true
        in: query
        name: size
        required: false
        schema:
          type: string
        style: form
      - description: "If present and not equal to 'false', the blame will be returned\
          \ for the file as well"
        explode: true
        in: query
        name: blame
        required: false
        schema:
          type: string
        style: form
      - description: If true only the type will be returned for the file path instead
          of the contents
        explode: true
        in: query
        name: type
        required: false
        schema:
          type: string
        style: form
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8: {}
          description: A page of contents from a file.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The path parameter was not supplied.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to view the repository.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The repository does not exist.
      summary: Get file content at revision
      tags:
      - Repository
  /api/latest/projects/{projectKey}/repos/{repositorySlug}/browse/{path}:
    get:
      deprecated: false
      description: "Retrieve a page of content for a file path at a specified revision.\
        \ \n\nResponses from this endpoint vary widely depending on the query parameters.\
        \ The example JSON is for a request that does not use size, type, blame or\
        \ noContent. \n\n1. size will return a response like {\"size\":10000}\n2.\
        \ type will return a response like {\"type\":\"FILE\"}, where possible values\
        \ are    \"DIRECTORY\", \"FILE\" and \"SUBMODULE\"\n3. blame <i>without</i>\
        \ noContent will include blame for the lines of    content returned on the\
        \ page\n4. blame <i>with</i> noContent will omit file contents and only return\
        \    blame for the requested lines\n5. noContent without blame is ignored\
        \ and does nothing\n\n\nThe various parameters are \"processed\" in the above\
        \ order. That means ?size=true&amp;type=truewill return a size response, not\
        \ a type one; the type parameter will be ignored. \n\nThe blame and noContent\
        \ query parameters are handled differently from size and type. For blame and\
        \ noContent, the <i>presence</i> of the parameter implies \"true\" if no value\
        \ is specified; size and and type both require an explicit=true or they're\
        \ treated as \"false\". \n\n- ?blame is the same as ?blame=true\n- ?blame&amp;noContent\
        \ is the same as ?blame=true&amp;noContent=true\n- ?size is the same as ?size=false\n\
        - ?type is the same as ?type=false\n\n\nThe authenticated user must have <strong>REPO_READ</strong>\
        \ permission for the specified repository to call this resource."
      operationId: getContent_1
      parameters:
      - description: If blame&amp;noContent only the blame is retrieved instead of
          the contents
        explode: true
        in: query
        name: noContent
        required: false
        schema:
          type: string
        style: form
      - description: The file path to retrieve content from
        explode: false
        in: path
        name: path
        required: true
        schema:
          pattern: .*
          type: string
        style: simple
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The commit ID or ref to retrieve the content for
        explode: true
        in: query
        name: at
        required: false
        schema:
          type: string
        style: form
      - description: If true only the size will be returned for the file path instead
          of the contents
        explode: true
        in: query
        name: size
        required: false
        schema:
          type: string
        style: form
      - description: "If present and not equal to 'false', the blame will be returned\
          \ for the file as well"
        explode: true
        in: query
        name: blame
        required: false
        schema:
          type: string
        style: form
      - description: If true only the type will be returned for the file path instead
          of the contents
        explode: true
        in: query
        name: type
        required: false
        schema:
          type: string
        style: form
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8: {}
          description: A page of contents from a file.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The path or until parameters were not supplied.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to view the repository.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The repository does not exist.
      summary: Get file content
      tags:
      - Repository
    put:
      deprecated: false
      description: "Update the content of path, on the given repository and branch.\
        \ \n\nThis resource accepts PUT multipart form data, containing the file in\
        \ a form-field named content. \n\nAn example <a href=\"http://curl.haxx.se/\"\
        >curl</a> request to update 'README.md' would be:\n\n```curl -X PUT -u username:password\
        \ -F content=@README.md  -F 'message=Updated using file-edit REST API' -F\
        \ branch=master -F  sourceCommitId=5636641a50b  http://example.com/rest/api/latest/projects/PROJECT_1/repos/repo_1/browse/README.md\
        \ ```\n\n- branch:  the branch on which the path should be modified or created\n\
        - content: the full content of the file at path \n- message: the message associated\
        \ with this change, to be used as the commit message. Or null if the default\
        \ message should be used.\n- sourceCommitId: the commit ID of the file before\
        \ it was edited, used to identify if content has changed. Or null if this\
        \ is a new file\n\n\nThe file can be updated or created on a new branch. In\
        \ this case, the sourceBranch parameter should be provided to identify the\
        \ starting point for the new branch and the branch parameter identifies the\
        \ branch to create the new commit on."
      operationId: editFile
      parameters:
      - description: The path of the file that is to be modified or created
        explode: false
        in: path
        name: path
        required: true
        schema:
          pattern: .*
          type: string
        style: simple
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/ExampleMultipartFormData"
        description: The multipart form data containing the file
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestCommit"
          description: The newly created commit.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "There are validation errors, e.g. The branch or content parameters\
            \ were not supplied."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user does not have write permission
            for the given repository.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "The request was authenticated using a project or repository\
            \ access token, which does not have a valid user associated with it"
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The repository does not exist.
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "The file already exists when trying to create a file, or the\
            \ given content does not modify the file, or the file has changed since\
            \ the given sourceCommitId, or the repository is archived."
      summary: Edit file
      tags:
      - Repository
  /api/latest/projects/{projectKey}/repos/{repositorySlug}/changes:
    get:
      deprecated: false
      description: "Retrieve a page of changes made in a specified commit. \n\n<strong>Note:</strong>\
        \ The implementation will apply a hard cap ({@code page.max.changes}) and\
        \ it is not possible to request subsequent content when that cap is exceeded.\
        \ \n\nThe authenticated user must have <strong>REPO_READ</strong> permission\
        \ for the specified repository to call this resource."
      operationId: getChanges_1
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The commit to retrieve changes for
        explode: true
        in: query
        name: until
        required: false
        schema:
          type: string
        style: form
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      - description: The commit to which <code>until</code> should be compared to
          produce a page of changes. If not specified the commit's first parent is
          assumed (if one exists)
        explode: true
        in: query
        name: since
        required: false
        schema:
          type: string
        style: form
      - description: "Start number for the page (inclusive). If not passed, first\
          \ page is assumed."
        example: 0
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 0
          type: number
        style: form
      - description: "Number of items to return. If not passed, a page size of 25\
          \ is used."
        example: 25
        explode: true
        in: query
        name: limit
        required: false
        schema:
          example: 25
          type: number
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/getChanges_1_200_response"
          description: A page of changes
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The until parameter was not supplied.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to view the repository.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The repository or the since or until parameters supplied does
            not exist.
      summary: Get changes made in commit
      tags:
      - Repository
  /api/latest/projects/{projectKey}/repos/{repositorySlug}/commits:
    get:
      deprecated: false
      description: "Retrieve a page of commits from a given starting commit or \"\
        between\" two commits. If no explicit commit is specified, the tip of the\
        \ repository's default branch is assumed. commits may be identified by branch\
        \ or tag name or by ID. A path may be supplied to restrict the returned commits\
        \ to only those which affect that path. \n\nThe authenticated user must have\
        \ <b>REPO_READ</b> permission for the specified repository to call this resource."
      operationId: getCommits
      parameters:
      - description: The desired scheme for the avatar URL. If the parameter is not
          present URLs will use the same scheme as this request
        explode: true
        in: query
        name: avatarScheme
        required: false
        schema:
          type: string
        style: form
      - description: An optional path to filter commits by
        explode: true
        in: query
        name: path
        required: false
        schema:
          type: string
        style: form
      - description: The project key
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: Optionally include the total number of commits and total number
          of unique authors
        explode: true
        in: query
        name: withCounts
        required: false
        schema:
          type: string
        style: form
      - description: "If <code>true</code>, the commit history of the specified file\
          \ will be followed past renames. Only valid for a path to a single file."
        explode: true
        in: query
        name: followRenames
        required: false
        schema:
          type: string
        style: form
      - description: The commit ID (SHA1) or ref (inclusively) to retrieve commits
          before
        explode: true
        in: query
        name: until
        required: false
        schema:
          type: string
        style: form
      - description: "If present the service adds avatar URLs for commit authors.\
          \ Should be an integer specifying the desired size in pixels. If the parameter\
          \ is not present, avatar URLs will not be set"
        explode: true
        in: query
        name: avatarSize
        required: false
        schema:
          type: string
        style: form
      - description: The repository slug
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      - description: The commit ID or ref (exclusively) to retrieve commits after
        explode: true
        in: query
        name: since
        required: false
        schema:
          type: string
        style: form
      - description: "If present, controls how merge commits should be filtered. Can\
          \ be either <code>exclude</code>, to exclude merge commits, <code>include</code>,\
          \ to include both merge commits and non-merge commits or <code>only</code>,\
          \ to only return merge commits."
        explode: true
        in: query
        name: merges
        required: false
        schema:
          type: string
        style: form
      - description: "<code>true</code> to ignore missing commits, <code>false</code>\
          \ otherwise"
        explode: true
        in: query
        name: ignoreMissing
        required: false
        schema:
          type: string
        style: form
      - description: "Start number for the page (inclusive). If not passed, first\
          \ page is assumed."
        example: 0
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 0
          type: number
        style: form
      - description: "Number of items to return. If not passed, a page size of 25\
          \ is used."
        example: 25
        explode: true
        in: query
        name: limit
        required: false
        schema:
          example: 25
          type: number
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/getCommits_200_response"
          description: A page of commits
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: One of the supplied commit IDs or refs was invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to view the repository.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The repository does not exist.
      summary: Get commits
      tags:
      - Repository
  /api/latest/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}:
    get:
      deprecated: false
      description: |-
        Retrieve a single commit <i>identified by its ID</i>. In general, that ID is a SHA1. <u>From 2.11, ref names like "refs/heads/master" are no longer accepted by this resource.</u>

        The authenticated user must have <strong>REPO_READ</strong> permission for the specified repository to call this resource.
      operationId: getCommit
      parameters:
      - description: "An optional path to filter the commit by. If supplied the details\
          \ returned <i>may not</i> be for the specified commit. Instead, starting\
          \ from the specified commit, they will be the details for the first commit\
          \ affecting the specified path."
        explode: true
        in: query
        name: path
        required: false
        schema:
          type: string
        style: form
      - description: The project key
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The commit ID to retrieve
        explode: false
        in: path
        name: commitId
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestCommit"
          description: A commit
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The supplied commit ID was invalid
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The repository does not exist.
      summary: Get commit by ID
      tags:
      - Repository
  /api/latest/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}/builds:
    delete:
      deprecated: false
      description: "Delete a specific build status. \n\nThe authenticated user must\
        \ have **REPO_ADMIN** permission for the provided repository."
      operationId: delete
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The commit.
        explode: false
        in: path
        name: commitId
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      - description: the key of the build status
        explode: true
        in: query
        name: key
        required: true
        schema:
          type: string
        style: form
      responses:
        "204":
          description: The build status associated with the provided commit and key
            has been deleted
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The request has failed validation
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            this repository
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified repository does not exist
      summary: Delete a specific build status
      tags:
      - Builds and Deployments
    get:
      deprecated: false
      description: |-
        Get a specific build status.


        The authenticated user must have **REPO_READ** permission for the provided repository.The request can also be made with anonymous 2-legged OAuth.<br>Since 7.14
      operationId: get
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The commit.
        explode: false
        in: path
        name: commitId
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      - description: the key of the build status
        explode: true
        in: query
        name: key
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestBuildStatus"
          description: The build status associated with the provided commit and key
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The request has failed validation
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            this repository
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "The specified repository, commit or build status does not\
            \ exist"
      summary: Get a specific build status
      tags:
      - Builds and Deployments
    post:
      deprecated: false
      description: |-
        Store a build status.


        The authenticated user must have **REPO_READ** permission for the repository that this build status is for. The request can also be made with anonymous 2-legged OAuth.
      operationId: add
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The commit.
        explode: false
        in: path
        name: commitId
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          '*/*':
            schema:
              $ref: "#/components/schemas/RestBuildStatusSetRequest"
        description: |
          The contents of the build status request are:
          These fields are **required**:


          - **key**: The string referring to this branch plan/job
          - **state**: The build status state, one of: "SUCCESSFUL", "FAILED", "INPROGRESS", "CANCELLED", "UNKNOWN"
          - **url**: URL referring to the build result page in the CI tool.


          These fields are optional:


          - **buildNumber** (optional): A unique identifier for this particular run of a plan<
          - **dateAdded** (optional): milliseconds since epoch. If not provided current date is used.
          - **description** (optional): Describes the build result
          - **duration** (optional): Duration of a completed build in milliseconds.
          - **name** (optional): A short string that describes the build plan
          - **parent** (optional): The identifier for the plan or job that ran the branch plan that produced this build status.
          - **ref** (optional): The fully qualified git reference e.g. refs/heads/master.
          - **testResults** (optional): A summary of the passed, failed and skipped tests.
      responses:
        "204":
          description: The build status was posted
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: |-
            The build status was not added as the request was invalid. This could be because of a number of things:


            - an invalid commit hash was provided
            - build key was blank or longer than 255 characters
            - invalid branch was provided
            - invalid state was provided
            - build status url was blank or longer than 450 characters

            The specifics will be included in the error message.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to push a build status to this repository
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified repository does not exist
      summary: Store a build status
      tags:
      - Builds and Deployments
  /api/latest/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}/changes:
    get:
      deprecated: false
      description: "Retrieve a page of changes made in a specified commit. \n\n <strong>Note:</strong>\
        \ The implementation will apply a hard cap (<code>page.max.changes</code>)\
        \ and it is not possible to request subsequent content when that cap is exceeded.\
        \ \n\n The authenticated user must have <strong>REPO_READ</strong> permission\
        \ for the specified repository to call this resource."
      operationId: getChanges
      parameters:
      - description: The project key
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The commit to retrieve changes for
        explode: false
        in: path
        name: commitId
        required: true
        schema:
          type: string
        style: simple
      - description: "<code>true</code> to apply comment counts in the changes (the\
          \ default); otherwise, <code>false</code> to stream changes without comment\
          \ counts"
        explode: true
        in: query
        name: withComments
        required: false
        schema:
          type: string
        style: form
      - description: The repository slug
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      - description: The commit to which <code>until</code> should be compared to
          produce a page of changes. If not specified the commit's first parent is
          assumed (if one exists)
        explode: true
        in: query
        name: since
        required: false
        schema:
          type: string
        style: form
      - description: "Start number for the page (inclusive). If not passed, first\
          \ page is assumed."
        example: 0
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 0
          type: number
        style: form
      - description: "Number of items to return. If not passed, a page size of 25\
          \ is used."
        example: 25
        explode: true
        in: query
        name: limit
        required: false
        schema:
          example: 25
          type: number
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/getChanges_1_200_response"
          description: A page of changes
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The until parameter was not supplied
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to view the repository.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The repository or the since or until parameters supplied does
            not exist.
      summary: Get changes in commit
      tags:
      - Repository
  /api/latest/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}/comments:
    get:
      deprecated: false
      description: |-
        Retrieves the commit discussion comments that match the specified search criteria.

        It is possible to retrieve commit discussion comments that are anchored to a range of commits by providing the sinceId that the comments anchored from.

        The authenticated user must have <strong>REPO_READ</strong> permission for the repository that the commit is in to call this resource.
      operationId: getComments
      parameters:
      - description: The path to the file on which comments were made
        explode: true
        in: query
        name: path
        required: false
        schema:
          type: string
        style: form
      - description: The project key
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The <i>full ID</i> of the commit within the repository
        explode: false
        in: path
        name: commitId
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      - description: "For a merge commit, a parent can be provided to specify which\
          \ diff the comments are on. For a commit range, a sinceId can be provided\
          \ to specify where the comments are anchored from."
        explode: true
        in: query
        name: since
        required: false
        schema:
          type: string
        style: form
      - description: "Start number for the page (inclusive). If not passed, first\
          \ page is assumed."
        example: 0
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 0
          type: number
        style: form
      - description: "Number of items to return. If not passed, a page size of 25\
          \ is used."
        example: 25
        explode: true
        in: query
        name: limit
        required: false
        schema:
          example: 25
          type: number
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/getComments_200_response"
          description: A page of comments that match the search criteria
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The request was malformed.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to view the comment
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "Unable to find the supplied project, repository, or commit.\
            \ The missing entity will be specified in the error details."
      summary: Search for commit comments
      tags:
      - Repository
    post:
      deprecated: false
      description: |-
        Add a new comment.

        Comments can be added in a few places by setting different attributes:

        General commit comment:

        ```{
              "text": "An insightful general comment on a commit."
        }

        </pre>
        Reply to a comment:
        <pre>{
              "text": "A measured reply.",
              "parent": {
                  "id": 1
              }
        }
        </pre>
        General file comment:
        <pre>{
              "text": "An insightful general comment on a file.",
              "anchor": {
                  "diffType": "COMMIT",
                  "fromHash": "6df3858eeb9a53a911cd17e66a9174d44ffb02cd",
                  "path": "path/to/file",
                  "srcPath": "path/to/file",
                  "toHash": "04c7c5c931b9418ca7b66f51fe934d0bd9b2ba4b"
              }
        }
        </pre>
        File line comment:
        <pre>{
              "text": "A pithy comment on a particular line within a file.",
              "anchor": {
                  "diffType": "COMMIT",
                  "line": 1,
                  "lineType": "CONTEXT",
                  "fileType": "FROM",
                  "fromHash": "6df3858eeb9a53a911cd17e66a9174d44ffb02cd",
                  "path": "path/to/file",
                  "srcPath": "path/to/file",
                  "toHash": "04c7c5c931b9418ca7b66f51fe934d0bd9b2ba4b"
              }
        }
        ```

        Note: general file comments are an experimental feature and may change in the near future!

        For file and line comments, 'path' refers to the path of the file to which the comment should be applied and 'srcPath' refers to the path the that file used to have (only required for copies and moves). Also, fromHash and toHash refer to the sinceId / untilId (respectively) used to produce the diff on which the comment was added. fromHash will be resolved automatically as first parent if not specified. Note that this behaviour differs from `/pull-requests/comments`

        Finally diffType refers to the type of diff the comment was added on.

        For line comments, 'line' refers to the line in the diff that the comment should apply to. 'lineType' refers to the type of diff hunk, which can be:- 'ADDED' - for an added line;</li>- 'REMOVED' - for a removed line; or</li>- 'CONTEXT' - for a line that was unmodified but is in the vicinity of the diff.</li>'fileType' refers to the file of the diff to which the anchor should be attached - which is of relevance when displaying the diff in a side-by-side way. Currently the supported values are:- 'FROM' - the source file of the diff</li>- 'TO' - the destination file of the diff</li>If the current user is not a participant the user is added as one and updated to watch the commit.

        The authenticated user must have REPO_READ permission for the repository that the commit is in to call this resource.
      operationId: createComment
      parameters:
      - description: The project key
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The <i>full ID</i> of the commit within the repository
        explode: false
        in: path
        name: commitId
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      - description: "For a merge commit, a parent can be provided to specify which\
          \ diff the comments should be on. For a commit range, a sinceId can be provided\
          \ to specify where the comments should be anchored from."
        explode: true
        in: query
        name: since
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestComment"
        description: the comment
      responses:
        "201":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestComment"
          description: The newly created comment.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The comment was not created due to a validation error.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "The currently authenticated user has insufficient permissions\
            \ to view the commit, create a comment or watch the commit."
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "Unable to find the supplied project, repository, commit or\
            \ parent comment. The missing entity will be specified in the error details."
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "Adding, deleting, or editing comments isn't supported on archived\
            \ repositories."
      summary: Add a new commit comment
      tags:
      - Repository
  /api/latest/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}/comments/{commentId}:
    delete:
      deprecated: false
      description: |-
        Delete a commit comment. Anyone can delete their own comment. Only users with <strong>REPO_ADMIN</strong> and above may delete comments created by other users. Comments which have replies <i>may not be deleted</i>, regardless of the user's granted permissions.

        The authenticated user must have <strong>REPO_READ</strong> permission for the repository that the commit is in to call this resource.
      operationId: deleteComment
      parameters:
      - description: The project key
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: the comment
        explode: false
        in: path
        name: commentId
        required: true
        schema:
          type: string
        style: simple
      - description: The <i>full ID</i> of the commit within the repository
        explode: false
        in: path
        name: commitId
        required: true
        schema:
          type: string
        style: simple
      - description: "The expected version of the comment. This must match the server's\
          \ version of the comment or the delete will fail. To determine the current\
          \ version of the comment, the comment should be fetched from the server\
          \ prior to the delete. Look for the 'version' attribute in the returned\
          \ JSON structure."
        explode: true
        in: query
        name: version
        required: false
        schema:
          type: string
        style: form
      - description: The repository slug
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The operation was successful
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to delete the comment.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "Unable to find the supplied project, repository or commit.\
            \ The missing entity will be specified in the error details."
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "The comment has replies, the version supplied does not match\
            \ the comment's current version or the repository is archived."
      summary: Delete a commit comment
      tags:
      - Repository
    get:
      deprecated: false
      description: |-
        Retrieves a commit discussion comment.

        The authenticated user must have <strong>REPO_READ</strong> permission for the repository that the commit is in to call this resource.
      operationId: getComment
      parameters:
      - description: The project key
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The ID of the comment to retrieve
        explode: false
        in: path
        name: commentId
        required: true
        schema:
          type: string
        style: simple
      - description: The <i>full ID</i> of the commit within the repository
        explode: false
        in: path
        name: commitId
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestComment"
          description: The requested comment.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to view the comment
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "Unable to find the supplied project, repository, commit or\
            \ comment. The missing entity will be specified in the error details."
      summary: Get a commit comment
      tags:
      - Repository
    put:
      deprecated: false
      description: |-
        Update a comment, with the following restrictions:

        - only the author of the comment may update the <i>text</i> of the comment
        - only the author of the comment or repository admins and above may update the other   fields of a comment


        <strong>Note:</strong> the supplied supplied JSON object must contain a <code>version</code> that must match the server's version of the comment or the update will fail. To determine the current version of the comment, the comment should be fetched from the server prior to the update. Look for the 'version' attribute in the returned JSON structure.

        The authenticated user must have <strong>REPO_READ</strong> permission for the repository that the commit is in to call this resource.
      operationId: updateComment
      parameters:
      - description: The project key
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The ID of the comment to retrieve
        explode: false
        in: path
        name: commentId
        required: true
        schema:
          type: string
        style: simple
      - description: The <i>full ID</i> of the commit within the repository
        explode: false
        in: path
        name: commitId
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestComment"
        description: The comment to update
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestComment"
          description: The newly updated comment.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The comment was not updated due to a validation error.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "The currently authenticated user has insufficient permissions\
            \ to view the commit, update the comment or watch the commit."
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "Unable to find the supplied project, repository, commit or\
            \ comment. The missing entity will be specified in the error details."
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The comment version supplied does not match the current version
            or the repository is archived.
      summary: Update a commit comment
      tags:
      - Repository
  /api/latest/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}/deployments:
    delete:
      deprecated: false
      description: "Delete the deployment matching the specified Repository, key,\
        \ environmentKey and deploymentSequenceNumber. \n\nThe user must have REPO_ADMIN."
      operationId: delete_1
      parameters:
      - description: The project key
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: "the sequence number of the deployment, as detailed by the query\
          \ parameter"
        explode: true
        in: query
        name: deploymentSequenceNumber
        required: false
        schema:
          type: string
        style: form
      - description: the commitId that was deployed as indicated by the path
        explode: false
        in: path
        name: commitId
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      - description: "the key of the deployment, as detailed by the query parameter"
        explode: true
        in: query
        name: key
        required: false
        schema:
          type: string
        style: form
      - description: "the key of the environment, as detailed by the query parameter"
        explode: true
        in: query
        name: environmentKey
        required: false
        schema:
          type: string
        style: form
      responses:
        "204":
          description: the request has been processed
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: the deployment was not deleted because the request was invalid
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to delete a deployment
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified repository does not exist
      summary: Delete a deployment
      tags:
      - Builds and Deployments
    get:
      deprecated: false
      description: "Get the deployment matching the specified Repository, key, environmentKey\
        \ and deploymentSequenceNumber. \n\nThe user must have REPO_READ."
      operationId: get_1
      parameters:
      - description: The project key
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: "the sequence number of the deployment, as detailed by the query\
          \ param"
        example: deploymentSequenceNumber
        explode: true
        in: query
        name: deploymentSequenceNumber
        required: false
        schema:
          type: string
        style: form
      - description: the commitId that was deployed as indicated by the query parameter
        explode: false
        in: path
        name: commitId
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      - description: "the key of the deployment, as detailed by the query parameter"
        explode: true
        in: query
        name: key
        required: false
        schema:
          type: string
        style: form
      - description: "the key of the environment, as detailed by the query parameter"
        explode: true
        in: query
        name: environmentKey
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestDeployment"
          description: The deployment
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: could not get the deployment because the request was invalid
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to view the repository
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified repository or deployment does not exist
      summary: Get a deployment
      tags:
      - Builds and Deployments
    post:
      deprecated: false
      description: "Create or update a deployment. \n\n The authenticated user must\
        \ have REPO_READ permission for the repository."
      operationId: createOrUpdateDeployment
      parameters:
      - description: The project key
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: the commitId that was deployed as indicated by the path
        explode: false
        in: path
        name: commitId
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          '*/*':
            schema:
              $ref: "#/components/schemas/RestDeploymentSetRequest"
        description: "the details of the deployment to create, as detailed by the\
          \ request body"
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestDeployment"
          description: The deployment was created
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: the deployment was not created because the request was invalid
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to view the repository
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified repository does not exist
      summary: Create or update a deployment
      tags:
      - Builds and Deployments
  /api/latest/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}/diff-stats-summary/{path}:
    get:
      deprecated: false
      description: "Retrieve the diff stats summary for a commit.\n\nThe stats summary\
        \ include the total number of modified files, added lines, and deleted lines.\
        \ \n\nThe authenticated user must have <strong>REPO_READ</strong> permission\
        \ for the specified repository to call this resource."
      operationId: getDiffStatsSummary
      parameters:
      - description: The path to the file which should be diffed (optional)
        explode: false
        in: path
        name: path
        required: true
        schema:
          pattern: .*
          type: string
        style: simple
      - description: The project key
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: "The source path for the file, if it was copied, moved or renamed"
        explode: true
        in: query
        name: srcPath
        required: false
        schema:
          type: string
        style: form
      - description: "<code>true</code> to automatically try to find the source path\
          \ when it's not provided, <code>false</code> otherwise. Requires the path\
          \ to be provided."
        explode: true
        in: query
        name: autoSrcPath
        required: false
        schema:
          type: string
        style: form
      - description: The commit ID to diff to.
        explode: false
        in: path
        name: commitId
        required: true
        schema:
          type: string
        style: simple
      - description: Optional whitespace flag which can be set to ignore-all
        explode: true
        in: query
        name: whitespace
        required: false
        schema:
          type: string
        style: form
      - description: The repository slug
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      - description: The base revision to diff from. If omitted the parent revision
          of the commit ID is used
        explode: true
        in: query
        name: since
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestDiffStatsSummary"
          description: The diff stats summary for a commit.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The until parameter was not supplied.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to view the repository.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The repository does not exist.
      summary: Get diff stats summary between revisions
      tags:
      - Repository
  /api/latest/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}/diff/{path}:
    get:
      deprecated: false
      description: "Retrieve the diff between two provided revisions.\n\nTo stream\
        \ a raw text representation of the diff, this endpoint can be called with\
        \ the request header 'Accept: text/plain'. \n\nNote:</strong> This resource\
        \ is currently <i>not paged</i>. The server will internally apply a hard cap\
        \ to the streamed lines, and it is not possible to request subsequent pages\
        \ if that cap is exceeded. In the event that the cap is reached, the diff\
        \ will be cut short and one or more {@code truncated} flags will be set to\
        \ true on the \"segments\", \"hunks\" and \"diffs\" properties, as well as\
        \ the top-level object, in the returned JSON response.\n\nThe authenticated\
        \ user must have <strong>REPO_READ</strong> permission for the specified repository\
        \ to call this resource."
      operationId: streamDiff
      parameters:
      - description: "The source path for the file, if it was copied, moved or renamed"
        explode: true
        in: query
        name: srcPath
        required: false
        schema:
          type: string
        style: form
      - description: The <i>full ID</i> of the commit within the repository
        explode: false
        in: path
        name: commitId
        required: true
        schema:
          type: string
        style: simple
      - description: If present the service adds avatar URLs for comment authors where
          the provided value specifies the desired avatar size in pixels. Not applicable
          if streaming raw diff
        explode: true
        in: query
        name: avatarSize
        required: false
        schema:
          type: string
        style: form
      - description: The repository slug
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      - description: Text used to filter files and lines (optional). Not applicable
          if streaming raw diff
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: The security scheme for avatar URLs. If the scheme is not present
          then it is inherited from the request. It can be set to "https" to force
          the use of secure URLs. Not applicable if streaming raw diff
        explode: true
        in: query
        name: avatarScheme
        required: false
        schema:
          type: string
        style: form
      - description: The path to the file which should be diffed (optional)
        explode: false
        in: path
        name: path
        required: true
        schema:
          pattern: .*
          type: string
        style: simple
      - description: The project key
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The number of context lines to include around added/removed lines
          in the diff.Not applicable if streaming raw diff
        explode: true
        in: query
        name: contextLines
        required: false
        schema:
          type: string
        style: form
      - description: "<code>true</code> to automatically try to find the source path\
          \ when it's not provided, <code>false</code> otherwise. Requires the path\
          \ to be provided."
        explode: true
        in: query
        name: autoSrcPath
        required: false
        schema:
          type: string
        style: form
      - description: Optional whitespace flag which can be set to ignore-all
        explode: true
        in: query
        name: whitespace
        required: false
        schema:
          type: string
        style: form
      - description: <code>true</code> to embed comments in the diff (the default);
          otherwise <code>false</code> to stream the diff without comments. Not applicable
          if streaming raw diff
        explode: true
        in: query
        name: withComments
        required: false
        schema:
          type: string
        style: form
      - description: The base revision to diff from. If omitted the parent revision
          of the until revision is used
        explode: true
        in: query
        name: since
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestDiff"
          description: A diff between two revisions.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The until parameter was not supplied.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to view the repository.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The repository does not exist.
      summary: Get diff between revisions
      tags:
      - Repository
  /api/latest/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}/merge-base:
    get:
      deprecated: false
      description: |-
        Returns the best common ancestor between two commits.

        If more than one best common ancestor exists, only one will be returned. It is unspecified which will be returned.
      operationId: getMergeBase
      parameters:
      - description: The project key
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The <i>full ID</i> of the commit within the repository
        explode: false
        in: path
        name: commitId
        required: true
        schema:
          type: string
        style: simple
      - description: The other commit id to calculate the merge-base on
        explode: true
        in: query
        name: otherCommitId
        required: false
        schema:
          type: string
        style: form
      - description: The repository slug
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestCommit"
          description: The common ancestor of the two given commits
        "204":
          description: No common parent between the two commits exist
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The supplied commit ID(s) was/were invalid
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "The project, repository, or commit(s) does not exist"
      summary: Get the common ancestor between two commits
      tags:
      - Repository
  /api/latest/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}/pull-requests:
    get:
      deprecated: false
      description: |-
        Retrieve a page of pull requests in the current repository that contain the given commit.

        The user must be authenticated and have access to the specified repository to call this resource.
      operationId: getPullRequests
      parameters:
      - description: The project key
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: the commit ID
        explode: false
        in: path
        name: commitId
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      - description: "Start number for the page (inclusive). If not passed, first\
          \ page is assumed."
        example: 0
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 0
          type: number
        style: form
      - description: "Number of items to return. If not passed, a page size of 25\
          \ is used."
        example: 25
        explode: true
        in: query
        name: limit
        required: false
        schema:
          example: 25
          type: number
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/getPullRequests_1_200_response"
          description: Return a page of pull requests in the current repository containing
            the given commit.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to see the request repository.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The request repository does not exist
      summary: Get repository pull requests containing commit
      tags:
      - Pull Requests
  /api/latest/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}/watch:
    delete:
      deprecated: false
      description: |-
        Remove the authenticated user as a watcher for the specified commit.

        The authenticated user must have <strong>REPO_READ</strong> permission for the repository containing the commit to call this resource.
      operationId: unwatch
      parameters:
      - description: The project key
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The <i>full ID</i> of the commit within the repository
        explode: false
        in: path
        name: commitId
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The user is no longer watching the commit.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to view the pull request.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "The specified project, repository or commit does not exist."
      summary: Stop watching commit
      tags:
      - Repository
    post:
      deprecated: false
      description: |-
        Add the authenticated user as a watcher for the specified commit.

        The authenticated user must have <strong>REPO_READ</strong> permission for the repository containing the commit to call this resource.
      operationId: watch
      parameters:
      - description: The project key
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The <i>full ID</i> of the commit within the repository
        explode: false
        in: path
        name: commitId
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The user is now watching the commit.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to view the pull request
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "The specified project, repository or commit does not exist."
      summary: Watch commit
      tags:
      - Repository
  /api/latest/projects/{projectKey}/repos/{repositorySlug}/compare/changes:
    get:
      deprecated: false
      description: |-
        Gets the file changes available in the <code> from</code> commit but not in the <code> to</code> commit.


        If either the <code> from</code> or <code> to</code> commit are not specified, they will be replaced by the default branch of their containing repository.
      operationId: streamChanges
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: "an optional parameter specifying the source repository containing\
          \ the source commit if that commit is not present in the current repository;\
          \ the repository can be specified by either its ID <em>fromRepo=42</em>\
          \ or by its project key plus its repo slug separated by a slash: <em>fromRepo=projectKey/repoSlug</em>"
        explode: true
        in: query
        name: fromRepo
        required: false
        schema:
          type: string
        style: form
      - description: the source commit (can be a partial/full commit ID or qualified/unqualified
          ref name)
        explode: true
        in: query
        name: from
        required: false
        schema:
          type: string
        style: form
      - description: the target commit (can be a partial/full commit ID or qualified/unqualified
          ref name)
        explode: true
        in: query
        name: to
        required: false
        schema:
          type: string
        style: form
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      - description: "Start number for the page (inclusive). If not passed, first\
          \ page is assumed."
        example: 0
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 0
          type: number
        style: form
      - description: "Number of items to return. If not passed, a page size of 25\
          \ is used."
        example: 25
        explode: true
        in: query
        name: limit
        required: false
        schema:
          example: 25
          type: number
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/getChanges_1_200_response"
          description: A page of changes.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "The source repository,target repository, or commit does not\
            \ exist."
      summary: Compare commits
      tags:
      - Repository
  /api/latest/projects/{projectKey}/repos/{repositorySlug}/compare/commits:
    get:
      deprecated: false
      description: |-
        Gets the commits accessible from the <code>from</code> commit but not in the <code>to</code> commit.

        If either the <code>from</code> or <code>to</code> commit are not specified, they will be replaced by the default branch of their containing repository.
      operationId: streamCommits
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: "an optional parameter specifying the source repository containing\
          \ the source commit if that commit is not present in the current repository;\
          \ the repository can be specified by either its ID <em>fromRepo=42</em>\
          \ or by its project key plus its repo slug separated by a slash: <em>fromRepo=projectKey/repoSlug</em>"
        explode: true
        in: query
        name: fromRepo
        required: false
        schema:
          type: string
        style: form
      - description: the source commit (can be a partial/full commit ID or qualified/unqualified
          ref name)
        explode: true
        in: query
        name: from
        required: false
        schema:
          type: string
        style: form
      - description: the target commit (can be a partial/full commit ID or qualified/unqualified
          ref name)
        explode: true
        in: query
        name: to
        required: false
        schema:
          type: string
        style: form
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      - description: "Start number for the page (inclusive). If not passed, first\
          \ page is assumed."
        example: 0
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 0
          type: number
        style: form
      - description: "Number of items to return. If not passed, a page size of 25\
          \ is used."
        example: 25
        explode: true
        in: query
        name: limit
        required: false
        schema:
          example: 25
          type: number
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/getCommits_200_response"
          description: A page of commits.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "The source repository,target repository, or commit does not\
            \ exist."
      summary: Get accessible commits
      tags:
      - Repository
  /api/latest/projects/{projectKey}/repos/{repositorySlug}/compare/diff-stats-summary{path}:
    get:
      deprecated: false
      description: |-
        Retrieve the diff stats summary of the changes available in the <code>from</code> commit but not in the <code> to</code> commit.

        If either the <code> from</code> or <code> to</code> commit are not specified, they will be replaced by the default branch of their containing repository.
      operationId: getDiffStatsSummary_1
      parameters:
      - description: the path to the file to diff (optional)
        explode: false
        in: path
        name: path
        required: true
        schema:
          pattern: .*
          type: string
        style: simple
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: "an optional parameter specifying the source repository containing\
          \ the source commit if that commit is not present in the current repository;\
          \ the repository can be specified by either its ID <em>fromRepo=42</em>\
          \ or by its project key plus its repo slug separated by a slash: <em>fromRepo=projectKey/repoSlug</em>"
        explode: true
        in: query
        name: fromRepo
        required: false
        schema:
          type: string
        style: form
      - description: source path
        explode: true
        in: query
        name: srcPath
        required: false
        schema:
          type: string
        style: form
      - description: the source commit (can be a partial/full commit ID or qualified/unqualified
          ref name)
        explode: true
        in: query
        name: from
        required: false
        schema:
          type: string
        style: form
      - description: the target commit (can be a partial/full commit ID or qualified/unqualified
          ref name)
        explode: true
        in: query
        name: to
        required: false
        schema:
          type: string
        style: form
      - description: an optional whitespace flag which can be set to <code>ignore-all</code>
        explode: true
        in: query
        name: whitespace
        required: false
        schema:
          type: string
        style: form
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestDiff"
          description: The diff stats summary for the changes.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to view the repository.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "The source repository,target repository, or commit does not\
            \ exist."
      summary: Retrieve the diff stats summary between commits
      tags:
      - Repository
  /api/latest/projects/{projectKey}/repos/{repositorySlug}/compare/diff{path}:
    get:
      deprecated: false
      description: |-
        Gets a diff of the changes available in the <code>from</code> commit but not in the <code> to</code> commit.

        If either the <code> from</code> or <code> to</code> commit are not specified, they will be replaced by the default branch of their containing repository.
      operationId: streamDiff_1
      parameters:
      - description: the path to the file to diff (optional)
        explode: false
        in: path
        name: path
        required: true
        schema:
          pattern: .*
          type: string
        style: simple
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: an optional number of context lines to include around each added
          or removed lines in the diff
        explode: true
        in: query
        name: contextLines
        required: false
        schema:
          type: string
        style: form
      - description: "an optional parameter specifying the source repository containing\
          \ the source commit if that commit is not present in the current repository;\
          \ the repository can be specified by either its ID <em>fromRepo=42</em>\
          \ or by its project key plus its repo slug separated by a slash: <em>fromRepo=projectKey/repoSlug</em>"
        explode: true
        in: query
        name: fromRepo
        required: false
        schema:
          type: string
        style: form
      - description: source path
        explode: true
        in: query
        name: srcPath
        required: false
        schema:
          type: string
        style: form
      - description: the source commit (can be a partial/full commit ID or qualified/unqualified
          ref name)
        explode: true
        in: query
        name: from
        required: false
        schema:
          type: string
        style: form
      - description: the target commit (can be a partial/full commit ID or qualified/unqualified
          ref name)
        explode: true
        in: query
        name: to
        required: false
        schema:
          type: string
        style: form
      - description: an optional whitespace flag which can be set to <code>ignore-all</code>
        explode: true
        in: query
        name: whitespace
        required: false
        schema:
          type: string
        style: form
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestDiff"
          description: The diff of the changes.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "The source repository,target repository, or commit does not\
            \ exist."
      summary: Get diff between commits
      tags:
      - Repository
  /api/latest/projects/{projectKey}/repos/{repositorySlug}/contributing:
    get:
      deprecated: false
      description: "Retrieves the contributing guidelines for the repository, if they've\
        \ been defined. \n\nThis checks the repository for a CONTRIBUTING file, optionally\
        \ with an md or txt extension, and, if found, streams it. By default, the\
        \ <i>raw content</i> of the file is streamed. Appending <code>?markup</code>\
        \ to the URL will stream an HTML-rendered version instead. \n\nThe authenticated\
        \ user must have <strong>REPO_READ</strong> permission for the specified repository\
        \ to call this resource."
      operationId: streamContributing
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: "A specific commit or ref to retrieve the guidelines at, or the\
          \ default branch if not specified"
        explode: true
        in: query
        name: at
        required: false
        schema:
          type: string
        style: form
      - description: "If present or <code>\"true\"</code>, triggers the raw content\
          \ to be markup-rendered and returned as HTML; otherwise, if not specified,\
          \ or any value other than <code>\"true\"</code>, the content is streamed\
          \ without markup"
        explode: true
        in: query
        name: markup
        required: false
        schema:
          type: string
        style: form
      - description: "(Optional) true if HTML should be escaped in the input markup,\
          \ false otherwise. If not specified, the value of the <code>markup.render.html.escape</code>\
          \ property, which is <code>true</code> by default, will be used"
        explode: true
        in: query
        name: htmlEscape
        required: false
        schema:
          type: string
        style: form
      - description: "(Optional) true if headings should contain an ID based on the\
          \ heading content. If not specified, the value of the <code>markup.render.headerids</code>\
          \ property, which is false by default, will be used"
        explode: true
        in: query
        name: includeHeadingId
        required: false
        schema:
          type: string
        style: form
      - description: "(Optional) Whether the markup implementation should convert\
          \ newlines to breaks. If not specified, the value of the <code>markup.render.hardwrap</code>\
          \ property, which is <code>true</code> by default, will be used"
        explode: true
        in: query
        name: hardwrap
        required: false
        schema:
          type: string
        style: form
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            '*/*': {}
          description: The contributing guidelines for the repository.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to read the repository.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified repository does not exist.
      summary: Get repository contributing guidelines
      tags:
      - Project
  /api/latest/projects/{projectKey}/repos/{repositorySlug}/default-branch:
    get:
      deprecated: false
      description: "Retrieves the repository's <i>configured</i> default branch. \n\
        \nEvery repository has a <i>configured</i> default branch, but that branch\
        \ may not actually <i>exist</i> in the repository. For example, a newly-created\
        \ repository will have a configured default branch even though no branches\
        \ have been pushed yet. \n\nThe authenticated user must have <strong>REPO_READ</strong>\
        \ permission for the specified repository to call this resource."
      operationId: getDefaultBranch_2
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestMinimalRef"
          description: The configured default branch for the repository.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to read the repository.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "The specified repository does not exist, or its configured\
            \ default branch does not exist."
      summary: Get repository default branch
      tags:
      - Project
    put:
      deprecated: false
      description: "Update the default branch of a repository. \n\nThe authenticated\
        \ user must have <strong>REPO_ADMIN</strong> permission for the specified\
        \ repository to call this resource."
      operationId: setDefaultBranch_2
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestBranch"
        description: The branch to set as default
      responses:
        "204":
          description: The default branch was updated.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The authenticated user does not have permission to modify the
            default branch.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified repository does not exist.
      summary: Update default branch for repository
      tags:
      - Project
  /api/latest/projects/{projectKey}/repos/{repositorySlug}/diff:
    get:
      deprecated: false
      description: "Stream the raw diff between two provided revisions. \n\nThe authenticated\
        \ user must have <strong>REPO_READ</strong> permission for the specified repository\
        \ to call this resource."
      operationId: streamRawDiff
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The number of context lines to include around added/removed lines
          in the diff
        explode: true
        in: query
        name: contextLines
        required: false
        schema:
          type: string
        style: form
      - description: "The source path for the file, if it was copied, moved or renamed"
        explode: true
        in: query
        name: srcPath
        required: false
        schema:
          type: string
        style: form
      - description: The target revision to diff to (required)
        explode: true
        in: query
        name: until
        required: false
        schema:
          type: string
        style: form
      - description: Optional whitespace flag which can be set to <code>ignore-all</code>
        explode: true
        in: query
        name: whitespace
        required: false
        schema:
          type: string
        style: form
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      - description: The base revision to diff from. If omitted the parent revision
          of the until revision is used
        explode: true
        in: query
        name: since
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            text/plain; qs=0.1: {}
          description: A raw diff between two revisions.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The path parameter was not supplied.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to view the repository.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The repository does not exist.
      summary: Get raw diff for path
      tags:
      - Repository
  /api/latest/projects/{projectKey}/repos/{repositorySlug}/diff/{path}:
    get:
      deprecated: false
      description: "Stream the raw diff between two provided revisions. \n\nThe authenticated\
        \ user must have <strong>REPO_READ</strong> permission for the specified repository\
        \ to call this resource."
      operationId: streamRawDiff_1
      parameters:
      - description: The path to the file which should be diffed (required)
        explode: false
        in: path
        name: path
        required: true
        schema:
          pattern: .*
          type: string
        style: simple
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The number of context lines to include around added/removed lines
          in the diff
        explode: true
        in: query
        name: contextLines
        required: false
        schema:
          type: string
        style: form
      - description: "The source path for the file, if it was copied, moved or renamed"
        explode: true
        in: query
        name: srcPath
        required: false
        schema:
          type: string
        style: form
      - description: The target revision to diff to (required)
        explode: true
        in: query
        name: until
        required: false
        schema:
          type: string
        style: form
      - description: Optional whitespace flag which can be set to <code>ignore-all</code>
        explode: true
        in: query
        name: whitespace
        required: false
        schema:
          type: string
        style: form
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      - description: The base revision to diff from. If omitted the parent revision
          of the until revision is used
        explode: true
        in: query
        name: since
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            text/plain; qs=0.1: {}
          description: A raw diff between two revisions.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The until parameter was not supplied.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to view the repository.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The repository does not exist.
      summary: Get raw diff for path
      tags:
      - Repository
  /api/latest/projects/{projectKey}/repos/{repositorySlug}/files:
    get:
      deprecated: false
      description: "Retrieve a page of files from particular directory of a repository.\
        \ The search is done recursively, so all files from any sub-directory of the\
        \ specified directory will be returned. \n\nThe authenticated user must have\
        \ <strong>REPO_READ</strong> permission for the specified repository to call\
        \ this resource."
      operationId: streamFiles
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The commit ID or ref (e.g. a branch or tag) to list the files
          at. If not specified the default branch will be used instead.
        explode: true
        in: query
        name: at
        required: false
        schema:
          type: string
        style: form
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      - description: "Start number for the page (inclusive). If not passed, first\
          \ page is assumed."
        example: 0
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 0
          type: number
        style: form
      - description: "Number of items to return. If not passed, a page size of 25\
          \ is used."
        example: 25
        explode: true
        in: query
        name: limit
        required: false
        schema:
          example: 25
          type: number
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/streamFiles_200_response"
          description: A page of files.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The path parameter was not supplied.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to view the repository.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The path requested does not exist at the supplied commit.
      summary: Get files in directory
      tags:
      - Repository
  /api/latest/projects/{projectKey}/repos/{repositorySlug}/files/{path}:
    get:
      deprecated: false
      description: "Retrieve a page of files from particular directory of a repository.\
        \ The search is done recursively, so all files from any sub-directory of the\
        \ specified directory will be returned. \n\nThe authenticated user must have\
        \ <strong>REPO_READ</strong> permission for the specified repository to call\
        \ this resource."
      operationId: streamFiles_1
      parameters:
      - description: The directory to list files for.
        explode: false
        in: path
        name: path
        required: true
        schema:
          pattern: .*
          type: string
        style: simple
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The commit ID or ref (e.g. a branch or tag) to list the files
          at. If not specified the default branch will be used instead.
        explode: true
        in: query
        name: at
        required: false
        schema:
          type: string
        style: form
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      - description: "Start number for the page (inclusive). If not passed, first\
          \ page is assumed."
        example: 0
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 0
          type: number
        style: form
      - description: "Number of items to return. If not passed, a page size of 25\
          \ is used."
        example: 25
        explode: true
        in: query
        name: limit
        required: false
        schema:
          example: 25
          type: number
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/streamFiles_200_response"
          description: A page of files.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The path requested is not a directory at the supplied commit.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to view the repository.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The path requested does not exist at the supplied commit.
      summary: Get files in directory
      tags:
      - Repository
  /api/latest/projects/{projectKey}/repos/{repositorySlug}/forks:
    get:
      deprecated: false
      description: "Retrieve repositories which have been forked from this one. Unlike\
        \ #getRelatedRepositories(Repository, PageRequest) related repositories, this\
        \ only looks at a given repository's direct forks. If those forks have themselves\
        \ been the origin of more forks, such \"grandchildren\" repositories will\
        \ not be retrieved. \n\nOnly repositories to which the authenticated user\
        \ has <b>REPO_READ</b> permission will be included, even if other repositories\
        \ have been forked from this one."
      operationId: getForkedRepositories
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      - description: "Start number for the page (inclusive). If not passed, first\
          \ page is assumed."
        example: 0
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 0
          type: number
        style: form
      - description: "Number of items to return. If not passed, a page size of 25\
          \ is used."
        example: 25
        explode: true
        in: query
        name: limit
        required: false
        schema:
          example: 25
          type: number
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/getRepositoriesRecentlyAccessed_200_response"
          description: A page of repositories related to the request repository.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to see the request repository.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The request repository does not exist.
      summary: Get repository forks
      tags:
      - Project
  /api/latest/projects/{projectKey}/repos/{repositorySlug}/hook-scripts:
    get:
      deprecated: false
      description: "Return a page of hook scripts configured for the specified repository.\
        \ \n\nThis endpoint requires **REPO_ADMIN** permission."
      operationId: getConfigurations_1
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      - description: "Start number for the page (inclusive). If not passed, first\
          \ page is assumed."
        example: 0
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 0
          type: number
        style: form
      - description: "Number of items to return. If not passed, a page size of 25\
          \ is used."
        example: 25
        explode: true
        in: query
        name: limit
        required: false
        schema:
          example: 25
          type: number
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/getConfigurations_200_response"
          description: A page of hook scripts.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to view the specified repository.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified repository does not exist.
      summary: Get hook scripts
      tags:
      - Repository
  /api/latest/projects/{projectKey}/repos/{repositorySlug}/hook-scripts/{scriptId}:
    delete:
      deprecated: false
      description: "Removes the hook script from the set of hook scripts configured\
        \ to run in the repository. \n\nThis endpoint requires **REPO_ADMIN** permission."
      operationId: removeConfiguration_1
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The ID of the hook script
        explode: false
        in: path
        name: scriptId
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The hook script was successfully deleted.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to view the specified repository.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The repository slug or hook script ID supplied does not exist.
      summary: Remove a hook script
      tags:
      - Repository
    put:
      deprecated: false
      description: "Creates/updates the hook script configuration for the provided\
        \ hook script and repository. \n\nThis endpoint requires **REPO_ADMIN** permission."
      operationId: setConfiguration_1
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The ID of the hook script
        explode: false
        in: path
        name: scriptId
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestHookScriptTriggers"
        description: The hook triggers for which the hook script should be run
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestHookScriptConfig"
          description: The updated hook script.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The hook script was not created/updated due to a validation
            error.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to view the specified repository.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The repository slug supplied does not exist.
      summary: Create/update a hook script
      tags:
      - Repository
  /api/latest/projects/{projectKey}/repos/{repositorySlug}/labels:
    get:
      deprecated: false
      description: "Get all labels applied to the given repository. \n\nThe authenticated\
        \ user must have <strong>REPO_READ</strong> permission for the specified repository."
      operationId: getAllLabelsForRepository
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestLabel"
          description: The applied label.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to view the labels.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified repository does not exist.
      summary: Get repository labels
      tags:
      - Repository
    post:
      deprecated: false
      description: "Applies a label to the repository. \n\nThe authenticated user\
        \ must have <strong>REPO_ADMIN</strong> permission for the specified repository."
      operationId: addLabel
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestLabel"
        description: The label to apply
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestLabel"
          description: The applied label.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "A validation error prevented the label from being created\
            \ or applied. Possible validation errors include: The name of the label\
            \ contains uppercase characters, the name is smaller than 3 characters\
            \ or longer than 50 characters, the label contains other characters than\
            \ a-z 0-9 and - or the label is already applied to the given repository."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to apply a label.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified repository does not exist.
      summary: Add repository label
      tags:
      - Repository
  /api/latest/projects/{projectKey}/repos/{repositorySlug}/labels/{labelName}:
    delete:
      deprecated: false
      description: "Remove label that is applied to the given repository. \n\nThe\
        \ authenticated user must have <strong>REPO_ADMIN</strong> permission for\
        \ the specified repository."
      operationId: removeLabel
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The label to remove
        explode: false
        in: path
        name: labelName
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: An empty response indicating that the label is no longer associated
            to the repository.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to remove the label.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified repository does not exist.
      summary: Remove repository label
      tags:
      - Repository
  /api/latest/projects/{projectKey}/repos/{repositorySlug}/last-modified:
    get:
      deprecated: false
      description: |-
        Streams files from the repository's root with the last commit to modify each file. Commit modifications are traversed starting from the <code>at</code> commit or, if not specified, from the tip of the default branch.

        Unless the repository is public, the authenticated user must have <b>REPO_READ</b> access to call this resource.
      operationId: stream
      parameters:
      - description: The project key
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The commit to use as the starting point when listing files and
          calculating modifications
        explode: true
        in: query
        name: at
        required: false
        schema:
          type: string
        style: form
      - description: The repository slug
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ExampleFiles"
          description: "A map of files to the last commit that modified them, and\
            \ the latest commit to the repository (by nature, any commit to a repository\
            \ modifies its root)."
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "No <code>at</code> commit was specified. When streaming modifications,\
            \ an explicit starting commit must be supplied."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to view the repository.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The repository does not exist or does not contain the <code>at</code>
            commit.
      summary: Stream files
      tags:
      - Repository
  /api/latest/projects/{projectKey}/repos/{repositorySlug}/last-modified/{path}:
    get:
      deprecated: false
      description: |-
        Streams files in the requested <code>path</code> with the last commit to modify each file. Commit modifications are traversed starting from the <code>at</code> commit or, if not specified, from the tip of the default branch.

        Unless the repository is public, the authenticated user must have <b>REPO_READ</b> access to call this resource.
      operationId: stream_1
      parameters:
      - description: The path within the repository whose files should be streamed
        explode: false
        in: path
        name: path
        required: true
        schema:
          pattern: .*
          type: string
        style: simple
      - description: The project key
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The commit to use as the starting point when listing files and
          calculating modifications
        explode: true
        in: query
        name: at
        required: false
        schema:
          type: string
        style: form
      - description: The repository slug
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ExampleFiles"
          description: "A map of files to the last commit that modified them, and\
            \ the latest commit to update the requested path."
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "No <code>at</code> commit was specified. When streaming modifications,\
            \ an explicit starting commit must be supplied."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to view the repository.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "The repository does not exist or does not contain the <code>at</code>\
            \ commit, or the <code>at</code> commit does not contain the requested\
            \ path."
      summary: Stream files with last modified commit in path
      tags:
      - Repository
  /api/latest/projects/{projectKey}/repos/{repositorySlug}/license:
    get:
      deprecated: false
      description: "Retrieves the license for the repository, if it's been defined.\
        \ \n\nThis checks the repository for a <pre>LICENSE</pre> file, optionally\
        \ with an <pre>md</pre> or <pre>txt</pre>extension, and, if found, streams\
        \ it. By default, the <i>raw content</i> of the file is streamed. Appending\
        \ <pre>?markup</pre> to the URL will stream an HTML-rendered version instead.\
        \ \n\nThe authenticated user must have <strong>REPO_READ</strong> permission\
        \ for the specified repository to call this resource."
      operationId: streamLicense
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: "A specific commit or ref to retrieve the guidelines at, or the\
          \ default branch if not specified"
        explode: true
        in: query
        name: at
        required: false
        schema:
          type: string
        style: form
      - description: "If present or <code>\"true\"</code>, triggers the raw content\
          \ to be markup-rendered and returned as HTML; otherwise, if not specified,\
          \ or any value other than <code>\"true\"</code>, the content is streamed\
          \ without markup"
        explode: true
        in: query
        name: markup
        required: false
        schema:
          type: string
        style: form
      - description: "(Optional) true if HTML should be escaped in the input markup,\
          \ false otherwise. If not specified, the value of the <code>markup.render.html.escape</code>\
          \ property, which is <code>true</code> by default, will be used"
        explode: true
        in: query
        name: htmlEscape
        required: false
        schema:
          type: string
        style: form
      - description: "(Optional) true if headings should contain an ID based on the\
          \ heading content. If not specified, the value of the <code>markup.render.headerids</code>\
          \ property, which is false by default, will be used"
        explode: true
        in: query
        name: includeHeadingId
        required: false
        schema:
          type: string
        style: form
      - description: "(Optional) Whether the markup implementation should convert\
          \ newlines to breaks. If not specified, the value of the <code>markup.render.hardwrap</code>\
          \ property, which is <code>true</code> by default, will be used"
        explode: true
        in: query
        name: hardwrap
        required: false
        schema:
          type: string
        style: form
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            '*/*': {}
          description: The license for the repository.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to read the repository.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified repository does not exist.
      summary: Get repository license
      tags:
      - Project
  /api/latest/projects/{projectKey}/repos/{repositorySlug}/participants:
    get:
      deprecated: false
      description: "Retrieve a page of participant users for all the pull requests\
        \ to or from the specified repository. \n\nOptionally clients can specify\
        \ following filters."
      operationId: search
      parameters:
      - description: "(optional) Return only users, whose username, name or email\
          \ address <i>contain</i> the filter value"
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: "(optional) The role associated with the pull request participant.\
          \ This must be one of AUTHOR, REVIEWER, or PARTICIPANT"
        explode: true
        in: query
        name: role
        required: false
        schema:
          type: string
        style: form
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      - description: "(optional), Defaults to <strong>INCOMING</strong>) the direction\
          \ relative to the specified repository. Either <strong>INCOMING</strong>\
          \ or <strong>OUTGOING</strong>."
        explode: true
        in: query
        name: direction
        required: false
        schema:
          type: string
        style: form
      - description: "Start number for the page (inclusive). If not passed, first\
          \ page is assumed."
        example: 0
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 0
          type: number
        style: form
      - description: "Number of items to return. If not passed, a page size of 25\
          \ is used."
        example: 25
        explode: true
        in: query
        name: limit
        required: false
        schema:
          example: 25
          type: number
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/getUsersWithoutAnyPermission_200_response"
          description: A page of users that match the search criteria.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The request was malformed.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to view the specified repository.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified repository does not exist.
      summary: Search pull request participants
      tags:
      - Pull Requests
  /api/latest/projects/{projectKey}/repos/{repositorySlug}/patch:
    get:
      deprecated: false
      description: "Retrieve the patch content for a repository at a specified revision.\
        \ \n\nCache headers are added to the response (only if full commit hashes\
        \ are used, not in the case of short hashes). \n\nThe authenticated user must\
        \ have <strong>REPO_READ</strong> permission for the specified repository\
        \ to call this resource."
      operationId: streamPatch
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The target revision from which to generate the patch (required)
        explode: true
        in: query
        name: until
        required: false
        schema:
          type: string
        style: form
      - description: "indicates whether or not to generate a patch which includes\
          \ all the ancestors of the 'until' revision. If true, the value provided\
          \ by 'since' is ignored."
        explode: true
        in: query
        name: allAncestors
        required: false
        schema:
          type: string
        style: form
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      - description: "The base revision from which to generate the patch. This is\
          \ only applicable when 'allAncestors' is false. If omitted the patch will\
          \ represent one single commit, the 'until'."
        explode: true
        in: query
        name: since
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            text/plain: {}
          description: The patch contents from a repository.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The until parameter was not supplied.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to view the repository.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The repository does not exist.
      summary: Get patch content at revision
      tags:
      - Repository
  /api/latest/projects/{projectKey}/repos/{repositorySlug}/permissions:
    delete:
      deprecated: false
      description: |-
        Revoke all permissions for the specified repository for the given groups and users.

        The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for the specified repository or a higher global permission to call this resource.

        In addition, a user may not revoke a group's permission if their own permission would be revoked as a result, nor may they revoke their own permission unless they have a global permission that already implies that permission.
      operationId: revokePermissions_1
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The names of the users
        explode: true
        in: query
        name: user
        required: false
        schema:
          type: string
        style: form
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      - description: The names of the groups
        explode: true
        in: query
        name: group
        required: false
        schema:
          type: string
        style: form
      responses:
        "204":
          description: All repository permissions were revoked from the users and
            groups for the specified repository.
        "400":
          content:
            application/json;charset=UTF-8: {}
          description: No permissions were revoked because the request was invalid.
            No users or groups were provided.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user is not an administrator for
            the specified repository.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "The specified repository does not exist, or one or more of\
            \ the users or groups provided does not exist."
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The action was disallowed as it would revoke the currently
            authenticated user's permission on the repository.
      summary: Revoke all repository permissions for users and groups
      tags:
      - Permission Management
  /api/latest/projects/{projectKey}/repos/{repositorySlug}/permissions/groups:
    delete:
      deprecated: false
      description: |-
        Revoke all permissions for the specified repository for a group.

        The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository or a higher project or global permission to call this resource.

        In addition, a user may not revoke a group's permissions if it will reduce their own permission level.
      operationId: revokePermissionsForGroup_2
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The name of the group.
        explode: true
        in: query
        name: name
        required: true
        schema:
          type: string
        style: form
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: All repository permissions were revoked from the group for
            the specified repository.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user is not a repository administrator
            for the specified repository.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified repository does not exist.
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The action was disallowed as it would reduce the currently
            authenticated user's permission level.
      summary: Revoke group repository permission
      tags:
      - Permission Management
    get:
      deprecated: false
      description: |-
        Retrieve a page of groups that have been granted at least one permission for the specified repository.

        The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository or a higher project or global permission to call this resource.
      operationId: getGroupsWithAnyPermission_2
      parameters:
      - description: If specified only group names containing the supplied string
          will be returned.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      - description: "Start number for the page (inclusive). If not passed, first\
          \ page is assumed."
        example: 0
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 0
          type: number
        style: form
      - description: "Number of items to return. If not passed, a page size of 25\
          \ is used."
        example: 25
        explode: true
        in: query
        name: limit
        required: false
        schema:
          example: 25
          type: number
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/getGroupsWithAnyPermission_200_response"
          description: A page of groups and their highest permissions for the specified
            repository.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user is not a repository administrator
            for the specified repository.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified repository does not exist.
      summary: Get groups with permission to repository
      tags:
      - Permission Management
    put:
      deprecated: false
      description: |-
        Promote or demote a group's permission level for the specified repository. Available repository permissions are:

        - REPO_READ
        - REPO_WRITE
        - REPO_ADMIN


        See the <a href="https://confluence.atlassian.com/display/BitbucketServer/Using+repository+permissions">Bitbucket Data Center documentation</a> for a detailed explanation of what each permission entails.

        The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository or a higher project or global permission to call this resource. In addition, a user may not demote a group's permission level if their own permission level would be reduced as a result.
      operationId: setPermissionForGroup
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The names of the groups.
        explode: true
        in: query
        name: name
        required: true
        schema:
          items:
            type: string
          type: array
        style: form
      - description: The permission to grant
        explode: true
        in: query
        name: permission
        required: true
        schema:
          enum:
          - REPO_READ
          - REPO_WRITE
          - REPO_ADMIN
          type: string
        style: form
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The requested permission was granted.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The request was malformed or the specified permission does
            not exist.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user is not a repository administrator
            for the specified repository.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The action was disallowed as it would reduce the currently
            authenticated user's permission level.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified repository does not exist.
      summary: Update group repository permission
      tags:
      - Permission Management
  /api/latest/projects/{projectKey}/repos/{repositorySlug}/permissions/groups/none:
    get:
      deprecated: false
      description: |-
        Retrieve a page of groups that have no granted permissions for the specified repository.

        The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository or a higher project or global permission to call this resource.
      operationId: getGroupsWithoutAnyPermission_2
      parameters:
      - description: If specified only group names containing the supplied string
          will be returned.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      - description: "Start number for the page (inclusive). If not passed, first\
          \ page is assumed."
        example: 0
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 0
          type: number
        style: form
      - description: "Number of items to return. If not passed, a page size of 25\
          \ is used."
        example: 25
        explode: true
        in: query
        name: limit
        required: false
        schema:
          example: 25
          type: number
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/getGroups_1_200_response"
          description: A page of groups that have not been granted any permissions
            for the specified repository.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user is not a repository administrator
            for the specified repository.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified repository does not exist.
      summary: Get groups without repository permission
      tags:
      - Permission Management
  /api/latest/projects/{projectKey}/repos/{repositorySlug}/permissions/search:
    get:
      deprecated: false
      description: |-
        Search direct and implied permissions of users and groups. This endpoint returns a superset of the results returned by the /users and /groups endpoints because it allows filtering by project and global permissions too.

        The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository or a higher project/global permission to call this resource.
      operationId: searchPermissions_1
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: |+
          Permissions to filter by. See the [permissions documentation](https://confluence.atlassian.com/display/BitbucketServer/Using+repository+permissions)for a detailed explanation of what each permission entails. This parameter can be specified multiple times to filter by more than one permission, and can contain repository, project, and global permissions.

        explode: true
        in: query
        name: permission
        required: false
        schema:
          type: string
        style: form
      - description: Name of the user or group to filter the name of
        explode: true
        in: query
        name: filterText
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Type of entity (user or group)Valid entity types are:

          - USER- GROUP
        explode: true
        in: query
        name: type
        required: false
        schema:
          type: string
        style: form
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        default:
          content:
            application/json;charset=UTF-8: {}
          description: default response
      summary: Search repository permissions
      tags:
      - Permission Management
  /api/latest/projects/{projectKey}/repos/{repositorySlug}/permissions/users:
    delete:
      deprecated: false
      description: |-
        Revoke all permissions for the specified repository for a user.

        The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository or a higher project or global permission to call this resource.

        In addition, a user may not revoke their own repository permissions if they do not have a higher project or global permission.
      operationId: revokePermissionsForUser_2
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The name of the user.
        explode: true
        in: query
        name: name
        required: true
        schema:
          type: string
        style: form
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: All repository permissions were revoked from the user for the
            specified repository.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user is not a repository administrator
            for the specified repository.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified repository does not exist.
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The action was disallowed as it would reduce the currently
            authenticated user's permission level.
      summary: Revoke user repository permission
      tags:
      - Permission Management
    get:
      deprecated: false
      description: |-
        Retrieve a page of users that have been granted at least one permission for the specified repository.

        The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository or a higher project or global permission to call this resource.
      operationId: getUsersWithAnyPermission_2
      parameters:
      - description: If specified only user names containing the supplied string will
          be returned.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      - description: "Start number for the page (inclusive). If not passed, first\
          \ page is assumed."
        example: 0
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 0
          type: number
        style: form
      - description: "Number of items to return. If not passed, a page size of 25\
          \ is used."
        example: 25
        explode: true
        in: query
        name: limit
        required: false
        schema:
          example: 25
          type: number
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/getUsersWithAnyPermission_1_200_response"
          description: A page of users and their highest permissions for the specified
            repository.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user is not a repository administrator
            for the specified repository.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified repository does not exist.
      summary: Get users with permission to repository
      tags:
      - Permission Management
    put:
      deprecated: false
      description: |-
        Promote or demote a user's permission level for the specified repository. Available repository permissions are:

        - REPO_READ</li>- REPO_WRITE</li>- REPO_ADMIN</li></ul>See the <a href="https://confluence.atlassian.com/display/BitbucketServer/Using+repository+permissions">Bitbucket Data Center documentation</a> for a detailed explanation of what each permission entails.

        The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository or a higher project or global permission to call this resource. In addition, a user may not reduce their own permission level unless they have a project or global permission that already implies that permission.
      operationId: setPermissionForUser
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The names of the users.
        explode: true
        in: query
        name: name
        required: true
        schema:
          items:
            type: string
          type: array
        style: form
      - description: The permission to grant
        explode: true
        in: query
        name: permission
        required: true
        schema:
          enum:
          - REPO_READ
          - REPO_WRITE
          - REPO_ADMIN
          type: string
        style: form
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The requested permission was granted.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The request was malformed or the specified permission does
            not exist.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user is not a repository administrator
            for the specified repository.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The action was disallowed as it would reduce the currently
            authenticated user's permission level.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified repository does not exist.
      summary: Update user repository permission
      tags:
      - Permission Management
  /api/latest/projects/{projectKey}/repos/{repositorySlug}/permissions/users/none:
    get:
      deprecated: false
      description: |-
        Retrieve a page of <i>licensed</i> users that have no granted permissions for the specified repository.

        The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository or a higher project or global permission to call this resource.
      operationId: getUsersWithoutPermission_1
      parameters:
      - description: If specified only user names containing the supplied string will
          be returned.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      - description: "Start number for the page (inclusive). If not passed, first\
          \ page is assumed."
        example: 0
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 0
          type: number
        style: form
      - description: "Number of items to return. If not passed, a page size of 25\
          \ is used."
        example: 25
        explode: true
        in: query
        name: limit
        required: false
        schema:
          example: 25
          type: number
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/getUsersWithoutAnyPermission_200_response"
          description: A page of users that have not been granted any permissions
            for the specified repository.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user is not a repository administrator
            for the specified repository.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified repository does not exist.
      summary: Get users without repository permission
      tags:
      - Permission Management
  /api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests:
    get:
      deprecated: false
      description: "Retrieve a page of pull requests to or from the specified repository.\
        \ \n\nThe authenticated user must have <strong>REPO_READ</strong> permission\
        \ for the specified repository to call this resource.  Optionally clients\
        \ can specify PR participant filters. Each filter has a mandatory username.N\
        \ parameter, and the optional role.N and approved.N parameters. \n\n- username.N\
        \ - the \"root\" of a single participant filter, where \"N\" is a natural\
        \ number   starting from 1. This allows clients to specify multiple participant\
        \ filters, by providing consecutive   filters as username.1, username.2 etc.\
        \ Note that the filters numbering has to start   with 1 and be continuous\
        \ for all filters to be processed. The total allowed number of participant\
        \   filters is 10 and all filters exceeding that limit will be dropped.\n\
        - role.N(optional) the role associated with username.N.   This must be one\
        \ of AUTHOR, REVIEWER, or PARTICIPANT\n- approved.N (optional) the approved\
        \ status associated with username.N.   That is whether username.N has approved\
        \ the PR. Either true, or false\n"
      operationId: getPage
      parameters:
      - description: "(optional) defaults to true, whether to return additional pull\
          \ request attributes"
        explode: true
        in: query
        name: withAttributes
        required: false
        schema:
          type: string
        style: form
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: "(optional) a <i>fully-qualified</i> branch ID to find pull requests\
          \ to or from, such as refs/heads/master"
        explode: true
        in: query
        name: at
        required: false
        schema:
          type: string
        style: form
      - description: "(optional) defaults to true, whether to return additional pull\
          \ request properties"
        explode: true
        in: query
        name: withProperties
        required: false
        schema:
          type: string
        style: form
      - description: "(optional) If specified, only pull requests matching the supplied\
          \ draft status will be returned."
        explode: true
        in: query
        name: draft
        required: false
        schema:
          type: string
        style: form
      - description: "(optional) If specified, only pull requests where the title\
          \ or description contains the supplied string will be returned."
        explode: true
        in: query
        name: filterText
        required: false
        schema:
          type: string
        style: form
      - description: "(optional, defaults to <strong>OPEN</strong>). Supply <strong>ALL</strong>\
          \ to return pull request in any state. If a state is supplied only pull\
          \ requests in the specified state will be returned. Either <strong>OPEN</strong>,\
          \ <strong>DECLINED</strong> or <strong>MERGED</strong>."
        explode: true
        in: query
        name: state
        required: false
        schema:
          type: string
        style: form
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      - description: "(optional, defaults to <strong>NEWEST</strong>) the order to\
          \ return pull requests in, either <strong>OLDEST</strong> (as in: \"oldest\
          \ first\") or <strong>NEWEST</strong>."
        explode: true
        in: query
        name: order
        required: false
        schema:
          type: string
        style: form
      - description: "(optional, defaults to <strong>INCOMING</strong>) the direction\
          \ relative to the specified repository. Either <strong>INCOMING</strong>\
          \ or <strong>OUTGOING</strong>."
        explode: true
        in: query
        name: direction
        required: false
        schema:
          type: string
        style: form
      - description: "Start number for the page (inclusive). If not passed, first\
          \ page is assumed."
        example: 0
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 0
          type: number
        style: form
      - description: "Number of items to return. If not passed, a page size of 25\
          \ is used."
        example: 25
        explode: true
        in: query
        name: limit
        required: false
        schema:
          example: 25
          type: number
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/getPullRequests_1_200_response"
          description: A page of pull requests that match the search criteria.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The request was malformed.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to view the specified pull request.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified repository or pull request does not exist.
      summary: Get pull requests for repository
      tags:
      - Pull Requests
    post:
      deprecated: false
      description: "Create a new pull request from a source branch or tag to a target\
        \ branch. The source and target may be in the same repository, or different\
        \ ones. (Note that different repositories must belong to the same <code>Repository#getHierarchyId()</code>\
        \ hierarchy.) \n\nThe <code>fromRef</code> may be a branch or a tag. The <code>toRef</code>\
        \ is required to be a branch. Tags are not allowed as targets because tags\
        \ are intended to be immutable and should not be changed after they are created.\
        \ \n\nThe authenticated user must have <strong>REPO_READ</strong> permission\
        \ for the <code>fromRef</code> and <code>toRef</code> repositories to call\
        \ this resource."
      operationId: create
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestPullRequest"
        description: The pull request data
      responses:
        "201":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestPullRequest"
          description: The newly created pull request.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The pull request entity supplied in the request was malformed.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to create a pull request between the two specified repositories.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: One of the specified repositories or branches does not exist.
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "One of the following error cases occurred (check the error\
            \ message for more details): \n\n- There was a problem resolving one or\
            \ more reviewers.\n- The specified branches were the same.\n- The <em>to</em>\
            \ branch is already up-to-date with all the commits on the     <em>from</em>\
            \ branch.\n- A pull request between the two branches already exists.\n\
            - The <em>to</em> repository is archived.\n"
      summary: Create pull request
      tags:
      - Pull Requests
  /api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}:
    delete:
      deprecated: false
      description: "Deletes a pull request. \n\nTo call this resource, users must\
        \ be authenticated and have permission to view the pull request. Additionally,\
        \ they must: \n\n- be the pull request author, if the system is configured\
        \ to allow authors to delete their own   pull requests (this is the default)\
        \ OR \n- have repository administrator permission for the repository the pull\
        \ request is targeting\n\n\nA body containing the version of the pull request\
        \ must be provided with this request. \n\n`{ \"version\": 1 }`"
      operationId: delete_3
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The ID of the pull request within the repository
        explode: false
        in: path
        name: pullRequestId
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestPullRequestDeleteRequest"
        description: A body containing the version of the pull request
      responses:
        "204":
          description: The pull request was deleted.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to view the specified pull request.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified repository or pull request does not exist.
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: Deleting pull requests isn't supported on archived repositories.
      summary: Delete pull request
      tags:
      - Pull Requests
    get:
      deprecated: false
      description: "Retrieve a pull request. \n\nThe authenticated user must have\
        \ <strong>REPO_READ</strong> permission for the repository that this pull\
        \ request targets to call this resource."
      operationId: get_3
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The ID of the pull request within the repository
        explode: false
        in: path
        name: pullRequestId
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestPullRequest"
          description: The specified pull request.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to view the specified pull request.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified repository or pull request does not exist.
      summary: Get pull request
      tags:
      - Pull Requests
    put:
      deprecated: false
      description: "Update the title, description, reviewers, destination branch or\
        \ draft status of an existing pull request. \n\n**Note:** the <em>reviewers</em>\
        \ list may be updated using this resource. However the <em>author</em> and\
        \ <em>participants</em> list may not. \n\nThe authenticated user must either:\
        \ \n\n- be the author of the pull request and have the <strong>REPO_READ</strong>\
        \ permission for the repository that this pull request targets; or\n- have\
        \ the <strong>REPO_WRITE</strong> permission for the repository that this\
        \ pull request targets\n\n\nto call this resource."
      operationId: update
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The ID of the pull request within the repository
        explode: false
        in: path
        name: pullRequestId
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestPullRequest"
        description: The updated pull request
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestPullRequest"
          description: The updated pull request.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "One of the following error cases occurred (check the error\
            \ message for more details): \n\n- The request tried to modify the <em>author</em>\
            \ or <em>participants</em>.\n- The pull request's version attribute was\
            \ not specified.\n- A reviewer's username was not specified.\n- The toRef\
            \ ID value was incorrectly left blank\n"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to update the specified pull request.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: One of the specified repositories or branches does not exist.
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "One of the following error cases occurred (check the error\
            \ message for more details): \n\n- The specified version is out of date.\n\
            - One of the reviewers could not be added to the pull request.\n- If updating\
            \ the destination branch:    - There is already an open pull request with\
            \ an identical to branch\n   - The from and new to branch <i>are</i> the\
            \ same\n   - The new destination branch up-to-date is up-to-date with\
            \ all of                 changes from the from branch, resulting in a\
            \ pull request with                 nothing to merge            \n- The\
            \ <em>to</em> repository is archived.\n"
      summary: Update pull request metadata
      tags:
      - Pull Requests
  /api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}.diff:
    get:
      deprecated: false
      description: "Streams the raw diff for a pull request. \n\nThe authenticated\
        \ user must have <strong>REPO_READ</strong> permission for the repository\
        \ that this pull request targets to call this resource."
      operationId: streamRawDiff_2
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The number of context lines to include around added/removed lines
          in the diff
        explode: true
        in: query
        name: contextLines
        required: false
        schema:
          type: string
        style: form
      - description: optional whitespace flag which can be set to <code>ignore-all</code>
        explode: true
        in: query
        name: whitespace
        required: false
        schema:
          type: string
        style: form
      - description: The ID of the pull request within the repository
        explode: false
        in: path
        name: pullRequestId
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            text/plain: {}
          description: A raw diff for the specified pull request.
        "400":
          content:
            text/html: {}
          description: The currently authenticated user has insufficient permissions
            to view the specified pull request.
        "404":
          content:
            text/html: {}
          description: The pull request does not exist.
      summary: Stream raw pull request diff
      tags:
      - Pull Requests
  /api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}.patch:
    get:
      deprecated: false
      description: "Streams a patch representing a pull request. \n\nThe authenticated\
        \ user must have <strong>REPO_READ</strong> permission for the repository\
        \ that this pull request targets to call this resource."
      operationId: streamPatch_1
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The ID of the pull request within the repository
        explode: false
        in: path
        name: pullRequestId
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            text/plain: {}
          description: A patch representing the specified pull request.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to access the pull request.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The pull request does not exist.
      summary: Stream pull request as patch
      tags:
      - Pull Requests
  /api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/activities:
    get:
      deprecated: false
      description: "Retrieve a page of activity associated with a pull request. \n\
        \nActivity items include comments, approvals, rescopes (i.e. adding and removing\
        \ of commits), merges and more. \n\nDifferent types of activity items may\
        \ be introduced in newer versions of Stash or by user installed plugins, so\
        \ clients should be flexible enough to handle unexpected entity shapes in\
        \ the returned page. \n\nThe authenticated user must have <strong>REPO_READ</strong>\
        \ permission for the repository that this pull request targets to call this\
        \ resource."
      operationId: getActivities
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: (required if <strong>fromId</strong> is present) the type of
          the activity item specified by <strong>fromId</strong> (either <strong>COMMENT</strong>
          or <strong>ACTIVITY</strong>)
        explode: true
        in: query
        name: fromType
        required: false
        schema:
          type: string
        style: form
      - description: The ID of the pull request within the repository
        explode: false
        in: path
        name: pullRequestId
        required: true
        schema:
          type: string
        style: simple
      - description: (optional) the ID of the activity item to use as the first item
          in the returned page
        explode: true
        in: query
        name: fromId
        required: false
        schema:
          type: string
        style: form
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      - description: "Start number for the page (inclusive). If not passed, first\
          \ page is assumed."
        example: 0
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 0
          type: number
        style: form
      - description: "Number of items to return. If not passed, a page size of 25\
          \ is used."
        example: 25
        explode: true
        in: query
        name: limit
        required: false
        schema:
          example: 25
          type: number
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/getActivities_200_response"
          description: A page of activity relating to the specified pull request.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The request was malformed.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to view the specified pull request.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified repository or pull request does not exist.
      summary: Get pull request activity
      tags:
      - Pull Requests
  /api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/approve:
    delete:
      deprecated: true
      description: "Remove approval from a pull request as the current user. This\
        \ does not remove the user as a participant. \n\nThe authenticated user must\
        \ have <strong>REPO_READ</strong> permission for the repository that this\
        \ pull request targets to call this resource. \n\n<strong>Deprecated since\
        \ 4.2</strong>. Use /rest/api/1.0/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/participants/{userSlug}\
        \ instead"
      operationId: withdrawApproval
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The ID of the pull request within the repository
        explode: false
        in: path
        name: pullRequestId
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestPullRequestParticipant"
          description: Details of the updated participant.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to view the pull request.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified repository or pull request does not exist or
            the current user is not a participant on the pull request.
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The pull request is not open.
      summary: Unapprove pull request
      tags:
      - Deprecated
      - Pull Requests
    post:
      deprecated: true
      description: "Approve a pull request as the current user. Implicitly adds the\
        \ user as a participant if they are not already. \n\nThe authenticated user\
        \ must have <strong>REPO_READ</strong> permission for the repository that\
        \ this pull request targets to call this resource. \n\n<strong>Deprecated\
        \ since 4.2</strong>. Use /rest/api/1.0/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/participants/{userSlug}\
        \ instead"
      operationId: approve
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The ID of the pull request within the repository
        explode: false
        in: path
        name: pullRequestId
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestPullRequestParticipant"
          description: Details of the new participant.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to view the pull request.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified repository or pull request does not exist.
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The pull request is not open.
      summary: Approve pull request
      tags:
      - Deprecated
      - Pull Requests
  /api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/auto-merge:
    delete:
      deprecated: false
      description: |-
        Cancels a request to auto-merge the pull request, if the pull request was not merged yet.

        The authenticated user must have <strong>REPO_WRITE</strong> permission for the repository that this pull request targets to call this resource.
      operationId: cancelAutoMerge
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The ID of the pull request within the repository
        explode: false
        in: path
        name: pullRequestId
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The auto-merge request was cancelled.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to modify the pull request.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified repository or pull request does not exist.
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified pull request is not open.
      summary: Cancel auto-merge for pull request
      tags:
      - Pull Requests
    get:
      deprecated: false
      description: |-
        Returns an auto-merge request for the pull request, if requested.

        The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request targets to call this resource.
      operationId: getAutoMergeRequest
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The ID of the pull request within the repository
        explode: false
        in: path
        name: pullRequestId
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestAutoMergeRequest"
          description: The auto-merge request.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to view the specified pull request.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified repository or pull request does not exist.
      summary: Get auto-merge request for pull request
      tags:
      - Pull Requests
    post:
      deprecated: false
      description: |-
        Requests the system to try merging the pull request if auto-merge was requested on it.

        The authenticated user must have <strong>REPO_WRITE</strong> permission for the repository that this pull request targets to call this resource.
      operationId: tryAutoMerge
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The ID of the pull request within the repository
        explode: false
        in: path
        name: pullRequestId
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestAutoMergeProcessingResult"
          description: The result of trying to auto-merge the pull request.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: An auto-merge request was not submitted for this pull request.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to modify the pull request.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The auto-merge setting is not enabled for the repository that
            this pull request targets.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified repository or pull request does not exist.
      summary: Auto-merge pull request
      tags:
      - Pull Requests
  /api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/blocker-comments:
    get:
      deprecated: false
      description: "Gets comments matching the given set of field values for the specified\
        \ pull request. (Note this does <b>not</b> perform any kind of searching for\
        \ comments by their text). \n\nThe authenticated user must have <strong>REPO_READ</strong>\
        \ permission for the repository that this pull request targets to call this\
        \ resource."
      operationId: getComments_1
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: If true only the count of the comments by state will be returned
          (and not the body of the comments).
        explode: true
        in: query
        name: count
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: state
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: The pull request ID.
        explode: false
        in: path
        name: pullRequestId
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      - description: "(optional). If supplied, only comments with a state in the given\
          \ list will be returned. The state can be OPEN or RESOLVED."
        explode: true
        in: query
        name: states
        required: false
        schema:
          type: string
        style: form
      - description: "Start number for the page (inclusive). If not passed, first\
          \ page is assumed."
        example: 0
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 0
          type: number
        style: form
      - description: "Number of items to return. If not passed, a page size of 25\
          \ is used."
        example: 25
        explode: true
        in: query
        name: limit
        required: false
        schema:
          example: 25
          type: number
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/getComments_200_response"
          description: A page of Comments from the supplied pull request.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to view the repository or pull request.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The repository or pull request does not exist.
      summary: Search pull request comments
      tags:
      - Pull Requests
    post:
      deprecated: false
      description: "Add a new blocker comment. \n\nComments can be added in a few\
        \ places by setting different attributes: \n\nGeneral pull request blocker\
        \ comment: \n```\n\n{ \n     \"text\": \"A task on a pull request.\" \n}\n\
        ```\n\nBlocker reply to a comment: \n\n```\n\n{\n     \"text\": \"This reply\
        \ is a task.\", \n     \"parent\": { \n         \"id\": 1 \n     } \n} \n\
        ```\n\nGeneral blocker file comment:\n\n```\n\n{\n     \"text\": \"A blocker\
        \ comment on a file.\", \n     \"anchor\": { \n         \"diffType\": \"RANGE\"\
        , \n         \"fromHash\": \"6df3858eeb9a53a911cd17e66a9174d44ffb02cd\", \n\
        \         \"path\": \"path/to/file\", \n         \"srcPath\": \"path/to/file\"\
        , \n         \"toHash\": \"04c7c5c931b9418ca7b66f51fe934d0bd9b2ba4b\" \n \
        \    } \n } \n```\n\nBlocker file line comment: \n\n```\n\n{ \n     \"text\"\
        : \"A task on a particular line within a file.\", \n     \"anchor\": { \n\
        \         \"diffType\": \"COMMIT\", \n         \"line\": 1, \n         \"\
        lineType\": \"CONTEXT\", \n         \"fileType\": \"FROM\", \n         \"\
        fromHash\": \"6df3858eeb9a53a911cd17e66a9174d44ffb02cd\", \n         \"path\"\
        : \"path/to/file\", \n         \"srcPath\": \"path/to/file\", \n         \"\
        toHash\": \"04c7c5c931b9418ca7b66f51fe934d0bd9b2ba4b\" \n     } \n } \n```\n\
        \nFor file and line comments, 'path' refers to the path of the file to which\
        \ the comment should be applied and 'srcPath' refers to the path the that\
        \ file used to have (only required for copies and moves). Also, fromHash and\
        \ toHash refer to the sinceId / untilId (respectively) used to produce the\
        \ diff on which the comment was added. Finally diffType refers to the type\
        \ of diff the comment was added on. For backwards compatibility purposes if\
        \ no diffType is provided and no fromHash/toHash pair is provided the diffType\
        \ will be resolved to 'EFFECTIVE'. In any other cases the diffType is REQUIRED.\
        \ \n\nFor line comments, 'line' refers to the line in the diff that the comment\
        \ should apply to. 'lineType' refers to the type of diff hunk, which can be:\
        \ \n\n- 'ADDED' - for an added line;\n- 'REMOVED' - for a removed line; or\n\
        - 'CONTEXT' - for a line that was unmodified but is in the vicinity of the\
        \ diff.\n \n\n'fileType' refers to the file of the diff to which the anchor\
        \ should be attached - which is of relevance when displaying the diff in a\
        \ side-by-side way. Currently the supported values are: \n\n- 'FROM' - the\
        \ source file of the diff\n - 'TO' - the destination file of the diff\n\n\n\
        If the current user is not a participant the user is added as a watcher of\
        \ the pull request. \n\nThe authenticated user must have <strong>REPO_READ</strong>\
        \ permission for the repository that this pull request targets to call this\
        \ resource."
      operationId: createComment_1
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The pull request ID.
        explode: false
        in: path
        name: pullRequestId
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestComment"
        description: The comment to add.
      responses:
        "201":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestComment"
          description: The newly created comment.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The comment was not created due to a validation error.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "The currently authenticated user has insufficient permissions\
            \ to view the pull request, create a comment or watch the pull request."
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "Unable to find the supplied project, repository, pull request\
            \ or parent comment."
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "The new created name already exists or adding, deleting, or\
            \ editing comments isn't supported on archived repositories."
      summary: Add new blocker comment
      tags:
      - Pull Requests
  /api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/blocker-comments/{commentId}:
    delete:
      deprecated: false
      description: |-
        Delete a pull request comment. Anyone can delete their own comment. Only users with <strong>REPO_ADMIN</strong> and above may delete comments created by other users.

        The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request targets to call this resource.
      operationId: deleteComment_1
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The ID of the comment to retrieve.
        explode: false
        in: path
        name: commentId
        required: true
        schema:
          type: string
        style: simple
      - description: The pull request ID.
        explode: false
        in: path
        name: pullRequestId
        required: true
        schema:
          type: string
        style: simple
      - description: "The expected version of the comment. This must match the server's\
          \ version of the comment or the delete will fail. To determine the current\
          \ version of the comment, the comment should be fetched from the server\
          \ prior to the delete. Look for the 'version' attribute in the returned\
          \ JSON structure."
        explode: true
        in: query
        name: version
        required: false
        schema:
          type: string
        style: form
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The operation was successful.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to delete the comment.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "Unable to find the supplied project, repository or pull request."
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "The comment has replies, the version supplied does not match\
            \ the current version or the repository is archived."
      summary: Delete pull request comment
      tags:
      - Pull Requests
    get:
      deprecated: false
      description: |-
        Retrieves a pull request comment.

        The authenticated user must have <strong>REPO_READ</strong> permission for the repository that this pull request targets to call this resource.
      operationId: getComment_1
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The ID of the comment to retrieve
        explode: false
        in: path
        name: commentId
        required: true
        schema:
          type: string
        style: simple
      - description: The pull request ID.
        explode: false
        in: path
        name: pullRequestId
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestComment"
          description: The requested comment.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to view the comment.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "Unable to find the supplied project, repository, pull request\
            \ or comment."
      summary: Get pull request comment
      tags:
      - Pull Requests
    put:
      deprecated: false
      description: "Update a comment, with the following restrictions: \n\n- only\
        \ the author of the comment may update the <i>text</i> of the comment\n- only\
        \ the author of the comment, the author of the pull request or repository\
        \ admins and above may update   the other fields of a comment\n\n\nConvert\
        \ a comment to a task or vice versa. \n\nComments can be converted to tasks\
        \ by setting the 'severity' attribute to 'BLOCKER': \n```\n\n{ \n\"severity\"\
        : \"BLOCKER\" \n}\n\n```\n\nTasks can be converted to comments by setting\
        \ the 'severity' attribute to 'NORMAL': ```\n\n{ \n\"severity\": \"NORMAL\"\
        \ \n}\n\n```\n\nResolve a blocker comment. \n\nBlocker comments can be resolved\
        \ by setting the 'state' attribute to 'RESOLVED': ```\n\n{ \n\"state\": \"\
        RESOLVED\" \n} \n```\n\n<strong>Note:</strong> the supplied JSON object must\
        \ contain a <code>version</code> that must match the server's version of the\
        \ comment or the update will fail. To determine the current version of the\
        \ comment, the comment should be fetched from the server prior to the update.\
        \ Look for the 'version' attribute in the returned JSON structure. \n\nThe\
        \ authenticated user must have <strong>REPO_READ</strong> permission for the\
        \ repository that this pull request targets to call this resource."
      operationId: updateComment_1
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The ID of the comment to retrieve.
        explode: false
        in: path
        name: commentId
        required: true
        schema:
          type: string
        style: simple
      - description: The pull request ID.
        explode: false
        in: path
        name: pullRequestId
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestComment"
        description: The comment to add.
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestComment"
          description: The newly updated comment.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The comment was not updated due to a validation error.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "The currently authenticated user has insufficient permissions\
            \ to view the pull request, update a comment or watch the pull request."
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "Unable to find the supplied project, repository, pull request\
            \ or comment."
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The comment version supplied does not match the current version
            or the repository is archived.
      summary: Update pull request comment
      tags:
      - Pull Requests
  /api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/changes:
    get:
      deprecated: false
      description: "Gets changes for the specified PullRequest.\n\nIf the changeScope\
        \ query parameter is set to 'UNREVIEWED', the application will attempt to\
        \ stream unreviewed changes based on the lastReviewedCommit of the current\
        \ user, which are the changes between the lastReviewedCommit and the latest\
        \ commit of the source branch. The current user is considered to <i>not</i>\
        \ have any unreviewed changes for the pull request when the lastReviewedCommit\
        \ is either null (everything is unreviewed, so all changes are streamed),\
        \ equal to the latest commit of the source branch (everything is reviewed),\
        \ or no longer on the source branch (the source branch has been rebased).\
        \ In these cases, the application will fall back to streaming all changes\
        \ (the default), which is the effective diff for the pull request. The type\
        \ of changes streamed can be determined by the changeScope parameter included\
        \ in the properties map of the response. \n\nNote: This resource is currently\
        \ <i>not paged</i>. The server will return at most one page. The server will\
        \ truncate the number of changes to either the request's page limit or an\
        \ internal maximum, whichever is smaller. The start parameter of the page\
        \ request is also ignored. \n\nThe authenticated user must have <strong>REPO_READ</strong>\
        \ permission for the repository that this pull request targets to call this\
        \ resource."
      operationId: streamChanges_1
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The since commit hash to stream changes for a RANGE arbitrary
          change scope
        explode: true
        in: query
        name: sinceId
        required: false
        schema:
          type: string
        style: form
      - description: UNREVIEWED to stream the unreviewed changes for the current user
          (if they exist); RANGE to stream changes between two arbitrary commits (requires
          'sinceId' and 'untilId'); otherwise ALL to stream all changes (the default)
        explode: true
        in: query
        name: changeScope
        required: false
        schema:
          type: string
        style: form
      - description: The until commit hash to stream changes for a RANGE arbitrary
          change scope
        explode: true
        in: query
        name: untilId
        required: false
        schema:
          type: string
        style: form
      - description: The pull request ID.
        explode: false
        in: path
        name: pullRequestId
        required: true
        schema:
          type: string
        style: simple
      - description: "true to apply comment counts in the changes (the default); otherwise,\
          \ false to stream changes without comment counts"
        explode: true
        in: query
        name: withComments
        required: false
        schema:
          type: string
        style: form
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      - description: "Start number for the page (inclusive). If not passed, first\
          \ page is assumed."
        example: 0
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 0
          type: number
        style: form
      - description: "Number of items to return. If not passed, a page size of 25\
          \ is used."
        example: 25
        explode: true
        in: query
        name: limit
        required: false
        schema:
          example: 25
          type: number
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestChange"
          description: "A page of unreviewed Changes for the current user from the\
            \ supplied pull request, including the unreviewedCommits in the properties\
            \ map."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to view the repository or pull request.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The repository or pull request does not exist.
      summary: Gets pull request changes
      tags:
      - Pull Requests
  /api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/comments:
    get:
      deprecated: false
      description: "Gets comments for the specified pull request and path. \n\nThe\
        \ authenticated user must have <strong>REPO_READ</strong> permission for the\
        \ repository that this pull request targets to call this resource."
      operationId: getComments_2
      parameters:
      - description: The path to stream comments for a given path
        explode: true
        in: query
        name: path
        required: true
        schema:
          type: string
        style: form
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The from commit hash to stream comments for a RANGE or COMMIT
          arbitrary change scope
        explode: true
        in: query
        name: fromHash
        required: false
        schema:
          type: string
        style: form
      - description: ACTIVE to stream the active comments; ORPHANED to stream the
          orphaned comments; ALL to stream both the active and the orphaned comments;
        explode: true
        in: query
        name: anchorState
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: diffType
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: The to commit hash to stream comments for a RANGE or COMMIT arbitrary
          change scope
        explode: true
        in: query
        name: toHash
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: state
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: The pull request ID.
        explode: false
        in: path
        name: pullRequestId
        required: true
        schema:
          type: string
        style: simple
      - description: EFFECTIVE to stream the comments related to the effective diff
          of the pull request; RANGE to stream comments related to a commit range
          between two arbitrary commits (requires 'fromHash' and 'toHash'); COMMIT
          to stream comments related to a commit between two arbitrary commits (requires
          'fromHash' and 'toHash')
        explode: true
        in: query
        name: diffTypes
        required: false
        schema:
          type: string
        style: form
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      - description: "(optional). If supplied, only comments with a state in the given\
          \ list will be returned. The state can be OPEN or RESOLVED."
        explode: true
        in: query
        name: states
        required: false
        schema:
          type: string
        style: form
      - description: "Start number for the page (inclusive). If not passed, first\
          \ page is assumed."
        example: 0
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 0
          type: number
        style: form
      - description: "Number of items to return. If not passed, a page size of 25\
          \ is used."
        example: 25
        explode: true
        in: query
        name: limit
        required: false
        schema:
          example: 25
          type: number
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/getComments_200_response"
          description: A page of Comments from the supplied pull request.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to view the repository or pull request.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The repository or pull request does not exist.
      summary: Get pull request comments for path
      tags:
      - Pull Requests
    post:
      deprecated: false
      description: "Add a new comment. \n\nComments can be added in a few places by\
        \ setting different attributes: </p>General pull request comment: \n <pre>\
        \ { \n   \"text\": \"An insightful general comment on a pull request.\" \n\
        \ } \n </pre> Reply to a comment:  <pre> { \n   \"text\": \"A measured reply.\"\
        , \n   \"parent\": { \n      \"id\": 1 \n    } \n } \n </pre> General file\
        \ comment:  <pre> { \n   \"text\": \"An insightful general comment on a file.\"\
        , \n   \"anchor\": { \n      \"diffType\": \"RANGE\", \n      \"fromHash\"\
        : \"6df3858eeb9a53a911cd17e66a9174d44ffb02cd\", \n      \"path\": \"path/to/file\"\
        , \n      \"srcPath\": \"path/to/file\", \n      \"toHash\": \"04c7c5c931b9418ca7b66f51fe934d0bd9b2ba4b\"\
        \ \n   } \n } \n </pre> File line comment:  <pre> { \n   \"text\": \"A pithy\
        \ comment on a particular line within a file.\", \n   \"anchor\": { \n   \
        \   \"diffType\": \"COMMIT\", \n      \"line\": 1, \n      \"lineType\": \"\
        CONTEXT\", \n      \"fileType\": \"FROM\", \n      \"fromHash\": \"6df3858eeb9a53a911cd17e66a9174d44ffb02cd\"\
        , \n      \"path\": \"path/to/file\", \n      \"srcPath\": \"path/to/file\"\
        , \n      \"toHash\": \"04c7c5c931b9418ca7b66f51fe934d0bd9b2ba4b\" \n    }\
        \ \n } \n </pre> \n\n Add a new task. \n\nTasks are just comments with the\
        \ attribute 'severity' set to 'BLOCKER': \n\nGeneral pull request task:  <pre>\
        \ { \n   \"text\": \"A task on a pull request.\", \n   \"severity\": \"BLOCKER\"\
        \ \n } \n </pre> \n\n Add a pending comment.  \n\nPending comments are just\
        \ comments with the attribute 'state' set to 'PENDING': \n\nPending comment:\
        \ <pre> { \n   \"text\": \"This is a pending comment\", \n   \"state\": \"\
        PENDING\" \n } \n </pre> \n\nFor file and line comments, 'path' refers to\
        \ the path of the file to which the comment should be applied and 'srcPath'\
        \ refers to the path the that file used to have (only required for copies\
        \ and moves).\n\nfromHash and toHash refer to the sinceId / untilId (respectively)\
        \ used to produce the diff on which the comment was added.\n\nFor diffType\
        \ 'COMMIT' or 'RANGE', you must specify both the fromHash and toHash. Note\
        \ that this behaviour differs from `/commits/comments`\n\nFinally diffType\
        \ refers to the type of diff the comment was added on. For backwards compatibility\
        \ purposes if no diffType is provided and no fromHash/toHash pair is provided\
        \ the diffType will be resolved to 'EFFECTIVE'. In any other cases the diffType\
        \ is REQUIRED.\n\nFor line comments, 'line' refers to the line in the diff\
        \ that the comment should apply to. 'lineType' refers to the type of diff\
        \ hunk, which can be: \n\n- 'ADDED' - for an added line;\n- 'REMOVED' - for\
        \ a removed line; or\n- 'CONTEXT' - for a line that was unmodified but is\
        \ in the vicinity of the diff.\n</ul>'fileType' refers to the file of the\
        \ diff to which the anchor should be attached - which is of relevance when\
        \ displaying the diff in a side-by-side way. Currently the supported values\
        \ are: \n\n- 'FROM' - the source file of the diff\n- 'TO' - the destination\
        \ file of the diff\n</ul>If the current user is not a participant the user\
        \ is added as a watcher of the pull request. \n\nThe authenticated user must\
        \ have <strong>REPO_READ</strong> permission for the repository that this\
        \ pull request targets to call this resource."
      operationId: createComment_2
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The pull request ID.
        explode: false
        in: path
        name: pullRequestId
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestComment"
        description: The comment to add
      responses:
        "201":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestComment"
          description: The newly created comment.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The comment was not created due to a validation error.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "The currently authenticated user has insufficient permissions\
            \ to view the pull request, create a comment or watch the pull request."
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "Unable to find the supplied project, repository, pull request\
            \ or parent comment."
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "Adding, deleting, or editing comments isn't supported on archived\
            \ repositories."
      summary: Add pull request comment
      tags:
      - Pull Requests
  /api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/comments/{commentId}:
    delete:
      deprecated: false
      description: "Delete a pull request comment. Anyone can delete their own comment.\
        \ Only users with <strong>REPO_ADMIN</strong> and above may delete comments\
        \ created by other users. \n\nThe authenticated user must have <strong>REPO_READ</strong>\
        \ permission for the repository that this pull request targets to call this\
        \ resource."
      operationId: deleteComment_2
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The ID of the comment to retrieve.
        explode: false
        in: path
        name: commentId
        required: true
        schema:
          type: string
        style: simple
      - description: The pull request ID.
        explode: false
        in: path
        name: pullRequestId
        required: true
        schema:
          type: string
        style: simple
      - description: "The expected version of the comment. This must match the server's\
          \ version of the comment or the delete will fail. To determine the current\
          \ version of the comment, the comment should be fetched from the server\
          \ prior to the delete. Look for the 'version' attribute in the returned\
          \ JSON structure."
        explode: true
        in: query
        name: version
        required: false
        schema:
          type: string
        style: form
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The operation was successful.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to delete the comment.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "Unable to find the supplied project, repository or pull request."
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "The comment has replies, the version supplied does not match\
            \ the current version or the repository is archived."
      summary: Delete a pull request comment
      tags:
      - Pull Requests
    get:
      deprecated: false
      description: "Retrieves a pull request comment. \n\nThe authenticated user must\
        \ have <strong>REPO_READ</strong> permission for the repository that this\
        \ pull request targets to call this resource."
      operationId: getComment_2
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The ID of the comment to retrieve.
        explode: false
        in: path
        name: commentId
        required: true
        schema:
          type: string
        style: simple
      - description: The pull request ID.
        explode: false
        in: path
        name: pullRequestId
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestComment"
          description: The requested comment.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to view the comment.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "Unable to find the supplied project, repository, pull request\
            \ or comment."
      summary: Get a pull request comment
      tags:
      - Pull Requests
    put:
      deprecated: false
      description: "Update a comment, with the following restrictions: \n\n- only\
        \ the author of the comment may update the <i>text</i> of the comment\n- only\
        \ the author of the comment, the author of the pull request or repository\
        \ admins and above may update the other fields of a comment\n</ul> \n\nConvert\
        \ a comment to a task or vice versa. \n\nComments can be converted to tasks\
        \ by setting the 'severity' attribute to 'BLOCKER': \n <pre> { \n \"severity\"\
        : \"BLOCKER\" \n } \n </pre>\n\nTasks can be converted to comments by setting\
        \ the 'severity' attribute to 'NORMAL':  <pre> { \n \"severity\": \"NORMAL\"\
        \ \n } \n </pre>\n\nResolve a task. \n\nTasks can be resolved by setting the\
        \ 'state' attribute to 'RESOLVED':  <pre> { \n \"state\": \"RESOLVED\" \n\
        \ } \n </pre>\n\n<strong>Note:</strong> the supplied JSON object must contain\
        \ a <code>version</code> that must match the server's version of the comment\
        \ or the update will fail. To determine the current version of the comment,\
        \ the comment should be fetched from the server prior to the update. Look\
        \ for the 'version' attribute in the returned JSON structure. \n\nThe authenticated\
        \ user must have <strong>REPO_READ</strong> permission for the repository\
        \ that this pull request targets to call this resource."
      operationId: updateComment_2
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The ID of the comment to retrieve.
        explode: false
        in: path
        name: commentId
        required: true
        schema:
          type: string
        style: simple
      - description: The pull request ID.
        explode: false
        in: path
        name: pullRequestId
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestComment"
        description: The updated comment
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestComment"
          description: The newly updated comment.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The comment was not updated due to a validation error.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "The currently authenticated user has insufficient permissions\
            \ to view the pull request, update a comment or watch the pull request."
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "Unable to find the supplied project, repository, pull request\
            \ or comment."
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The comment version supplied does not match the current version
            or the repository is archived.
      summary: Update pull request comment
      tags:
      - Pull Requests
  /api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/comments/{commentId}/apply-suggestion:
    post:
      deprecated: false
      description: Apply a suggestion contained within a comment.
      operationId: applySuggestion
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The ID of the comment to retrieve.
        explode: false
        in: path
        name: commentId
        required: true
        schema:
          type: string
        style: simple
      - description: The pull request ID.
        explode: false
        in: path
        name: pullRequestId
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestApplySuggestionRequest"
        description: A request containing other parameters required to apply a suggestion
          - The given versions/hashes must match the server's version/hashes or the
          suggestion application will fail (in order to avoid applying the suggestion
          to the wrong place
      responses:
        "204":
          description: An empty response indicating the suggestion has been applied.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The suggestion was not applied due to a validation error.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to apply the suggestion.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "Unable to find the supplied project, repository, pull request\
            \ or parent comment."
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: There was an error applying the suggestion to the source branch.
            It must be applied manually.
      summary: Apply pull request suggestion
      tags:
      - Pull Requests
  /api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/commit-message-suggestion:
    get:
      deprecated: false
      description: Retrieve a suggested commit message for the given Pull Request.
      operationId: getCommitMessageSuggestion
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The ID of the pull request to generate the suggestion for
        explode: false
        in: path
        name: pullRequestId
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestCommitMessageSuggestion"
          description: The suggested commit message
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to view the specified pull request.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified repository or pull request does not exist.
      summary: Get commit message suggestion
      tags:
      - Pull Requests
  /api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/commits:
    get:
      deprecated: false
      description: "Retrieve commits for the specified pull request. \n\nThe authenticated\
        \ user must have <strong>REPO_READ</strong> permission for the repository\
        \ that this pull request targets to call this resource."
      operationId: getCommits_1
      parameters:
      - description: The desired scheme for the avatar URL. If the parameter is not
          present URLs will use the same scheme as this request
        explode: true
        in: query
        name: avatarScheme
        required: false
        schema:
          type: string
        style: form
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: "If set to true, the service will add \"authorCount\" and \"\
          totalCount\" at the end of the page. \"authorCount\" is the number of different\
          \ authors and \"totalCount\" is the total number of commits."
        explode: true
        in: query
        name: withCounts
        required: false
        schema:
          type: string
        style: form
      - description: "ID of the pullrequest, part of the path"
        explode: false
        in: path
        name: pullRequestId
        required: true
        schema:
          type: string
        style: simple
      - description: "If present the service adds avatar URLs for commit authors.\
          \ Should be an integer specifying the desired size in pixels. If the parameter\
          \ is not present, avatar URLs will not be setCOMMIT to stream comments related\
          \ to a commit between two arbitrary commits (requires 'fromHash' and 'toHash')"
        explode: true
        in: query
        name: avatarSize
        required: false
        schema:
          type: string
        style: form
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      - description: "Start number for the page (inclusive). If not passed, first\
          \ page is assumed."
        example: 0
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 0
          type: number
        style: form
      - description: "Number of items to return. If not passed, a page size of 25\
          \ is used."
        example: 25
        explode: true
        in: query
        name: limit
        required: false
        schema:
          example: 25
          type: number
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/getCommits_200_response"
          description: A page of commits from the supplied pull request.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to view the repository or pull request.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The repository or pull request does not exist.
      summary: Get pull request commits
      tags:
      - Pull Requests
  /api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/decline:
    post:
      deprecated: false
      description: "Decline a pull request. \n\nThe authenticated user must have <strong>REPO_READ</strong>\
        \ permission for the repository that this pull request targets to call this\
        \ resource."
      operationId: decline
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The pullrequest ID provided by the path
        explode: false
        in: path
        name: pullRequestId
        required: true
        schema:
          type: string
        style: simple
      - description: The current version of the pull request. If the server's version
          isn't the same as the specified version the operation will fail. To determine
          the current version of the pull request it should be fetched from the server
          prior to this operation. Look for the 'version' attribute in the returned
          JSON structure.
        explode: true
        in: query
        name: version
        required: false
        schema:
          type: string
        style: form
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestPullRequestDeclineRequest"
        description: Optional body
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestPullRequest"
          description: The pull request was declined.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to view the pull request.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified repository or pull request does not exist.
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The pull request is not OPEN or has been updated since the
            version specified by the request.
      summary: Decline pull request
      tags:
      - Pull Requests
  /api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/diff-stats-summary/{path}:
    get:
      deprecated: false
      description: "Retrieve the diff stats summary for the given Pull Request. \n\
        \nThe stats summary include the total number of modified files, added lines,\
        \ and deleted lines. \n\nNote: The authenticated user must have <strong>REPO_READ</strong>\
        \ permission for the repository that this pull request targets to call this\
        \ resource."
      operationId: getDiffStatsSummary_2
      parameters:
      - description: Optional path to the file which should be diffed
        explode: false
        in: path
        name: path
        required: true
        schema:
          pattern: .*
          type: string
        style: simple
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The since commit hash to stream a diff between two arbitrary
          hashes
        explode: true
        in: query
        name: sinceId
        required: false
        schema:
          type: string
        style: form
      - description: "The previous path to the file, if the file has been copied,\
          \ moved or renamed"
        explode: true
        in: query
        name: srcPath
        required: false
        schema:
          type: string
        style: form
      - description: The until commit hash to stream a diff between two arbitrary
          hashes
        explode: true
        in: query
        name: untilId
        required: false
        schema:
          type: string
        style: form
      - description: Optional whitespace flag which can be set to <code>ignore-all</code>
        explode: true
        in: query
        name: whitespace
        required: false
        schema:
          type: string
        style: form
      - description: The ID of the pull request within the repository
        explode: false
        in: path
        name: pullRequestId
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestDiffStatsSummary"
          description: The diff stats summary
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to view the specified pull request.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified repository or pull request does not exist.
      summary: Get diff stats summary for pull request
      tags:
      - Pull Requests
  /api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/diff/{path}:
    get:
      deprecated: false
      description: "Streams a diff within a pull request. \n\nIf the specified file\
        \ has been copied, moved or renamed, the <code>srcPath</code> must also be\
        \ specified to produce the correct diff. \n\nTo stream a raw text representation\
        \ of the diff, this endpoint can be called with the request header 'Accept:\
        \ text/plain'. \n\nNote: This RESTful endpoint is currently <i>not paged</i>.\
        \ The server will internally apply a hard cap to the streamed lines, and it\
        \ is not possible to request subsequent pages if that cap is exceeded. \n\n\
        The authenticated user must have <strong>REPO_READ</strong> permission for\
        \ the repository that this pull request targets to call this resource."
      operationId: streamDiff_2
      parameters:
      - description: The security scheme for avatar URLs. If the scheme is not present
          then it is inherited from the request. It can be set to "https" to force
          the use of secure URLs. Not applicable if streaming raw diff
        explode: true
        in: query
        name: avatarScheme
        required: false
        schema:
          type: string
        style: form
      - description: The path to the file which should be diffed (optional)
        explode: false
        in: path
        name: path
        required: true
        schema:
          pattern: .*
          type: string
        style: simple
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The number of context lines to include around added/removed lines
          in the diff
        explode: true
        in: query
        name: contextLines
        required: false
        schema:
          type: string
        style: form
      - description: The since commit hash to stream a diff between two arbitrary
          hashes
        explode: true
        in: query
        name: sinceId
        required: false
        schema:
          type: string
        style: form
      - description: "The previous path to the file, if the file has been copied,\
          \ moved or renamed"
        explode: true
        in: query
        name: srcPath
        required: false
        schema:
          type: string
        style: form
      - description: The type of diff being requested. When withComments is true this
          works as a hint to the system to attach the correct set of comments to the
          diff. Not applicable if streaming raw diff
        explode: true
        in: query
        name: diffType
        required: false
        schema:
          type: string
        style: form
      - description: The until commit hash to stream a diff between two arbitrary
          hashes
        explode: true
        in: query
        name: untilId
        required: false
        schema:
          type: string
        style: form
      - description: The pull request ID.
        explode: false
        in: path
        name: pullRequestId
        required: true
        schema:
          type: string
        style: simple
      - description: Optional whitespace flag which can be set to <code>ignore-all</code>
        explode: true
        in: query
        name: whitespace
        required: false
        schema:
          type: string
        style: form
      - description: "<code>true</code> to embed comments in the diff (the default);\
          \ otherwise, <code>false</code> to stream the diff without comments. Not\
          \ applicable if streaming raw diff"
        explode: true
        in: query
        name: withComments
        required: false
        schema:
          type: string
        style: form
      - description: If present the service adds avatar URLs for comment authors where
          the provided value specifies the desired avatar size in pixels. Not applicable
          if streaming raw diff
        explode: true
        in: query
        name: avatarSize
        required: false
        schema:
          type: string
        style: form
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestDiff"
          description: A page of differences from a pull request.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: If the request was malformed.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to view the repository or pull request.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The repository or pull request does not exist.
      summary: Stream a diff within a pull request
      tags:
      - Pull Requests
  /api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/merge:
    get:
      deprecated: false
      description: "Test whether a pull request can be merged. \n\nA pull request\
        \ may not be merged if: \n\n- there are conflicts that need to be manually\
        \ resolved before merging; and/or\n- one or more merge checks have vetoed\
        \ the merge.\n\n\nThe authenticated user must have <strong>REPO_READ</strong>\
        \ permission for the repository that this pull request targets to call this\
        \ resource."
      operationId: canMerge
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The ID of the pull request within the repository
        explode: false
        in: path
        name: pullRequestId
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestPullRequestMergeability"
          description: The mergeability status of the pull request.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to view the specified pull request.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified repository or pull request does not exist.
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified pull request is not open.
      summary: Test if pull request can be merged
      tags:
      - Pull Requests
    post:
      deprecated: false
      description: |-
        Merge the specified pull request immediately or set the pull request to auto-merge when all the merge checks pass by setting <strong>autoMerge</strong> field in the request body.

        The authenticated user must have <strong>REPO_WRITE</strong> permission for the repository that this pull request targets to call this resource.
      operationId: merge
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The ID of the pull request within the repository
        explode: false
        in: path
        name: pullRequestId
        required: true
        schema:
          type: string
        style: simple
      - description: The current version of the pull request. If the server's version
          isn't the same as the specified version the operation will fail. To determine
          the current version of the pull request it should be fetched from the server
          prior to this operation. Look for the 'version' attribute in the returned
          JSON structure.
        explode: true
        in: query
        name: version
        required: false
        schema:
          type: string
        style: form
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestPullRequestMergeRequest"
        description: The body holder
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestPullRequest"
          description: The merged pull request.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to merge the specified pull request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The auto-merge setting is not enabled for the repository that
            this pull request targets.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified repository or pull request does not exist.
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "One of the following error cases occurred (check the error\
            \ message for more details): \n\n- The pull request has conflicts.\n-\
            \ A merge check vetoed the merge.\n- The specified version is out of date.\n\
            - The specified pull request is not open.\n- The <em>to</em> repository\
            \ is archived.\n"
      summary: Merge pull request
      tags:
      - Pull Requests
  /api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/merge-base:
    get:
      deprecated: false
      description: |-
        Returns the best common ancestor between the latest commits of the source and target branches of the pull request.

        If more than one best common ancestor exists, only one will be returned. It is unspecified which will be returned.
      operationId: getMergeBase_1
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The pull request ID.
        explode: false
        in: path
        name: pullRequestId
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestCommit"
          description: The common ancestor of the latest commits in the source and
            target branches of this pull request
        "204":
          description: No common parent between exist
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "The project, repository, or pull request does not exist"
      summary: Get the common ancestor between the latest commits of the source and
        target branches of the pull request
      tags:
      - Pull Requests
  /api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/participants:
    delete:
      deprecated: true
      description: "Unassigns a participant from the REVIEWER role they may have been\
        \ given in a pull request. \n\nIf the participant has no explicit role this\
        \ method has no effect. \n\nAfterwards, the user will still remain a participant\
        \ in the pull request but their role will be reduced to PARTICIPANT. This\
        \ is because once made a participant of a pull request, a user will forever\
        \ remain a participant. Only their role may be altered. \n\nThe authenticated\
        \ user must have <strong>REPO_WRITE</strong> permission for the repository\
        \ that this pull request targets to call this resource. \n\n<strong>Deprecated\
        \ since 4.2</strong>. Use /rest/api/1.0/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/participants/{userSlug}\
        \ instead."
      operationId: unassignParticipantRole_1
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The ID of the pull request within the repository
        explode: false
        in: path
        name: pullRequestId
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: username
        required: false
        schema:
          type: string
        style: form
      responses:
        "204":
          description: The update completed.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to update the pull request.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified repository or pull request does not exist.
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: Removing reviewers isn't supported on archived repositories.
      summary: Unassign pull request participant
      tags:
      - Deprecated
      - Pull Requests
    get:
      deprecated: false
      description: "Retrieves a page of the participants for a given pull request.\
        \ \n\nThe authenticated user must have <strong>REPO_READ</strong> permission\
        \ for the repository that this pull request targets to call this resource."
      operationId: listParticipants
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The ID of the pull request within the repository
        explode: false
        in: path
        name: pullRequestId
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      - description: "Start number for the page (inclusive). If not passed, first\
          \ page is assumed."
        example: 0
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 0
          type: number
        style: form
      - description: "Number of items to return. If not passed, a page size of 25\
          \ is used."
        example: 25
        explode: true
        in: query
        name: limit
        required: false
        schema:
          example: 25
          type: number
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/listParticipants_200_response"
          description: Details of the participants in this pull request.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to view the pull request.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified repository or pull request does not exist.
      summary: Get pull request participants
      tags:
      - Pull Requests
    post:
      deprecated: false
      description: "Assigns a participant to an explicit role in pull request. Currently\
        \ only the REVIEWER role may be assigned. \n\nIf the user is not yet a participant\
        \ in the pull request, they are made one and assigned the supplied role. \n\
        \nIf the user is already a participant in the pull request, their previous\
        \ role is replaced with the supplied role unless they are already assigned\
        \ the AUTHOR role which cannot be changed and will result in a Bad Request\
        \ (400) response code. \n\nThe authenticated user must have <strong>REPO_WRITE</strong>\
        \ permission for the repository that this pull request targets to call this\
        \ resource."
      operationId: assignParticipantRole
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The ID of the pull request within the repository
        explode: false
        in: path
        name: pullRequestId
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestPullRequestAssignParticipantRoleRequest"
        description: "The participant to be added to the pull request, includes the\
          \ user and their role"
        required: true
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestPullRequestParticipant"
          description: Details of the participants in this pull request.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "The request does not have the username and role, or is attempting\
            \ an invalid assignment."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to update the pull request.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified repository or pull request does not exist.
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: Adding reviewers isn't supported on archived repositories
      summary: Assign pull request participant role
      tags:
      - Pull Requests
  /api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/participants/{userSlug}:
    delete:
      deprecated: false
      description: "Unassigns a participant from the REVIEWER role they may have been\
        \ given in a pull request. \n\nIf the participant has no explicit role this\
        \ method has no effect. \n\nAfterwards, the user will still remain a participant\
        \ in the pull request but their role will be reduced to PARTICIPANT. This\
        \ is because once made a participant of a pull request, a user will forever\
        \ remain a participant. Only their role may be altered. \n\nThe authenticated\
        \ user must have <strong>REPO_WRITE</strong> permission for the repository\
        \ that this pull request targets to call this resource."
      operationId: unassignParticipantRole
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The slug for the user being unassigned
        explode: false
        in: path
        name: userSlug
        required: true
        schema:
          type: string
        style: simple
      - description: The ID of the pull request within the repository
        explode: false
        in: path
        name: pullRequestId
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The update completed.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The request does not have the username.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to update the pull request.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified repository or pull request does not exist.
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: Removing reviewers isn't supported on archived repositories.
      summary: Unassign pull request participant
      tags:
      - Pull Requests
    put:
      deprecated: false
      description: "Change the current user's status for a pull request. Implicitly\
        \ adds the user as a participant if they are not already. If the current user\
        \ is the author, this method will fail. \n\nThe possible values for {@code\
        \ status} are <strong>UNAPPROVED</strong>, <strong>NEEDS_WORK</strong> (which\
        \ is referred to as \"Requested changes\" in the frontend from 8.10 onward),\
        \ or <strong>APPROVED</strong>. \n\nIf the new {@code status} is <strong>NEEDS_WORK</strong>\
        \ or <strong>APPROVED</strong> then the {@code lastReviewedCommit} for the\
        \ participant will be updated to the latest commit of the source branch of\
        \ the pull request. \n\nThe authenticated user must have <strong>REPO_READ</strong>\
        \ permission for the repository that this pull request targets to call this\
        \ resource."
      operationId: updateStatus
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The slug for the user changing their status
        explode: false
        in: path
        name: userSlug
        required: true
        schema:
          type: string
        style: simple
      - description: The ID of the pull request within the repository
        explode: false
        in: path
        name: pullRequestId
        required: true
        schema:
          type: string
        style: simple
      - deprecated: true
        description: "The current version of the pull request. If the server's version\
          \ isn't the same as the specified version the operation will fail. To determine\
          \ the current version of the pull request it should be fetched from the\
          \ server prior to this operation. Look for the 'version' attribute in the\
          \ returned JSON structure. Note: This parameter is deprecated. Use last\
          \ reviewed commit in request body instead"
        explode: true
        in: query
        name: version
        required: false
        schema:
          type: string
        style: form
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestPullRequestAssignStatusRequest"
        description: "The participant representing the status to set, includes the\
          \ status of the participant and last reviewed commit. If last reviewed commit\
          \ is provided, it will be used to update the participant status. The operation\
          \ will fail if the latest commit of the pull request does not match the\
          \ provided last reviewed commit. If last reviewed commit is not provided,\
          \ the latest commit of the pull request will be used for the update by default."
        required: true
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestPullRequestParticipant"
          description: Details of the new participant.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified status was invalid or the currently authenticated
            user is the author of the PR and cannot have its status updated.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to view the pull request.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified repository or pull request does not exist.
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "The pull request is not open, or has been updated since the\
            \ last reviewed commit specified by the request."
      summary: Change pull request status
      tags:
      - Pull Requests
  /api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/reopen:
    post:
      deprecated: false
      description: "Re-open a declined pull request. \n\nThe authenticated user must\
        \ have <strong>REPO_READ</strong> permission for the repository that this\
        \ pull request targets to call this resource."
      operationId: reopen
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The ID of the pull request within the repository
        explode: false
        in: path
        name: pullRequestId
        required: true
        schema:
          type: string
        style: simple
      - description: The current version of the pull request. If the server's version
          isn't the same as the specified version the operation will fail. To determine
          the current version of the pull request it should be fetched from the server
          prior to this operation. Look for the 'version' attribute in the returned
          JSON structure.
        explode: true
        in: query
        name: version
        required: false
        schema:
          type: string
        style: form
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestPullRequestReopenRequest"
        description: The body holder
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestPullRequest"
          description: The merged pull request.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to reopen the specified pull request.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified repository or pull request does not exist.
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "One of the following error cases occurred (check the error\
            \ message for more details): \n\n- The pull request is not in a declined\
            \ state.\n- The specified version is out of date.\n- The <em>to</em> repository\
            \ is archived.\n"
      summary: Re-open pull request
      tags:
      - Pull Requests
  /api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/review:
    delete:
      deprecated: false
      description: "Discard a pull request review for the authenticated user. \n\n\
        The authenticated user must have <strong>REPO_READ</strong> permission for\
        \ the repository to call this resource."
      operationId: discardReview
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The pull request ID.
        explode: false
        in: path
        name: pullRequestId
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The pull request review has been discarded.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to discard the the pull request review
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified pull request or repository does not exist.
      summary: Discard pull request review
      tags:
      - Pull Requests
    get:
      deprecated: false
      description: Get the <code>CommentThread</code> threads which have <code>Comment</code>
        comments that have a <code>CommentState#PENDING</code> pending state and are
        part of the pull request review for the authenticated user.
      operationId: getReview
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The pull request ID.
        explode: false
        in: path
        name: pullRequestId
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      - description: "Start number for the page (inclusive). If not passed, first\
          \ page is assumed."
        example: 0
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 0
          type: number
        style: form
      - description: "Number of items to return. If not passed, a page size of 25\
          \ is used."
        example: 25
        explode: true
        in: query
        name: limit
        required: false
        schema:
          example: 25
          type: number
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/getComments_200_response"
          description: A page of Comments from the supplied pull request.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to view the repository or pull request.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The repository or pull request does not exist.
      summary: Get pull request comment thread
      tags:
      - Pull Requests
    put:
      deprecated: false
      description: Complete a review on a pull request.
      operationId: finishReview
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The pull request ID.
        explode: false
        in: path
        name: pullRequestId
        required: true
        schema:
          type: string
        style: simple
      - deprecated: true
        description: "The current version of the pull request. If the server's version\
          \ isn't the same as the specified version the operation will fail. To determine\
          \ the current version of the pull request it should be fetched from the\
          \ server prior to this operation. Look for the 'version' attribute in the\
          \ returned JSON structure. Note: This parameter is deprecated. Use last\
          \ reviewed commit in request body instead"
        explode: true
        in: query
        name: version
        required: false
        schema:
          type: string
        style: form
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestPullRequestFinishReviewRequest"
        description: "The REST request which contains comment text, last reviewed\
          \ commit and participant status. If last reviewed commit is provided, it\
          \ will be used to update the participant status. The operation will fail\
          \ if the latest commit of the pull request does not match the provided last\
          \ reviewed commit. If last reviewed commit is not provided, the latest commit\
          \ of the pull request will be used for the update by default."
      responses:
        "200":
          content:
            application/json;charset=UTF-8: {}
          description: Getting back the number of published comments and completing
            the review on a pull request.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "The request is invalid when there is no request body provided,\
            \ or the participant status in the request is invalid."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "The currently authenticated user has insufficient permissions\
            \ to view the pull request, update a comment or watch the pull request."
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: There is no pull request review for the user to finish.
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "The pull request has been updated since the last reviewed\
            \ commit specified by the request, or reviews cannot be made on pull requests\
            \ in archived repositories."
      summary: Complete pull request review
      tags:
      - Pull Requests
  /api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/watch:
    delete:
      deprecated: false
      description: "Remove the authenticated user as a watcher for the specified pull\
        \ request. \n\nThe authenticated user must have <strong>REPO_READ</strong>\
        \ permission for the repository that this pull request targets to call this\
        \ resource."
      operationId: unwatch_1
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The pull request ID.
        explode: false
        in: path
        name: pullRequestId
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The user is no longer watching the pull request.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to view the pull request.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified repository or pull request does not exist.
      summary: Stop watching pull request
      tags:
      - Pull Requests
    post:
      deprecated: false
      description: "Add the authenticated user as a watcher for the specified pull\
        \ request. \n\nThe authenticated user must have <strong>REPO_READ</strong>\
        \ permission for the repository that this pull request targets to call this\
        \ resource."
      operationId: watch_1
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The pull request ID.
        explode: false
        in: path
        name: pullRequestId
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The user is now watching the pull request.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to view the pull request.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified repository or pull request does not exist.
      summary: Watch pull request
      tags:
      - Pull Requests
  /api/latest/projects/{projectKey}/repos/{repositorySlug}/raw/{path}:
    get:
      deprecated: false
      description: "Retrieve the raw content for a file path at a specified revision.\
        \ \n\nThe authenticated user must have <strong>REPO_READ</strong> permission\
        \ for the specified repository to call this resource."
      operationId: streamRaw
      parameters:
      - description: The file path to retrieve content from
        explode: false
        in: path
        name: path
        required: true
        schema:
          pattern: .*
          type: string
        style: simple
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: "A specific commit or ref to retrieve the raw content at, or\
          \ the default branch if not specified"
        explode: true
        in: query
        name: at
        required: false
        schema:
          type: string
        style: form
      - description: "If present or \"true\", triggers the raw content to be markup-rendered\
          \ and returned as HTML; otherwise, if not specified, or any value other\
          \ than \"true\", the content is streamed without markup"
        explode: true
        in: query
        name: markup
        required: false
        schema:
          type: string
        style: form
      - description: "(Optional) true if HTML should be escaped in the input markup,\
          \ false otherwise. If not specified, the value of the markup.render.html.escape\
          \ property, which is true by default, will be used"
        explode: true
        in: query
        name: htmlEscape
        required: false
        schema:
          type: string
        style: form
      - description: "(Optional) true if headings should contain an ID based on the\
          \ heading content. If not specified, the value of the markup.render.headerids\
          \ property, which is false by default, will be used"
        explode: true
        in: query
        name: includeHeadingId
        required: false
        schema:
          type: string
        style: form
      - description: "(Optional) Whether the markup implementation should convert\
          \ newlines to breaks. If not specified, the value of the markup.render.hardwrap\
          \ property, which is true by default, will be used"
        explode: true
        in: query
        name: hardwrap
        required: false
        schema:
          type: string
        style: form
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json: {}
          description: The raw contents from a file.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The path parameter was not supplied.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to view the repository.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The repository does not exist.
      summary: Get raw content of a file at revision
      tags:
      - Repository
  /api/latest/projects/{projectKey}/repos/{repositorySlug}/readme:
    get:
      deprecated: false
      description: "Retrieves the README for the repository, if it's been defined.\
        \ \n\nThis checks the repository for a <pre>README</pre> file, optionally\
        \ with an <pre>md</pre> or <pre>txt</pre>extension, and, if found, streams\
        \ it. By default, the <i>raw content</i> of the file is streamed. Appending\
        \ <pre>?markup</pre> to the URL will stream an HTML-rendered version instead.\
        \ Note that, when streaming HTML, relative URLs in the README will not work\
        \ if applied relative to this URL. \n\nThe authenticated user must have <strong>REPO_READ</strong>\
        \ permission for the specified repository to call this resource."
      operationId: streamReadme
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: "A specific commit or ref to retrieve the guidelines at, or the\
          \ default branch if not specified"
        explode: true
        in: query
        name: at
        required: false
        schema:
          type: string
        style: form
      - description: "If present or <code>\"true\"</code>, triggers the raw content\
          \ to be markup-rendered and returned as HTML; otherwise, if not specified,\
          \ or any value other than <code>\"true\"</code>, the content is streamed\
          \ without markup"
        explode: true
        in: query
        name: markup
        required: false
        schema:
          type: string
        style: form
      - description: "(Optional) true if HTML should be escaped in the input markup,\
          \ false otherwise. If not specified, the value of the <code>markup.render.html.escape</code>\
          \ property, which is <code>true</code> by default, will be used"
        explode: true
        in: query
        name: htmlEscape
        required: false
        schema:
          type: string
        style: form
      - description: "(Optional) true if headings should contain an ID based on the\
          \ heading content. If not specified, the value of the <code>markup.render.headerids</code>\
          \ property, which is false by default, will be used"
        explode: true
        in: query
        name: includeHeadingId
        required: false
        schema:
          type: string
        style: form
      - description: "(Optional) Whether the markup implementation should convert\
          \ newlines to breaks. If not specified, the value of the <code>markup.render.hardwrap</code>\
          \ property, which is <code>true</code> by default, will be used"
        explode: true
        in: query
        name: hardwrap
        required: false
        schema:
          type: string
        style: form
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            '*/*': {}
          description: The README for the repository.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to read the repository.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified repository does not exist.
      summary: Get repository readme
      tags:
      - Project
  /api/latest/projects/{projectKey}/repos/{repositorySlug}/recreate:
    post:
      deprecated: false
      description: "If a create or fork operation fails, calling this method will\
        \ clean up the broken repository and try again. The repository must be in\
        \ an INITIALISATION_FAILED state. \n\nThe authenticated user must have <strong>PROJECT_ADMIN</strong>\
        \ permission for the specified project to call this resource."
      operationId: retryCreateRepository
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestRepository"
          description: The newly created repository.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The repository was not created due to a validation error.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to create a repository.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified repository does not exist.
      summary: Retry repository creation
      tags:
      - Project
  /api/latest/projects/{projectKey}/repos/{repositorySlug}/ref-change-activities:
    get:
      deprecated: false
      description: "Retrieve a page of repository ref change activity. \n\nThe authenticated\
        \ user must have <strong>REPO_ADMIN</strong> permission to call this resource."
      operationId: getRefChangeActivity
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: (optional) exact match for a ref ID to filter ref change activity
          for
        explode: true
        in: query
        name: ref
        required: false
        schema:
          type: string
        style: form
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      - description: "Start number for the page (inclusive). If not passed, first\
          \ page is assumed."
        example: 0
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 0
          type: number
        style: form
      - description: "Number of items to return. If not passed, a page size of 25\
          \ is used."
        example: 25
        explode: true
        in: query
        name: limit
        required: false
        schema:
          example: 25
          type: number
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/getRefChangeActivity_200_response"
          description: A page of ref change activity.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The user is currently not authenticated or the user does not
            have REPO_ADMIN permission.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified repository does not exist.
      summary: Get ref change activity
      tags:
      - Repository
  /api/latest/projects/{projectKey}/repos/{repositorySlug}/ref-change-activities/branches:
    get:
      deprecated: false
      description: "Retrieve a page of branches with ref change activities for a specific\
        \ repository. \n\nThe authenticated user must have <strong>REPO_ADMIN</strong>\
        \ permission to call this resource."
      operationId: findBranches
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: (optional) Partial match for a ref ID to filter minimal refs
          for
        explode: true
        in: query
        name: filterText
        required: false
        schema:
          type: string
        style: form
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      - description: "Start number for the page (inclusive). If not passed, first\
          \ page is assumed."
        example: 0
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 0
          type: number
        style: form
      - description: "Number of items to return. If not passed, a page size of 25\
          \ is used."
        example: 25
        explode: true
        in: query
        name: limit
        required: false
        schema:
          example: 25
          type: number
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/findByCommit_200_response"
          description: A page of branches with ref change activities.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The user is currently not authenticated or the user does not
            have REPO_ADMIN permission.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified repository does not exist.
      summary: Get branches with ref change activities for repository
      tags:
      - Repository
  /api/latest/projects/{projectKey}/repos/{repositorySlug}/related:
    get:
      deprecated: false
      description: "Retrieve repositories which are related to this one. Related repositories\
        \ are from the same Repository#getHierarchyId() hierarchy as this repository.\
        \ \n\nOnly repositories to which the authenticated user has <b>REPO_READ</b>\
        \ permission will be included, even if more repositories are part of this\
        \ repository's hierarchy."
      operationId: getRelatedRepositories
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      - description: "Start number for the page (inclusive). If not passed, first\
          \ page is assumed."
        example: 0
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 0
          type: number
        style: form
      - description: "Number of items to return. If not passed, a page size of 25\
          \ is used."
        example: 25
        explode: true
        in: query
        name: limit
        required: false
        schema:
          example: 25
          type: number
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/getRepositoriesRecentlyAccessed_200_response"
          description: A page of repositories related to the request repository.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to see the request repository.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The request repository does not exist.
      summary: Get related repository
      tags:
      - Project
  /api/latest/projects/{projectKey}/repos/{repositorySlug}/secret-scanning/allowlist:
    get:
      deprecated: false
      description: |-
        Find repository secret scanning allowlist rules by filtering.

        Repository **Admin** is required
      operationId: search_2
      parameters:
      - description: Filter names by the provided text
        example: Access
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      - description: Order by
        explode: true
        in: query
        name: order
        required: false
        schema:
          enum:
          - NAME_ASC
          - NAME_DESC
          type: string
        style: form
      - description: "Start number for the page (inclusive). If not passed, first\
          \ page is assumed."
        example: 0
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 0
          type: number
        style: form
      - description: "Number of items to return. If not passed, a page size of 25\
          \ is used."
        example: 25
        explode: true
        in: query
        name: limit
        required: false
        schema:
          example: 25
          type: number
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/search_2_200_response"
          description: Page of allowlist rules
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The request was not a correctly formed allowlist rule. See
            returned error for more details
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The authenticated user is not permitted to view repository
            rules
      summary: Find repository secret scanning allowlist rules
      tags:
      - Security
    post:
      deprecated: false
      description: |-
        Create a new repository secret scanning allowlist rule. Repository allowlist rules are used when scanning the given repository.

        Repository **Admin** is required
      operationId: createAllowlistRule_1
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          '*/*':
            schema:
              $ref: "#/components/schemas/RestSecretScanningAllowlistRuleSetRequest"
        description: "Allowlist rule to create, either the line regular expression\
          \ or the path regular expression must be present"
        required: true
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestSecretScanningAllowlistRule"
          description: The created rule
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The request did not contain a correctly formed allowlist rule.
            See returned error for more details
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The authenticated user is not permitted to create repository
            rules
      summary: Create repository secret scanning allowlist rule
      tags:
      - Security
  /api/latest/projects/{projectKey}/repos/{repositorySlug}/secret-scanning/allowlist/{id}:
    delete:
      deprecated: false
      description: |-
        Delete a repository secret scanning allowlist rule with the provided ID.

        Repository **Admin** is required
      operationId: deleteAllowlistRule_1
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The allowlist rule id.
        example: 7
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Empty response indicating that the allowlist rule was deleted
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The authenticated user is not permitted to delete repository
            allowlist rules
      summary: Delete a repository secret scanning allowlist rule
      tags:
      - Security
    get:
      deprecated: false
      description: |-
        Get a repository secret scanning allowlist rule by ID.

        Repository **Admin** is required
      operationId: getAllowlistRule_1
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The allowlist rule id.
        example: 7
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestSecretScanningAllowlistRule"
          description: The requested allowlist rule
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The authenticated user is not permitted to view repository
            allowlist rules
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The requested allowlist rule was not found
      summary: Get a repository secret scanning allowlist rule
      tags:
      - Security
    put:
      deprecated: false
      description: |-
        Edit a repository secret scanning allowlist rule.

        Repository **Admin** is required
      operationId: editAllowlistRule_1
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The allowlist rule id.
        example: 7
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          '*/*':
            schema:
              $ref: "#/components/schemas/RestSecretScanningAllowlistRuleSetRequest"
        required: true
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestSecretScanningAllowlistRule"
          description: The updated allowlist rule
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The request did not contain a correctly formed allowlist rule.
            See returned error for more details
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The authenticated user is not permitted to edit repository
            allowlist rules
      summary: Edit an existing repository secret scanning allowlist rule
      tags:
      - Security
  /api/latest/projects/{projectKey}/repos/{repositorySlug}/secret-scanning/exempt:
    delete:
      deprecated: false
      description: Remove a repository from being exempt from secret scanning
      operationId: deleteExemptRepo
      parameters:
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Empty response indicating that the exempt repository was deleted
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The authenticated user is not permitted to delete an exempt
            repository
      summary: Delete an exempt repository
      tags:
      - Security
    get:
      deprecated: false
      description: Check whether a repository is exempt from secret scanning
      operationId: isRepoExempt
      parameters:
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8: {}
          description: "True if the repository is exempt from secret scanning, false\
            \ otherwise"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The authenticated user is not permitted to check whether a
            repository is exempt from secret scanning
      summary: Get whether a repository is exempt
      tags:
      - Security
    put:
      deprecated: true
      description: "Exempt a repository from being scanned for secrets \n\n<strong>Deprecated\
        \ since 8.6</strong>. Exemptions are now managed by scope. \nUse POST /rest/api/1.0/secret-scanning/exempt\
        \ for global scope \nUse POST /rest/api/1.0/projects/{projectKey}/secret-scanning/exempt\
        \ for the project scope"
      operationId: addExemptRepo
      parameters:
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: An exempt repo was added
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The authenticated user is not permitted to exempt a repository
            from secret scanning
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: At least one of specified repositories have already been previously
            made exempt.
      summary: Exempt a repo from secret scanning
      tags:
      - Security
  /api/latest/projects/{projectKey}/repos/{repositorySlug}/secret-scanning/rules:
    get:
      deprecated: false
      description: |-
        Find repository secret scanning rules by filtering.

        Repository **Admin** is required
      operationId: search_3
      parameters:
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      - description: Filter names by the provided text
        example: Access
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: Order by
        explode: true
        in: query
        name: order
        required: false
        schema:
          enum:
          - NAME_ASC
          - NAME_DESC
          type: string
        style: form
      - description: "Start number for the page (inclusive). If not passed, first\
          \ page is assumed."
        example: 0
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 0
          type: number
        style: form
      - description: "Number of items to return. If not passed, a page size of 25\
          \ is used."
        example: 25
        explode: true
        in: query
        name: limit
        required: false
        schema:
          example: 25
          type: number
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/search_3_200_response"
          description: Page of rules
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The request was not correctly formed rule. See returned error
            for more details
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The authenticated user is not permitted to view repository
            rules
      summary: Find repository secret scanning rules
      tags:
      - Security
    post:
      deprecated: false
      description: |-
        Create a new repository secret scanning rule. Repository rules are used when scanning the given repository.

        Repository **Admin** is required
      operationId: createRule_1
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          '*/*':
            schema:
              $ref: "#/components/schemas/RestSecretScanningRuleSetRequest"
        description: "Rule to create, either the line regular expression or the path\
          \ regular expression must be present"
        required: true
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestSecretScanningRule"
          description: The created rule
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The request did not contain a correctly formed rule. See returned
            error for more details
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The authenticated user is not permitted to create repository
            rules
      summary: Create repository secret scanning rule
      tags:
      - Security
  /api/latest/projects/{projectKey}/repos/{repositorySlug}/secret-scanning/rules/{id}:
    delete:
      deprecated: false
      description: |-
        Delete a repository secret scanning rule with the provided ID.

        Repository **Admin** is required
      operationId: deleteRule_1
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The rule id.
        example: 7
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Empty response indicating that the rule was deleted
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The authenticated user is not permitted to delete repository
            rules
      summary: Delete a repository secret scanning rule
      tags:
      - Security
    get:
      deprecated: false
      description: |-
        Get a repository secret scanning rule by ID.

        Repository **Admin** is required
      operationId: getRule_1
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The rule id.
        example: 7
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestSecretScanningRule"
          description: The requested rule
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The authenticated user is not permitted to view repository
            rules
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The requested rule was not found
      summary: Get a repository secret scanning rule
      tags:
      - Security
    put:
      deprecated: false
      description: |-
        Edit a repository secret scanning rule.

        Repository **Admin** is required
      operationId: editRule_1
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The rule id.
        example: 7
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          '*/*':
            schema:
              $ref: "#/components/schemas/RestSecretScanningRuleSetRequest"
        required: true
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestSecretScanningRule"
          description: The updated rule
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The request did not contain a correctly formed rule. See returned
            error for more details
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The authenticated user is not permitted to edit repository
            rules
      summary: Edit an existing repository secret scanning rule
      tags:
      - Security
  /api/latest/projects/{projectKey}/repos/{repositorySlug}/settings/auto-decline:
    delete:
      deprecated: false
      description: |-
        Delete auto decline settings for the supplied repository.

        The authenticated user must have <strong>REPO_ADMIN</strong> permission for this repository to call the resource.
      operationId: deleteAutoDeclineSettings_1
      parameters:
      - description: The project key
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The auto decline settings have been deleted successfully.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to delete the auto decline settings.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified repository does not exist.
      summary: Delete auto decline settings
      tags:
      - Repository
    get:
      deprecated: false
      description: |-
        Retrieves the auto decline settings for the supplied repository. Project settings will be returned if no explicit settings have been set for the repository. In the case that there are no project settings, the default settings will be returned.

        The authenticated user must have <strong>REPO_READ</strong> permission for this repository to call the resource.
      operationId: getAutoDeclineSettings_1
      parameters:
      - description: The project key
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestAutoDeclineSettings"
          description: The auto decline settings
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to retrieve the auto decline settings.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified repository does not exist.
      summary: Get auto decline settings
      tags:
      - Repository
    put:
      deprecated: false
      description: |-
        Creates or updates the auto decline settings for the supplied repository.

        The authenticated user must have <strong>REPO_ADMIN</strong> permission for this repository to call the resource
      operationId: setAutoDeclineSettings_1
      parameters:
      - description: The project key
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestAutoDeclineSettingsRequest"
        description: The settings to create or update
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestAutoDeclineSettings"
          description: The auto decline settings
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "inactivityWeeks was not one of 1, 2, 4, 8, or, 12, or the\
            \ enabled parameter was not included in the request."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to create or update the auto decline settings.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified repository does not exist.
      summary: Create auto decline settings
      tags:
      - Repository
  /api/latest/projects/{projectKey}/repos/{repositorySlug}/settings/auto-merge:
    delete:
      deprecated: false
      description: |-
        Deletes pull request auto-merge settings for the supplied repository.

        The authenticated user must have <strong>REPO_ADMIN</strong> permission for this repository to call the resource.
      operationId: delete_5
      parameters:
      - description: The project key
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The pull request auto-merge settings
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to delete the pull request auto-merge settings.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The pull request auto-merge settings cannot be modified due
            to a restriction enforced by the supplied repository's project.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified repository does not exist.
      summary: Delete pull request auto-merge settings
      tags:
      - Repository
    get:
      deprecated: false
      description: |-
        Retrieves the pull request auto-merge settings for the supplied repository. Project settings will be returned if no explicit settings have been set for the repository. In the case that there are no project settings, the default settings will be returned. If the repository's project has restricted its auto-merge settings, then the settings of the project will be returned.

        The authenticated user must have <strong>REPO_READ</strong> permission for this repository to call the resource.
      operationId: get_5
      parameters:
      - description: The project key
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestAutoMergeRestrictedSettings"
          description: The pull request auto-merge settings
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to retrieve the pull request auto-merge settings.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified repository does not exist.
      summary: Get pull request auto-merge settings
      tags:
      - Repository
    put:
      deprecated: false
      description: |-
        Creates or updates the pull request auto-merge settings for the supplied repository.

        The authenticated user must have <strong>REPO_ADMIN</strong> permission for this repository to call the resource.
      operationId: set_1
      parameters:
      - description: The project key
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestAutoMergeSettingsRequest"
        description: The settings to create or update
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestAutoMergeRestrictedSettings"
          description: The pull request auto-merge settings
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The 'enabled' field was not provided correctly.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to create or update the pull request auto-merge settings.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The pull request auto-merge settings cannot be modified due
            to a restriction enforced by the supplied repository's project.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified repository does not exist.
      summary: Create or update the pull request auto-merge settings
      tags:
      - Repository
  /api/latest/projects/{projectKey}/repos/{repositorySlug}/settings/hooks:
    get:
      deprecated: false
      description: "Retrieve a page of repository hooks for this repository. \n\n\
        The authenticated user must have <strong>REPO_ADMIN</strong> permission for\
        \ the specified repository to call this resource."
      operationId: getRepositoryHooks_1
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The optional type to filter by.
        explode: true
        in: query
        name: type
        required: false
        schema:
          enum:
          - PRE_RECEIVE
          - POST_RECEIVE
          type: string
        style: form
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      - description: "Start number for the page (inclusive). If not passed, first\
          \ page is assumed."
        example: 0
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 0
          type: number
        style: form
      - description: "Number of items to return. If not passed, a page size of 25\
          \ is used."
        example: 25
        explode: true
        in: query
        name: limit
        required: false
        schema:
          example: 25
          type: number
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/getRepositoryHooks_1_200_response"
          description: A page of repository hooks with their associated enabled state.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to retrieve the hooks.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified repository does not exist.
      summary: Get repository hooks
      tags:
      - Repository
  /api/latest/projects/{projectKey}/repos/{repositorySlug}/settings/hooks/{hookKey}:
    delete:
      deprecated: false
      description: |-
        Delete repository hook configuration for the supplied <strong>hookKey</strong> and <strong>repositorySlug</strong>

        The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository to call this resource.
      operationId: deleteRepositoryHook
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The hook key.
        explode: false
        in: path
        name: hookKey
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The hook configuration matching the supplied <strong>hookKey</strong>
            and <strong>repositorySlug</strong> was deleted
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The settings specified are invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to delete the hook.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified repository or hook does not exist.
      summary: Delete repository hook
      tags:
      - Repository
    get:
      deprecated: false
      description: "Retrieve a repository hook for this repository. \n\nThe authenticated\
        \ user must have <strong>REPO_ADMIN</strong> permission for the specified\
        \ repository to call this resource."
      operationId: getRepositoryHook_1
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The hook key.
        explode: false
        in: path
        name: hookKey
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestRepositoryHook"
          description: The repository hooks with their associated enabled state for
            the supplied hookKey.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to retrieve the hook.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "The specified repository hook does not exist for the given\
            \ repository, or the repository does not exist."
      summary: Get repository hook
      tags:
      - Repository
  /api/latest/projects/{projectKey}/repos/{repositorySlug}/settings/hooks/{hookKey}/enabled:
    delete:
      deprecated: false
      description: "Disable a repository hook for this repository. \n\nThe authenticated\
        \ user must have <strong>REPO_ADMIN</strong> permission for the specified\
        \ repository to call this resource."
      operationId: disableHook_1
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The hook key.
        explode: false
        in: path
        name: hookKey
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestRepositoryHook"
          description: The repository hooks with their associated enabled state for
            the supplied hookKey.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to disable the hook.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified repository or hook does not exist.
      summary: Disable repository hook
      tags:
      - Repository
    put:
      deprecated: false
      description: "Enable a repository hook for this repository and optionally apply\
        \ new configuration. \n\nThe authenticated user must have <strong>REPO_ADMIN</strong>\
        \ permission for the specified repository to call this resource. \n\nA JSON\
        \ document may be provided to use as the settings for the hook. These structure\
        \ and validity of the document is decided by the plugin providing the hook."
      operationId: enableHook_1
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The hook key.
        explode: false
        in: path
        name: hookKey
        required: true
        schema:
          type: string
        style: simple
      - description: The content length.
        explode: false
        in: header
        name: Content-Length
        required: false
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestRepositoryHook"
          description: The repository hooks with their associated enabled state for
            the supplied hookKey.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to enable the hook.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified repository or hook does not exist.
      summary: Enable repository hook
      tags:
      - Repository
  /api/latest/projects/{projectKey}/repos/{repositorySlug}/settings/hooks/{hookKey}/settings:
    get:
      deprecated: false
      description: "Retrieve the settings for a repository hook for this repository.\
        \ \n\nThe authenticated user must have <strong>REPO_ADMIN</strong> permission\
        \ for the specified repository to call this resource."
      operationId: getSettings_1
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The hook key.
        explode: false
        in: path
        name: hookKey
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ExampleSettings"
          description: The settings for the hook.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to retrieve the hook settings.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified repository or hook does not exist.
      summary: Get repository hook settings
      tags:
      - Repository
    put:
      deprecated: false
      description: "Modify the settings for a repository hook for this repository.\
        \ \n\nThe service will reject any settings which are too large, the current\
        \ limit is 32KB once serialized. \n\nThe authenticated user must have <strong>REPO_ADMIN</strong>\
        \ permission for the specified repository to call this resource. \n\nA JSON\
        \ document can be provided to use as the settings for the hook. These structure\
        \ and validity of the document is decided by the plugin providing the hook."
      operationId: setSettings_1
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The hook key.
        explode: false
        in: path
        name: hookKey
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExampleSettings"
        description: The raw settings.
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ExampleSettings"
          description: The settings for the hook.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The settings specified are invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to modify the hook settings.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified repository or hook does not exist.
      summary: Update repository hook settings
      tags:
      - Repository
  /api/latest/projects/{projectKey}/repos/{repositorySlug}/settings/pull-requests:
    get:
      deprecated: false
      description: "Retrieve the pull request settings for the context repository.\
        \ \n\nThe authenticated user must have <strong>REPO_READ</strong> permission\
        \ for the context repository to call this resource. \n\nThis resource will\
        \ call all RestFragments that are registered with the key <strong>bitbucket.repository.settings.pullRequests</strong>.\
        \ If any fragment fails validations by returning a non-empty Map of errors,\
        \ then no fragments will execute. \n\nThe property keys for the settings that\
        \ are bundled with the application are \n\n- mergeConfig - the merge strategy\
        \ configuration for pull requests\n- requiredApprovers - (Deprecated, please\
        \ use com.atlassian.bitbucket.server.bundled-hooks.requiredApproversMergeHook\
        \ instead) the number of approvals required on a pull request for it to be\
        \ mergeable, or 0 if the merge check is disabled\n- com.atlassian.bitbucket.server.bundled-hooks.requiredApproversMergeHook\
        \ - the merge check configuration for required approvers\n- requiredAllApprovers\
        \ - whether or not all approvers must approve a pull request for it to be\
        \ mergeable\n- requiredAllTasksComplete - whether or not all tasks on a pull\
        \ request need to be completed for it to be mergeable\n- requiredSuccessfulBuilds\
        \ - (Deprecated, please use com.atlassian.bitbucket.server.bitbucket-build.requiredBuildsMergeCheck\
        \ instead) the number of successful builds on a pull request for it to be\
        \ mergeable, or 0 if the merge check is disabled\n- com.atlassian.bitbucket.server.bitbucket-build.requiredBuildsMergeCheck\
        \ - the merge check configuration for required builds\n\n\n"
      operationId: getPullRequestSettings_1
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestRepositoryPullRequestSettings"
          description: The repository pull request settings for the context repository.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to see the specified repository.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified repository does not exist.
      summary: Get pull request settings
      tags:
      - Repository
    post:
      deprecated: false
      description: "Update the pull request settings for the context repository. \n\
        \nThe authenticated user must have <strong>REPO_ADMIN</strong> permission\
        \ for the context repository to call this resource. \n\nThis resource will\
        \ call all RestFragments that are registered with the key <strong>bitbucket.repository.settings.pullRequests</strong>.\
        \ If any fragment fails validations by returning a non-empty Map of errors,\
        \ then no fragments will execute. \n\nOnly the settings that should be updated\
        \ need to be included in the request. \n\nThe property keys for the settings\
        \ that are bundled with the application are \n\n- mergeConfig - the merge\
        \ strategy configuration for pull requests\n- requiredApprovers - (Deprecated,\
        \ please use com.atlassian.bitbucket.server.bundled-hooks.requiredApproversMergeHook\
        \ instead) the number of approvals required on a pull request for it to be\
        \ mergeable, or 0 to disable the merge check\n- com.atlassian.bitbucket.server.bundled-hooks.requiredApproversMergeHook\
        \ - a json map containing the keys 'enabled' (a boolean to enable or disable\
        \ this merge check) and 'count' (an integer to set the number of required\
        \ approvals)\n- requiredAllApprovers - whether or not all approvers must approve\
        \ a pull request for it to be mergeable\n- requiredAllTasksComplete - whether\
        \ or not all tasks on a pull request need to be completed for it to be mergeable\n\
        - requiredSuccessfulBuilds - (Deprecated, please use com.atlassian.bitbucket.server.bitbucket-build.requiredBuildsMergeCheck\
        \ instead) the number of successful builds on a pull request for it to be\
        \ mergeable, or 0 to disable the merge check\n- com.atlassian.bitbucket.server.bitbucket-build.requiredBuildsMergeCheck\
        \ - a json map containing the keys 'enabled' (a boolean to enable or disable\
        \ this merge check) and 'count' (an integer to set the number of required\
        \ builds)\n\n\n<strong>Merge strategy configuration deletion:</strong>\n\n\
        An explicitly set pull request merge strategy configuration can be deleted\
        \ by POSTing a document with an empty \"mergeConfig\" attribute. i.e: \n\n\
        \n```{ \n    \"mergeConfig\": { \n    } \n} \n```\n\nUpon completion of this\
        \ request, the effective configuration will be: \n\n- The configuration set\
        \ for this repository's SCM type as set at the project level, if present,\
        \ otherwise\n- the configuration set for this repository's SCM type as set\
        \ at the instance level, if present, otherwise\n- the default configuration\
        \ for this repository's SCM type\n\n\n"
      operationId: updatePullRequestSettings_1
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestRepositoryPullRequestSettings"
        description: The updated settings.
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestRepositoryPullRequestSettings"
          description: The repository pull request settings for the context repository.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The repository pull request settings were not updated due to
            a validation error.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to see the specified repository.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified repository does not exist.
      summary: Update pull request settings
      tags:
      - Repository
  /api/latest/projects/{projectKey}/repos/{repositorySlug}/settings/reviewer-groups:
    get:
      deprecated: false
      description: |-
        Retrieve a page of reviewer groups of a given scope.

        The authenticated user must have <b>REPO_READ</b> permission for the specified repository to call this resource.
      operationId: getReviewerGroups_1
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      - description: "Start number for the page (inclusive). If not passed, first\
          \ page is assumed."
        example: 0
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 0
          type: number
        style: form
      - description: "Number of items to return. If not passed, a page size of 25\
          \ is used."
        example: 25
        explode: true
        in: query
        name: limit
        required: false
        schema:
          example: 25
          type: number
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/getReviewerGroups_1_200_response"
          description: A `page` of reviewer group(s) of the provided scope and its
            inherited scope.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to view the repository.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The repository scope supplied does not exist.
      summary: Get all reviewer groups
      tags:
      - Pull Requests
    post:
      deprecated: false
      description: |-
        Create a reviewer group.

        The authenticated user must have <b>REPO_ADMIN</b> permission for the specified repository to call this resource.
      operationId: create_2
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestReviewerGroup"
        description: The request containing the details of the reviewer group.
      responses:
        "201":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestReviewerGroup"
          description: The newly created reviewer group.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The request is missing a reviewer group name.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to view the repository.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The repository scope supplied does not exist.
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The new created name already exists.
      summary: Create reviewer group
      tags:
      - Pull Requests
  /api/latest/projects/{projectKey}/repos/{repositorySlug}/settings/reviewer-groups/{id}:
    delete:
      deprecated: false
      description: |-
        Deletes a reviewer group.

        The authenticated user must have <b>REPO_ADMIN</b> permission for the specified repository to call this resource.
      operationId: delete_7
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The ID of the reviewer group to be deleted
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The operation was successful
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to delete the reviewer group in this repository.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: Unable to find the supplied reviewer group ID.
      summary: Delete reviewer group
      tags:
      - Pull Requests
    get:
      deprecated: false
      description: |-
        Retrieve a reviewer group.

        The authenticated user must have <b>REPO_READ</b> permission for the specified repository to call this resource.
      operationId: getReviewerGroup_1
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The ID of the reviewer group to be retrieved
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestReviewerGroup"
          description: The reviewer group.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to view the repository.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The ID supplied does not exist.
      summary: Get reviewer group
      tags:
      - Pull Requests
    put:
      deprecated: false
      description: |-
        Update the attributes of a reviewer group.

        The authenticated user must have <b>REPO_ADMIN</b> permission for the specified repository to call this resource.
      operationId: update_2
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The ID of the reviewer group to be updated
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestReviewerGroup"
        description: The request containing the attributes of the reviewer group to
          be updated. Only the attributes to be updated need to be present in this
          object.
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestReviewerGroup"
          description: The updated reviewer group.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "The updated attribute does not meet the requirements. E.g.\
            \ the name exceeds 50 characters, setting name to blank."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to view the repository.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The repository scope supplied does not exist.
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The new updated name already exists.
      summary: Update reviewer group attributes
      tags:
      - Pull Requests
  /api/latest/projects/{projectKey}/repos/{repositorySlug}/settings/reviewer-groups/{id}/users:
    get:
      deprecated: false
      description: |-
        Retrieve a list of the users of a reviewer group.

        This does not return all the users of the group, only the users who are licensed and have <b>REPO_READ</b> permission for the specified repository.

        The authenticated user must have <b>REPO_READ</b> permission for the specified repository to call this resource.
      operationId: getUsers
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The ID of the reviewer group to be retrieved
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                items:
                  $ref: "#/components/schemas/RestApplicationUser"
                type: array
          description: The list of users of a reviewer group.
        "401":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestErrors"
          description: The currently authenticated user has insufficient permissions
            to view the repository.
        "404":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestErrors"
          description: The ID supplied does not exist.d
      summary: Get reviewer group users
      tags:
      - Pull Requests
  /api/latest/projects/{projectKey}/repos/{repositorySlug}/tags:
    get:
      deprecated: false
      description: "Retrieve the tags matching the supplied <strong>filterText</strong>\
        \ param. \n\nThe authenticated user must have <strong>REPO_READ</strong> permission\
        \ for the context repository to call this resource."
      operationId: getTags
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: Ordering of refs either ALPHABETICAL (by name) or MODIFICATION
          (last updated)
        explode: true
        in: query
        name: orderBy
        required: false
        schema:
          type: string
        style: form
      - description: The text to match on.
        explode: true
        in: query
        name: filterText
        required: false
        schema:
          type: string
        style: form
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      - description: "Start number for the page (inclusive). If not passed, first\
          \ page is assumed."
        example: 0
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 0
          type: number
        style: form
      - description: "Number of items to return. If not passed, a page size of 25\
          \ is used."
        example: 25
        explode: true
        in: query
        name: limit
        required: false
        schema:
          example: 25
          type: number
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/getTags_200_response"
          description: The tags matching the supplied <strong>filterText</strong>.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to read the repository.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified repository does not exist.
      summary: Find tag
      tags:
      - Repository
    post:
      deprecated: false
      description: "Creates a tag using the information provided in the RestCreateTagRequest\
        \ request \n\nThe authenticated user must have <strong>REPO_WRITE</strong>\
        \ permission for the context repository to call this resource."
      operationId: createTagForRepository
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestCreateTagRequest"
        description: "The request to create a tag containing a <strong>name</strong>,\
          \ <strong>startPoint</strong>, and optionally a <strong>message</strong>"
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestTag"
          description: The created tag.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to write to the repository.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified repository does not exist.
      summary: Create tag
      tags:
      - Repository
  /api/latest/projects/{projectKey}/repos/{repositorySlug}/tags/{name}:
    get:
      deprecated: false
      description: "Retrieve a tag in the specified repository. \n\nThe authenticated\
        \ user must have <strong>REPO_READ</strong> permission for the context repository\
        \ to call this resource."
      operationId: getTag
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The name of the tag to be retrieved.
        explode: false
        in: path
        name: name
        required: true
        schema:
          pattern: .*
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestTag"
          description: The tag which matches the supplied <strong>name</strong>.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to read the repository.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified tag does not exist.
      summary: Get tag
      tags:
      - Repository
  /api/latest/projects/{projectKey}/repos/{repositorySlug}/watch:
    delete:
      deprecated: false
      description: "Remove the authenticated user as a watcher for the specified repository.\
        \ \n\nThe authenticated user must have <strong>REPO_READ</strong> permission\
        \ for the repository to call this resource."
      operationId: unwatch_2
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The user is no longer watching the repository.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to view the repository.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified repository does not exist.
      summary: Stop watching repository
      tags:
      - Repository
    post:
      deprecated: false
      description: "Add the authenticated user as a watcher for the specified repository.\
        \ \n\nThe authenticated user must have <strong>REPO_READ</strong> permission\
        \ for the repository to call this resource."
      operationId: watch_2
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestRepository"
        description: The repository to watch.
      responses:
        "204":
          description: The user is now watching the repository.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to view the repository.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified repository does not exist.
      summary: Watch repository
      tags:
      - Repository
  /api/latest/projects/{projectKey}/repos/{repositorySlug}/webhooks:
    get:
      deprecated: false
      description: "Find webhooks in this repository. \n\nThe authenticated user must\
        \ have <strong>REPO_ADMIN</strong> permission for the specified repository\
        \ to call this resource."
      operationId: findWebhooks_1
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: List of <code>com.atlassian.webhooks.WebhookEvent</code> IDs
          to filter for
        explode: true
        in: query
        name: event
        required: false
        schema:
          type: string
        style: form
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      - description: <code>true</code> if statistics should be provided for all found
          webhooks
        explode: true
        in: query
        name: statistics
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8: {}
          description: A page of webhooks.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to find webhooks in the repository.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified repository does not exist.
      summary: Find webhooks
      tags:
      - Repository
    post:
      deprecated: false
      description: "Create a webhook for the repository specified via the URL. \n\n\
        The authenticated user must have <strong>REPO_ADMIN</strong> permission for\
        \ the specified repository to call this resource."
      operationId: createWebhook_1
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestWebhook"
        description: The webhook to be created for this repository.
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestWebhook"
          description: A created webhook.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The webhook parameters were invalid or not supplied.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to create webhooks in the repository.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The repository does not exist.
      summary: Create webhook
      tags:
      - Repository
  /api/latest/projects/{projectKey}/repos/{repositorySlug}/webhooks/search:
    get:
      deprecated: false
      description: |-
        Search webhooks in this repository and parent project. This endpoint returns a superset of the results returned by the /webhooks endpoint because it allows filtering by project scope too, not just repository webhooks.

        The authenticated user must have <strong>REPO_ADMIN</strong> permission for the specified repository to call this resource.
      operationId: searchWebhooks
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: "Scopes to filter by. This parameter can be specified once e.g.\
          \ \"scopeType=repository\", or twice e.g. \"scopeType=repository&scopeType=project\"\
          , to filter by more than one scope level. "
        explode: true
        in: query
        name: scopeType
        required: false
        schema:
          type: string
        style: form
      - description: List of <code>com.atlassian.webhooks.WebhookEvent</code> ids
          to filter for
        explode: true
        in: query
        name: event
        required: false
        schema:
          type: string
        style: form
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      - description: <code>true</code> if statistics should be provided for all found
          webhooks
        explode: true
        in: query
        name: statistics
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8: {}
          description: A page of webhooks.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to find webhooks in the repository.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified repository does not exist.
      summary: Search webhooks
      tags:
      - Repository
  /api/latest/projects/{projectKey}/repos/{repositorySlug}/webhooks/test:
    post:
      deprecated: false
      description: "Test connectivity to a specific endpoint. \n\nThe authenticated\
        \ user must have <strong>REPO_ADMIN</strong> permission for the specified\
        \ repository to call this resource."
      operationId: testWebhook_1
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: webhookId
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Whether SSL verification is required for the specified webhook
          URL. Default value is  <code>true</code>.
        explode: true
        in: query
        name: sslVerificationRequired
        required: false
        schema:
          type: string
        style: form
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      - description: The url in which to connect to
        explode: true
        in: query
        name: url
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestWebhookCredentials"
        description: "Basic authentication credentials, if required."
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestWebhookRequestResponse"
          description: A webhook.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to test a connection.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified repository does not exist.
      summary: Test webhook
      tags:
      - Repository
  /api/latest/projects/{projectKey}/repos/{repositorySlug}/webhooks/{webhookId}:
    delete:
      deprecated: false
      description: "Delete a webhook for the repository specified via the URL. \n\n\
        The authenticated user must have <strong>REPO_ADMIN</strong> permission for\
        \ the specified repository to call this resource."
      operationId: deleteWebhook_1
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The ID of the webhook to be deleted.
        explode: false
        in: path
        name: webhookId
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The webhook for the repository has been deleted.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to delete webhooks in the repository.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "The specified repository does not exist, or webhook does not\
            \ exist in this repository."
      summary: Delete webhook
      tags:
      - Repository
    get:
      deprecated: false
      description: "Get a webhook by ID. \n\nThe authenticated user must have <strong>REPO_ADMIN</strong>\
        \ permission for the specified repository to call this resource."
      operationId: getWebhook_1
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: ID of the webhook
        explode: false
        in: path
        name: webhookId
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      - description: <code>true</code> if statistics should be provided for the webhook
        explode: true
        in: query
        name: statistics
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestWebhook"
          description: A webhook.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to get a webhook in the repository.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "The repository does not exist, or the webhook does not exist\
            \ in the repository."
      summary: Get webhook
      tags:
      - Repository
    put:
      deprecated: false
      description: "Update an existing webhook. \n\nThe authenticated user must have\
        \ <strong>REPO_ADMIN</strong> permission for the specified repository to call\
        \ this resource."
      operationId: updateWebhook_1
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: Id of the existing webhook
        explode: false
        in: path
        name: webhookId
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestWebhook"
        description: The representation of the updated values for the webhook
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestWebhook"
          description: A webhook.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to update a webhook in this repository.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "The repository does not exist, or the webhook does not exist\
            \ in the repository."
      summary: Update webhook
      tags:
      - Repository
  /api/latest/projects/{projectKey}/repos/{repositorySlug}/webhooks/{webhookId}/latest:
    get:
      deprecated: false
      description: "Get the latest invocations for a specific webhook. \n\nThe authenticated\
        \ user must have <strong>REPO_ADMIN</strong> permission for the specified\
        \ repository to call this resource."
      operationId: getLatestInvocation_1
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: ID of the webhook
        explode: false
        in: path
        name: webhookId
        required: true
        schema:
          type: string
        style: simple
      - description: The string ID of a specific event to retrieve the last invocation
          for.
        explode: true
        in: query
        name: event
        required: false
        schema:
          type: string
        style: form
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      - description: "The outcome to filter for. Can be SUCCESS, FAILURE, ERROR. None\
          \ specified means that the all will be considered"
        explode: true
        in: query
        name: outcome
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestDetailedInvocation"
          description: A webhook invocation dataset.
        "204":
          description: No webhook invocations exist.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to get webhook invocations in the repository.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "The specified repository does not exist, or the webhook does\
            \ not exist in the repository."
      summary: Get last webhook invocation details
      tags:
      - Repository
  /api/latest/projects/{projectKey}/repos/{repositorySlug}/webhooks/{webhookId}/statistics:
    get:
      deprecated: false
      description: "Get the statistics for a specific webhook. \n\nThe authenticated\
        \ user must have <strong>REPO_ADMIN</strong> permission for the specified\
        \ repository to call this resource."
      operationId: getStatistics_1
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: ID of the webhook
        explode: false
        in: path
        name: webhookId
        required: true
        schema:
          type: string
        style: simple
      - description: "The string ID of a specific event to retrieve the last invocation\
          \ for. May be empty, in which case all events are considered"
        explode: true
        in: query
        name: event
        required: false
        schema:
          type: string
        style: form
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestInvocationHistory"
          description: A webhook invocation dataset.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to get webhook statistics in the repository.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "The specified repository does not exist, or the webhook does\
            \ not exist in the repository."
      summary: Get webhook statistics
      tags:
      - Repository
  /api/latest/projects/{projectKey}/repos/{repositorySlug}/webhooks/{webhookId}/statistics/summary:
    get:
      deprecated: false
      description: "Get the statistics summary for a specific webhook. \n\nThe authenticated\
        \ user must have <strong>REPO_ADMIN</strong> permission for the specified\
        \ repository to call this resource."
      operationId: getStatisticsSummary_1
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: ID of the webhook
        explode: false
        in: path
        name: webhookId
        required: true
        schema:
          type: string
        style: simple
      - description: The repository slug.
        explode: false
        in: path
        name: repositorySlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestInvocationHistory"
          description: A webhook invocation dataset.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to get webhook statistics summary in the repository.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "The repository does not exist, or the webhook does not exist\
            \ in the repository."
      summary: Get webhook statistics summary
      tags:
      - Repository
  /api/latest/projects/{projectKey}/secret-scanning/allowlist:
    get:
      deprecated: false
      description: |-
        Find project secret scanning allowlist rules by filtering.

        Project **Admin** is required
      operationId: searchAllowlistRule
      parameters:
      - description: Filter names by the provided text
        example: Access
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: Order by
        explode: true
        in: query
        name: order
        required: false
        schema:
          enum:
          - NAME_ASC
          - NAME_DESC
          type: string
        style: form
      - description: "Start number for the page (inclusive). If not passed, first\
          \ page is assumed."
        example: 0
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 0
          type: number
        style: form
      - description: "Number of items to return. If not passed, a page size of 25\
          \ is used."
        example: 25
        explode: true
        in: query
        name: limit
        required: false
        schema:
          example: 25
          type: number
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/search_2_200_response"
          description: Page of allowlist rules
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The request was not correctly formed allowlist rule. See returned
            error for more details
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The authenticated user is not permitted to view project allowlist
            rules
      summary: Find project secret scanning allowlist rules
      tags:
      - Security
    post:
      deprecated: false
      description: |-
        Create a new project level secret scanning allowlist rule. Project allowlist rules are used when scanning all non exempt repositories in the provided project.

        Project **Admin** is required
      operationId: createAllowlistRule
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          '*/*':
            schema:
              $ref: "#/components/schemas/RestSecretScanningAllowlistRuleSetRequest"
        description: "Allowlist rule to create, either the line regular expression\
          \ or the path regular expression must be present"
        required: true
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestSecretScanningAllowlistRule"
          description: The created allowlist rule
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The request did not contain a correctly formed allowlist rule.
            See returned error for more details
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The authenticated user is not permitted to create project allowlist
            rules.
      summary: Create project secret scanning allowlist rule
      tags:
      - Security
  /api/latest/projects/{projectKey}/secret-scanning/allowlist/{id}:
    delete:
      deprecated: false
      description: |-
        Delete a project secret scanning allowlist rule with the provided ID.

        Project **Admin** is required
      operationId: deleteAllowlistRule
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The allowlist rule id.
        example: 7
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: "Empty response indicating that the rule was deleted, or not\
            \ found at this location"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The authenticated user is not permitted to delete project rules
      summary: Delete a project secret scanning allowlist rule
      tags:
      - Security
    get:
      deprecated: false
      description: |-
        Get a project secret scanning allowlist rule by ID.

        Project **Admin** is required
      operationId: getAllowlistRule
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The allowlist rule id.
        example: 7
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestSecretScanningAllowlistRule"
          description: The requested allowlist rule
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The authenticated user is not permitted to view project allowlist
            rules
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The requested allowlist rules was not found
      summary: Get a project secret scanning allowlist rule
      tags:
      - Security
    put:
      deprecated: false
      description: |-
        Edit a project secret scanning allowlist rule.

        Project **Admin** is required
      operationId: editAllowlistRule
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The allowlist rule id.
        example: 7
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          '*/*':
            schema:
              $ref: "#/components/schemas/RestSecretScanningAllowlistRuleSetRequest"
        required: true
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestSecretScanningAllowlistRule"
          description: The updated allowlist rule
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The request did not contain a correctly formed allowlist rule.
            See returned error for more details
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The authenticated user is not permitted to modify project allowlist
            rules
      summary: Edit an existing project secret scanning allowlist rule
      tags:
      - Security
  /api/latest/projects/{projectKey}/secret-scanning/exempt:
    get:
      deprecated: false
      description: Find repositories exempt from secret scanning in a project
      operationId: findExemptReposByProject
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: "Order by project name followed by repository name either ascending\
          \ or descending, defaults to ascending."
        explode: true
        in: query
        name: order
        required: false
        schema:
          enum:
          - NAME_ASC
          - NAME_DESC
          type: string
        style: form
      - description: "Start number for the page (inclusive). If not passed, first\
          \ page is assumed."
        example: 0
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 0
          type: number
        style: form
      - description: "Number of items to return. If not passed, a page size of 25\
          \ is used."
        example: 25
        explode: true
        in: query
        name: limit
        required: false
        schema:
          example: 25
          type: number
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/getRepositoriesRecentlyAccessed_200_response"
          description: Page of repositories
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The authenticated user is not permitted to search exempt repositories
            for this project
      summary: Find repos exempt from secret scanning for a project
      tags:
      - Security
    post:
      deprecated: false
      description: Bulk exempt a  list of repositories from being scanned for secrets.
        User must be have **PROJECT ADMIN** permissions.
      operationId: bulkAddExemptRepositories_1
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          '*/*':
            schema:
              items:
                $ref: "#/components/schemas/RestRepositorySelector"
              type: array
              uniqueItems: true
      responses:
        "204":
          description: All requested repositories were made exempt
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The authenticated user is not permitted to exempt a repository
            from secret scanning. No repositories were made exempt.
      summary: Bulk exempt repos from secret scanning
      tags:
      - Security
  /api/latest/projects/{projectKey}/secret-scanning/rules:
    get:
      deprecated: false
      description: |-
        Find project secret scanning rules by filtering.

        Project **Admin** is required
      operationId: search_1
      parameters:
      - description: Filter names by the provided text
        example: Access
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: Order by
        explode: true
        in: query
        name: order
        required: false
        schema:
          enum:
          - NAME_ASC
          - NAME_DESC
          type: string
        style: form
      - description: "Start number for the page (inclusive). If not passed, first\
          \ page is assumed."
        example: 0
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 0
          type: number
        style: form
      - description: "Number of items to return. If not passed, a page size of 25\
          \ is used."
        example: 25
        explode: true
        in: query
        name: limit
        required: false
        schema:
          example: 25
          type: number
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/search_3_200_response"
          description: Page of rules
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The request was not correctly formed rule. See returned error
            for more details
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The authenticated user is not permitted to view project rules
      summary: Find project secret scanning rules
      tags:
      - Security
    post:
      deprecated: false
      description: |-
        Create a new project level secret scanning rule. Project rules are used when scanning all non exempt repositories in the provided project.

        Project **Admin** is required
      operationId: createRule
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          '*/*':
            schema:
              $ref: "#/components/schemas/RestSecretScanningRuleSetRequest"
        description: "Rule to create, either the line regular expression or the path\
          \ regular expression must be present"
        required: true
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestSecretScanningRule"
          description: The created rule
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The request did not contain a correctly formed rule. See returned
            error for more details
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The authenticated user is not permitted to create project rules.
      summary: Create project secret scanning rule
      tags:
      - Security
  /api/latest/projects/{projectKey}/secret-scanning/rules/{id}:
    delete:
      deprecated: false
      description: |-
        Delete a project secret scanning rule with the provided ID.

        Project **Admin** is required
      operationId: deleteRule
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The rule id.
        example: 7
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: "Empty response indicating that the rule was deleted, or not\
            \ found at this location"
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The authenticated user is not permitted to delete project rules
      summary: Delete a project secret scanning rule
      tags:
      - Security
    get:
      deprecated: false
      description: |-
        Get a project secret scanning rule by ID.

        Project **Admin** is required
      operationId: getRule
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The rule id.
        example: 7
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestSecretScanningRule"
          description: The requested rule
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The authenticated user is not permitted to view project rules
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The requested rules was not found
      summary: Get a project secret scanning rule
      tags:
      - Security
    put:
      deprecated: false
      description: |-
        Edit a project secret scanning rule.

        Project **Admin** is required
      operationId: editRule
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The rule id.
        example: 7
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          '*/*':
            schema:
              $ref: "#/components/schemas/RestSecretScanningRuleSetRequest"
        required: true
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestSecretScanningRule"
          description: The updated rule
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The request did not contain a correctly formed rule. See returned
            error for more details
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The authenticated user is not permitted to modify project rules
      summary: Edit an existing project secret scanning rule
      tags:
      - Security
  /api/latest/projects/{projectKey}/settings-restriction:
    delete:
      deprecated: false
      description: |-
        Delete a specified project settings restriction.

        If a restriction does not exist for the specified project, namespace, featureKey, and componentKey, the request will be ignored and a 204 response will be returned.

        The authenticated user must have **PROJECT_ADMIN** permission for the target project to delete a settings restriction.
      operationId: delete_9
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: A namespace used to identify the provider of the feature
        explode: true
        in: query
        name: namespace
        required: true
        schema:
          type: string
        style: form
      - description: A key to uniquely identify individually restrictable subcomponents
          of a feature within the provided feature key and namespace
        explode: true
        in: query
        name: componentKey
        required: false
        schema:
          type: string
        style: form
      - description: A key to uniquely identify the feature within the provided namespace
        explode: true
        in: query
        name: featureKey
        required: true
        schema:
          type: string
        style: form
      responses:
        "204":
          description: The specified settings restriction was successfully deleted
            or there were no existing restrictions that match the specified criteria.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: |-
            The settings restriction was not deleted because the request was invalid. Possible issues include:

            - The namespace was not provided, or longer than 255 characters
            - The featureKey was not provided, or longer than 255 characters
            - The provided componentKey was fewer than 2 characters, or longer than 255 characters
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to delete a settings restriction
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified project does not exist
      summary: Stop enforcing project restriction
      tags:
      - Project
    get:
      deprecated: false
      description: |-
        Get a specified project settings restriction for the given namespace, feature key and component key.
        Note that not providing the component key will **not** return restrictions for the namespace and feature key with a component key set.

        The authenticated user must have **PROJECT_VIEW** permission for the target project to retrieve a settings restriction.
      operationId: get_7
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The namespace used to identify the provider of the feature
        explode: true
        in: query
        name: namespace
        required: true
        schema:
          type: string
        style: form
      - description: The component key to uniquely identify individually restrictable
          subcomponents of a feature within the provided feature key and namespace
        explode: true
        in: query
        name: componentKey
        required: false
        schema:
          type: string
        style: form
      - description: The feature key to uniquely identify the feature within the provided
          namespace
        explode: true
        in: query
        name: featureKey
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestProjectSettingsRestriction"
          description: The settings restriction associated with the provided namespace
            and feature key
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: |-
            The settings restriction could not be retrieved because the provided parameters were invalid. Possible issues include:

            - The namespace was not provided, or longer than 255 characters
            - The featureKey was not provided, or longer than 255 characters
            - The provided componentKey was fewer than 2 characters, or longer than 255 characters
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to retrieve a settings restriction
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "The specified project, or settings restriction does not exist"
      summary: Get enforcing project setting
      tags:
      - Project
    post:
      deprecated: false
      description: |-
        Create a new project settings restriction for the given project.

        The authenticated user must have **PROJECT_ADMIN** permission for the target project to create a settings restriction.
      operationId: create_3
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestProjectSettingsRestrictionRequest"
        description: The project settings restriction to create
        required: true
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestProjectSettingsRestriction"
          description: The settings restriction was successfully created
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: |-
            The settings restriction was not created because the request was invalid. Possible issues include:

            - The namespace was not provided, or longer than 255 characters
            - The featureKey was not provided, or longer than 255 characters
            - The provided componentKey was fewer than 2 characters, or longer than 255 characters
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to create a settings restriction
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified project does not exist
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "A settings restriction with the same namespace, featureKey\
            \ and componentKey already exists on this project"
      summary: Enforce project restriction
      tags:
      - Project
  /api/latest/projects/{projectKey}/settings-restriction/all:
    get:
      deprecated: false
      description: |-
        Get all project settings restrictions for the given namespace and feature key, including those with a component key set.

        The authenticated user must have **PROJECT_VIEW** permission for the target project to retrieve a settings restrictions.
      operationId: getAll
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: A namespace used to identify the provider of the feature
        explode: true
        in: query
        name: namespace
        required: true
        schema:
          type: string
        style: form
      - description: A key to uniquely identify the feature within the provided namespace
        explode: true
        in: query
        name: featureKey
        required: true
        schema:
          type: string
        style: form
      - description: "Start number for the page (inclusive). If not passed, first\
          \ page is assumed."
        example: 0
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 0
          type: number
        style: form
      - description: "Number of items to return. If not passed, a page size of 25\
          \ is used."
        example: 25
        explode: true
        in: query
        name: limit
        required: false
        schema:
          example: 25
          type: number
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/getAll_200_response"
          description: A page of settings restrictions associated with the provided
            namespace and feature key
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: |-
            The settings restrictions could not be retrieved because the provided parameters were invalid. Possible issues include:

            - The namespace was not provided, or longer than 255 characters
            - The featureKey was not provided, or longer than 255 characters
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to retrieve project settings restrictions
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified project does not exist
      summary: Get all enforcing project settings
      tags:
      - Project
  /api/latest/projects/{projectKey}/settings/auto-decline:
    delete:
      deprecated: false
      description: |-
        Delete auto decline settings for the supplied project.

        The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for this project to call the resource.
      operationId: deleteAutoDeclineSettings
      parameters:
      - description: The project key
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The auto decline settings have been deleted successfully.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to delete the auto decline settings.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified project does not exist.
      summary: Delete auto decline settings
      tags:
      - Project
    get:
      deprecated: false
      description: Retrieves the auto decline settings for the supplied project. Default
        settings are returned if no explicit settings have been set for the project.
      operationId: getAutoDeclineSettings
      parameters:
      - description: The project key
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestAutoDeclineSettings"
          description: The auto decline settings
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to retrieve the auto decline settings.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified project does not exist.
      summary: Get auto decline settings
      tags:
      - Project
    put:
      deprecated: false
      description: |-
        Creates or updates the auto decline settings for the supplied project.

        The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for this project to call the resource.
      operationId: setAutoDeclineSettings
      parameters:
      - description: The project key
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestAutoDeclineSettingsRequest"
        description: The settings to create or update
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestAutoDeclineSettings"
          description: The auto decline settings
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "inactivityWeeks was not one of 1, 2, 4, 8, or, 12, or the\
            \ enabled parameter was not included in the request."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to create or update the auto decline settings.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified project does not exist.
      summary: Create/Update auto decline settings
      tags:
      - Project
  /api/latest/projects/{projectKey}/settings/auto-merge:
    delete:
      deprecated: false
      description: |-
        Deletes pull request auto-merge settings for the supplied project.

        The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for this project to call the resource.
      operationId: delete_4
      parameters:
      - description: The project key
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The pull request auto-merge settings
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to delete the pull request auto-merge settings.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified project does not exist.
      summary: Delete pull request auto-merge settings
      tags:
      - Project
    get:
      deprecated: false
      description: |-
        Retrieves the pull request auto-merge settings for the supplied project. Default settings will be returned if no explicit settings have been set for the project

        The authenticated user must have <strong>PROJECT_VIEW</strong> permission for this project to call the resource.
      operationId: get_4
      parameters:
      - description: The project key
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestAutoMergeRestrictedSettings"
          description: The pull request auto-merge settings
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to retrieve the pull request auto-merge settings.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified project does not exist.
      summary: Get pull request auto-merge settings
      tags:
      - Project
    put:
      deprecated: false
      description: |-
        Creates or updates the pull request auto-merge settings for the supplied project, and applies the restriction action specified in the request.

        The authenticated user must have <strong>PROJECT_ADMIN</strong> permission for this project to call the resource.
      operationId: set
      parameters:
      - description: The project key
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestAutoMergeProjectSettingsRequest"
        description: The settings to create or update
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestAutoMergeRestrictedSettings"
          description: The pull request auto-merge settings
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The 'enabled' and 'restrictionAction' fields were not provided
            correctly.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to create or update the pull request auto-merge settings.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified project does not exist.
      summary: Create or update the pull request auto-merge settings
      tags:
      - Project
  /api/latest/projects/{projectKey}/settings/hooks:
    get:
      deprecated: false
      description: "Retrieve a page of repository hooks for this project. \n\nThe\
        \ authenticated user must have <strong>PROJECT_READ</strong> permission for\
        \ the specified project to call this resource."
      operationId: getRepositoryHooks
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The optional type to filter by.
        explode: true
        in: query
        name: type
        required: false
        schema:
          enum:
          - PRE_RECEIVE
          - POST_RECEIVE
          type: string
        style: form
      - description: "Start number for the page (inclusive). If not passed, first\
          \ page is assumed."
        example: 0
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 0
          type: number
        style: form
      - description: "Number of items to return. If not passed, a page size of 25\
          \ is used."
        example: 25
        explode: true
        in: query
        name: limit
        required: false
        schema:
          example: 25
          type: number
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/getRepositoryHooks_1_200_response"
          description: A page of repository hooks with their associated enabled state.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to retrieve the hooks.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified project does not exist.
      summary: Get repository hooks
      tags:
      - Project
  /api/latest/projects/{projectKey}/settings/hooks/{hookKey}:
    get:
      deprecated: false
      description: "Retrieve a repository hook for this project. \n\nThe authenticated\
        \ user must have <strong>PROJECT_READ</strong> permission for the specified\
        \ project to call this resource."
      operationId: getRepositoryHook
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The hook key.
        explode: false
        in: path
        name: hookKey
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestRepositoryHook"
          description: Returns the repository hooks with their associated enabled
            state for the supplied hookKey.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to enable the hook.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "The specified repository hook does not exist for the given\
            \ project, or the project does not exist."
      summary: Get a repository hook
      tags:
      - Project
  /api/latest/projects/{projectKey}/settings/hooks/{hookKey}/enabled:
    delete:
      deprecated: false
      description: "Disable a repository hook for this project. \n\nThe authenticated\
        \ user must have <strong>PROJECT_ADMIN</strong> permission for the specified\
        \ project to call this resource."
      operationId: disableHook
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The hook key.
        explode: false
        in: path
        name: hookKey
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestRepositoryHook"
          description: The repository hooks with their associated enabled state for
            the supplied hookKey.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to disable the hook.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified project or hook does not exist.
      summary: Disable repository hook
      tags:
      - Project
    put:
      deprecated: false
      description: "Enable a repository hook for this project and optionally apply\
        \ new configuration. \n\nThe authenticated user must have <strong>PROJECT_ADMIN</strong>\
        \ permission for the specified project to call this resource. \n\nA JSON document\
        \ may be provided to use as the settings for the hook. These structure and\
        \ validity of the document is decided by the plugin providing the hook."
      operationId: enableHook
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The hook key.
        explode: false
        in: path
        name: hookKey
        required: true
        schema:
          type: string
        style: simple
      - description: The content length.
        explode: false
        in: header
        name: Content-Length
        required: false
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestRepositoryHook"
          description: The repository hooks with their associated enabled state for
            the supplied hookKey.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The settings specified are invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to enable the hook.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified project or hook does not exist.
      summary: Enable repository hook
      tags:
      - Project
  /api/latest/projects/{projectKey}/settings/hooks/{hookKey}/settings:
    get:
      deprecated: false
      description: "Retrieve the settings for a repository hook for this project.\
        \ \n\nThe authenticated user must have <strong>PROJECT_READ</strong> permission\
        \ for the specified project to call this resource."
      operationId: getSettings
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The hook key.
        explode: false
        in: path
        name: hookKey
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ExampleSettings"
          description: The settings for the hook.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to retrieve the hook settings.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified project or hook does not exist.
      summary: Get repository hook settings
      tags:
      - Project
    put:
      deprecated: false
      description: "Modify the settings for a repository hook for this project. \n\
        \nThe service will reject any settings which are too large, the current limit\
        \ is 32KB once serialized. \n\nThe authenticated user must have <strong>PROJECT_ADMIN</strong>\
        \ permission for the specified project to call this resource. \n\nA JSON document\
        \ can be provided to use as the settings for the hook. These structure and\
        \ validity of the document is decided by the plugin providing the hook."
      operationId: setSettings
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The complete module key of the hook module.
        explode: false
        in: path
        name: hookKey
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExampleSettings"
        description: The raw settings.
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ExampleSettings"
          description: The settings for the hook.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The settings specified are invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to modify the hook settings.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified project or hook does not exist.
      summary: Update repository hook settings
      tags:
      - Project
  /api/latest/projects/{projectKey}/settings/pull-requests/{scmId}:
    get:
      deprecated: false
      description: "Retrieve the merge strategy configuration for this project and\
        \ SCM. \n\nThe authenticated user must have <strong>PROJECT_READ</strong>\
        \ permission for the context repository to call this resource."
      operationId: getPullRequestSettings
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The SCM to get strategies for.
        explode: false
        in: path
        name: scmId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestPullRequestSettings"
          description: The merge configuration of the request project.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to see the request repository.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The request repository does not exist.
      summary: Get merge strategy
      tags:
      - Project
    post:
      deprecated: false
      description: "Update the pull request merge strategy configuration for this\
        \ project and SCM. \n\nThe authenticated user must have <strong>PROJECT_ADMIN</strong>\
        \ permission for the context repository to call this resource. \n\nOnly the\
        \ strategies provided will be enabled, the default must be set and included\
        \ in the set of strategies. \n\nAn explicitly set pull request merge strategy\
        \ configuration can be deleted by POSTing a document with an empty \"mergeConfig\"\
        \ attribute. i.e: \n<pre>{ \n    \"mergeConfig\": {} \n} \n</pre>\n\nUpon\
        \ completion of this request, the effective configuration will be the configuration\
        \ explicitly set for the SCM, or if no such explicit configuration is set\
        \ then the default configuration will be used."
      operationId: updatePullRequestSettings
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The SCM to get strategies for.
        explode: false
        in: path
        name: scmId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestPullRequestSettings"
        description: The settings.
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestPullRequestSettings"
          description: The merge configuration of the request project.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The repository pull request merge strategies were not updated
            due to a validation error.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to administrate the specified repository.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified repository does not exist.
      summary: Update merge strategy
      tags:
      - Project
  /api/latest/projects/{projectKey}/settings/reviewer-groups:
    get:
      deprecated: false
      description: |-
        Retrieve a page of reviewer groups of a given scope.

        The authenticated user must have <b>PROJECT_READ</b> permission for the specified project to call this resource.
      operationId: getReviewerGroups
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: "Start number for the page (inclusive). If not passed, first\
          \ page is assumed."
        example: 0
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 0
          type: number
        style: form
      - description: "Number of items to return. If not passed, a page size of 25\
          \ is used."
        example: 25
        explode: true
        in: query
        name: limit
        required: false
        schema:
          example: 25
          type: number
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/getReviewerGroups_1_200_response"
          description: A page of reviewer group(s) of the provided scope.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to view the project.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The project scope supplied does not exist.
      summary: Get all reviewer groups
      tags:
      - Pull Requests
    post:
      deprecated: false
      description: |-
        Create a reviewer group.

        The authenticated user must have <b>PROJECT_ADMIN</b> permission for the specified project to call this resource.
      operationId: create_1
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestReviewerGroup"
        description: The reviewer group to be create
      responses:
        "201":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestReviewerGroup"
          description: The newly created reviewer group.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The request is missing a reviewer group name.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to view the project.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The project scope supplied does not exist.
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The new created name already exists.
      summary: Create reviewer group
      tags:
      - Pull Requests
  /api/latest/projects/{projectKey}/settings/reviewer-groups/{id}:
    delete:
      deprecated: false
      description: |-
        Deletes a reviewer group.

        The authenticated user must have <b>PROJECT_ADMIN</b> permission for the specified project to call this resource.
      operationId: delete_6
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The ID of the reviewer group to be deleted
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The operation was successful.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to delete the reviewer group in this project.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: Unable to find the supplied reviewer group ID.
      summary: Delete reviewer group
      tags:
      - Pull Requests
    get:
      deprecated: false
      description: |-
        Retrieve a reviewer group.

        The authenticated user must have <b>PROJECT_READ</b> permission for the specified project to call this resource.
      operationId: getReviewerGroup
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The ID of the reviewer group to be retrieved
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestReviewerGroup"
          description: The reviewer group.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to view the project.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The ID supplied does not exist.
      summary: Get reviewer group
      tags:
      - Pull Requests
    put:
      deprecated: false
      description: |-
        Update the attributes of a reviewer group.

        The authenticated user must have <b>PROJECT_READ</b> permission for the specified project to call this resource.
      operationId: update_1
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The ID of the reviewer group to be updated
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestReviewerGroup"
        description: The request containing the attributes of the reviewer group to
          be updated. Only the attributes to be updated need to be present in this
          object.
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestReviewerGroup"
          description: A page of changes.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "The updated attribute does not meet the requirements. E.g.\
            \ the name exceeds 50 characters, setting name to blank."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to view the project.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The project scope supplied does not exist.
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The new updated name already exists.
      summary: Update reviewer group attributes
      tags:
      - Pull Requests
  /api/latest/projects/{projectKey}/webhooks:
    get:
      deprecated: false
      description: "Find webhooks in this project. \n\nThe authenticated user must\
        \ have <strong>PROJECT_ADMIN</strong> permission for the specified project\
        \ to call this resource."
      operationId: findWebhooks
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: List of <code>com.atlassian.webhooks.WebhookEvent</code> IDs
          to filter for
        explode: true
        in: query
        name: event
        required: false
        schema:
          type: string
        style: form
      - description: <code>true</code> if statistics should be provided for all found
          webhooks
        explode: true
        in: query
        name: statistics
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8: {}
          description: A page of webhooks.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to find webhooks in the project.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified project does not exist.
      summary: Find webhooks
      tags:
      - Project
    post:
      deprecated: false
      description: "Create a webhook for the project specified via the URL. \n\nThe\
        \ authenticated user must have <strong>PROJECT_ADMIN</strong> permission for\
        \ the specified project to call this resource."
      operationId: createWebhook
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestWebhook"
        description: The webhook to be created for this project.
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestWebhook"
          description: A created webhook.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The webhook parameters were invalid or not supplied.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to create webhooks in the project.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The project does not exist.
      summary: Create webhook
      tags:
      - Project
  /api/latest/projects/{projectKey}/webhooks/test:
    post:
      deprecated: false
      description: "Test connectivity to a specific endpoint. \n\nThe authenticated\
        \ user must have <strong>PROJECT_ADMIN</strong> permission for the specified\
        \ project to call this resource."
      operationId: testWebhook
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: webhookId
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: sslVerificationRequired
        required: false
        schema:
          default: true
          type: boolean
        style: form
      - description: The url in which to connect to
        explode: true
        in: query
        name: url
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestWebhookCredentials"
        description: "Basic authentication credentials, if required."
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestWebhookRequestResponse"
          description: A webhook.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to test a connection.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified project does not exist.
      summary: Test webhook
      tags:
      - Project
  /api/latest/projects/{projectKey}/webhooks/{webhookId}:
    delete:
      deprecated: false
      description: "Delete a webhook for the project specified via the URL. \n\nThe\
        \ authenticated user must have <strong>PROJECT_ADMIN</strong> permission for\
        \ the specified project to call this resource."
      operationId: deleteWebhook
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: The ID of the webhook to be deleted.
        explode: false
        in: path
        name: webhookId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The webhook for the project has been deleted.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to delete webhooks in the project.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "The specified project does not exist, or webhook does not\
            \ exist in this project."
      summary: Delete webhook
      tags:
      - Project
    get:
      deprecated: false
      description: "Get a webhook by ID. \n\nThe authenticated user must have <strong>PROJECT_ADMIN</strong>\
        \ permission for the specified project to call this resource."
      operationId: getWebhook
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: ID of the webhook
        explode: false
        in: path
        name: webhookId
        required: true
        schema:
          type: string
        style: simple
      - description: <code>true</code> if statistics should be provided for the webhook
        explode: true
        in: query
        name: statistics
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestWebhook"
          description: A webhook.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to get a webhook in the project.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "The project does not exist, or the webhook does not exist\
            \ in the project."
      summary: Get webhook
      tags:
      - Project
    put:
      deprecated: false
      description: "Update an existing webhook. \n\nThe authenticated user must have\
        \ <strong>PROJECT_ADMIN</strong> permission for the specified project to call\
        \ this resource."
      operationId: updateWebhook
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: Id of the existing webhook
        explode: false
        in: path
        name: webhookId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestWebhook"
        description: The representation of the updated values for the webhook
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestWebhook"
          description: A webhook.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to update a webhook in this project.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "The project does not exist, or the webhook does not exist\
            \ in the project."
      summary: Update webhook
      tags:
      - Project
  /api/latest/projects/{projectKey}/webhooks/{webhookId}/latest:
    get:
      deprecated: false
      description: "Get the latest invocations for a specific webhook. \n\nThe authenticated\
        \ user must have <strong>PROJECT_ADMIN</strong> permission for the specified\
        \ project to call this resource."
      operationId: getLatestInvocation
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: ID of the webhook
        explode: false
        in: path
        name: webhookId
        required: true
        schema:
          type: string
        style: simple
      - description: The string ID of a specific event to retrieve the last invocation
          for.
        explode: true
        in: query
        name: event
        required: false
        schema:
          type: string
        style: form
      - description: "The outcome to filter for. Can be SUCCESS, FAILURE, ERROR. None\
          \ specified means that the all will be considered"
        explode: true
        in: query
        name: outcome
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestDetailedInvocation"
          description: A webhook invocation dataset.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to get webhook invocations in the project.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "The specified project does not exist, or the webhook does\
            \ not exist in the project."
      summary: Get last webhook invocation details
      tags:
      - Project
  /api/latest/projects/{projectKey}/webhooks/{webhookId}/statistics:
    get:
      deprecated: false
      description: "Get the statistics for a specific webhook. \n\nThe authenticated\
        \ user must have <strong>PROJECT_ADMIN</strong> permission for the specified\
        \ project to call this resource."
      operationId: getStatistics
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: ID of the webhook
        explode: false
        in: path
        name: webhookId
        required: true
        schema:
          type: string
        style: simple
      - description: "The string ID of a specific event to retrieve the last invocation\
          \ for. May be empty, in which case all events are considered"
        explode: true
        in: query
        name: event
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestInvocationHistory"
          description: A webhook invocation dataset.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to get webhook statistics in the project.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "The specified project does not exist, or the webhook does\
            \ not exist in the project."
      summary: Get webhook statistics
      tags:
      - Project
  /api/latest/projects/{projectKey}/webhooks/{webhookId}/statistics/summary:
    get:
      deprecated: false
      description: "Get the statistics summary for a specific webhook. \n\nThe authenticated\
        \ user must have <strong>PROJECT_ADMIN</strong> permission for the specified\
        \ project to call this resource."
      operationId: getStatisticsSummary
      parameters:
      - description: The project key.
        explode: false
        in: path
        name: projectKey
        required: true
        schema:
          type: string
        style: simple
      - description: ID of the webhook
        explode: false
        in: path
        name: webhookId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestInvocationHistory"
          description: A webhook invocation dataset.
        "204":
          description: No webhook invocations exist.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to get webhook statistics summary in the project.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "The project does not exist, or the webhook does not exist\
            \ in the project."
      summary: Get webhook statistics summary
      tags:
      - Project
  /api/latest/repos:
    get:
      deprecated: false
      description: "Retrieve a page of repositories based on query parameters that\
        \ control the search. See the documentation of the parameters for more details.\
        \ \n\nThis resource is anonymously accessible, if anonymous access is enabled.\
        \ \n\n<b>Note on permissions.</b> In absence of the <code>permission</code>\
        \ query parameter the implicit 'read' permission is assumed. Please note that\
        \ this permission is lower than the <tt>REPO_READ</tt> permission rather than\
        \ being equal to it. The implicit 'read' permission for a given repository\
        \ is assigned to any user that has any of the higher permissions, such as\
        \ <tt>REPO_READ</tt>, as well as to anonymous users if the repository is marked\
        \ as public. The important implication of the above is that an anonymous request\
        \ to this resource with a permission level <tt>REPO_READ</tt> is guaranteed\
        \ to receive an empty list of repositories as a result. For anonymous requests\
        \ it is therefore recommended to not specify the <tt>permission</tt> parameter\
        \ at all."
      operationId: getRepositories_1
      parameters:
      - description: "(optional) if specified, this will limit the resulting repository\
          \ list to ones whose are <tt>ACTIVE</tt>, <tt>ARCHIVED</tt> or <tt>ALL</tt>\
          \ for both. The match performed is case-insensitive. This filter defaults\
          \ to <tt>ACTIVE</tt> when not set. <em>Available since 8.0</em>"
        explode: true
        in: query
        name: archived
        required: false
        schema:
          type: string
        style: form
      - description: "(optional) if specified, this will limit the resulting repository\
          \ list to ones whose project's name matches this parameter's value. The\
          \ match performed is case-insensitive and any leading and/or trailing whitespace\
          \ characters on the <code>projectname</code> parameter will be stripped."
        explode: true
        in: query
        name: projectname
        required: false
        schema:
          type: string
        style: form
      - description: "(optional) if specified, this will limit the resulting repository\
          \ list to ones whose project's key matches this parameter's value. The match\
          \ performed is case-insensitive and any leading  and/or trailing whitespace\
          \ characters on the <code>projectKey</code> parameter will be stripped.\
          \ <em>Available since 8.0</em>"
        explode: true
        in: query
        name: projectkey
        required: false
        schema:
          type: string
        style: form
      - description: "(optional) if specified, this will limit the resulting repository\
          \ list based on the repositories visibility. Valid values are <em>public</em>\
          \ or <em>private</em>."
        explode: true
        in: query
        name: visibility
        required: false
        schema:
          enum:
          - public
          - private
          type: string
        style: form
      - description: "(optional) if specified, this will limit the resulting repository\
          \ list to ones whose name matches this parameter's value. The match performed\
          \ is case-insensitive and any leading and/or trailing whitespace characters\
          \ on the <code>name</code> parameter will be stripped."
        explode: true
        in: query
        name: name
        required: false
        schema:
          type: string
        style: form
      - description: "(optional) if specified, it must be a valid repository permission\
          \ level name and will limit the resulting repository list to ones that the\
          \ requesting user has the specified permission level to. If not specified,\
          \ the default implicit 'read' permission level will be assumed. The currently\
          \ supported explicit permission values are <tt>REPO_READ</tt>, <tt>REPO_WRITE</tt>\
          \ and <tt>REPO_ADMIN</tt>."
        explode: true
        in: query
        name: permission
        required: false
        schema:
          enum:
          - REPO_READ
          - REPO_WRITE
          - REPO_ADMIN
          type: string
        style: form
      - description: "(optional) if specified, it must be a valid repository state\
          \ name and will limit the resulting repository list to ones that are in\
          \ the specified state. The currently supported explicit state values are\
          \ <tt>AVAILABLE</tt>, <tt>INITIALISING</tt> and <tt>INITIALISATION_FAILED</tt>.\
          \ Filtering by <tt>OFFLINE</tt> repositories is not supported.<br><em>Available\
          \ since 5.13</em>"
        explode: true
        in: query
        name: state
        required: false
        schema:
          enum:
          - AVAILABLE
          - INITIALISING
          - INITIALISATION_FAILED
          type: string
        style: form
      - description: "Start number for the page (inclusive). If not passed, first\
          \ page is assumed."
        example: 0
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 0
          type: number
        style: form
      - description: "Number of items to return. If not passed, a page size of 25\
          \ is used."
        example: 25
        explode: true
        in: query
        name: limit
        required: false
        schema:
          example: 25
          type: number
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/getRepositoriesRecentlyAccessed_200_response"
          description: A page of repositories.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The <code>visibility</code> parameter contains an invalid value.
      summary: Search for repositories
      tags:
      - Repository
  /api/latest/secret-scanning/exempt:
    get:
      deprecated: false
      description: Find all repositories exempt from secret scanning
      operationId: findExemptReposByScope
      parameters:
      - description: "Order by project name followed by repository name either ascending\
          \ or descending, defaults to ascending."
        explode: true
        in: query
        name: order
        required: false
        schema:
          enum:
          - NAME_ASC
          - NAME_DESC
          type: string
        style: form
      - description: "Start number for the page (inclusive). If not passed, first\
          \ page is assumed."
        example: 0
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 0
          type: number
        style: form
      - description: "Number of items to return. If not passed, a page size of 25\
          \ is used."
        example: 25
        explode: true
        in: query
        name: limit
        required: false
        schema:
          example: 25
          type: number
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/getRepositoriesRecentlyAccessed_200_response"
          description: Page of repositories
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The authenticated user is not permitted to search exempt repositories
            globally
      summary: Find all repos exempt from secret scan
      tags:
      - Security
    post:
      deprecated: false
      description: Bulk exempt a  list of repositories from being scanned for secrets.
        User must be have global **ADMIN** permissions.
      operationId: bulkAddExemptRepositories
      requestBody:
        content:
          '*/*':
            schema:
              items:
                $ref: "#/components/schemas/RestRepositorySelector"
              type: array
              uniqueItems: true
      responses:
        "204":
          description: All requested repositories were made exempt
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The authenticated user is not permitted to exempt a repository
            from secret scanning. No repositories were made exempt.
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: At least one of specified repositories have already been previously
            made exempt.
      summary: Bulk exempt repos from secret scanning
      tags:
      - Security
  /api/latest/secret-scanning/rules:
    get:
      deprecated: false
      description: Find global secret scanning rules by filtering.
      operationId: search_4
      parameters:
      - description: Filter by rule name
        example: Access
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: Order by
        explode: true
        in: query
        name: order
        required: false
        schema:
          enum:
          - NAME_ASC
          - NAME_DESC
          type: string
        style: form
      - description: "Start number for the page (inclusive). If not passed, first\
          \ page is assumed."
        example: 0
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 0
          type: number
        style: form
      - description: "Number of items to return. If not passed, a page size of 25\
          \ is used."
        example: 25
        explode: true
        in: query
        name: limit
        required: false
        schema:
          example: 25
          type: number
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/search_3_200_response"
          description: Page of rules
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "The request did not contain a correctly formed search request,\
            \ see returned error for more details."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The authenticated user is not permitted to search global rules
      summary: Find global secret scanning rules
      tags:
      - Security
    post:
      deprecated: false
      description: Create a new global secret scanning rule. Global rules are used
        when scanning all non exempt repositories.
      operationId: createRule_2
      requestBody:
        content:
          '*/*':
            schema:
              $ref: "#/components/schemas/RestSecretScanningRuleSetRequest"
        description: "Rule to create, either the line regular expression or the path\
          \ regular expression must be present"
        required: true
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestSecretScanningRule"
          description: The created rule
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The request did not contain a correctly formed rule. See returned
            error for more details
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The authenticated user is not permitted to create global rules
      summary: Create global secret scanning rule
      tags:
      - Security
  /api/latest/secret-scanning/rules/{id}:
    delete:
      deprecated: false
      description: Delete a global secret scanning rule with the provided ID
      operationId: deleteRule_2
      parameters:
      - description: The rule id.
        example: 7
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Empty response indicating that the rule was deleted
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The authenticated user is not permitted to delete global rules
      summary: Delete a global secret scanning rule
      tags:
      - Security
    get:
      deprecated: false
      description: Get a global secret scanning rule by ID.
      operationId: getRule_2
      parameters:
      - description: The rule id.
        example: 7
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestSecretScanningRule"
          description: The requested rule
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The authenticated user is not permitted to get global rules
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The requested rule was not found
      summary: Get a global secret scanning rule
      tags:
      - Security
    put:
      deprecated: false
      description: Edit an existing global secret scanning rule
      operationId: editRule_2
      parameters:
      - description: The rule id.
        example: 7
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          '*/*':
            schema:
              $ref: "#/components/schemas/RestSecretScanningRuleSetRequest"
        required: true
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestSecretScanningRule"
          description: The updated rule
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The request did not contain a correctly formed rule. See returned
            error for more details
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The authenticated user is not permitted to update global rules
      summary: Edit a global secret scanning rule.
      tags:
      - Security
  /api/latest/signing/x509-certificates:
    get:
      deprecated: false
      description: |-
        Get all X.509 certificates that have been added to the system.

        The authenticated user must have the <strong>ADMIN</strong> permission to call this resource.
      operationId: getAllCertificates
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestX509Certificate"
          description: A page of X.509 certificates
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The authenticated user is not permitted to get X.509 certificates
      summary: Get all X.509 certificates
      tags:
      - Security
    post:
      deprecated: false
      description: |-
        Create an X.509 certificate. This will add the given X.509 certificate to the system. Existing entries will not be overridden if an X.509 certificate already exists. Once added, an X.509 certificate cannot be updated.

        The authenticated user must have the <strong>ADMIN</strong> permission to call this resource.
      operationId: createCertificate
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/ExampleCertificateMultipartFormData"
        description: The multipart form data containing the certificate in a form-field
          named 'certificate'
        required: true
      responses:
        "201":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestX509Certificate"
          description: The newly created X.509 certificate
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The request did not contain a valid X.509 certificate request.
            See returned error for more details
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The authenticated user is not permitted to create X.509 certificates
      summary: Create an X.509 certificate
      tags:
      - Security
  /api/latest/signing/x509-certificates/crl/{id}:
    put:
      deprecated: false
      description: |-
        Update the certificate revocation list (CRL) entries for an issuer X.509 certificate in the system, identified by <code>id</code>. This will add any new revoked X.509 certificates that were issued by the given issuer X.509 certificate.

        This endpoint will schedule a request to asynchronously perform the task. Please allow time for the task to complete as it will vary depending on how many CRLs there are to retrieve and process.

        Note: CRL updates are scheduled to run every 24 hours. You may wish to trigger a refresh manually using this endpoint, otherwise, entries will be updated daily.

        The authenticated user must have the <strong>ADMIN</strong> permission to call this resource.
      operationId: updateCertificateRevocationListEntries
      parameters:
      - description: The ID of the issuer certificate.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8: {}
          description: Successfully started processing CRLs.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The authenticated user is not permitted to update X.509 CRL
            entries
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: There is no X.509 certificate with the given ID
      summary: Update X.509 CRL entries
      tags:
      - Security
  /api/latest/signing/x509-certificates/{id}:
    delete:
      deprecated: false
      description: |-
        Delete an X.509 certificate specified by the given ID.

        The authenticated user must have the <strong>ADMIN</strong> permission to call this resource.
      operationId: deleteCertificate
      parameters:
      - description: The ID of the X.509 certificate.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestX509Certificate"
          description: An empty response if the X.509 certificate was successfully
            deleted
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The authenticated user is not permitted to delete X.509 certificates
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: There is no X.509 certificate with the given ID
      summary: Delete an X.509 certificate
      tags:
      - Security
  /api/latest/system-signing/configuration:
    get:
      deprecated: false
      description: Gets the configuration details for system signing Git objects.
      operationId: getSystemSigningConfiguration
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestSystemSigningConfiguration"
          description: The configuration details for system signing Git objects
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to retrieve the configuration details for system signing Git objects.
      summary: Get system signing configuration
      tags:
      - Security
    post:
      deprecated: false
      description: Updates the configuration for system signing Git objects.
      operationId: updateSystemSigningConfiguration
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/updateSystemSigningConfiguration_request"
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestSystemSigningConfiguration"
          description: The updated configuration details for system signing Git objects
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The configuration details could not be updated because the
            provided request was invalid
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to retrieve the configuration details for system signing Git objects.
      summary: Update system signing configuration
      tags:
      - Security
  /api/latest/users:
    get:
      deprecated: false
      description: |-
        Retrieve a page of users, optionally run through provided filters.


        Only authenticated users may call this resource.
        ### Permission Filters


        The following three sub-sections list parameters supported for permission filters (where <code>[root]</code> is
        the root permission filter name, e.g. <code>permission</code>, <code>permission.1</code> etc.) depending on the
        permission resource. The system determines which filter to apply (Global, Project or Repository permission)
        based on the `[root]` permission value. E.g. <code>ADMIN</code> is a global permission,
        <code>PROJECT_ADMIN</code> is a project permission and <code>REPO_ADMIN</code> is a repository permission. Note
        that the parameters for a given resource will be looked up in the order as they are listed below, that is e.g.
        for a project resource, if both <code>projectId</code> and <code>projectKey</code> are provided, the system will
        use <code>projectId</code> for the lookup.
        <h4>Global permissions</h4>


        The permission value under <code>[root]</code> is the only required and recognized parameter, as global
        permissions do not apply to a specific resource.


        Example valid filter: <code>permission=ADMIN</code>.
        <h4>Project permissions</h4>


        - <code>[root]</code>- specifies the project permission
        - <code>[root].projectId</code> - specifies the project ID to lookup the project by
        - <code>[root].projectKey</code> - specifies the project key to lookup the project by


        Example valid filter: <code>permission.1=PROJECT_ADMIN&amp;permission.1.projectKey=TEST_PROJECT</code>.
        #### Repository permissions


        - <code>[root]</code>- specifies the repository permission
        - <code>[root].projectId</code> - specifies the repository ID to lookup the repository by
        - <code>[root].projectKey</code> and <code>[root].repositorySlug</code>- specifies the project key and     repository slug to lookup the repository by; both values <i>need to</i> be provided for this look up to be     triggered


        Example valid filter: <code>permission.2=REPO_ADMIN&amp;permission.2.projectKey=TEST_PROJECT&amp;permission.2.repositorySlug=test_repo</code>.
      operationId: getUsers_2
      parameters:
      - description: "Return only users, whose username, name or email address <i>contain</i>\
          \ the <code> filter</code> value"
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: "The \"root\" of a single permission filter, similar to the <code>permission</code>\
          \ parameter, where \"N\" is a natural number starting from 1. This allows\
          \ clients to specify multiple permission filters, by providing consecutive\
          \ filters as <code>permission.1</code>, <code>permission.2</code> etc. Note\
          \ that the filters numbering has to start with 1 and be continuous for all\
          \ filters to be processed. The total allowed number of permission filters\
          \ is 50 and all filters exceeding that limit will be dropped. See the section\
          \ \"Permission Filters\" above for more details on how the permission filters\
          \ are processed."
        explode: true
        in: query
        name: permission.N
        required: false
        schema:
          type: string
        style: form
      - description: "The \"root\" of a permission filter, whose value must be a valid\
          \ global, project, or repository permission. Additional filter parameters\
          \ referring to this filter that specify the resource (project or repository)\
          \ to apply the filter to must be prefixed with <code>permission.</code>.\
          \ See the section \"Permission Filters\" above for more details."
        explode: true
        in: query
        name: permission
        required: false
        schema:
          type: string
        style: form
      - description: return only users who are members of the given group
        explode: true
        in: query
        name: group
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestApplicationUser"
          description: A page of users.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: |-
            The search request was invalid, which may happen for multiple reasons, among
            others:


            - permission filter for project/repository permission with no parameters specifying the project or     repository to apply the filter to
            - invalid permission name
            - permission filter for a project/repository permission pointing to a non-existent project or repository


            The exact reason for the error and - in most cases - the request parameter name that had invalid value - will be
            provided in the error message.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: Authentication failed or was not attempted.
      summary: Get all users
      tags:
      - System Maintenance
    put:
      deprecated: false
      description: Update the currently authenticated user's details. The update will
        always be applied to the currently authenticated user.
      operationId: updateUserDetails_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdateWithCredentials"
        description: The user update details
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestApplicationUser"
          description: The updated user.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The request was malformed.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: Authentication failed or was not attempted.
      summary: Update user details
      tags:
      - System Maintenance
  /api/latest/users/credentials:
    put:
      deprecated: false
      description: Update the currently authenticated user's password.
      operationId: updateUserPassword_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserPasswordUpdate"
        description: The password update details
      responses:
        "204":
          description: The user's password was successfully updated.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The request was malformed or the old password was incorrect.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: Authentication failed or was not attempted.
      summary: Set password
      tags:
      - System Maintenance
  /api/latest/users/{userSlug}:
    get:
      deprecated: false
      description: Retrieve the user matching the supplied <strong>userSlug</strong>.
      operationId: getUser
      parameters:
      - description: The user slug
        explode: false
        in: path
        name: userSlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestApplicationUser"
          description: |-
            The user matching the supplied <strong>userSlug</strong>. Note, this may
            <i>not</i> be the user's username, always use the <strong>user.slug</strong> property.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to view the user.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified user does not exist.
      summary: Get user
      tags:
      - System Maintenance
  /api/latest/users/{userSlug}/avatar.png:
    delete:
      deprecated: false
      description: |-
        Delete the avatar associated to a user.


        Users are always allowed to delete their own avatar. To delete someone else's avatar the authenticated user must
        have global <strong>ADMIN</strong> permission, or global <strong>SYS_ADMIN</strong> permission to update a
        <strong>SYS_ADMIN</strong> user's avatar.
      operationId: deleteAvatar
      parameters:
      - description: The user slug
        explode: false
        in: path
        name: userSlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/RestNamedLink"
          description: The new avatar URL if the local avatar was successfully deleted
            or did not exist
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The authenticated user has insufficient permissions to delete
            the specified avatar.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified user does not exist.
      summary: Delete user avatar
      tags:
      - System Maintenance
    post:
      deprecated: false
      description: |-
        Update the avatar for the user with the supplied <strong>slug</strong>.


        This resource accepts POST multipart form data, containing a single image in a form-field named 'avatar'.


        There are configurable server limits on both the dimensions (1024x1024 pixels by default) and uploaded
        file size (1MB by default). Several different image formats are supported, but <strong>PNG</strong> and
        <strong>JPEG</strong> are preferred due to the file size limit.


        This resource has Cross-Site Request Forgery (XSRF) protection. To allow the request to
        pass the XSRF check the caller needs to send an <code>X-Atlassian-Token</code> HTTP header with the
        value <code>no-check</code>.


        An example <a href="http://curl.haxx.se/">curl</a> request to upload an image name 'avatar.png' would be:
        ```
        curl -X POST -u username:password -H "X-Atlassian-Token: no-check" http://example.com/rest/api/latest/users/jdoe/avatar.png -F avatar=@avatar.png
        ```


        Users are always allowed to update their own avatar. To update someone else's avatar the authenticated user must
        have global <strong>ADMIN</strong> permission, or global <strong>SYS_ADMIN</strong> permission to update a
        <strong>SYS_ADMIN</strong> user's avatar.
      operationId: uploadAvatar_1
      parameters:
      - description: This resource has Cross-Site Request Forgery (XSRF) protection.
          To allow the request to pass the XSRF check the caller needs to send an
          <code>X-Atlassian-Token</code> HTTP header with the value <code>no-check</code>.
        example: no-check
        explode: false
        in: header
        name: X-Atlassian-Token
        required: false
        schema:
          type: string
        style: simple
      - description: The user slug
        explode: false
        in: path
        name: userSlug
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/ExampleAvatarMultipartFormData"
        description: Multipart form data containing a single image in a form-field
          named 'avatar'.
      responses:
        "201":
          description: The avatar was uploaded successfully.
          headers:
            Location:
              description: The Location response header which indicates the URL of
                the avatar.
              explode: false
              schema:
                type: string
              style: simple
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user has insufficient permissions
            to update the avatar.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The specified user does not exist.
      summary: Update user avatar
      tags:
      - System Maintenance
  /api/latest/users/{userSlug}/settings:
    get:
      deprecated: false
      description: Retrieve a map of user setting key values for a specific user identified
        by the user slug.
      operationId: getUserSettings
      parameters:
      - description: The user slug.
        explode: false
        in: path
        name: userSlug
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/ExampleSettingsMap"
          description: The user settings for the specified user slug.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user does not have permission to
            view the settings of this user.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: "The specified project, repository, commit, or report does\
            \ not exist."
      summary: Get user settings
      tags:
      - System Maintenance
    post:
      deprecated: false
      description: Update the entries of a map of user setting key/values for a specific
        user identified by the user slug.
      operationId: updateSettings
      parameters:
      - description: The user slug.
        explode: false
        in: path
        name: userSlug
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExampleSettingsMap"
        description: A map with the UserSettings entries which must be updated.
      responses:
        "204":
          description: The UserSettings were updated successfully
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllAccessTokens_401_response"
          description: The currently authenticated user is not a project administrator.
      summary: Update user settings
      tags:
      - System Maintenance
components:
  schemas:
    ApplicationUser:
      example:
        emailAddress: emailAddress
        displayName: displayName
        name: name
        active: true
        id: 6
        type: NORMAL
        slug: slug
      properties:
        active:
          type: boolean
        displayName:
          type: string
        emailAddress:
          type: string
        id:
          format: int32
          type: integer
        name:
          type: string
        slug:
          type: string
        type:
          enum:
          - NORMAL
          - SERVICE
          type: string
    PageRequestImpl:
      properties:
        limit:
          format: int32
          type: integer
        start:
          format: int32
          type: integer
      type: object
    RestAccessToken:
      example:
        createdDate: 2000-01-23T04:56:07.000+00:00
        name: My access token
        id: "252973515069"
      properties:
        createdDate:
          format: date-time
          type: string
        id:
          example: "252973515069"
          type: string
        name:
          example: My access token
          type: string
    RestAccessTokenRequest:
      example:
        permissions:
        - REPO_ADMIN
        - PROJECT_READ
        name: My access token
        expiryDays: 0
      properties:
        expiryDays:
          format: int32
          type: integer
        name:
          example: My access token
          type: string
        permissions:
          example:
          - REPO_ADMIN
          - PROJECT_READ
          items:
            example: "[\"REPO_ADMIN\",\"PROJECT_READ\"]"
            type: string
          type: array
          uniqueItems: true
      type: object
    RestErrorMessage:
      example:
        context: context
        message: message
        exceptionName: exceptionName
      properties:
        context:
          type: string
        exceptionName:
          type: string
        message:
          type: string
    RestErrors:
      example:
        errors:
        - context: context
          message: message
          exceptionName: exceptionName
        - context: context
          message: message
          exceptionName: exceptionName
      properties:
        errors:
          items:
            $ref: "#/components/schemas/RestErrorMessage"
          type: array
    RestRawAccessToken:
      example:
        createdDate: 2000-01-23T04:56:07.000+00:00
        name: My access token
        id: "252973515069"
        token: <token>
      properties:
        createdDate:
          format: date-time
          type: string
        id:
          example: "252973515069"
          type: string
        name:
          example: My access token
          type: string
        token:
          example: <token>
          type: string
    Scope:
      properties:
        resourceId:
          format: int32
          type: integer
        type:
          enum:
          - GLOBAL
          - PROJECT
          - REPOSITORY
          type: string
      type: object
    Project:
      properties:
        description:
          type: string
        id:
          format: int32
          type: integer
        key:
          type: string
        name:
          pattern: "^[^~].*"
          type: string
        public:
          type: boolean
        type:
          enum:
          - NORMAL
          - PERSONAL
          type: string
      type: object
    RefType: {}
    Repository:
      properties:
        archived:
          type: boolean
        description:
          type: string
        fork:
          type: boolean
        forkable:
          type: boolean
        hierarchyId:
          type: string
        id:
          format: int32
          type: integer
        local:
          type: boolean
        name:
          type: string
        offline:
          type: boolean
        origin:
          $ref: "#/components/schemas/Repository"
        partition:
          format: int32
          type: integer
        project:
          $ref: "#/components/schemas/Project"
        public:
          type: boolean
        readOnly:
          type: boolean
        remote:
          type: boolean
        scmId:
          type: string
        slug:
          type: string
        state:
          enum:
          - AVAILABLE
          - INITIALISATION_FAILED
          - INITIALISING
          - OFFLINE
          type: string
        statusMessage:
          type: string
      type: object
    RestBranch:
      example:
        latestCommit: 8d51122def5632836d1cb1026e879069e10a1e13
        default: true
        latestChangeset: 8d51122def5632836d1cb1026e879069e10a1e13
        id: refs/heads/master
        displayId: displayId
        type: ""
      properties:
        default:
          readOnly: true
          type: boolean
        displayId:
          readOnly: true
          type: string
        id:
          example: refs/heads/master
          type: string
        latestChangeset:
          example: 8d51122def5632836d1cb1026e879069e10a1e13
          readOnly: true
          type: string
        latestCommit:
          example: 8d51122def5632836d1cb1026e879069e10a1e13
          readOnly: true
          type: string
        type: {}
    RestBranchCreateRequest:
      example:
        name: name
        startPoint: startPoint
      properties:
        name:
          description: Name of the branch to be created
          type: string
        startPoint:
          description: Commit ID from which the branch is created
          maxLength: 40
          type: string
      type: object
    RestBranchDeleteRequest:
      properties:
        dryRun:
          description: "Don't actually delete the ref name, just do a dry run"
          type: boolean
        endPoint:
          description: Commit ID that the provided ref name is expected to point to
          maxLength: 40
          type: string
        name:
          description: Name of the ref to be deleted
          type: string
      type: object
    RestMinimalRef:
      example:
        id: refs/heads/master
        displayId: master
        type: BRANCH
      properties:
        displayId:
          example: master
          type: string
        id:
          example: refs/heads/master
          type: string
        type:
          enum:
          - BRANCH
          - TAG
          type: string
    RestBuildStats:
      example:
        inProgress: 1
        cancelled: 0
        failed: 6
        successful: 5
        unknown: 5
      properties:
        cancelled:
          format: int32
          type: integer
        failed:
          format: int32
          type: integer
        inProgress:
          format: int32
          type: integer
        successful:
          format: int32
          type: integer
        unknown:
          format: int32
          type: integer
    RestBuildStatus:
      example:
        testResults:
          failed: 1
          skipped: 5
          successful: 134
        parent: TEST-REP
        description: A description of the build goes here
        updatedDate: 1587533699278
        buildNumber: "3"
        repositorySlug: my-repo
        url: https://bamboo.example.com/browse/TEST-REP3
        duration: 1
        projectKey: PRJ
        ref: refs/heads/master
        createdDate: 1587533099278
        name: Database Matrix Tests
        state: CANCELLED
        key: TEST-REP3
      properties:
        buildNumber:
          example: "3"
          type: string
        createdDate:
          example: 1587533099278
          format: int64
          type: integer
        description:
          example: A description of the build goes here
          type: string
        duration:
          format: int64
          type: integer
        key:
          example: TEST-REP3
          type: string
        name:
          example: Database Matrix Tests
          type: string
        parent:
          example: TEST-REP
          type: string
        projectKey:
          example: PRJ
          type: string
        ref:
          example: refs/heads/master
          type: string
        repositorySlug:
          example: my-repo
          type: string
        state:
          enum:
          - CANCELLED
          - FAILED
          - INPROGRESS
          - SUCCESSFUL
          - UNKNOWN
          type: string
        testResults:
          $ref: "#/components/schemas/RestBuildStatus_testResults"
        updatedDate:
          example: 1587533699278
          format: int64
          type: integer
        url:
          example: https://bamboo.example.com/browse/TEST-REP3
          type: string
    RestMultipleBuildStats:
      properties: {}
    RestRefMatcher:
      example:
        id: refs/heads/main
        displayId: main
        type:
          name: Branch
          id: ANY_REF
      properties:
        displayId:
          example: main
          type: string
        id:
          example: refs/heads/main
          type: string
        type:
          $ref: "#/components/schemas/updatePullRequestCondition_1_request_sourceMatcher_type"
    RestRefMatcherType:
      properties:
        id:
          enum:
          - ANY_REF
          - BRANCH
          - PATTERN
          - MODEL_CATEGORY
          - MODEL_BRANCH
          type: string
        name:
          example: Branch
          type: string
    RestRequiredBuildCondition:
      example:
        exemptRefMatcher:
          id: refs/heads/main
          displayId: main
          type:
            name: Branch
            id: ANY_REF
        buildParentKeys:
        - build-key-1
        - build-key-2
        id: 15
        refMatcher:
          id: refs/heads/main
          displayId: main
          type:
            name: Branch
            id: ANY_REF
      properties:
        buildParentKeys:
          description: A non-empty list of build parent keys that require green builds
            for this merge check to pass
          example:
          - build-key-1
          - build-key-2
          items:
            type: string
          type: array
        exemptRefMatcher:
          $ref: "#/components/schemas/updatePullRequestCondition_1_request_sourceMatcher"
        id:
          example: 15
          format: int64
          type: integer
        refMatcher:
          $ref: "#/components/schemas/updatePullRequestCondition_1_request_sourceMatcher"
    RestRequiredBuildConditionSetRequest:
      example:
        exemptRefMatcher:
          id: refs/heads/main
          displayId: main
          type:
            name: Branch
            id: ANY_REF
        buildParentKeys:
        - build-key-1
        - build-key-2
        refMatcher:
          id: refs/heads/main
          displayId: main
          type:
            name: Branch
            id: ANY_REF
      properties:
        buildParentKeys:
          description: A non-empty list of build parent keys that require green builds
            for this merge check to pass
          example:
          - build-key-1
          - build-key-2
          items:
            type: string
          maxItems: 100
          minItems: 0
          type: array
        exemptRefMatcher:
          $ref: "#/components/schemas/updatePullRequestCondition_1_request_sourceMatcher"
        refMatcher:
          $ref: "#/components/schemas/RestRefMatcher"
      required:
      - buildParentKeys
      - refMatcher
      type: object
    RestBulkAddInsightAnnotationRequest:
      example:
        annotations:
        - severity: MEDIUM
          path: path/to/file/in/repo
          line: 4
          link: https://link.to.tool/that/produced/annotation/message-1
          externalId: message-1
          message: This is a bug here because reasons
          type: CODE_SMELL
        - severity: MEDIUM
          path: path/to/file/in/repo
          line: 4
          link: https://link.to.tool/that/produced/annotation/message-1
          externalId: message-1
          message: This is a bug here because reasons
          type: CODE_SMELL
        - severity: MEDIUM
          path: path/to/file/in/repo
          line: 4
          link: https://link.to.tool/that/produced/annotation/message-1
          externalId: message-1
          message: This is a bug here because reasons
          type: CODE_SMELL
        - severity: MEDIUM
          path: path/to/file/in/repo
          line: 4
          link: https://link.to.tool/that/produced/annotation/message-1
          externalId: message-1
          message: This is a bug here because reasons
          type: CODE_SMELL
        - severity: MEDIUM
          path: path/to/file/in/repo
          line: 4
          link: https://link.to.tool/that/produced/annotation/message-1
          externalId: message-1
          message: This is a bug here because reasons
          type: CODE_SMELL
      properties:
        annotations:
          items:
            $ref: "#/components/schemas/RestSingleAddInsightAnnotationRequest"
          maxItems: 2147483647
          minItems: 1
          type: array
      type: object
    RestInsightAnnotation:
      example:
        severity: HIGH
        path: src/some/structure/file.ext
        line: 5
        link: http://example.com/my/file/analysis?line=5
        externalId: external.id
        reportKey: report.key
        message: This is an annotation message
        type: BUG
      properties:
        externalId:
          example: external.id
          type: string
        line:
          example: 5
          format: int32
          type: integer
        link:
          example: http://example.com/my/file/analysis?line=5
          type: string
        message:
          example: This is an annotation message
          type: string
        path:
          example: src/some/structure/file.ext
          type: string
        reportKey:
          example: report.key
          type: string
        severity:
          example: HIGH
          type: string
        type:
          example: BUG
          type: string
    RestInsightAnnotationsResponse:
      example:
        annotations:
        - severity: HIGH
          path: src/some/structure/file.ext
          line: 5
          link: http://example.com/my/file/analysis?line=5
          externalId: external.id
          reportKey: report.key
          message: This is an annotation message
          type: BUG
        - severity: HIGH
          path: src/some/structure/file.ext
          line: 5
          link: http://example.com/my/file/analysis?line=5
          externalId: external.id
          reportKey: report.key
          message: This is an annotation message
          type: BUG
      properties:
        annotations:
          items:
            $ref: "#/components/schemas/RestInsightAnnotation"
          type: array
    RestInsightReport:
      example:
        result: PASS
        createdDate: 1630041546433
        data:
        - title: data.title
          type: NUMBER
          value: 9
        - title: data.title
          type: NUMBER
          value: 9
        link: http://integration.example.com
        details: "This is the details of the report, it can be a longer string describing\
          \ the report"
        reporter: Reporter/tool that produced this report
        title: report.title
        key: report.key
        logoUrl: http://integration.example.com/logo
      properties:
        createdDate:
          example: 1630041546433
          type: number
        data:
          items:
            $ref: "#/components/schemas/RestInsightReportData"
          type: array
        details:
          example: "This is the details of the report, it can be a longer string describing\
            \ the report"
          type: string
        key:
          example: report.key
          type: string
        link:
          example: http://integration.example.com
          format: uri
          type: string
        logoUrl:
          example: http://integration.example.com/logo
          format: uri
          type: string
        reporter:
          example: Reporter/tool that produced this report
          type: string
        result:
          enum:
          - FAIL
          - PASS
          example: PASS
          type: string
        title:
          example: report.title
          type: string
    RestInsightReportData:
      example:
        title: data.title
        type: NUMBER
        value: 9
      properties:
        title:
          example: data.title
          type: string
        type:
          example: NUMBER
          pattern: BOOLEAN|DATE|DURATION|LINK|NUMBER|PERCENTAGE|TEXT
          type: string
        value:
          example: 9
          type: object
    RestSetInsightReportRequest:
      example:
        result: PASS
        coverageProviderKey: coverageProviderKey
        createdDate: 1630041546433
        data:
        - title: data.title
          type: NUMBER
          value: 9
        - title: data.title
          type: NUMBER
          value: 9
        - title: data.title
          type: NUMBER
          value: 9
        - title: data.title
          type: NUMBER
          value: 9
        - title: data.title
          type: NUMBER
          value: 9
        link: http://insight.example.com
        details: "This is the details of the report, it can be a longer string describing\
          \ the report."
        reporter: Reporter/tool that produced this report
        title: report.title
        logoUrl: http://insight.example.com/logo
      properties:
        coverageProviderKey:
          type: string
        createdDate:
          example: 1630041546433
          format: int64
          type: integer
        data:
          items:
            $ref: "#/components/schemas/RestInsightReportData"
          maxItems: 6
          minItems: 0
          type: array
        details:
          example: "This is the details of the report, it can be a longer string describing\
            \ the report."
          type: string
        link:
          example: http://insight.example.com
          type: string
        logoUrl:
          example: http://insight.example.com/logo
          type: string
        reporter:
          example: Reporter/tool that produced this report
          maxLength: 450
          minLength: 0
          type: string
        result:
          example: PASS
          pattern: FAIL|PASS
          type: string
        title:
          example: report.title
          maxLength: 450
          minLength: 0
          type: string
      required:
      - data
      - title
      type: object
    RestSingleAddInsightAnnotationRequest:
      example:
        severity: MEDIUM
        path: path/to/file/in/repo
        line: 4
        link: https://link.to.tool/that/produced/annotation/message-1
        externalId: message-1
        message: This is a bug here because reasons
        type: CODE_SMELL
      properties:
        externalId:
          example: message-1
          maxLength: 450
          minLength: 0
          type: string
        line:
          example: 4
          format: int32
          minimum: 0
          type: integer
        link:
          example: https://link.to.tool/that/produced/annotation/message-1
          type: string
        message:
          example: This is a bug here because reasons
          maxLength: 2000
          minLength: 0
          type: string
        path:
          example: path/to/file/in/repo
          maxLength: 50000
          minLength: 0
          type: string
        severity:
          example: MEDIUM
          pattern: LOW|MEDIUM|HIGH
          type: string
        type:
          example: CODE_SMELL
          pattern: VULNERABILITY|CODE_SMELL|BUG
          type: string
      required:
      - message
      - severity
      type: object
    RestApplicationUser:
      example:
        emailAddress: jane@example.com
        avatarUrl: avatarUrl
        displayName: Jane Citizen
        name: jcitizen
        active: true
        links: "{}"
        id: 101
        type: NORMAL
        slug: jcitizen
      properties:
        active:
          type: boolean
        avatarUrl:
          type: string
          writeOnly: true
        displayName:
          example: Jane Citizen
          type: string
        emailAddress:
          example: jane@example.com
          type: string
        id:
          example: 101
          format: int32
          readOnly: true
          type: integer
        links:
          properties: {}
          type: object
          writeOnly: true
        name:
          example: jcitizen
          type: string
        slug:
          example: jcitizen
          type: string
        type:
          enum:
          - NORMAL
          - SERVICE
          type: string
    RestDefaultReviewersRequest:
      example:
        targetMatcher:
          id: refs/heads/main
          displayId: main
          type:
            name: Branch
            id: ANY_REF
        requiredApprovals: 1
        reviewerGroups:
        - avatarUrl: avatarUrl
          scope:
            resourceId: 2
            type: GLOBAL
          name: name
          description: "null"
          id: 0
          users:
          - emailAddress: emailAddress
            displayName: displayName
            name: name
            active: true
            id: 6
            type: NORMAL
            slug: slug
          - emailAddress: emailAddress
            displayName: displayName
            name: name
            active: true
            id: 6
            type: NORMAL
            slug: slug
        - avatarUrl: avatarUrl
          scope:
            resourceId: 2
            type: GLOBAL
          name: name
          description: "null"
          id: 0
          users:
          - emailAddress: emailAddress
            displayName: displayName
            name: name
            active: true
            id: 6
            type: NORMAL
            slug: slug
          - emailAddress: emailAddress
            displayName: displayName
            name: name
            active: true
            id: 6
            type: NORMAL
            slug: slug
        sourceMatcher:
          id: refs/heads/main
          displayId: main
          type:
            name: Branch
            id: ANY_REF
        reviewers:
        - emailAddress: jane@example.com
          avatarUrl: avatarUrl
          displayName: Jane Citizen
          name: jcitizen
          active: true
          links: "{}"
          id: 101
          type: NORMAL
          slug: jcitizen
        - emailAddress: jane@example.com
          avatarUrl: avatarUrl
          displayName: Jane Citizen
          name: jcitizen
          active: true
          links: "{}"
          id: 101
          type: NORMAL
          slug: jcitizen
      properties:
        requiredApprovals:
          example: 1
          format: int32
          type: integer
        reviewerGroups:
          items:
            $ref: "#/components/schemas/RestReviewerGroup"
          type: array
        reviewers:
          items:
            $ref: "#/components/schemas/RestApplicationUser"
          type: array
        sourceMatcher:
          $ref: "#/components/schemas/updatePullRequestCondition_1_request_sourceMatcher"
        targetMatcher:
          $ref: "#/components/schemas/updatePullRequestCondition_1_request_sourceMatcher"
      type: object
    RestPullRequestCondition:
      example:
        targetRefMatcher:
          id: refs/heads/main
          displayId: main
          type:
            name: Branch
            id: ANY_REF
        requiredApprovals: 1
        reviewerGroups:
        - avatarUrl: avatarUrl
          scope:
            resourceId: 2
            type: GLOBAL
          name: name
          description: "null"
          id: 0
          users:
          - emailAddress: emailAddress
            displayName: displayName
            name: name
            active: true
            id: 6
            type: NORMAL
            slug: slug
          - emailAddress: emailAddress
            displayName: displayName
            name: name
            active: true
            id: 6
            type: NORMAL
            slug: slug
        - avatarUrl: avatarUrl
          scope:
            resourceId: 2
            type: GLOBAL
          name: name
          description: "null"
          id: 0
          users:
          - emailAddress: emailAddress
            displayName: displayName
            name: name
            active: true
            id: 6
            type: NORMAL
            slug: slug
          - emailAddress: emailAddress
            displayName: displayName
            name: name
            active: true
            id: 6
            type: NORMAL
            slug: slug
        scope:
          resourceId: 2
          type: GLOBAL
        sourceRefMatcher:
          id: refs/heads/main
          displayId: main
          type:
            name: Branch
            id: ANY_REF
        id: 1
        reviewers:
        - avatarUrl: avatarUrl
          scope:
            resourceId: 2
            type: GLOBAL
          name: name
          description: "null"
          id: 0
          users:
          - emailAddress: emailAddress
            displayName: displayName
            name: name
            active: true
            id: 6
            type: NORMAL
            slug: slug
          - emailAddress: emailAddress
            displayName: displayName
            name: name
            active: true
            id: 6
            type: NORMAL
            slug: slug
        - avatarUrl: avatarUrl
          scope:
            resourceId: 2
            type: GLOBAL
          name: name
          description: "null"
          id: 0
          users:
          - emailAddress: emailAddress
            displayName: displayName
            name: name
            active: true
            id: 6
            type: NORMAL
            slug: slug
          - emailAddress: emailAddress
            displayName: displayName
            name: name
            active: true
            id: 6
            type: NORMAL
            slug: slug
      properties:
        id:
          example: 1
          format: int32
          readOnly: true
          type: integer
        requiredApprovals:
          example: 1
          format: int32
          type: integer
        reviewerGroups:
          items:
            $ref: "#/components/schemas/RestReviewerGroup"
          type: array
        reviewers:
          items:
            $ref: "#/components/schemas/RestReviewerGroup"
          type: array
        scope:
          $ref: "#/components/schemas/RestPullRequestCondition_scope"
        sourceRefMatcher:
          $ref: "#/components/schemas/updatePullRequestCondition_1_request_sourceMatcher"
        targetRefMatcher:
          $ref: "#/components/schemas/updatePullRequestCondition_1_request_sourceMatcher"
    RestRelatedLinks:
      properties: {}
    RestReviewerGroup:
      example:
        avatarUrl: avatarUrl
        scope:
          resourceId: 2
          type: GLOBAL
        name: name
        description: "null"
        id: 0
        users:
        - emailAddress: emailAddress
          displayName: displayName
          name: name
          active: true
          id: 6
          type: NORMAL
          slug: slug
        - emailAddress: emailAddress
          displayName: displayName
          name: name
          active: true
          id: 6
          type: NORMAL
          slug: slug
      properties:
        avatarUrl:
          type: string
          writeOnly: true
        description:
          example: "null"
          type: string
        id:
          format: int64
          type: integer
        name:
          example: name
          type: string
        scope:
          $ref: "#/components/schemas/RestReviewerGroup_scope"
        users:
          items:
            $ref: "#/components/schemas/ApplicationUser"
          type: array
    RestScope:
      properties:
        resourceId:
          example: 2
          format: int32
          type: integer
        type:
          enum:
          - GLOBAL
          - PROJECT
          - REPOSITORY
          type: string
    RestDefaultTask:
      example:
        description: Default task description
        html: html
        id: 1
      properties:
        description:
          example: Default task description
          readOnly: true
          type: string
        html:
          type: string
          writeOnly: true
        id:
          example: 1
          format: int64
          readOnly: true
          type: integer
    RestDefaultTaskRequest:
      example:
        targetMatcher:
          id: refs/heads/main
          displayId: main
          type:
            name: Branch
            id: ANY_REF
        sourceMatcher:
          id: refs/heads/main
          displayId: main
          type:
            name: Branch
            id: ANY_REF
        description: Default task description
      properties:
        description:
          example: Default task description
          type: string
        sourceMatcher:
          $ref: "#/components/schemas/updatePullRequestCondition_1_request_sourceMatcher"
        targetMatcher:
          $ref: "#/components/schemas/updatePullRequestCondition_1_request_sourceMatcher"
      type: object
    ApplicationId:
      type: object
    Comment:
      properties:
        anchor:
          $ref: "#/components/schemas/CommentThreadDiffAnchor"
        author:
          $ref: "#/components/schemas/ApplicationUser"
        comments:
          items:
            $ref: "#/components/schemas/Comment"
          type: array
        createdDate:
          format: date-time
          type: string
        id:
          format: int64
          type: integer
        permittedOperations:
          $ref: "#/components/schemas/CommentOperations"
        properties:
          properties: {}
          type: object
        resolvedDate:
          format: date-time
          type: string
        resolver:
          $ref: "#/components/schemas/ApplicationUser"
        severity:
          enum:
          - NORMAL
          - BLOCKER
          type: string
        state:
          enum:
          - OPEN
          - PENDING
          - RESOLVED
          type: string
        text:
          type: string
        thread:
          $ref: "#/components/schemas/CommentThread"
        updatedDate:
          format: date-time
          type: string
        version:
          format: int32
          type: integer
      type: object
    CommentOperations:
      properties:
        deletable:
          type: boolean
        editable:
          type: boolean
        transitionable:
          type: boolean
      type: object
    CommentThread:
      properties:
        anchor:
          $ref: "#/components/schemas/CommentThreadDiffAnchor"
        anchored:
          type: boolean
        commentable:
          type: object
        createdDate:
          format: date-time
          type: string
        id:
          format: int64
          type: integer
        resolved:
          type: boolean
        resolvedDate:
          format: date-time
          type: string
        resolver:
          $ref: "#/components/schemas/ApplicationUser"
        rootComment:
          $ref: "#/components/schemas/Comment"
        updatedDate:
          format: date-time
          type: string
      type: object
    CommentThreadDiffAnchor:
      properties:
        diffType:
          enum:
          - COMMIT
          - EFFECTIVE
          - RANGE
          type: string
        fileAnchor:
          type: boolean
        fileType:
          enum:
          - FROM
          - TO
          type: string
        fromHash:
          type: string
        line:
          format: int32
          type: integer
        lineAnchor:
          type: boolean
        lineType:
          enum:
          - ADDED
          - CONTEXT
          - REMOVED
          type: string
        multilineAnchor:
          type: boolean
        multilineDestinationRange:
          $ref: "#/components/schemas/LineNumberRange"
        multilineSourceRange:
          $ref: "#/components/schemas/LineNumberRange"
        multilineStartLine:
          format: int32
          type: integer
        multilineStartLineType:
          enum:
          - ADDED
          - CONTEXT
          - REMOVED
          type: string
        orphaned:
          type: boolean
        path:
          type: string
        srcPath:
          type: string
        toHash:
          type: string
      type: object
    Commentable:
      type: object
    LineNumberRange:
      properties:
        maximum:
          format: int32
          type: integer
        minimum:
          format: int32
          type: integer
        singleLine:
          type: boolean
      type: object
    PropertyMap:
      properties: {}
      type: object
    RestChangeset:
      example:
        toCommit:
          committer:
            emailAddress: charlie@example.com
            avatarUrl: avatarUrl
            name: Charlie
          committerTimestamp: 1449075830
          author:
            emailAddress: charlie@example.com
            avatarUrl: avatarUrl
            name: Charlie
          authorTimestamp: 1359075920
          id: abcdef0123abcdef4567abcdef8987abcdef6543
          displayId: abcdef0
          message: More work on feature 1
          parents:
          - id: abcdef0123abcdef4567abcdef8987abcdef6543
            displayId: abcdef0
          - id: abcdef0123abcdef4567abcdef8987abcdef6543
            displayId: abcdef0
        changes:
          size: 5
          nextPageStart: 5
          isLastPage: true
          values: "{}"
          limit: 1
          start: 2
        links: "{}"
        fromCommit:
          id: abcdef0123abcdef4567abcdef8987abcdef6543
          displayId: abcdef0
        repository:
          hierarchyId: e3c939f9ef4a7fae272e
          defaultBranch: main
          origin:
            hierarchyId: e3c939f9ef4a7fae272e
            defaultBranch: main
            description: My repo description
            project:
              public: true
              avatarUrl: avatarUrl
              scope: PROJECT
              name: My Cool Project
              description: The description for my cool project
              links: "{}"
              avatar: avatar
              id: 2
              type: NORMAL
              key: PRJ
            relatedLinks: "{}"
            statusMessage: Available
            archived: true
            partition: 3
            public: true
            scope: REPOSITORY
            name: My repo
            forkable: true
            links: "{}"
            id: 9
            scmId: git
            state: AVAILABLE
            slug: my-repo
          description: My repo description
          project:
            public: true
            avatarUrl: avatarUrl
            scope: PROJECT
            name: My Cool Project
            description: The description for my cool project
            links: "{}"
            avatar: avatar
            id: 2
            type: NORMAL
            key: PRJ
          relatedLinks: "{}"
          statusMessage: Available
          archived: true
          partition: 4
          public: true
          scope: REPOSITORY
          name: My repo
          forkable: true
          links: "{}"
          id: 7
          scmId: git
          state: AVAILABLE
          slug: my-repo
      properties:
        changes:
          $ref: "#/components/schemas/RestChangeset_changes"
        fromCommit:
          $ref: "#/components/schemas/RestChangeset_fromCommit"
        links:
          properties: {}
          type: object
          writeOnly: true
        repository:
          $ref: "#/components/schemas/RestChangeset_repository"
        toCommit:
          $ref: "#/components/schemas/RestChangeset_toCommit"
    RestCommentJiraIssue:
      example:
        issueKey: TEST-123
        commentId: 1
      properties:
        commentId:
          example: 1
          format: int64
          type: integer
        issueKey:
          example: TEST-123
          type: string
    RestCommit:
      example:
        committer:
          emailAddress: charlie@example.com
          avatarUrl: avatarUrl
          name: Charlie
        committerTimestamp: 1449075830
        author:
          emailAddress: charlie@example.com
          avatarUrl: avatarUrl
          name: Charlie
        authorTimestamp: 1359075920
        id: abcdef0123abcdef4567abcdef8987abcdef6543
        displayId: abcdef0
        message: More work on feature 1
        parents:
        - id: abcdef0123abcdef4567abcdef8987abcdef6543
          displayId: abcdef0
        - id: abcdef0123abcdef4567abcdef8987abcdef6543
          displayId: abcdef0
      properties:
        author:
          $ref: "#/components/schemas/RestChangeset_toCommit_author"
        authorTimestamp:
          example: 1359075920
          format: int64
          type: integer
        committer:
          $ref: "#/components/schemas/RestChangeset_toCommit_author"
        committerTimestamp:
          example: 1449075830
          format: int64
          type: integer
        displayId:
          example: abcdef0
          type: string
        id:
          example: abcdef0123abcdef4567abcdef8987abcdef6543
          type: string
        message:
          example: More work on feature 1
          type: string
        parents:
          items:
            $ref: "#/components/schemas/RestMinimalCommit"
          type: array
    RestEnhancedEntityLink:
      example:
        displayUrl: example.com/jira
        projectKey: MPROJ
        projectName: My Project
        projectId: 10000
        applicationLinkId: a1b54cs4wsd45
      properties:
        applicationLinkId:
          example: a1b54cs4wsd45
          type: string
        displayUrl:
          example: example.com/jira
          type: string
        projectId:
          example: 10000
          format: int64
          type: integer
        projectKey:
          example: MPROJ
          type: string
        projectName:
          example: My Project
          type: string
    RestJiraIssue:
      example:
        key: JRA-9
        url: https://jira.atlassian.com/browse/JRA-9
      properties:
        key:
          example: JRA-9
          type: string
        url:
          example: https://jira.atlassian.com/browse/JRA-9
          type: string
      type: object
    RestMinimalCommit:
      example:
        id: abcdef0123abcdef4567abcdef8987abcdef6543
        displayId: abcdef0
      properties:
        displayId:
          example: abcdef0
          type: string
        id:
          example: abcdef0123abcdef4567abcdef8987abcdef6543
          type: string
    RestPageRestChange:
      properties:
        isLastPage:
          type: boolean
        limit:
          format: int32
          type: integer
        nextPageStart:
          format: int32
          type: integer
        size:
          format: int32
          type: integer
        start:
          format: int32
          type: integer
        values:
          type: object
    RestPerson:
      properties:
        avatarUrl:
          type: string
          writeOnly: true
        emailAddress:
          example: charlie@example.com
          type: string
        name:
          example: Charlie
          type: string
    RestProject:
      example:
        public: true
        avatarUrl: avatarUrl
        scope: PROJECT
        name: My Cool Project
        description: The description for my cool project
        links: "{}"
        avatar: avatar
        id: 0
        type: NORMAL
        key: PRJ
      properties:
        avatar:
          type: string
        avatarUrl:
          type: string
          writeOnly: true
        description:
          example: The description for my cool project
          readOnly: true
          type: string
        id:
          format: int32
          readOnly: true
          type: integer
        key:
          example: PRJ
          type: string
        links:
          properties: {}
          type: object
          writeOnly: true
        name:
          example: My Cool Project
          pattern: "^[^~].*"
          readOnly: true
          type: string
        public:
          readOnly: true
          type: boolean
        scope:
          example: PROJECT
          readOnly: true
          type: string
        type:
          enum:
          - NORMAL
          - PERSONAL
          readOnly: true
          type: string
    RestRepository:
      example:
        hierarchyId: e3c939f9ef4a7fae272e
        defaultBranch: main
        origin:
          hierarchyId: e3c939f9ef4a7fae272e
          defaultBranch: main
          description: My repo description
          project:
            public: true
            avatarUrl: avatarUrl
            scope: PROJECT
            name: My Cool Project
            description: The description for my cool project
            links: "{}"
            avatar: avatar
            id: 2
            type: NORMAL
            key: PRJ
          relatedLinks: "{}"
          statusMessage: Available
          archived: true
          partition: 3
          public: true
          scope: REPOSITORY
          name: My repo
          forkable: true
          links: "{}"
          id: 9
          scmId: git
          state: AVAILABLE
          slug: my-repo
        description: My repo description
        project:
          public: true
          avatarUrl: avatarUrl
          scope: PROJECT
          name: My Cool Project
          description: The description for my cool project
          links: "{}"
          avatar: avatar
          id: 2
          type: NORMAL
          key: PRJ
        relatedLinks: "{}"
        statusMessage: Available
        archived: true
        partition: 6
        public: true
        scope: REPOSITORY
        name: My repo
        forkable: true
        links: "{}"
        id: 0
        scmId: git
        state: AVAILABLE
        slug: my-repo
      properties:
        archived:
          readOnly: true
          type: boolean
        defaultBranch:
          example: main
          type: string
          writeOnly: true
        description:
          example: My repo description
          readOnly: true
          type: string
        forkable:
          readOnly: true
          type: boolean
        hierarchyId:
          example: e3c939f9ef4a7fae272e
          readOnly: true
          type: string
        id:
          format: int32
          readOnly: true
          type: integer
        links:
          properties: {}
          type: object
          writeOnly: true
        name:
          example: My repo
          type: string
        origin:
          $ref: "#/components/schemas/RestChangeset_repository_origin"
        partition:
          format: int32
          readOnly: true
          type: integer
        project:
          $ref: "#/components/schemas/RestChangeset_repository_origin_project"
        public:
          readOnly: true
          type: boolean
        relatedLinks:
          properties: {}
          readOnly: true
          type: object
        scmId:
          example: git
          type: string
        scope:
          example: REPOSITORY
          readOnly: true
          type: string
        slug:
          example: my-repo
          type: string
        state:
          enum:
          - AVAILABLE
          - INITIALISATION_FAILED
          - INITIALISING
          - OFFLINE
          readOnly: true
          type: string
        statusMessage:
          example: Available
          readOnly: true
          type: string
    PullRequest:
      properties:
        author:
          $ref: "#/components/schemas/PullRequestParticipant"
        closed:
          type: boolean
        closedDate:
          format: date-time
          type: string
        createdDate:
          format: date-time
          type: string
        crossRepository:
          type: boolean
        description:
          type: string
        draft:
          type: boolean
        fromRef:
          $ref: "#/components/schemas/PullRequestRef"
        id:
          format: int64
          type: integer
        locked:
          type: boolean
        open:
          type: boolean
        participants:
          items:
            $ref: "#/components/schemas/PullRequestParticipant"
          type: array
          uniqueItems: true
        properties:
          properties: {}
          type: object
        reviewers:
          items:
            $ref: "#/components/schemas/PullRequestParticipant"
          type: array
          uniqueItems: true
        state:
          enum:
          - DECLINED
          - MERGED
          - OPEN
          type: string
        title:
          type: string
        toRef:
          $ref: "#/components/schemas/PullRequestRef"
        updatedDate:
          format: date-time
          type: string
        version:
          format: int32
          type: integer
      type: object
    PullRequestParticipant:
      properties:
        approved:
          type: boolean
        lastReviewedCommit:
          type: string
        pullRequest:
          $ref: "#/components/schemas/PullRequest"
        role:
          enum:
          - AUTHOR
          - REVIEWER
          - PARTICIPANT
          type: string
        status:
          enum:
          - UNAPPROVED
          - NEEDS_WORK
          - APPROVED
          type: string
        user:
          $ref: "#/components/schemas/ApplicationUser"
      type: object
    PullRequestRef:
      properties:
        displayId:
          type: string
        id:
          type: string
        latestCommit:
          type: string
        repository:
          $ref: "#/components/schemas/Repository"
        type: {}
      type: object
    RestComment:
      example:
        severity: NORMAL
        parent:
          severity: NORMAL
          resolver:
            emailAddress: jane@example.com
            avatarUrl: avatarUrl
            displayName: Jane Citizen
            name: jcitizen
            active: true
            links: "{}"
            id: 101
            type: NORMAL
            slug: jcitizen
          comments:
          - null
          - null
          threadResolved: true
          author:
            emailAddress: jane@example.com
            avatarUrl: avatarUrl
            displayName: Jane Citizen
            name: jcitizen
            active: true
            links: "{}"
            id: 101
            type: NORMAL
            slug: jcitizen
          pending: true
          anchored: true
          updatedDate: 1449075920
          version: 1
          threadResolvedDate: 1569075920
          threadResolver:
            emailAddress: jane@example.com
            avatarUrl: avatarUrl
            displayName: Jane Citizen
            name: jcitizen
            active: true
            links: "{}"
            id: 101
            type: NORMAL
            slug: jcitizen
          createdDate: 1359075920
          anchor:
            multilineSpan:
              srcSpanEnd: 2
              dstSpanStart: 2
              dstSpanEnd: 3
              srcSpanStart: 1
            path:
              parent: path/to
              components:
              - path
              - to
              - file.txt
              extension: txt
              name: file.txt
            fromHash: 62a0505e8204115b8b9c8a95bfa264a8c0896a93
            line: 98
            multilineMarker:
              startLine: 5
              startLineType: ADDED
            lineType: ADDED
            srcPath:
              parent: path/to
              components:
              - path
              - to
              - file.txt
              extension: txt
              name: file.txt
            diffType: COMMIT
            toHash: 3cdd5d19178a54d2e51b5098d43b57571241d0ab
            fileType: FROM
            pullRequest:
              author:
                approved: true
                role: AUTHOR
                user:
                  emailAddress: jane@example.com
                  avatarUrl: avatarUrl
                  displayName: Jane Citizen
                  name: jcitizen
                  active: true
                  links: "{}"
                  id: 101
                  type: NORMAL
                  slug: jcitizen
                lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
                status: UNAPPROVED
              description: "It is a kludge, but put the tuple from the database in\
                \ the cache."
              updatedDate: 14490759200
              htmlDescription: htmlDescription
              title: Talking Nerdy
              reviewers:
              - approved: true
                role: AUTHOR
                user:
                  emailAddress: jane@example.com
                  avatarUrl: avatarUrl
                  displayName: Jane Citizen
                  name: jcitizen
                  active: true
                  links: "{}"
                  id: 101
                  type: NORMAL
                  slug: jcitizen
                lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
                status: UNAPPROVED
              - approved: true
                role: AUTHOR
                user:
                  emailAddress: jane@example.com
                  avatarUrl: avatarUrl
                  displayName: Jane Citizen
                  name: jcitizen
                  active: true
                  links: "{}"
                  id: 101
                  type: NORMAL
                  slug: jcitizen
                lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
                status: UNAPPROVED
              version: 0
              toRef:
                latestCommit: babecafebabecafebabecafebabecafebabecafe
                id: refs/heads/feature-ABC-123
                displayId: feature-ABC-1233
                repository:
                  hierarchyId: e3c939f9ef4a7fae272e
                  defaultBranch: main
                  origin:
                    hierarchyId: e3c939f9ef4a7fae272e
                    defaultBranch: main
                    description: My repo description
                    project:
                      public: true
                      avatarUrl: avatarUrl
                      scope: PROJECT
                      name: My Cool Project
                      description: The description for my cool project
                      links: "{}"
                      avatar: avatar
                      id: 2
                      type: NORMAL
                      key: PRJ
                    relatedLinks: "{}"
                    statusMessage: Available
                    archived: true
                    partition: 3
                    public: true
                    scope: REPOSITORY
                    name: My repo
                    forkable: true
                    links: "{}"
                    id: 9
                    scmId: git
                    state: AVAILABLE
                    slug: my-repo
                  description: My repo description
                  project:
                    public: true
                    avatarUrl: avatarUrl
                    scope: PROJECT
                    name: My Cool Project
                    description: The description for my cool project
                    links: "{}"
                    avatar: avatar
                    id: 2
                    type: NORMAL
                    key: PRJ
                  relatedLinks: "{}"
                  statusMessage: Available
                  archived: true
                  partition: 4
                  public: true
                  scope: REPOSITORY
                  name: My repo
                  forkable: true
                  links: "{}"
                  id: 7
                  scmId: git
                  state: AVAILABLE
                  slug: my-repo
                type: BRANCH
              descriptionAsHtml: descriptionAsHtml
              createdDate: 13590759200
              closedDate: 19990759200
              draft: true
              closed: true
              fromRef:
                latestCommit: babecafebabecafebabecafebabecafebabecafe
                id: refs/heads/feature-ABC-123
                displayId: feature-ABC-1233
                repository:
                  hierarchyId: e3c939f9ef4a7fae272e
                  defaultBranch: main
                  origin:
                    hierarchyId: e3c939f9ef4a7fae272e
                    defaultBranch: main
                    description: My repo description
                    project:
                      public: true
                      avatarUrl: avatarUrl
                      scope: PROJECT
                      name: My Cool Project
                      description: The description for my cool project
                      links: "{}"
                      avatar: avatar
                      id: 2
                      type: NORMAL
                      key: PRJ
                    relatedLinks: "{}"
                    statusMessage: Available
                    archived: true
                    partition: 3
                    public: true
                    scope: REPOSITORY
                    name: My repo
                    forkable: true
                    links: "{}"
                    id: 9
                    scmId: git
                    state: AVAILABLE
                    slug: my-repo
                  description: My repo description
                  project:
                    public: true
                    avatarUrl: avatarUrl
                    scope: PROJECT
                    name: My Cool Project
                    description: The description for my cool project
                    links: "{}"
                    avatar: avatar
                    id: 2
                    type: NORMAL
                    key: PRJ
                  relatedLinks: "{}"
                  statusMessage: Available
                  archived: true
                  partition: 4
                  public: true
                  scope: REPOSITORY
                  name: My repo
                  forkable: true
                  links: "{}"
                  id: 7
                  scmId: git
                  state: AVAILABLE
                  slug: my-repo
                type: BRANCH
              links: "{}"
              id: 1
              state: DECLINED
              locked: true
              open: true
              participants:
              - approved: true
                role: AUTHOR
                user:
                  emailAddress: jane@example.com
                  avatarUrl: avatarUrl
                  displayName: Jane Citizen
                  name: jcitizen
                  active: true
                  links: "{}"
                  id: 101
                  type: NORMAL
                  slug: jcitizen
                lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
                status: UNAPPROVED
              - approved: true
                role: AUTHOR
                user:
                  emailAddress: jane@example.com
                  avatarUrl: avatarUrl
                  displayName: Jane Citizen
                  name: jcitizen
                  active: true
                  links: "{}"
                  id: 101
                  type: NORMAL
                  slug: jcitizen
                lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
                status: UNAPPROVED
          html: html
          id: 1
          state: OPEN
          text: An insightful comment.
          reply: true
          properties: "{}"
          resolvedDate: 1239075920
        resolver:
          emailAddress: jane@example.com
          avatarUrl: avatarUrl
          displayName: Jane Citizen
          name: jcitizen
          active: true
          links: "{}"
          id: 101
          type: NORMAL
          slug: jcitizen
        comments:
        - null
        - null
        threadResolved: true
        author:
          emailAddress: jane@example.com
          avatarUrl: avatarUrl
          displayName: Jane Citizen
          name: jcitizen
          active: true
          links: "{}"
          id: 101
          type: NORMAL
          slug: jcitizen
        pending: true
        anchored: true
        updatedDate: 1449075920
        version: 1
        threadResolvedDate: 1569075920
        threadResolver:
          emailAddress: jane@example.com
          avatarUrl: avatarUrl
          displayName: Jane Citizen
          name: jcitizen
          active: true
          links: "{}"
          id: 101
          type: NORMAL
          slug: jcitizen
        createdDate: 1359075920
        anchor:
          multilineSpan:
            srcSpanEnd: 2
            dstSpanStart: 2
            dstSpanEnd: 3
            srcSpanStart: 1
          path:
            parent: path/to
            components:
            - path
            - to
            - file.txt
            extension: txt
            name: file.txt
          fromHash: 62a0505e8204115b8b9c8a95bfa264a8c0896a93
          line: 98
          multilineMarker:
            startLine: 5
            startLineType: ADDED
          lineType: ADDED
          srcPath:
            parent: path/to
            components:
            - path
            - to
            - file.txt
            extension: txt
            name: file.txt
          diffType: COMMIT
          toHash: 3cdd5d19178a54d2e51b5098d43b57571241d0ab
          fileType: FROM
          pullRequest:
            author:
              approved: true
              role: AUTHOR
              user:
                emailAddress: jane@example.com
                avatarUrl: avatarUrl
                displayName: Jane Citizen
                name: jcitizen
                active: true
                links: "{}"
                id: 101
                type: NORMAL
                slug: jcitizen
              lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
              status: UNAPPROVED
            description: "It is a kludge, but put the tuple from the database in the\
              \ cache."
            updatedDate: 14490759200
            htmlDescription: htmlDescription
            title: Talking Nerdy
            reviewers:
            - approved: true
              role: AUTHOR
              user:
                emailAddress: jane@example.com
                avatarUrl: avatarUrl
                displayName: Jane Citizen
                name: jcitizen
                active: true
                links: "{}"
                id: 101
                type: NORMAL
                slug: jcitizen
              lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
              status: UNAPPROVED
            - approved: true
              role: AUTHOR
              user:
                emailAddress: jane@example.com
                avatarUrl: avatarUrl
                displayName: Jane Citizen
                name: jcitizen
                active: true
                links: "{}"
                id: 101
                type: NORMAL
                slug: jcitizen
              lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
              status: UNAPPROVED
            version: 0
            toRef:
              latestCommit: babecafebabecafebabecafebabecafebabecafe
              id: refs/heads/feature-ABC-123
              displayId: feature-ABC-1233
              repository:
                hierarchyId: e3c939f9ef4a7fae272e
                defaultBranch: main
                origin:
                  hierarchyId: e3c939f9ef4a7fae272e
                  defaultBranch: main
                  description: My repo description
                  project:
                    public: true
                    avatarUrl: avatarUrl
                    scope: PROJECT
                    name: My Cool Project
                    description: The description for my cool project
                    links: "{}"
                    avatar: avatar
                    id: 2
                    type: NORMAL
                    key: PRJ
                  relatedLinks: "{}"
                  statusMessage: Available
                  archived: true
                  partition: 3
                  public: true
                  scope: REPOSITORY
                  name: My repo
                  forkable: true
                  links: "{}"
                  id: 9
                  scmId: git
                  state: AVAILABLE
                  slug: my-repo
                description: My repo description
                project:
                  public: true
                  avatarUrl: avatarUrl
                  scope: PROJECT
                  name: My Cool Project
                  description: The description for my cool project
                  links: "{}"
                  avatar: avatar
                  id: 2
                  type: NORMAL
                  key: PRJ
                relatedLinks: "{}"
                statusMessage: Available
                archived: true
                partition: 4
                public: true
                scope: REPOSITORY
                name: My repo
                forkable: true
                links: "{}"
                id: 7
                scmId: git
                state: AVAILABLE
                slug: my-repo
              type: BRANCH
            descriptionAsHtml: descriptionAsHtml
            createdDate: 13590759200
            closedDate: 19990759200
            draft: true
            closed: true
            fromRef:
              latestCommit: babecafebabecafebabecafebabecafebabecafe
              id: refs/heads/feature-ABC-123
              displayId: feature-ABC-1233
              repository:
                hierarchyId: e3c939f9ef4a7fae272e
                defaultBranch: main
                origin:
                  hierarchyId: e3c939f9ef4a7fae272e
                  defaultBranch: main
                  description: My repo description
                  project:
                    public: true
                    avatarUrl: avatarUrl
                    scope: PROJECT
                    name: My Cool Project
                    description: The description for my cool project
                    links: "{}"
                    avatar: avatar
                    id: 2
                    type: NORMAL
                    key: PRJ
                  relatedLinks: "{}"
                  statusMessage: Available
                  archived: true
                  partition: 3
                  public: true
                  scope: REPOSITORY
                  name: My repo
                  forkable: true
                  links: "{}"
                  id: 9
                  scmId: git
                  state: AVAILABLE
                  slug: my-repo
                description: My repo description
                project:
                  public: true
                  avatarUrl: avatarUrl
                  scope: PROJECT
                  name: My Cool Project
                  description: The description for my cool project
                  links: "{}"
                  avatar: avatar
                  id: 2
                  type: NORMAL
                  key: PRJ
                relatedLinks: "{}"
                statusMessage: Available
                archived: true
                partition: 4
                public: true
                scope: REPOSITORY
                name: My repo
                forkable: true
                links: "{}"
                id: 7
                scmId: git
                state: AVAILABLE
                slug: my-repo
              type: BRANCH
            links: "{}"
            id: 1
            state: DECLINED
            locked: true
            open: true
            participants:
            - approved: true
              role: AUTHOR
              user:
                emailAddress: jane@example.com
                avatarUrl: avatarUrl
                displayName: Jane Citizen
                name: jcitizen
                active: true
                links: "{}"
                id: 101
                type: NORMAL
                slug: jcitizen
              lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
              status: UNAPPROVED
            - approved: true
              role: AUTHOR
              user:
                emailAddress: jane@example.com
                avatarUrl: avatarUrl
                displayName: Jane Citizen
                name: jcitizen
                active: true
                links: "{}"
                id: 101
                type: NORMAL
                slug: jcitizen
              lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
              status: UNAPPROVED
        html: html
        id: 1
        state: OPEN
        text: An insightful comment.
        reply: true
        properties: "{}"
        resolvedDate: 1239075920
      properties:
        anchor:
          $ref: "#/components/schemas/RestComment_anchor"
        anchored:
          readOnly: true
          type: boolean
        author:
          $ref: "#/components/schemas/RestComment_author"
        comments:
          items:
            $ref: "#/components/schemas/RestComment"
          readOnly: true
          type: array
        createdDate:
          example: 1359075920
          format: int64
          readOnly: true
          type: integer
        html:
          readOnly: true
          type: string
        id:
          example: 1
          format: int64
          type: integer
        parent:
          $ref: "#/components/schemas/RestComment_parent"
        pending:
          readOnly: true
          type: boolean
        properties:
          type: object
        reply:
          readOnly: true
          type: boolean
        resolvedDate:
          example: 1239075920
          format: int64
          readOnly: true
          type: integer
        resolver:
          $ref: "#/components/schemas/RestComment_author"
        severity:
          example: NORMAL
          type: string
        state:
          example: OPEN
          type: string
        text:
          example: An insightful comment.
          type: string
        threadResolved:
          description: Indicates if this comment thread has been marked as resolved
            or not
          type: boolean
        threadResolvedDate:
          example: 1569075920
          format: int64
          readOnly: true
          type: integer
        threadResolver:
          $ref: "#/components/schemas/RestComment_author"
        updatedDate:
          example: 1449075920
          format: int64
          readOnly: true
          type: integer
        version:
          example: 1
          format: int32
          type: integer
    RestCommentThreadDiffAnchor:
      properties:
        diffType:
          enum:
          - COMMIT
          - EFFECTIVE
          - RANGE
          type: string
        fileType:
          enum:
          - FROM
          - TO
          type: string
        fromHash:
          example: 62a0505e8204115b8b9c8a95bfa264a8c0896a93
          type: string
        line:
          example: 98
          format: int32
          type: integer
        lineType:
          enum:
          - ADDED
          - CONTEXT
          - REMOVED
          type: string
        multilineMarker:
          $ref: "#/components/schemas/RestComment_anchor_multilineMarker"
        multilineSpan:
          $ref: "#/components/schemas/RestComment_anchor_multilineSpan"
        path:
          $ref: "#/components/schemas/RestComment_anchor_path"
        pullRequest:
          $ref: "#/components/schemas/RestComment_anchor_pullRequest"
        srcPath:
          $ref: "#/components/schemas/RestComment_anchor_path"
        toHash:
          example: 3cdd5d19178a54d2e51b5098d43b57571241d0ab
          type: string
    RestEmoticon:
      properties:
        shortcut:
          type: string
        url:
          type: string
        value:
          type: string
    RestMultilineCommentMarker:
      properties:
        startLine:
          description: The line number where the multiline comment will begin
          example: 5
          format: int32
          type: integer
        startLineType:
          description: The segment type of the start line of the multiline comment
          enum:
          - ADDED
          - CONTEXT
          - REMOVED
          type: string
    RestMultilineCommentSpan:
      properties:
        dstSpanEnd:
          description: The line number of the last line on the right-hand side of
            the diff that the comment spans
          example: 3
          format: int32
          readOnly: true
          type: integer
        dstSpanStart:
          description: The line number of the first line on the right-hand side of
            the diff that the comment spans
          example: 2
          format: int32
          readOnly: true
          type: integer
        srcSpanEnd:
          description: The line number of the last line on the left-hand side of the
            diff that the comment spans
          example: 2
          format: int32
          readOnly: true
          type: integer
        srcSpanStart:
          description: The line number of the first line on the left-hand side of
            the diff that the comment spans
          example: 1
          format: int32
          readOnly: true
          type: integer
    RestPath:
      properties:
        components:
          example:
          - path
          - to
          - file.txt
          items:
            type: string
          type: array
        extension:
          example: txt
          type: string
        name:
          example: file.txt
          type: string
        parent:
          example: path/to
          type: string
    RestPullRequest:
      example:
        author:
          approved: true
          role: AUTHOR
          user:
            emailAddress: jane@example.com
            avatarUrl: avatarUrl
            displayName: Jane Citizen
            name: jcitizen
            active: true
            links: "{}"
            id: 101
            type: NORMAL
            slug: jcitizen
          lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
          status: UNAPPROVED
        description: "It is a kludge, but put the tuple from the database in the cache."
        updatedDate: 14490759200
        htmlDescription: htmlDescription
        title: Talking Nerdy
        reviewers:
        - approved: true
          role: AUTHOR
          user:
            emailAddress: jane@example.com
            avatarUrl: avatarUrl
            displayName: Jane Citizen
            name: jcitizen
            active: true
            links: "{}"
            id: 101
            type: NORMAL
            slug: jcitizen
          lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
          status: UNAPPROVED
        - approved: true
          role: AUTHOR
          user:
            emailAddress: jane@example.com
            avatarUrl: avatarUrl
            displayName: Jane Citizen
            name: jcitizen
            active: true
            links: "{}"
            id: 101
            type: NORMAL
            slug: jcitizen
          lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
          status: UNAPPROVED
        version: 1
        toRef:
          latestCommit: babecafebabecafebabecafebabecafebabecafe
          id: refs/heads/feature-ABC-123
          displayId: feature-ABC-1233
          repository:
            hierarchyId: e3c939f9ef4a7fae272e
            defaultBranch: main
            origin:
              hierarchyId: e3c939f9ef4a7fae272e
              defaultBranch: main
              description: My repo description
              project:
                public: true
                avatarUrl: avatarUrl
                scope: PROJECT
                name: My Cool Project
                description: The description for my cool project
                links: "{}"
                avatar: avatar
                id: 2
                type: NORMAL
                key: PRJ
              relatedLinks: "{}"
              statusMessage: Available
              archived: true
              partition: 3
              public: true
              scope: REPOSITORY
              name: My repo
              forkable: true
              links: "{}"
              id: 9
              scmId: git
              state: AVAILABLE
              slug: my-repo
            description: My repo description
            project:
              public: true
              avatarUrl: avatarUrl
              scope: PROJECT
              name: My Cool Project
              description: The description for my cool project
              links: "{}"
              avatar: avatar
              id: 2
              type: NORMAL
              key: PRJ
            relatedLinks: "{}"
            statusMessage: Available
            archived: true
            partition: 4
            public: true
            scope: REPOSITORY
            name: My repo
            forkable: true
            links: "{}"
            id: 7
            scmId: git
            state: AVAILABLE
            slug: my-repo
          type: BRANCH
        descriptionAsHtml: descriptionAsHtml
        createdDate: 13590759200
        closedDate: 19990759200
        draft: true
        closed: true
        fromRef:
          latestCommit: babecafebabecafebabecafebabecafebabecafe
          id: refs/heads/feature-ABC-123
          displayId: feature-ABC-1233
          repository:
            hierarchyId: e3c939f9ef4a7fae272e
            defaultBranch: main
            origin:
              hierarchyId: e3c939f9ef4a7fae272e
              defaultBranch: main
              description: My repo description
              project:
                public: true
                avatarUrl: avatarUrl
                scope: PROJECT
                name: My Cool Project
                description: The description for my cool project
                links: "{}"
                avatar: avatar
                id: 2
                type: NORMAL
                key: PRJ
              relatedLinks: "{}"
              statusMessage: Available
              archived: true
              partition: 3
              public: true
              scope: REPOSITORY
              name: My repo
              forkable: true
              links: "{}"
              id: 9
              scmId: git
              state: AVAILABLE
              slug: my-repo
            description: My repo description
            project:
              public: true
              avatarUrl: avatarUrl
              scope: PROJECT
              name: My Cool Project
              description: The description for my cool project
              links: "{}"
              avatar: avatar
              id: 2
              type: NORMAL
              key: PRJ
            relatedLinks: "{}"
            statusMessage: Available
            archived: true
            partition: 4
            public: true
            scope: REPOSITORY
            name: My repo
            forkable: true
            links: "{}"
            id: 7
            scmId: git
            state: AVAILABLE
            slug: my-repo
          type: BRANCH
        links: "{}"
        id: 1
        state: DECLINED
        locked: true
        open: true
        participants:
        - approved: true
          role: AUTHOR
          user:
            emailAddress: jane@example.com
            avatarUrl: avatarUrl
            displayName: Jane Citizen
            name: jcitizen
            active: true
            links: "{}"
            id: 101
            type: NORMAL
            slug: jcitizen
          lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
          status: UNAPPROVED
        - approved: true
          role: AUTHOR
          user:
            emailAddress: jane@example.com
            avatarUrl: avatarUrl
            displayName: Jane Citizen
            name: jcitizen
            active: true
            links: "{}"
            id: 101
            type: NORMAL
            slug: jcitizen
          lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
          status: UNAPPROVED
      properties:
        author:
          $ref: "#/components/schemas/RestComment_anchor_pullRequest_author"
        closed:
          type: boolean
        closedDate:
          example: 19990759200
          format: int64
          type: integer
        createdDate:
          example: 13590759200
          format: int64
          type: integer
        description:
          example: "It is a kludge, but put the tuple from the database in the cache."
          type: string
        descriptionAsHtml:
          type: string
        draft:
          type: boolean
        fromRef:
          $ref: "#/components/schemas/RestComment_anchor_pullRequest_fromRef"
        htmlDescription:
          type: string
          writeOnly: true
        id:
          example: 1
          format: int64
          type: integer
        links:
          properties: {}
          type: object
          writeOnly: true
        locked:
          type: boolean
        open:
          type: boolean
        participants:
          items:
            $ref: "#/components/schemas/RestPullRequestParticipant"
          type: array
        reviewers:
          items:
            $ref: "#/components/schemas/RestPullRequestParticipant"
          type: array
        state:
          enum:
          - DECLINED
          - MERGED
          - OPEN
          type: string
        title:
          example: Talking Nerdy
          type: string
        toRef:
          $ref: "#/components/schemas/RestComment_anchor_pullRequest_fromRef"
        updatedDate:
          example: 14490759200
          format: int64
          type: integer
        version:
          format: int32
          type: integer
    RestPullRequestParticipant:
      example:
        approved: true
        role: AUTHOR
        user:
          emailAddress: jane@example.com
          avatarUrl: avatarUrl
          displayName: Jane Citizen
          name: jcitizen
          active: true
          links: "{}"
          id: 101
          type: NORMAL
          slug: jcitizen
        lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
        status: UNAPPROVED
      properties:
        approved:
          type: boolean
        lastReviewedCommit:
          example: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
          type: string
        role:
          enum:
          - AUTHOR
          - REVIEWER
          - PARTICIPANT
          type: string
        status:
          enum:
          - UNAPPROVED
          - NEEDS_WORK
          - APPROVED
          type: string
        user:
          $ref: "#/components/schemas/RestComment_anchor_pullRequest_author_user"
    RestPullRequestRef:
      properties:
        displayId:
          example: feature-ABC-1233
          type: string
        id:
          example: refs/heads/feature-ABC-123
          type: string
        latestCommit:
          example: babecafebabecafebabecafebabecafebabecafe
          type: string
        repository:
          $ref: "#/components/schemas/RestChangeset_repository"
        type:
          enum:
          - BRANCH
          - TAG
          type: string
    RestUserReaction:
      example:
        comment:
          severity: NORMAL
          parent:
            severity: NORMAL
            resolver:
              emailAddress: jane@example.com
              avatarUrl: avatarUrl
              displayName: Jane Citizen
              name: jcitizen
              active: true
              links: "{}"
              id: 101
              type: NORMAL
              slug: jcitizen
            comments:
            - null
            - null
            threadResolved: true
            author:
              emailAddress: jane@example.com
              avatarUrl: avatarUrl
              displayName: Jane Citizen
              name: jcitizen
              active: true
              links: "{}"
              id: 101
              type: NORMAL
              slug: jcitizen
            pending: true
            anchored: true
            updatedDate: 1449075920
            version: 1
            threadResolvedDate: 1569075920
            threadResolver:
              emailAddress: jane@example.com
              avatarUrl: avatarUrl
              displayName: Jane Citizen
              name: jcitizen
              active: true
              links: "{}"
              id: 101
              type: NORMAL
              slug: jcitizen
            createdDate: 1359075920
            anchor:
              multilineSpan:
                srcSpanEnd: 2
                dstSpanStart: 2
                dstSpanEnd: 3
                srcSpanStart: 1
              path:
                parent: path/to
                components:
                - path
                - to
                - file.txt
                extension: txt
                name: file.txt
              fromHash: 62a0505e8204115b8b9c8a95bfa264a8c0896a93
              line: 98
              multilineMarker:
                startLine: 5
                startLineType: ADDED
              lineType: ADDED
              srcPath:
                parent: path/to
                components:
                - path
                - to
                - file.txt
                extension: txt
                name: file.txt
              diffType: COMMIT
              toHash: 3cdd5d19178a54d2e51b5098d43b57571241d0ab
              fileType: FROM
              pullRequest:
                author:
                  approved: true
                  role: AUTHOR
                  user:
                    emailAddress: jane@example.com
                    avatarUrl: avatarUrl
                    displayName: Jane Citizen
                    name: jcitizen
                    active: true
                    links: "{}"
                    id: 101
                    type: NORMAL
                    slug: jcitizen
                  lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
                  status: UNAPPROVED
                description: "It is a kludge, but put the tuple from the database\
                  \ in the cache."
                updatedDate: 14490759200
                htmlDescription: htmlDescription
                title: Talking Nerdy
                reviewers:
                - approved: true
                  role: AUTHOR
                  user:
                    emailAddress: jane@example.com
                    avatarUrl: avatarUrl
                    displayName: Jane Citizen
                    name: jcitizen
                    active: true
                    links: "{}"
                    id: 101
                    type: NORMAL
                    slug: jcitizen
                  lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
                  status: UNAPPROVED
                - approved: true
                  role: AUTHOR
                  user:
                    emailAddress: jane@example.com
                    avatarUrl: avatarUrl
                    displayName: Jane Citizen
                    name: jcitizen
                    active: true
                    links: "{}"
                    id: 101
                    type: NORMAL
                    slug: jcitizen
                  lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
                  status: UNAPPROVED
                version: 0
                toRef:
                  latestCommit: babecafebabecafebabecafebabecafebabecafe
                  id: refs/heads/feature-ABC-123
                  displayId: feature-ABC-1233
                  repository:
                    hierarchyId: e3c939f9ef4a7fae272e
                    defaultBranch: main
                    origin:
                      hierarchyId: e3c939f9ef4a7fae272e
                      defaultBranch: main
                      description: My repo description
                      project:
                        public: true
                        avatarUrl: avatarUrl
                        scope: PROJECT
                        name: My Cool Project
                        description: The description for my cool project
                        links: "{}"
                        avatar: avatar
                        id: 2
                        type: NORMAL
                        key: PRJ
                      relatedLinks: "{}"
                      statusMessage: Available
                      archived: true
                      partition: 3
                      public: true
                      scope: REPOSITORY
                      name: My repo
                      forkable: true
                      links: "{}"
                      id: 9
                      scmId: git
                      state: AVAILABLE
                      slug: my-repo
                    description: My repo description
                    project:
                      public: true
                      avatarUrl: avatarUrl
                      scope: PROJECT
                      name: My Cool Project
                      description: The description for my cool project
                      links: "{}"
                      avatar: avatar
                      id: 2
                      type: NORMAL
                      key: PRJ
                    relatedLinks: "{}"
                    statusMessage: Available
                    archived: true
                    partition: 4
                    public: true
                    scope: REPOSITORY
                    name: My repo
                    forkable: true
                    links: "{}"
                    id: 7
                    scmId: git
                    state: AVAILABLE
                    slug: my-repo
                  type: BRANCH
                descriptionAsHtml: descriptionAsHtml
                createdDate: 13590759200
                closedDate: 19990759200
                draft: true
                closed: true
                fromRef:
                  latestCommit: babecafebabecafebabecafebabecafebabecafe
                  id: refs/heads/feature-ABC-123
                  displayId: feature-ABC-1233
                  repository:
                    hierarchyId: e3c939f9ef4a7fae272e
                    defaultBranch: main
                    origin:
                      hierarchyId: e3c939f9ef4a7fae272e
                      defaultBranch: main
                      description: My repo description
                      project:
                        public: true
                        avatarUrl: avatarUrl
                        scope: PROJECT
                        name: My Cool Project
                        description: The description for my cool project
                        links: "{}"
                        avatar: avatar
                        id: 2
                        type: NORMAL
                        key: PRJ
                      relatedLinks: "{}"
                      statusMessage: Available
                      archived: true
                      partition: 3
                      public: true
                      scope: REPOSITORY
                      name: My repo
                      forkable: true
                      links: "{}"
                      id: 9
                      scmId: git
                      state: AVAILABLE
                      slug: my-repo
                    description: My repo description
                    project:
                      public: true
                      avatarUrl: avatarUrl
                      scope: PROJECT
                      name: My Cool Project
                      description: The description for my cool project
                      links: "{}"
                      avatar: avatar
                      id: 2
                      type: NORMAL
                      key: PRJ
                    relatedLinks: "{}"
                    statusMessage: Available
                    archived: true
                    partition: 4
                    public: true
                    scope: REPOSITORY
                    name: My repo
                    forkable: true
                    links: "{}"
                    id: 7
                    scmId: git
                    state: AVAILABLE
                    slug: my-repo
                  type: BRANCH
                links: "{}"
                id: 1
                state: DECLINED
                locked: true
                open: true
                participants:
                - approved: true
                  role: AUTHOR
                  user:
                    emailAddress: jane@example.com
                    avatarUrl: avatarUrl
                    displayName: Jane Citizen
                    name: jcitizen
                    active: true
                    links: "{}"
                    id: 101
                    type: NORMAL
                    slug: jcitizen
                  lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
                  status: UNAPPROVED
                - approved: true
                  role: AUTHOR
                  user:
                    emailAddress: jane@example.com
                    avatarUrl: avatarUrl
                    displayName: Jane Citizen
                    name: jcitizen
                    active: true
                    links: "{}"
                    id: 101
                    type: NORMAL
                    slug: jcitizen
                  lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
                  status: UNAPPROVED
            html: html
            id: 1
            state: OPEN
            text: An insightful comment.
            reply: true
            properties: "{}"
            resolvedDate: 1239075920
          resolver:
            emailAddress: jane@example.com
            avatarUrl: avatarUrl
            displayName: Jane Citizen
            name: jcitizen
            active: true
            links: "{}"
            id: 101
            type: NORMAL
            slug: jcitizen
          comments:
          - severity: NORMAL
            parent:
              severity: NORMAL
              resolver:
                emailAddress: jane@example.com
                avatarUrl: avatarUrl
                displayName: Jane Citizen
                name: jcitizen
                active: true
                links: "{}"
                id: 101
                type: NORMAL
                slug: jcitizen
              comments:
              - null
              - null
              threadResolved: true
              author:
                emailAddress: jane@example.com
                avatarUrl: avatarUrl
                displayName: Jane Citizen
                name: jcitizen
                active: true
                links: "{}"
                id: 101
                type: NORMAL
                slug: jcitizen
              pending: true
              anchored: true
              updatedDate: 1449075920
              version: 1
              threadResolvedDate: 1569075920
              threadResolver:
                emailAddress: jane@example.com
                avatarUrl: avatarUrl
                displayName: Jane Citizen
                name: jcitizen
                active: true
                links: "{}"
                id: 101
                type: NORMAL
                slug: jcitizen
              createdDate: 1359075920
              anchor:
                multilineSpan:
                  srcSpanEnd: 2
                  dstSpanStart: 2
                  dstSpanEnd: 3
                  srcSpanStart: 1
                path:
                  parent: path/to
                  components:
                  - path
                  - to
                  - file.txt
                  extension: txt
                  name: file.txt
                fromHash: 62a0505e8204115b8b9c8a95bfa264a8c0896a93
                line: 98
                multilineMarker:
                  startLine: 5
                  startLineType: ADDED
                lineType: ADDED
                srcPath:
                  parent: path/to
                  components:
                  - path
                  - to
                  - file.txt
                  extension: txt
                  name: file.txt
                diffType: COMMIT
                toHash: 3cdd5d19178a54d2e51b5098d43b57571241d0ab
                fileType: FROM
                pullRequest:
                  author:
                    approved: true
                    role: AUTHOR
                    user:
                      emailAddress: jane@example.com
                      avatarUrl: avatarUrl
                      displayName: Jane Citizen
                      name: jcitizen
                      active: true
                      links: "{}"
                      id: 101
                      type: NORMAL
                      slug: jcitizen
                    lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
                    status: UNAPPROVED
                  description: "It is a kludge, but put the tuple from the database\
                    \ in the cache."
                  updatedDate: 14490759200
                  htmlDescription: htmlDescription
                  title: Talking Nerdy
                  reviewers:
                  - approved: true
                    role: AUTHOR
                    user:
                      emailAddress: jane@example.com
                      avatarUrl: avatarUrl
                      displayName: Jane Citizen
                      name: jcitizen
                      active: true
                      links: "{}"
                      id: 101
                      type: NORMAL
                      slug: jcitizen
                    lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
                    status: UNAPPROVED
                  - approved: true
                    role: AUTHOR
                    user:
                      emailAddress: jane@example.com
                      avatarUrl: avatarUrl
                      displayName: Jane Citizen
                      name: jcitizen
                      active: true
                      links: "{}"
                      id: 101
                      type: NORMAL
                      slug: jcitizen
                    lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
                    status: UNAPPROVED
                  version: 0
                  toRef:
                    latestCommit: babecafebabecafebabecafebabecafebabecafe
                    id: refs/heads/feature-ABC-123
                    displayId: feature-ABC-1233
                    repository:
                      hierarchyId: e3c939f9ef4a7fae272e
                      defaultBranch: main
                      origin:
                        hierarchyId: e3c939f9ef4a7fae272e
                        defaultBranch: main
                        description: My repo description
                        project:
                          public: true
                          avatarUrl: avatarUrl
                          scope: PROJECT
                          name: My Cool Project
                          description: The description for my cool project
                          links: "{}"
                          avatar: avatar
                          id: 2
                          type: NORMAL
                          key: PRJ
                        relatedLinks: "{}"
                        statusMessage: Available
                        archived: true
                        partition: 3
                        public: true
                        scope: REPOSITORY
                        name: My repo
                        forkable: true
                        links: "{}"
                        id: 9
                        scmId: git
                        state: AVAILABLE
                        slug: my-repo
                      description: My repo description
                      project:
                        public: true
                        avatarUrl: avatarUrl
                        scope: PROJECT
                        name: My Cool Project
                        description: The description for my cool project
                        links: "{}"
                        avatar: avatar
                        id: 2
                        type: NORMAL
                        key: PRJ
                      relatedLinks: "{}"
                      statusMessage: Available
                      archived: true
                      partition: 4
                      public: true
                      scope: REPOSITORY
                      name: My repo
                      forkable: true
                      links: "{}"
                      id: 7
                      scmId: git
                      state: AVAILABLE
                      slug: my-repo
                    type: BRANCH
                  descriptionAsHtml: descriptionAsHtml
                  createdDate: 13590759200
                  closedDate: 19990759200
                  draft: true
                  closed: true
                  fromRef:
                    latestCommit: babecafebabecafebabecafebabecafebabecafe
                    id: refs/heads/feature-ABC-123
                    displayId: feature-ABC-1233
                    repository:
                      hierarchyId: e3c939f9ef4a7fae272e
                      defaultBranch: main
                      origin:
                        hierarchyId: e3c939f9ef4a7fae272e
                        defaultBranch: main
                        description: My repo description
                        project:
                          public: true
                          avatarUrl: avatarUrl
                          scope: PROJECT
                          name: My Cool Project
                          description: The description for my cool project
                          links: "{}"
                          avatar: avatar
                          id: 2
                          type: NORMAL
                          key: PRJ
                        relatedLinks: "{}"
                        statusMessage: Available
                        archived: true
                        partition: 3
                        public: true
                        scope: REPOSITORY
                        name: My repo
                        forkable: true
                        links: "{}"
                        id: 9
                        scmId: git
                        state: AVAILABLE
                        slug: my-repo
                      description: My repo description
                      project:
                        public: true
                        avatarUrl: avatarUrl
                        scope: PROJECT
                        name: My Cool Project
                        description: The description for my cool project
                        links: "{}"
                        avatar: avatar
                        id: 2
                        type: NORMAL
                        key: PRJ
                      relatedLinks: "{}"
                      statusMessage: Available
                      archived: true
                      partition: 4
                      public: true
                      scope: REPOSITORY
                      name: My repo
                      forkable: true
                      links: "{}"
                      id: 7
                      scmId: git
                      state: AVAILABLE
                      slug: my-repo
                    type: BRANCH
                  links: "{}"
                  id: 1
                  state: DECLINED
                  locked: true
                  open: true
                  participants:
                  - approved: true
                    role: AUTHOR
                    user:
                      emailAddress: jane@example.com
                      avatarUrl: avatarUrl
                      displayName: Jane Citizen
                      name: jcitizen
                      active: true
                      links: "{}"
                      id: 101
                      type: NORMAL
                      slug: jcitizen
                    lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
                    status: UNAPPROVED
                  - approved: true
                    role: AUTHOR
                    user:
                      emailAddress: jane@example.com
                      avatarUrl: avatarUrl
                      displayName: Jane Citizen
                      name: jcitizen
                      active: true
                      links: "{}"
                      id: 101
                      type: NORMAL
                      slug: jcitizen
                    lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
                    status: UNAPPROVED
              html: html
              id: 1
              state: OPEN
              text: An insightful comment.
              reply: true
              properties: "{}"
              resolvedDate: 1239075920
            resolver:
              emailAddress: jane@example.com
              avatarUrl: avatarUrl
              displayName: Jane Citizen
              name: jcitizen
              active: true
              links: "{}"
              id: 101
              type: NORMAL
              slug: jcitizen
            comments:
            - null
            - null
            threadResolved: true
            author:
              emailAddress: jane@example.com
              avatarUrl: avatarUrl
              displayName: Jane Citizen
              name: jcitizen
              active: true
              links: "{}"
              id: 101
              type: NORMAL
              slug: jcitizen
            pending: true
            anchored: true
            updatedDate: 1449075920
            version: 1
            threadResolvedDate: 1569075920
            threadResolver:
              emailAddress: jane@example.com
              avatarUrl: avatarUrl
              displayName: Jane Citizen
              name: jcitizen
              active: true
              links: "{}"
              id: 101
              type: NORMAL
              slug: jcitizen
            createdDate: 1359075920
            anchor:
              multilineSpan:
                srcSpanEnd: 2
                dstSpanStart: 2
                dstSpanEnd: 3
                srcSpanStart: 1
              path:
                parent: path/to
                components:
                - path
                - to
                - file.txt
                extension: txt
                name: file.txt
              fromHash: 62a0505e8204115b8b9c8a95bfa264a8c0896a93
              line: 98
              multilineMarker:
                startLine: 5
                startLineType: ADDED
              lineType: ADDED
              srcPath:
                parent: path/to
                components:
                - path
                - to
                - file.txt
                extension: txt
                name: file.txt
              diffType: COMMIT
              toHash: 3cdd5d19178a54d2e51b5098d43b57571241d0ab
              fileType: FROM
              pullRequest:
                author:
                  approved: true
                  role: AUTHOR
                  user:
                    emailAddress: jane@example.com
                    avatarUrl: avatarUrl
                    displayName: Jane Citizen
                    name: jcitizen
                    active: true
                    links: "{}"
                    id: 101
                    type: NORMAL
                    slug: jcitizen
                  lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
                  status: UNAPPROVED
                description: "It is a kludge, but put the tuple from the database\
                  \ in the cache."
                updatedDate: 14490759200
                htmlDescription: htmlDescription
                title: Talking Nerdy
                reviewers:
                - approved: true
                  role: AUTHOR
                  user:
                    emailAddress: jane@example.com
                    avatarUrl: avatarUrl
                    displayName: Jane Citizen
                    name: jcitizen
                    active: true
                    links: "{}"
                    id: 101
                    type: NORMAL
                    slug: jcitizen
                  lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
                  status: UNAPPROVED
                - approved: true
                  role: AUTHOR
                  user:
                    emailAddress: jane@example.com
                    avatarUrl: avatarUrl
                    displayName: Jane Citizen
                    name: jcitizen
                    active: true
                    links: "{}"
                    id: 101
                    type: NORMAL
                    slug: jcitizen
                  lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
                  status: UNAPPROVED
                version: 0
                toRef:
                  latestCommit: babecafebabecafebabecafebabecafebabecafe
                  id: refs/heads/feature-ABC-123
                  displayId: feature-ABC-1233
                  repository:
                    hierarchyId: e3c939f9ef4a7fae272e
                    defaultBranch: main
                    origin:
                      hierarchyId: e3c939f9ef4a7fae272e
                      defaultBranch: main
                      description: My repo description
                      project:
                        public: true
                        avatarUrl: avatarUrl
                        scope: PROJECT
                        name: My Cool Project
                        description: The description for my cool project
                        links: "{}"
                        avatar: avatar
                        id: 2
                        type: NORMAL
                        key: PRJ
                      relatedLinks: "{}"
                      statusMessage: Available
                      archived: true
                      partition: 3
                      public: true
                      scope: REPOSITORY
                      name: My repo
                      forkable: true
                      links: "{}"
                      id: 9
                      scmId: git
                      state: AVAILABLE
                      slug: my-repo
                    description: My repo description
                    project:
                      public: true
                      avatarUrl: avatarUrl
                      scope: PROJECT
                      name: My Cool Project
                      description: The description for my cool project
                      links: "{}"
                      avatar: avatar
                      id: 2
                      type: NORMAL
                      key: PRJ
                    relatedLinks: "{}"
                    statusMessage: Available
                    archived: true
                    partition: 4
                    public: true
                    scope: REPOSITORY
                    name: My repo
                    forkable: true
                    links: "{}"
                    id: 7
                    scmId: git
                    state: AVAILABLE
                    slug: my-repo
                  type: BRANCH
                descriptionAsHtml: descriptionAsHtml
                createdDate: 13590759200
                closedDate: 19990759200
                draft: true
                closed: true
                fromRef:
                  latestCommit: babecafebabecafebabecafebabecafebabecafe
                  id: refs/heads/feature-ABC-123
                  displayId: feature-ABC-1233
                  repository:
                    hierarchyId: e3c939f9ef4a7fae272e
                    defaultBranch: main
                    origin:
                      hierarchyId: e3c939f9ef4a7fae272e
                      defaultBranch: main
                      description: My repo description
                      project:
                        public: true
                        avatarUrl: avatarUrl
                        scope: PROJECT
                        name: My Cool Project
                        description: The description for my cool project
                        links: "{}"
                        avatar: avatar
                        id: 2
                        type: NORMAL
                        key: PRJ
                      relatedLinks: "{}"
                      statusMessage: Available
                      archived: true
                      partition: 3
                      public: true
                      scope: REPOSITORY
                      name: My repo
                      forkable: true
                      links: "{}"
                      id: 9
                      scmId: git
                      state: AVAILABLE
                      slug: my-repo
                    description: My repo description
                    project:
                      public: true
                      avatarUrl: avatarUrl
                      scope: PROJECT
                      name: My Cool Project
                      description: The description for my cool project
                      links: "{}"
                      avatar: avatar
                      id: 2
                      type: NORMAL
                      key: PRJ
                    relatedLinks: "{}"
                    statusMessage: Available
                    archived: true
                    partition: 4
                    public: true
                    scope: REPOSITORY
                    name: My repo
                    forkable: true
                    links: "{}"
                    id: 7
                    scmId: git
                    state: AVAILABLE
                    slug: my-repo
                  type: BRANCH
                links: "{}"
                id: 1
                state: DECLINED
                locked: true
                open: true
                participants:
                - approved: true
                  role: AUTHOR
                  user:
                    emailAddress: jane@example.com
                    avatarUrl: avatarUrl
                    displayName: Jane Citizen
                    name: jcitizen
                    active: true
                    links: "{}"
                    id: 101
                    type: NORMAL
                    slug: jcitizen
                  lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
                  status: UNAPPROVED
                - approved: true
                  role: AUTHOR
                  user:
                    emailAddress: jane@example.com
                    avatarUrl: avatarUrl
                    displayName: Jane Citizen
                    name: jcitizen
                    active: true
                    links: "{}"
                    id: 101
                    type: NORMAL
                    slug: jcitizen
                  lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
                  status: UNAPPROVED
            html: html
            id: 1
            state: OPEN
            text: An insightful comment.
            reply: true
            properties: "{}"
            resolvedDate: 1239075920
          - severity: NORMAL
            parent:
              severity: NORMAL
              resolver:
                emailAddress: jane@example.com
                avatarUrl: avatarUrl
                displayName: Jane Citizen
                name: jcitizen
                active: true
                links: "{}"
                id: 101
                type: NORMAL
                slug: jcitizen
              comments:
              - null
              - null
              threadResolved: true
              author:
                emailAddress: jane@example.com
                avatarUrl: avatarUrl
                displayName: Jane Citizen
                name: jcitizen
                active: true
                links: "{}"
                id: 101
                type: NORMAL
                slug: jcitizen
              pending: true
              anchored: true
              updatedDate: 1449075920
              version: 1
              threadResolvedDate: 1569075920
              threadResolver:
                emailAddress: jane@example.com
                avatarUrl: avatarUrl
                displayName: Jane Citizen
                name: jcitizen
                active: true
                links: "{}"
                id: 101
                type: NORMAL
                slug: jcitizen
              createdDate: 1359075920
              anchor:
                multilineSpan:
                  srcSpanEnd: 2
                  dstSpanStart: 2
                  dstSpanEnd: 3
                  srcSpanStart: 1
                path:
                  parent: path/to
                  components:
                  - path
                  - to
                  - file.txt
                  extension: txt
                  name: file.txt
                fromHash: 62a0505e8204115b8b9c8a95bfa264a8c0896a93
                line: 98
                multilineMarker:
                  startLine: 5
                  startLineType: ADDED
                lineType: ADDED
                srcPath:
                  parent: path/to
                  components:
                  - path
                  - to
                  - file.txt
                  extension: txt
                  name: file.txt
                diffType: COMMIT
                toHash: 3cdd5d19178a54d2e51b5098d43b57571241d0ab
                fileType: FROM
                pullRequest:
                  author:
                    approved: true
                    role: AUTHOR
                    user:
                      emailAddress: jane@example.com
                      avatarUrl: avatarUrl
                      displayName: Jane Citizen
                      name: jcitizen
                      active: true
                      links: "{}"
                      id: 101
                      type: NORMAL
                      slug: jcitizen
                    lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
                    status: UNAPPROVED
                  description: "It is a kludge, but put the tuple from the database\
                    \ in the cache."
                  updatedDate: 14490759200
                  htmlDescription: htmlDescription
                  title: Talking Nerdy
                  reviewers:
                  - approved: true
                    role: AUTHOR
                    user:
                      emailAddress: jane@example.com
                      avatarUrl: avatarUrl
                      displayName: Jane Citizen
                      name: jcitizen
                      active: true
                      links: "{}"
                      id: 101
                      type: NORMAL
                      slug: jcitizen
                    lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
                    status: UNAPPROVED
                  - approved: true
                    role: AUTHOR
                    user:
                      emailAddress: jane@example.com
                      avatarUrl: avatarUrl
                      displayName: Jane Citizen
                      name: jcitizen
                      active: true
                      links: "{}"
                      id: 101
                      type: NORMAL
                      slug: jcitizen
                    lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
                    status: UNAPPROVED
                  version: 0
                  toRef:
                    latestCommit: babecafebabecafebabecafebabecafebabecafe
                    id: refs/heads/feature-ABC-123
                    displayId: feature-ABC-1233
                    repository:
                      hierarchyId: e3c939f9ef4a7fae272e
                      defaultBranch: main
                      origin:
                        hierarchyId: e3c939f9ef4a7fae272e
                        defaultBranch: main
                        description: My repo description
                        project:
                          public: true
                          avatarUrl: avatarUrl
                          scope: PROJECT
                          name: My Cool Project
                          description: The description for my cool project
                          links: "{}"
                          avatar: avatar
                          id: 2
                          type: NORMAL
                          key: PRJ
                        relatedLinks: "{}"
                        statusMessage: Available
                        archived: true
                        partition: 3
                        public: true
                        scope: REPOSITORY
                        name: My repo
                        forkable: true
                        links: "{}"
                        id: 9
                        scmId: git
                        state: AVAILABLE
                        slug: my-repo
                      description: My repo description
                      project:
                        public: true
                        avatarUrl: avatarUrl
                        scope: PROJECT
                        name: My Cool Project
                        description: The description for my cool project
                        links: "{}"
                        avatar: avatar
                        id: 2
                        type: NORMAL
                        key: PRJ
                      relatedLinks: "{}"
                      statusMessage: Available
                      archived: true
                      partition: 4
                      public: true
                      scope: REPOSITORY
                      name: My repo
                      forkable: true
                      links: "{}"
                      id: 7
                      scmId: git
                      state: AVAILABLE
                      slug: my-repo
                    type: BRANCH
                  descriptionAsHtml: descriptionAsHtml
                  createdDate: 13590759200
                  closedDate: 19990759200
                  draft: true
                  closed: true
                  fromRef:
                    latestCommit: babecafebabecafebabecafebabecafebabecafe
                    id: refs/heads/feature-ABC-123
                    displayId: feature-ABC-1233
                    repository:
                      hierarchyId: e3c939f9ef4a7fae272e
                      defaultBranch: main
                      origin:
                        hierarchyId: e3c939f9ef4a7fae272e
                        defaultBranch: main
                        description: My repo description
                        project:
                          public: true
                          avatarUrl: avatarUrl
                          scope: PROJECT
                          name: My Cool Project
                          description: The description for my cool project
                          links: "{}"
                          avatar: avatar
                          id: 2
                          type: NORMAL
                          key: PRJ
                        relatedLinks: "{}"
                        statusMessage: Available
                        archived: true
                        partition: 3
                        public: true
                        scope: REPOSITORY
                        name: My repo
                        forkable: true
                        links: "{}"
                        id: 9
                        scmId: git
                        state: AVAILABLE
                        slug: my-repo
                      description: My repo description
                      project:
                        public: true
                        avatarUrl: avatarUrl
                        scope: PROJECT
                        name: My Cool Project
                        description: The description for my cool project
                        links: "{}"
                        avatar: avatar
                        id: 2
                        type: NORMAL
                        key: PRJ
                      relatedLinks: "{}"
                      statusMessage: Available
                      archived: true
                      partition: 4
                      public: true
                      scope: REPOSITORY
                      name: My repo
                      forkable: true
                      links: "{}"
                      id: 7
                      scmId: git
                      state: AVAILABLE
                      slug: my-repo
                    type: BRANCH
                  links: "{}"
                  id: 1
                  state: DECLINED
                  locked: true
                  open: true
                  participants:
                  - approved: true
                    role: AUTHOR
                    user:
                      emailAddress: jane@example.com
                      avatarUrl: avatarUrl
                      displayName: Jane Citizen
                      name: jcitizen
                      active: true
                      links: "{}"
                      id: 101
                      type: NORMAL
                      slug: jcitizen
                    lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
                    status: UNAPPROVED
                  - approved: true
                    role: AUTHOR
                    user:
                      emailAddress: jane@example.com
                      avatarUrl: avatarUrl
                      displayName: Jane Citizen
                      name: jcitizen
                      active: true
                      links: "{}"
                      id: 101
                      type: NORMAL
                      slug: jcitizen
                    lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
                    status: UNAPPROVED
              html: html
              id: 1
              state: OPEN
              text: An insightful comment.
              reply: true
              properties: "{}"
              resolvedDate: 1239075920
            resolver:
              emailAddress: jane@example.com
              avatarUrl: avatarUrl
              displayName: Jane Citizen
              name: jcitizen
              active: true
              links: "{}"
              id: 101
              type: NORMAL
              slug: jcitizen
            comments:
            - null
            - null
            threadResolved: true
            author:
              emailAddress: jane@example.com
              avatarUrl: avatarUrl
              displayName: Jane Citizen
              name: jcitizen
              active: true
              links: "{}"
              id: 101
              type: NORMAL
              slug: jcitizen
            pending: true
            anchored: true
            updatedDate: 1449075920
            version: 1
            threadResolvedDate: 1569075920
            threadResolver:
              emailAddress: jane@example.com
              avatarUrl: avatarUrl
              displayName: Jane Citizen
              name: jcitizen
              active: true
              links: "{}"
              id: 101
              type: NORMAL
              slug: jcitizen
            createdDate: 1359075920
            anchor:
              multilineSpan:
                srcSpanEnd: 2
                dstSpanStart: 2
                dstSpanEnd: 3
                srcSpanStart: 1
              path:
                parent: path/to
                components:
                - path
                - to
                - file.txt
                extension: txt
                name: file.txt
              fromHash: 62a0505e8204115b8b9c8a95bfa264a8c0896a93
              line: 98
              multilineMarker:
                startLine: 5
                startLineType: ADDED
              lineType: ADDED
              srcPath:
                parent: path/to
                components:
                - path
                - to
                - file.txt
                extension: txt
                name: file.txt
              diffType: COMMIT
              toHash: 3cdd5d19178a54d2e51b5098d43b57571241d0ab
              fileType: FROM
              pullRequest:
                author:
                  approved: true
                  role: AUTHOR
                  user:
                    emailAddress: jane@example.com
                    avatarUrl: avatarUrl
                    displayName: Jane Citizen
                    name: jcitizen
                    active: true
                    links: "{}"
                    id: 101
                    type: NORMAL
                    slug: jcitizen
                  lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
                  status: UNAPPROVED
                description: "It is a kludge, but put the tuple from the database\
                  \ in the cache."
                updatedDate: 14490759200
                htmlDescription: htmlDescription
                title: Talking Nerdy
                reviewers:
                - approved: true
                  role: AUTHOR
                  user:
                    emailAddress: jane@example.com
                    avatarUrl: avatarUrl
                    displayName: Jane Citizen
                    name: jcitizen
                    active: true
                    links: "{}"
                    id: 101
                    type: NORMAL
                    slug: jcitizen
                  lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
                  status: UNAPPROVED
                - approved: true
                  role: AUTHOR
                  user:
                    emailAddress: jane@example.com
                    avatarUrl: avatarUrl
                    displayName: Jane Citizen
                    name: jcitizen
                    active: true
                    links: "{}"
                    id: 101
                    type: NORMAL
                    slug: jcitizen
                  lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
                  status: UNAPPROVED
                version: 0
                toRef:
                  latestCommit: babecafebabecafebabecafebabecafebabecafe
                  id: refs/heads/feature-ABC-123
                  displayId: feature-ABC-1233
                  repository:
                    hierarchyId: e3c939f9ef4a7fae272e
                    defaultBranch: main
                    origin:
                      hierarchyId: e3c939f9ef4a7fae272e
                      defaultBranch: main
                      description: My repo description
                      project:
                        public: true
                        avatarUrl: avatarUrl
                        scope: PROJECT
                        name: My Cool Project
                        description: The description for my cool project
                        links: "{}"
                        avatar: avatar
                        id: 2
                        type: NORMAL
                        key: PRJ
                      relatedLinks: "{}"
                      statusMessage: Available
                      archived: true
                      partition: 3
                      public: true
                      scope: REPOSITORY
                      name: My repo
                      forkable: true
                      links: "{}"
                      id: 9
                      scmId: git
                      state: AVAILABLE
                      slug: my-repo
                    description: My repo description
                    project:
                      public: true
                      avatarUrl: avatarUrl
                      scope: PROJECT
                      name: My Cool Project
                      description: The description for my cool project
                      links: "{}"
                      avatar: avatar
                      id: 2
                      type: NORMAL
                      key: PRJ
                    relatedLinks: "{}"
                    statusMessage: Available
                    archived: true
                    partition: 4
                    public: true
                    scope: REPOSITORY
                    name: My repo
                    forkable: true
                    links: "{}"
                    id: 7
                    scmId: git
                    state: AVAILABLE
                    slug: my-repo
                  type: BRANCH
                descriptionAsHtml: descriptionAsHtml
                createdDate: 13590759200
                closedDate: 19990759200
                draft: true
                closed: true
                fromRef:
                  latestCommit: babecafebabecafebabecafebabecafebabecafe
                  id: refs/heads/feature-ABC-123
                  displayId: feature-ABC-1233
                  repository:
                    hierarchyId: e3c939f9ef4a7fae272e
                    defaultBranch: main
                    origin:
                      hierarchyId: e3c939f9ef4a7fae272e
                      defaultBranch: main
                      description: My repo description
                      project:
                        public: true
                        avatarUrl: avatarUrl
                        scope: PROJECT
                        name: My Cool Project
                        description: The description for my cool project
                        links: "{}"
                        avatar: avatar
                        id: 2
                        type: NORMAL
                        key: PRJ
                      relatedLinks: "{}"
                      statusMessage: Available
                      archived: true
                      partition: 3
                      public: true
                      scope: REPOSITORY
                      name: My repo
                      forkable: true
                      links: "{}"
                      id: 9
                      scmId: git
                      state: AVAILABLE
                      slug: my-repo
                    description: My repo description
                    project:
                      public: true
                      avatarUrl: avatarUrl
                      scope: PROJECT
                      name: My Cool Project
                      description: The description for my cool project
                      links: "{}"
                      avatar: avatar
                      id: 2
                      type: NORMAL
                      key: PRJ
                    relatedLinks: "{}"
                    statusMessage: Available
                    archived: true
                    partition: 4
                    public: true
                    scope: REPOSITORY
                    name: My repo
                    forkable: true
                    links: "{}"
                    id: 7
                    scmId: git
                    state: AVAILABLE
                    slug: my-repo
                  type: BRANCH
                links: "{}"
                id: 1
                state: DECLINED
                locked: true
                open: true
                participants:
                - approved: true
                  role: AUTHOR
                  user:
                    emailAddress: jane@example.com
                    avatarUrl: avatarUrl
                    displayName: Jane Citizen
                    name: jcitizen
                    active: true
                    links: "{}"
                    id: 101
                    type: NORMAL
                    slug: jcitizen
                  lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
                  status: UNAPPROVED
                - approved: true
                  role: AUTHOR
                  user:
                    emailAddress: jane@example.com
                    avatarUrl: avatarUrl
                    displayName: Jane Citizen
                    name: jcitizen
                    active: true
                    links: "{}"
                    id: 101
                    type: NORMAL
                    slug: jcitizen
                  lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
                  status: UNAPPROVED
            html: html
            id: 1
            state: OPEN
            text: An insightful comment.
            reply: true
            properties: "{}"
            resolvedDate: 1239075920
          threadResolved: true
          author:
            emailAddress: jane@example.com
            avatarUrl: avatarUrl
            displayName: Jane Citizen
            name: jcitizen
            active: true
            links: "{}"
            id: 101
            type: NORMAL
            slug: jcitizen
          pending: true
          anchored: true
          updatedDate: 1449075920
          version: 1
          threadResolvedDate: 1569075920
          threadResolver:
            emailAddress: jane@example.com
            avatarUrl: avatarUrl
            displayName: Jane Citizen
            name: jcitizen
            active: true
            links: "{}"
            id: 101
            type: NORMAL
            slug: jcitizen
          createdDate: 1359075920
          anchor:
            multilineSpan:
              srcSpanEnd: 2
              dstSpanStart: 2
              dstSpanEnd: 3
              srcSpanStart: 1
            path:
              parent: path/to
              components:
              - path
              - to
              - file.txt
              extension: txt
              name: file.txt
            fromHash: 62a0505e8204115b8b9c8a95bfa264a8c0896a93
            line: 98
            multilineMarker:
              startLine: 5
              startLineType: ADDED
            lineType: ADDED
            srcPath:
              parent: path/to
              components:
              - path
              - to
              - file.txt
              extension: txt
              name: file.txt
            diffType: COMMIT
            toHash: 3cdd5d19178a54d2e51b5098d43b57571241d0ab
            fileType: FROM
            pullRequest:
              author:
                approved: true
                role: AUTHOR
                user:
                  emailAddress: jane@example.com
                  avatarUrl: avatarUrl
                  displayName: Jane Citizen
                  name: jcitizen
                  active: true
                  links: "{}"
                  id: 101
                  type: NORMAL
                  slug: jcitizen
                lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
                status: UNAPPROVED
              description: "It is a kludge, but put the tuple from the database in\
                \ the cache."
              updatedDate: 14490759200
              htmlDescription: htmlDescription
              title: Talking Nerdy
              reviewers:
              - approved: true
                role: AUTHOR
                user:
                  emailAddress: jane@example.com
                  avatarUrl: avatarUrl
                  displayName: Jane Citizen
                  name: jcitizen
                  active: true
                  links: "{}"
                  id: 101
                  type: NORMAL
                  slug: jcitizen
                lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
                status: UNAPPROVED
              - approved: true
                role: AUTHOR
                user:
                  emailAddress: jane@example.com
                  avatarUrl: avatarUrl
                  displayName: Jane Citizen
                  name: jcitizen
                  active: true
                  links: "{}"
                  id: 101
                  type: NORMAL
                  slug: jcitizen
                lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
                status: UNAPPROVED
              version: 0
              toRef:
                latestCommit: babecafebabecafebabecafebabecafebabecafe
                id: refs/heads/feature-ABC-123
                displayId: feature-ABC-1233
                repository:
                  hierarchyId: e3c939f9ef4a7fae272e
                  defaultBranch: main
                  origin:
                    hierarchyId: e3c939f9ef4a7fae272e
                    defaultBranch: main
                    description: My repo description
                    project:
                      public: true
                      avatarUrl: avatarUrl
                      scope: PROJECT
                      name: My Cool Project
                      description: The description for my cool project
                      links: "{}"
                      avatar: avatar
                      id: 2
                      type: NORMAL
                      key: PRJ
                    relatedLinks: "{}"
                    statusMessage: Available
                    archived: true
                    partition: 3
                    public: true
                    scope: REPOSITORY
                    name: My repo
                    forkable: true
                    links: "{}"
                    id: 9
                    scmId: git
                    state: AVAILABLE
                    slug: my-repo
                  description: My repo description
                  project:
                    public: true
                    avatarUrl: avatarUrl
                    scope: PROJECT
                    name: My Cool Project
                    description: The description for my cool project
                    links: "{}"
                    avatar: avatar
                    id: 2
                    type: NORMAL
                    key: PRJ
                  relatedLinks: "{}"
                  statusMessage: Available
                  archived: true
                  partition: 4
                  public: true
                  scope: REPOSITORY
                  name: My repo
                  forkable: true
                  links: "{}"
                  id: 7
                  scmId: git
                  state: AVAILABLE
                  slug: my-repo
                type: BRANCH
              descriptionAsHtml: descriptionAsHtml
              createdDate: 13590759200
              closedDate: 19990759200
              draft: true
              closed: true
              fromRef:
                latestCommit: babecafebabecafebabecafebabecafebabecafe
                id: refs/heads/feature-ABC-123
                displayId: feature-ABC-1233
                repository:
                  hierarchyId: e3c939f9ef4a7fae272e
                  defaultBranch: main
                  origin:
                    hierarchyId: e3c939f9ef4a7fae272e
                    defaultBranch: main
                    description: My repo description
                    project:
                      public: true
                      avatarUrl: avatarUrl
                      scope: PROJECT
                      name: My Cool Project
                      description: The description for my cool project
                      links: "{}"
                      avatar: avatar
                      id: 2
                      type: NORMAL
                      key: PRJ
                    relatedLinks: "{}"
                    statusMessage: Available
                    archived: true
                    partition: 3
                    public: true
                    scope: REPOSITORY
                    name: My repo
                    forkable: true
                    links: "{}"
                    id: 9
                    scmId: git
                    state: AVAILABLE
                    slug: my-repo
                  description: My repo description
                  project:
                    public: true
                    avatarUrl: avatarUrl
                    scope: PROJECT
                    name: My Cool Project
                    description: The description for my cool project
                    links: "{}"
                    avatar: avatar
                    id: 2
                    type: NORMAL
                    key: PRJ
                  relatedLinks: "{}"
                  statusMessage: Available
                  archived: true
                  partition: 4
                  public: true
                  scope: REPOSITORY
                  name: My repo
                  forkable: true
                  links: "{}"
                  id: 7
                  scmId: git
                  state: AVAILABLE
                  slug: my-repo
                type: BRANCH
              links: "{}"
              id: 1
              state: DECLINED
              locked: true
              open: true
              participants:
              - approved: true
                role: AUTHOR
                user:
                  emailAddress: jane@example.com
                  avatarUrl: avatarUrl
                  displayName: Jane Citizen
                  name: jcitizen
                  active: true
                  links: "{}"
                  id: 101
                  type: NORMAL
                  slug: jcitizen
                lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
                status: UNAPPROVED
              - approved: true
                role: AUTHOR
                user:
                  emailAddress: jane@example.com
                  avatarUrl: avatarUrl
                  displayName: Jane Citizen
                  name: jcitizen
                  active: true
                  links: "{}"
                  id: 101
                  type: NORMAL
                  slug: jcitizen
                lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
                status: UNAPPROVED
          html: html
          id: 1
          state: OPEN
          text: An insightful comment.
          reply: true
          properties: "{}"
          resolvedDate: 1239075920
        emoticon:
          shortcut: shortcut
          value: value
          url: url
        user:
          emailAddress: jane@example.com
          avatarUrl: avatarUrl
          displayName: Jane Citizen
          name: jcitizen
          active: true
          links: "{}"
          id: 101
          type: NORMAL
          slug: jcitizen
      properties:
        comment:
          $ref: "#/components/schemas/RestUserReaction_comment"
        emoticon:
          $ref: "#/components/schemas/RestUserReaction_emoticon"
        user:
          $ref: "#/components/schemas/RestComment_anchor_pullRequest_author_user"
    RestGitTagCreateRequest:
      example:
        name: release-tag
        startPoint: refs/heads/master
        force: true
        message: A new release tag
        type: ANNOTATED
      properties:
        force:
          type: boolean
        message:
          example: A new release tag
          type: string
        name:
          example: release-tag
          type: string
        startPoint:
          example: refs/heads/master
          type: string
        type:
          enum:
          - ANNOTATED
          - LIGHTWEIGHT
          type: string
      type: object
    RestPullRequestRebaseRequest:
      example:
        version: 1
      properties:
        version:
          example: 1
          format: int32
          type: integer
      type: object
    RestPullRequestRebaseResult:
      example:
        refChange:
          fromHash: 6053a1eaa1c009dd11092d09a72f3c41af1b59ad
          ref:
            id: refs/heads/master
            displayId: master
            type: BRANCH
          toHash: d6edcbf924697ab811a867421dab60d954ccad99
          refId: refs/heads/master
          type: ADD
      properties:
        refChange:
          $ref: "#/components/schemas/RestPullRequestRebaseResult_refChange"
    RestPullRequestRebaseability:
      example:
        vetoes:
        - detailedMessage: You have insufficient permissions to rebase 'refs/heads/feature-branch'.
          summaryMessage: Insufficient branch permissions
        - detailedMessage: You have insufficient permissions to rebase 'refs/heads/feature-branch'.
          summaryMessage: Insufficient branch permissions
      properties:
        vetoes:
          items:
            $ref: "#/components/schemas/RestRepositoryHookVeto"
          type: array
    RestRefChange:
      properties:
        fromHash:
          example: 6053a1eaa1c009dd11092d09a72f3c41af1b59ad
          type: string
        ref:
          $ref: "#/components/schemas/RestPullRequestRebaseResult_refChange_ref"
        refId:
          example: refs/heads/master
          type: string
        toHash:
          example: d6edcbf924697ab811a867421dab60d954ccad99
          type: string
        type:
          enum:
          - ADD
          - DELETE
          - UPDATE
          type: string
    RestRepositoryHookVeto:
      example:
        detailedMessage: You have insufficient permissions to rebase 'refs/heads/feature-branch'.
        summaryMessage: Insufficient branch permissions
      properties:
        detailedMessage:
          example: You have insufficient permissions to rebase 'refs/heads/feature-branch'.
          type: string
        summaryMessage:
          example: Insufficient branch permissions
          type: string
    RestTag:
      example:
        latestCommit: 8d51122def5632836d1cb1026e879069e10a1e13
        latestChangeset: 8d51122def5632836d1cb1026e879069e10a1e13
        id: refs/heads/master
        displayId: master
        type: BRANCH
        hash: 8d51122def5632836d1cb1026e879069e10a1e13
      properties:
        displayId:
          example: master
          type: string
        hash:
          example: 8d51122def5632836d1cb1026e879069e10a1e13
          type: string
        id:
          example: refs/heads/master
          type: string
        latestChangeset:
          example: 8d51122def5632836d1cb1026e879069e10a1e13
          readOnly: true
          type: string
        latestCommit:
          example: 8d51122def5632836d1cb1026e879069e10a1e13
          readOnly: true
          type: string
        type:
          enum:
          - BRANCH
          - TAG
          type: string
    RestGpgKey:
      example:
        expiryDate: 61550496000000
        emailAddress: bitbucket@example.com
        fingerprint: 43:51:43:a1:b5:fc:8b:b7:0a:3a:a9:b1:0f:66:73:a8
        subKeys: []
        id: 00000000000004d2
        text: |
          -----BEGIN PGP SIGNATURE-----

          iQEzBAABCAAdFiEEM8MrWnoxlp3K1lFY5BMGiWNefn4FAlkqKE4ACgkQ5BMGiWNe
          fn6/kggAyzKhDDqdVb3Rq02hiSqeqKa1JuKRqDmzIpa6Pxa+1CpCnxwaIVrGgIii
          vj0ZNJzL1Bm2xm0JasotJDiZq5pFKi0FfQ0WmskuhsW1VY/f08TltHpHvK2kHVRr
          GEMVDUb0nj0I7Duc8XTipiYoDGS1GvydNR/bu3SsFTcZyapXirQcTCRT6/Sn0/IP
          pUeIwQo1qK4e8gTOhWhfWEiVig39lQhiZFtm5S/vfAY72/Rgp68zMYmwasMSnBgF
          /LLFW6lXAqZIoAP8AnmsMRjCH6mS98+/lxKq2+K71+2YUUIAnNEeO09Lufo3B3Da
          Pbs7BpD28w4lKlzb2EQ0n0C9rrxdPA==
          =VZpm
          -----END PGP SIGNATURE-----
      properties:
        emailAddress:
          example: bitbucket@example.com
          readOnly: true
          type: string
        expiryDate:
          example: 61550496000000
          format: int64
          readOnly: true
          type: integer
        fingerprint:
          example: 43:51:43:a1:b5:fc:8b:b7:0a:3a:a9:b1:0f:66:73:a8
          readOnly: true
          type: string
        id:
          example: 00000000000004d2
          readOnly: true
          type: string
        subKeys:
          example: []
          items:
            $ref: "#/components/schemas/RestGpgSubKey"
          readOnly: true
          type: array
        text:
          example: |
            -----BEGIN PGP SIGNATURE-----

            iQEzBAABCAAdFiEEM8MrWnoxlp3K1lFY5BMGiWNefn4FAlkqKE4ACgkQ5BMGiWNe
            fn6/kggAyzKhDDqdVb3Rq02hiSqeqKa1JuKRqDmzIpa6Pxa+1CpCnxwaIVrGgIii
            vj0ZNJzL1Bm2xm0JasotJDiZq5pFKi0FfQ0WmskuhsW1VY/f08TltHpHvK2kHVRr
            GEMVDUb0nj0I7Duc8XTipiYoDGS1GvydNR/bu3SsFTcZyapXirQcTCRT6/Sn0/IP
            pUeIwQo1qK4e8gTOhWhfWEiVig39lQhiZFtm5S/vfAY72/Rgp68zMYmwasMSnBgF
            /LLFW6lXAqZIoAP8AnmsMRjCH6mS98+/lxKq2+K71+2YUUIAnNEeO09Lufo3B3Da
            Pbs7BpD28w4lKlzb2EQ0n0C9rrxdPA==
            =VZpm
            -----END PGP SIGNATURE-----
          type: string
          writeOnly: true
    RestGpgSubKey:
      properties:
        expiryDate:
          format: date-time
          type: string
        fingerprint:
          type: string
    Credentials:
      oneOf:
      - $ref: "#/components/schemas/RestUsernamePasswordCredentials"
      - $ref: "#/components/schemas/RestBearerTokenCredentials"
      - $ref: "#/components/schemas/RestSshCredentials"
      type: object
    EnrichedRepository:
      example:
        hierarchyId: e3c939f9ef4a7fae272e
        defaultBranch: main
        origin:
          hierarchyId: e3c939f9ef4a7fae272e
          defaultBranch: main
          description: My repo description
          project:
            public: true
            avatarUrl: avatarUrl
            scope: PROJECT
            name: My Cool Project
            description: The description for my cool project
            links: "{}"
            avatar: avatar
            id: 2
            type: NORMAL
            key: PRJ
          relatedLinks: "{}"
          statusMessage: Available
          archived: true
          partition: 3
          public: true
          scope: REPOSITORY
          name: My repo
          forkable: true
          links: "{}"
          id: 9
          scmId: git
          state: AVAILABLE
          slug: my-repo
        description: My repo description
        project:
          public: true
          avatarUrl: avatarUrl
          scope: PROJECT
          name: My Cool Project
          description: The description for my cool project
          links: "{}"
          avatar: avatar
          id: 2
          type: NORMAL
          key: PRJ
        relatedLinks: "{}"
        statusMessage: Available
        archived: true
        partition: 5
        public: true
        scope: REPOSITORY
        name: My repo
        forkable: true
        links: "{}"
        id: 1
        scmId: git
        state: AVAILABLE
        properties:
          defaultBranchId: refs/heads/master
          metadataHash: 11e5cd17e8d74d84a11f2c8a6bbc6ae0a2b69059e54030f49214c94d980364c1
          contentHash: 457389a0b871fb61012a7351d09aefc0cf1c57c306449d4b5df4d2f381df8433
        slug: my-repo
      properties:
        archived:
          readOnly: true
          type: boolean
        defaultBranch:
          example: main
          type: string
          writeOnly: true
        description:
          example: My repo description
          readOnly: true
          type: string
        forkable:
          readOnly: true
          type: boolean
        hierarchyId:
          example: e3c939f9ef4a7fae272e
          readOnly: true
          type: string
        id:
          format: int32
          readOnly: true
          type: integer
        links:
          properties: {}
          type: object
          writeOnly: true
        name:
          example: My repo
          type: string
        origin:
          $ref: "#/components/schemas/RestChangeset_repository_origin"
        partition:
          format: int32
          readOnly: true
          type: integer
        project:
          $ref: "#/components/schemas/RestChangeset_repository_origin_project"
        properties:
          $ref: "#/components/schemas/EnrichedRepository_properties"
        public:
          readOnly: true
          type: boolean
        relatedLinks:
          properties: {}
          readOnly: true
          type: object
        scmId:
          example: git
          type: string
        scope:
          example: REPOSITORY
          readOnly: true
          type: string
        slug:
          example: my-repo
          type: string
        state:
          enum:
          - AVAILABLE
          - INITIALISATION_FAILED
          - INITIALISING
          - OFFLINE
          readOnly: true
          type: string
        statusMessage:
          example: Available
          readOnly: true
          type: string
    RestAnalyticsSettings:
      example:
        serverTime: 1640390400000
        supportEntitlementNumber: SEN-500
        canCollectAnalytics: true
      properties:
        canCollectAnalytics:
          type: boolean
        serverTime:
          example: 1640390400000
          format: int64
          type: integer
        supportEntitlementNumber:
          example: SEN-500
          type: string
    RestApplicationUserWithPermissions:
      example:
        emailAddress: jane@example.com
        avatarUrl: avatarUrl
        displayName: Jane Citizen
        effectivePermissions: "{}"
        name: jcitizen
        active: true
        links: "{}"
        id: 101
        type: NORMAL
        slug: jcitizen
      properties:
        active:
          type: boolean
        avatarUrl:
          type: string
          writeOnly: true
        displayName:
          example: Jane Citizen
          type: string
        effectivePermissions:
          type: object
        emailAddress:
          example: jane@example.com
          type: string
        id:
          example: 101
          format: int32
          readOnly: true
          type: integer
        links:
          properties: {}
          type: object
          writeOnly: true
        name:
          example: jcitizen
          type: string
        slug:
          example: jcitizen
          type: string
        type:
          enum:
          - NORMAL
          - SERVICE
          type: string
    RestAuthenticationRequest:
      example:
        credentials:
          password: secr3t
          username: user1
        repositoryId: 0
      properties:
        credentials:
          $ref: "#/components/schemas/Credentials"
        repositoryId:
          format: int32
          type: integer
      required:
      - credentials
      type: object
    RestBearerTokenCredentials:
      properties:
        token:
          example: <token>
          type: string
      required:
      - token
      type: object
    RestMirrorServer:
      example:
        baseUrl: http://vietnam.example.com
        mirrorType: SINGLE
        productVersion: 8.0.0
        lastSeenDate: 2000-01-23T04:56:07.000+00:00
        name: Mirror
        id: B0F5-CS21-45C2-CCK3
        enabled: true
      properties:
        baseUrl:
          example: http://vietnam.example.com
          type: string
        enabled:
          type: boolean
        id:
          example: B0F5-CS21-45C2-CCK3
          type: string
        lastSeenDate:
          format: date-time
          type: string
        mirrorType:
          enum:
          - SINGLE
          - FARM
          type: string
        name:
          example: Mirror
          type: string
        productVersion:
          example: 8.0.0
          type: string
    RestMirrorUpgradeRequest:
      example:
        baseUrl: https://bitbucket-eu.example.com:7990/bitbucket
        productVersion: 8.0.0
      properties:
        baseUrl:
          example: https://bitbucket-eu.example.com:7990/bitbucket
          type: string
        productVersion:
          example: 8.0.0
          type: string
      type: object
    RestMirroredRepositoryDescriptor:
      example:
        links: "{}"
        mirrorServer:
          baseUrl: http://vietnam.example.com
          mirrorType: SINGLE
          productVersion: 8.0.0
          lastSeenDate: 2000-01-23T04:56:07.000+00:00
          name: Mirror
          id: B0F5-CS21-45C2-CCK3
          enabled: true
      properties:
        links:
          properties: {}
          type: object
          writeOnly: true
        mirrorServer:
          $ref: "#/components/schemas/RestMirroredRepositoryDescriptor_mirrorServer"
    RestMirroringRequest:
      example:
        mirrorName: Bitbucket Mirror
        mirrorType: SINGLE
        productVersion: 8.0.0
        mirrorBaseUrl: https://bitbucket-eu.example.com:7990/bitbucket
        id: 1
        mirrorId: 4f0eb5fc-67fc-48f8-b4a7-87981f026c6a
        state: PENDING
      properties:
        id:
          format: int32
          readOnly: true
          type: integer
        mirrorBaseUrl:
          example: https://bitbucket-eu.example.com:7990/bitbucket
          type: string
        mirrorId:
          example: 4f0eb5fc-67fc-48f8-b4a7-87981f026c6a
          type: string
        mirrorName:
          example: Bitbucket Mirror
          type: string
        mirrorType:
          enum:
          - SINGLE
          - FARM
          type: string
        productVersion:
          example: 8.0.0
          type: string
        state:
          enum:
          - PENDING
          - ACCEPTED
          - REJECTED
          type: string
    RestProperties:
      properties:
        contentHash:
          example: 457389a0b871fb61012a7351d09aefc0cf1c57c306449d4b5df4d2f381df8433
          type: string
        defaultBranchId:
          example: refs/heads/master
          type: string
        metadataHash:
          example: 11e5cd17e8d74d84a11f2c8a6bbc6ae0a2b69059e54030f49214c94d980364c1
          type: string
    RestRepositoryMirrorEvent:
      example:
        mirrorRepoId: 42
        upstreamRepoId: "24"
        type: SYNCHRONIZED
      properties:
        mirrorRepoId:
          example: 42
          format: int32
          type: integer
        type:
          enum:
          - SYNCHRONIZED
          - SYNCHRONIZATION_FAILED
          type: string
        upstreamRepoId:
          example: "24"
          type: string
      type: object
    RestSshCredentials:
      properties:
        algorithm:
          description: "The key algorithm, if passing in a legacy X.509 encoded key.\
            \ Do not specify for OpenSSH encoded keys"
          example: RSA
          type: string
        publicKey:
          description: The public key text in the OpenSSH format. The algorithm must
            be specified in case of the legacy X.509 keys
          example: ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIKjFjYCLJjrIY/jCXPbJ9wd3drcGospvPkKFNZ1ZcacA
            test@test.local
          type: string
        username:
          example: git
          type: string
      required:
      - publicKey
      type: object
    RestUsernamePasswordCredentials:
      example:
        password: secr3t
        username: user1
      properties:
        password:
          example: secr3t
          type: string
        username:
          example: user1
          type: string
      required:
      - password
      - username
      type: object
    RestClusterNode:
      example:
        buildVersion: 7.0.0
        address:
          address: node.example.com
          port: 8230
        name: foo
        id: d4fde8b1-2504-4998-a0ba-14fbe98edd4d
        local: true
      properties:
        address:
          $ref: "#/components/schemas/RestClusterNode_address"
        buildVersion:
          example: 7.0.0
          type: string
        id:
          example: d4fde8b1-2504-4998-a0ba-14fbe98edd4d
          type: string
        local:
          type: boolean
        name:
          example: foo
          type: string
    RestDelayedSyncRepository:
      example:
        projectKey: PRJ
        repositoryId: "1"
        repositorySlug: my-repo
      properties:
        projectKey:
          example: PRJ
          type: string
        repositoryId:
          example: "1"
          type: string
        repositorySlug:
          example: my-repo
          type: string
      type: object
    RestFarmSynchronizationRequest:
      example:
        createdAt: 2022-08-18T02:04:46.435Z
        type: INCREMENTAL
        attempt: 1
        externalRepoId: "1"
      properties:
        attempt:
          example: 1
          format: int32
          type: integer
        createdAt:
          example: 2022-08-18T02:04:46.435Z
          type: string
        externalRepoId:
          example: "1"
          type: string
        type:
          enum:
          - incremental
          - snapshot
          example: INCREMENTAL
          type: string
      type: object
    RestMirrorHashes:
      properties:
        content:
          example: 677513e1f2a93ff50e7b709e3c96454c23a3fcd40046ab385c4093e30809500a
          type: string
        metadata:
          example: 677513e1f2a93ff50e7b709e3c96454c23a3fcd40046ab385c4093e30809500a
          type: string
    RestMirrorRepositorySynchronizationStatus:
      example:
        localRepoId: 1
        upstreamId: 148728f5-df0f-3f3e-af11-5ca16be3725f
        failedSyncCount: 1
        hashes:
          metadata: 677513e1f2a93ff50e7b709e3c96454c23a3fcd40046ab385c4093e30809500a
          content: 677513e1f2a93ff50e7b709e3c96454c23a3fcd40046ab385c4093e30809500a
        lastSyncDate: 2000-01-23T04:56:07.000+00:00
        localProjectId: 1
        externalRepoId: "1"
        initialSyncDate: 2000-01-23T04:56:07.000+00:00
      properties:
        externalRepoId:
          example: "1"
          type: string
        failedSyncCount:
          example: 1
          format: int32
          type: integer
        hashes:
          $ref: "#/components/schemas/RestMirrorRepositorySynchronizationStatus_hashes"
        initialSyncDate:
          format: date-time
          type: string
        lastSyncDate:
          format: date-time
          type: string
        localProjectId:
          example: 1
          format: int32
          type: integer
        localRepoId:
          example: 1
          format: int32
          type: integer
        upstreamId:
          example: 148728f5-df0f-3f3e-af11-5ca16be3725f
          type: string
    RestMirroredRepository:
      example:
        lastUpdated: 2000-01-23T04:56:07.000+00:00
        mirrorName: Saigon Mirror
        pushUrls:
        - name: http
          href: https://bitbucket.example.com/scm/awesomeproject/awesomerepo.git
        - name: http
          href: https://bitbucket.example.com/scm/awesomeproject/awesomerepo.git
        cloneUrls:
        - name: http
          href: https://bitbucket.example.com/scm/awesomeproject/awesomerepo.git
        - name: http
          href: https://bitbucket.example.com/scm/awesomeproject/awesomerepo.git
        available: true
        repositoryId: "1"
        status: NOT_MIRRORED
      properties:
        available:
          type: boolean
        cloneUrls:
          items:
            $ref: "#/components/schemas/RestNamedLink"
          type: array
        lastUpdated:
          format: date-time
          type: string
        mirrorName:
          example: Saigon Mirror
          type: string
        pushUrls:
          items:
            $ref: "#/components/schemas/RestNamedLink"
          type: array
        repositoryId:
          example: "1"
          type: string
        status:
          enum:
          - NOT_MIRRORED
          - INITIALIZING
          - AVAILABLE
          - ERROR_INITIALIZING
          - ERROR_AVAILABLE
          type: string
    RestNamedLink:
      example:
        name: http
        href: https://bitbucket.example.com/scm/awesomeproject/awesomerepo.git
      properties:
        href:
          example: https://bitbucket.example.com/scm/awesomeproject/awesomerepo.git
          type: string
        name:
          example: http
          type: string
    RestRefSyncQueue:
      example:
        values:
        - createdAt: 2022-08-18T02:04:46.435Z
          type: INCREMENTAL
          attempt: 1
          externalRepoId: "1"
        - createdAt: 2022-08-18T02:04:46.435Z
          type: INCREMENTAL
          attempt: 1
          externalRepoId: "1"
      properties:
        values:
          items:
            $ref: "#/components/schemas/RestFarmSynchronizationRequest"
          type: array
      type: object
    RestRepositoryLockOwner:
      example:
        lockAcquireTime: 2000-01-23T04:56:07.000+00:00
        requestId: '*T75X1Tx955x782x0'
        externalRepositoryId: "101"
        nodeId: 4da47d83-ec95-489d-ad46-012cc086c0da
        threadName: farm-refchange-poller:thread-2
      properties:
        externalRepositoryId:
          description: The repository ID for which the lock is held
          example: "101"
          type: string
        lockAcquireTime:
          description: The time at which lock was last acquired
          format: date-time
          type: string
        nodeId:
          description: The ID of the mirror node on which the lock is being held
          example: 4da47d83-ec95-489d-ad46-012cc086c0da
          type: string
        requestId:
          description: The unique ID of the request for which the lock is being held
          example: '*T75X1Tx955x782x0'
          type: string
        threadName:
          description: Name of the thread that is holding the lock
          example: farm-refchange-poller:thread-2
          type: string
    RestRollingUpgradeState:
      example:
        rollingUpgradeEnabled: true
        version: 9.0.0
      properties:
        rollingUpgradeEnabled:
          example: true
          type: boolean
        version:
          example: 9.0.0
          type: string
    RestSyncProgress:
      example:
        discovering: true
        totalRepos: 6
        syncedRepos: 0
      properties:
        discovering:
          type: boolean
        syncedRepos:
          format: int32
          type: integer
        totalRepos:
          format: int32
          type: integer
    RestUpstreamServer:
      example:
        baseUrl: https://bitbucket.example.com
        id: f76a35c5-4592-425d-bf85-b4d9db68e809
        state: INSTALLED
      properties:
        baseUrl:
          example: https://bitbucket.example.com
          type: string
        id:
          example: f76a35c5-4592-425d-bf85-b4d9db68e809
          type: string
        state:
          enum:
          - INITIALIZING
          - PENDING
          - INSTALLED
          - UNKNOWN
          - REMOVED
          example: INSTALLED
          type: string
    RestUpstreamSettings:
      example:
        mode: ALL_PROJECTS
        projectIds:
        - projectIds
        - projectIds
      properties:
        mode:
          enum:
          - ALL_PROJECTS
          - SELECTED_PROJECTS
          type: string
        projectIds:
          items:
            type: string
          type: array
          uniqueItems: true
    RestRefRestriction:
      example:
        accessKeys:
        - project:
            public: true
            avatarUrl: avatarUrl
            scope: PROJECT
            name: My Cool Project
            description: The description for my cool project
            links: "{}"
            avatar: avatar
            id: 2
            type: NORMAL
            key: PRJ
          permission: USER_ADMIN
          repository:
            hierarchyId: e3c939f9ef4a7fae272e
            defaultBranch: main
            origin:
              hierarchyId: e3c939f9ef4a7fae272e
              defaultBranch: main
              description: My repo description
              project:
                public: true
                avatarUrl: avatarUrl
                scope: PROJECT
                name: My Cool Project
                description: The description for my cool project
                links: "{}"
                avatar: avatar
                id: 2
                type: NORMAL
                key: PRJ
              relatedLinks: "{}"
              statusMessage: Available
              archived: true
              partition: 3
              public: true
              scope: REPOSITORY
              name: My repo
              forkable: true
              links: "{}"
              id: 9
              scmId: git
              state: AVAILABLE
              slug: my-repo
            description: My repo description
            project:
              public: true
              avatarUrl: avatarUrl
              scope: PROJECT
              name: My Cool Project
              description: The description for my cool project
              links: "{}"
              avatar: avatar
              id: 2
              type: NORMAL
              key: PRJ
            relatedLinks: "{}"
            statusMessage: Available
            archived: true
            partition: 4
            public: true
            scope: REPOSITORY
            name: My repo
            forkable: true
            links: "{}"
            id: 7
            scmId: git
            state: AVAILABLE
            slug: my-repo
          key:
            bitLength: 1
            algorithmType: algorithmType
            createdDate: 2000-01-23T04:56:07.000+00:00
            lastAuthenticated: "1630041546434"
            fingerprint: Cbg38r+gDCiNHqBk6Y1BKO+EvufFBqhFWIEXh8oq9MI
            warning: RSA_UNSAFE_MODULUS
            expiryDays: 30
            id: 1
            label: me@127.0.0.1
            text: ssh-rsa AAAAB3... me@127.0.0.1
        - project:
            public: true
            avatarUrl: avatarUrl
            scope: PROJECT
            name: My Cool Project
            description: The description for my cool project
            links: "{}"
            avatar: avatar
            id: 2
            type: NORMAL
            key: PRJ
          permission: USER_ADMIN
          repository:
            hierarchyId: e3c939f9ef4a7fae272e
            defaultBranch: main
            origin:
              hierarchyId: e3c939f9ef4a7fae272e
              defaultBranch: main
              description: My repo description
              project:
                public: true
                avatarUrl: avatarUrl
                scope: PROJECT
                name: My Cool Project
                description: The description for my cool project
                links: "{}"
                avatar: avatar
                id: 2
                type: NORMAL
                key: PRJ
              relatedLinks: "{}"
              statusMessage: Available
              archived: true
              partition: 3
              public: true
              scope: REPOSITORY
              name: My repo
              forkable: true
              links: "{}"
              id: 9
              scmId: git
              state: AVAILABLE
              slug: my-repo
            description: My repo description
            project:
              public: true
              avatarUrl: avatarUrl
              scope: PROJECT
              name: My Cool Project
              description: The description for my cool project
              links: "{}"
              avatar: avatar
              id: 2
              type: NORMAL
              key: PRJ
            relatedLinks: "{}"
            statusMessage: Available
            archived: true
            partition: 4
            public: true
            scope: REPOSITORY
            name: My repo
            forkable: true
            links: "{}"
            id: 7
            scmId: git
            state: AVAILABLE
            slug: my-repo
          key:
            bitLength: 1
            algorithmType: algorithmType
            createdDate: 2000-01-23T04:56:07.000+00:00
            lastAuthenticated: "1630041546434"
            fingerprint: Cbg38r+gDCiNHqBk6Y1BKO+EvufFBqhFWIEXh8oq9MI
            warning: RSA_UNSAFE_MODULUS
            expiryDays: 30
            id: 1
            label: me@127.0.0.1
            text: ssh-rsa AAAAB3... me@127.0.0.1
        scope:
          resourceId: 2
          type: GLOBAL
        groups:
        - group_a
        - group_b
        id: 1
        matcher:
          id: refs/heads/main
          displayId: main
          type:
            name: Branch
            id: ANY_REF
        type: pull-request-only
        users:
        - emailAddress: jane@example.com
          avatarUrl: avatarUrl
          displayName: Jane Citizen
          name: jcitizen
          active: true
          links: "{}"
          id: 101
          type: NORMAL
          slug: jcitizen
        - emailAddress: jane@example.com
          avatarUrl: avatarUrl
          displayName: Jane Citizen
          name: jcitizen
          active: true
          links: "{}"
          id: 101
          type: NORMAL
          slug: jcitizen
      properties:
        accessKeys:
          items:
            $ref: "#/components/schemas/RestSshAccessKey"
          type: array
        groups:
          example:
          - group_a
          - group_b
          items:
            example: "[\"group_a\",\"group_b\"]"
            type: string
          type: array
        id:
          example: 1
          format: int32
          readOnly: true
          type: integer
        matcher:
          $ref: "#/components/schemas/updatePullRequestCondition_1_request_sourceMatcher"
        scope:
          $ref: "#/components/schemas/RestPullRequestCondition_scope"
        type:
          example: pull-request-only
          type: string
        users:
          items:
            $ref: "#/components/schemas/RestApplicationUser"
          type: array
    RestRestrictionRequest:
      properties:
        accessKeyIds:
          example:
          - 1
          - 2
          - 3
          items:
            format: int32
            type: integer
          type: array
        accessKeys:
          items:
            $ref: "#/components/schemas/RestSshAccessKey"
          type: array
        groupNames:
          example:
          - bitbucket-developers
          items:
            example: "[\"bitbucket-developers\"]"
            type: string
          type: array
        groups:
          example:
          - group_a
          - group_b
          items:
            example: "[\"group_a\",\"group_b\"]"
            type: string
          type: array
        id:
          example: 1
          format: int32
          readOnly: true
          type: integer
        matcher:
          $ref: "#/components/schemas/updatePullRequestCondition_1_request_sourceMatcher"
        scope:
          $ref: "#/components/schemas/RestPullRequestCondition_scope"
        type:
          example: pull-request-only
          type: string
        userSlugs:
          example:
          - bman
          - tstark
          - hulk
          items:
            example: "[\"bman\",\"tstark\",\"hulk\"]"
            type: string
          type: array
        users:
          items:
            $ref: "#/components/schemas/RestApplicationUser"
          type: array
      type: object
    RestSshAccessKey:
      example:
        project:
          public: true
          avatarUrl: avatarUrl
          scope: PROJECT
          name: My Cool Project
          description: The description for my cool project
          links: "{}"
          avatar: avatar
          id: 2
          type: NORMAL
          key: PRJ
        permission: USER_ADMIN
        repository:
          hierarchyId: e3c939f9ef4a7fae272e
          defaultBranch: main
          origin:
            hierarchyId: e3c939f9ef4a7fae272e
            defaultBranch: main
            description: My repo description
            project:
              public: true
              avatarUrl: avatarUrl
              scope: PROJECT
              name: My Cool Project
              description: The description for my cool project
              links: "{}"
              avatar: avatar
              id: 2
              type: NORMAL
              key: PRJ
            relatedLinks: "{}"
            statusMessage: Available
            archived: true
            partition: 3
            public: true
            scope: REPOSITORY
            name: My repo
            forkable: true
            links: "{}"
            id: 9
            scmId: git
            state: AVAILABLE
            slug: my-repo
          description: My repo description
          project:
            public: true
            avatarUrl: avatarUrl
            scope: PROJECT
            name: My Cool Project
            description: The description for my cool project
            links: "{}"
            avatar: avatar
            id: 2
            type: NORMAL
            key: PRJ
          relatedLinks: "{}"
          statusMessage: Available
          archived: true
          partition: 4
          public: true
          scope: REPOSITORY
          name: My repo
          forkable: true
          links: "{}"
          id: 7
          scmId: git
          state: AVAILABLE
          slug: my-repo
        key:
          bitLength: 1
          algorithmType: algorithmType
          createdDate: 2000-01-23T04:56:07.000+00:00
          lastAuthenticated: "1630041546434"
          fingerprint: Cbg38r+gDCiNHqBk6Y1BKO+EvufFBqhFWIEXh8oq9MI
          warning: RSA_UNSAFE_MODULUS
          expiryDays: 30
          id: 1
          label: me@127.0.0.1
          text: ssh-rsa AAAAB3... me@127.0.0.1
      properties:
        key:
          $ref: "#/components/schemas/addSshKey_request"
        permission:
          enum:
          - USER_ADMIN
          - PROJECT_VIEW
          - REPO_READ
          - REPO_WRITE
          - REPO_ADMIN
          - PROJECT_READ
          - PROJECT_WRITE
          - REPO_CREATE
          - PROJECT_ADMIN
          - LICENSED_USER
          - PROJECT_CREATE
          - ADMIN
          - SYS_ADMIN
          type: string
        project:
          $ref: "#/components/schemas/RestChangeset_repository_origin_project"
        repository:
          $ref: "#/components/schemas/RestChangeset_repository"
    RestSshKey:
      example:
        bitLength: 1
        algorithmType: algorithmType
        createdDate: 2000-01-23T04:56:07.000+00:00
        lastAuthenticated: "1630041546434"
        fingerprint: Cbg38r+gDCiNHqBk6Y1BKO+EvufFBqhFWIEXh8oq9MI
        warning: RSA_UNSAFE_MODULUS
        expiryDays: 30
        id: 1
        label: me@127.0.0.1
        text: ssh-rsa AAAAB3... me@127.0.0.1
      properties:
        algorithmType:
          type: string
        bitLength:
          format: int32
          type: integer
        createdDate:
          format: date-time
          readOnly: true
          type: string
        expiryDays:
          example: 30
          format: int32
          type: integer
        fingerprint:
          example: Cbg38r+gDCiNHqBk6Y1BKO+EvufFBqhFWIEXh8oq9MI
          readOnly: true
          type: string
        id:
          example: 1
          format: int32
          readOnly: true
          type: integer
        label:
          example: me@127.0.0.1
          type: string
        lastAuthenticated:
          example: "1630041546434"
          readOnly: true
          type: string
        text:
          example: ssh-rsa AAAAB3... me@127.0.0.1
          type: string
        warning:
          description: "Contains a warning about the key, for example that it's deprecated"
          example: RSA_UNSAFE_MODULUS
          readOnly: true
          type: string
    RestRepositoryPolicy:
      example:
        permission: ADMIN
      properties:
        permission:
          description: "The permission required to delete repositories. Must be one\
            \ of: \"SYS_ADMIN\", \"ADMIN\", \"PROJECT_ADMIN\", \"REPO_ADMIN\"."
          enum:
          - SYS_ADMIN
          - ADMIN
          - PROJECT_ADMIN
          - REPO_ADMIN
          example: ADMIN
          type: string
    Context:
      example:
        commitMessage: Merging in latest from upstream.
      properties:
        commitMessage:
          example: Merging in latest from upstream.
          type: string
      type: object
    RestRefSyncRequest:
      example:
        context:
          commitMessage: Merging in latest from upstream.
        action: MERGE
        refId: refs/heads/master
      properties:
        action:
          enum:
          - DISCARD
          - MERGE
          - REBASE
          example: MERGE
          type: string
        context:
          $ref: "#/components/schemas/Context"
        refId:
          example: refs/heads/master
          type: string
      type: object
    RestRefSyncStatus:
      example:
        lastSync: 1331038800000
        available: true
        aheadRefs:
          id: refs/heads/master
          state: AHEAD
          tag: true
          displayId: master
          type: BRANCH
        orphanedRefs:
          id: refs/heads/master
          state: AHEAD
          tag: true
          displayId: master
          type: BRANCH
        divergedRefs:
          id: refs/heads/master
          state: AHEAD
          tag: true
          displayId: master
          type: BRANCH
        enabled: true
      properties:
        aheadRefs:
          $ref: "#/components/schemas/RestRefSyncStatus_aheadRefs"
        available:
          readOnly: true
          type: boolean
        divergedRefs:
          $ref: "#/components/schemas/RestRefSyncStatus_aheadRefs"
        enabled:
          type: boolean
        lastSync:
          example: 1331038800000
          readOnly: true
          type: number
        orphanedRefs:
          $ref: "#/components/schemas/RestRefSyncStatus_aheadRefs"
    RestRejectedRef:
      example:
        id: refs/heads/master
        state: AHEAD
        tag: true
        displayId: master
        type: BRANCH
      properties:
        displayId:
          example: master
          type: string
        id:
          example: refs/heads/master
          type: string
        state:
          enum:
          - AHEAD
          - DIVERGED
          - ORPHANED
          type: string
        tag:
          type: boolean
        type:
          enum:
          - BRANCH
          - TAG
          type: string
    AuthenticationEntity:
      example:
        password: password
        captchaChallenge: captchaChallenge
        rememberMe: true
        captchaId: captchaId
        targetUrl: targetUrl
        username: username
      properties:
        captchaChallenge:
          type: string
        captchaId:
          type: string
        password:
          type: string
        rememberMe:
          type: boolean
        targetUrl:
          type: string
        username:
          type: string
      type: object
    AuthenticationResponse:
      example:
        next: next
      properties:
        next:
          type: string
    BasicAuthConfigEntity:
      example:
        allowed-users:
        - allowed-users
        - allowed-users
        show-warning-message: true
        block-requests: true
        allowed-paths:
        - allowed-paths
        - allowed-paths
      properties:
        allowed-paths:
          items:
            type: string
          type: array
        allowed-users:
          items:
            type: string
          type: array
        block-requests:
          type: boolean
        show-warning-message:
          type: boolean
    CaptchaDataEntity:
      example:
        captchaImageUrl: captchaImageUrl
        captchaId: captchaId
      properties:
        captchaId:
          type: string
        captchaImageUrl:
          type: string
    ConversationDTO:
      example:
        conversationId: conversationId
      properties:
        conversationId:
          type: string
      type: object
    CredentialsCheckFailedDTO:
      example:
        captchaRequired: true
        message: message
        expiredCredentials: true
      properties:
        captchaRequired:
          type: boolean
        expiredCredentials:
          type: boolean
        message:
          type: string
    ElevationMethodRestDTO:
      example:
        elevationMethods:
        - PASSWORD
        - PASSWORD
      properties:
        elevationMethods:
          items:
            enum:
            - PASSWORD
            - TOTP
            type: string
          type: array
          uniqueItems: true
    ErrorEntity:
      example:
        message: message
      properties:
        message:
          type: string
    IdpConfigEntity:
      example:
        include-customer-logins: true
        signature-algorithm: RSA_SHA256
        name-id-policy: NONE
        discovery-enabled: true
        additional-scopes:
        - additional-scopes
        - additional-scopes
        certificate: certificate
        idp-type: GENERIC
        username-claim: username-claim
        enabled: true
        token-endpoint: token-endpoint
        enable-remember-me: true
        sso-type: NONE
        username-attribute: username-attribute
        id: 0
        client-id: client-id
        authorization-endpoint: authorization-endpoint
        sign-authnrequest: true
        buttonText: buttonText
        issuer-url: issuer-url
        sso-url: sso-url
        last-updated: 2000-01-23T04:56:07.000+00:00
        client-secret: client-secret
        crowd-url: crowd-url
        name: name
        sso-issuer: sso-issuer
        jit-configuration:
          mapping-groups: mapping-groups
          mapping-email: mapping-email
          mapping-display-name: mapping-display-name
          additional-openid-scopes:
          - additional-openid-scopes
          - additional-openid-scopes
          user-provisioning-enabled: true
        userinfo-endpoint: userinfo-endpoint
      properties:
        additional-scopes:
          items:
            type: string
          type: array
        authorization-endpoint:
          type: string
        buttonText:
          type: string
        certificate:
          type: string
        client-id:
          type: string
        client-secret:
          type: string
        crowd-url:
          type: string
        discovery-enabled:
          type: boolean
        enable-remember-me:
          type: boolean
        enabled:
          type: boolean
        id:
          format: int64
          type: integer
        idp-type:
          enum:
          - GENERIC
          - CROWD
          type: string
        include-customer-logins:
          type: boolean
        issuer-url:
          type: string
        jit-configuration:
          $ref: "#/components/schemas/JitConfigEntity"
        last-updated:
          format: date-time
          type: string
        name:
          type: string
        name-id-policy:
          enum:
          - NONE
          - UNSPECIFIED
          - EMAIL_ADDRESS
          - ENCRYPTED
          - ENTITY
          - KERBEROS
          - PERSISTENT
          - TRANSIENT
          - WINDOWS_DOMAIN_QUALIFIED_NAME
          - X509_SUBJECT_NAME
          type: string
        sign-authnrequest:
          type: boolean
        signature-algorithm:
          enum:
          - RSA_SHA256
          - RSA_SHA384
          - RSA_SHA512
          type: string
        sso-issuer:
          type: string
        sso-type:
          enum:
          - NONE
          - SAML
          - OIDC
          type: string
        sso-url:
          type: string
        token-endpoint:
          type: string
        userinfo-endpoint:
          type: string
        username-attribute:
          type: string
        username-claim:
          type: string
    JitConfigEntity:
      example:
        mapping-groups: mapping-groups
        mapping-email: mapping-email
        mapping-display-name: mapping-display-name
        additional-openid-scopes:
        - additional-openid-scopes
        - additional-openid-scopes
        user-provisioning-enabled: true
      properties:
        additional-openid-scopes:
          items:
            type: string
          type: array
        mapping-display-name:
          type: string
        mapping-email:
          type: string
        mapping-groups:
          type: string
        user-provisioning-enabled:
          type: boolean
    JitUserEntity:
      example:
        display-name: display-name
        email: email
        username: username
      properties:
        display-name:
          type: string
        email:
          type: string
        username:
          type: string
    LoginOptionEntity:
      example:
        buttonText: buttonText
        loginLink: loginLink
        id: 0
        type: LOGIN_FORM
      properties:
        buttonText:
          type: string
        id:
          format: int64
          type: integer
        loginLink:
          type: string
        type:
          enum:
          - LOGIN_FORM
          - IDP
          - LEGACY_LOGIN_FORM
          type: string
    MethodStateDTO:
      example:
        enforced: true
        type: TOTP
        enabledAt: 2000-01-23T04:56:07.000+00:00
        enabled: true
      properties:
        enabled:
          type: boolean
        enabledAt:
          format: date-time
          type: string
        enforced:
          type: boolean
        type:
          enum:
          - TOTP
          type: string
    NextLoginStepDTO:
      example:
        conversationId: conversationId
        nextLoginStep: ENROLLMENT
      properties:
        conversationId:
          type: string
        nextLoginStep:
          enum:
          - ENROLLMENT
          - TOTP_CODE_VERIFICATION
          type: string
    PasswordElevationRestDTO:
      properties:
        password:
          type: string
      type: object
    RestPageIdpConfigEntity:
      properties:
        isLastPage:
          type: boolean
        limit:
          format: int32
          type: integer
        results:
          items:
            $ref: "#/components/schemas/IdpConfigEntity"
          type: array
        size:
          format: int32
          type: integer
        start:
          format: int32
          type: integer
      type: object
    RestPageLoginOptionEntity:
      properties:
        isLastPage:
          type: boolean
        limit:
          format: int32
          type: integer
        results:
          items:
            $ref: "#/components/schemas/LoginOptionEntity"
          type: array
        size:
          format: int32
          type: integer
        start:
          format: int32
          type: integer
      type: object
    SsoConfigEntity:
      example:
        last-updated: 2000-01-23T04:56:07.000+00:00
        enable-authentication-fallback: true
        show-login-form: true
        show-login-form-for-jsm: true
        discovery-refresh-cron: discovery-refresh-cron
      properties:
        discovery-refresh-cron:
          type: string
        enable-authentication-fallback:
          type: boolean
        last-updated:
          format: date-time
          type: string
        show-login-form:
          type: boolean
        show-login-form-for-jsm:
          type: boolean
    SsoManagementStatusDTO:
      example:
        isManaged: true
      properties:
        isManaged:
          type: boolean
    StatusDTO:
      example:
        methods:
        - enforced: true
          type: TOTP
          enabledAt: 2000-01-23T04:56:07.000+00:00
          enabled: true
        - enforced: true
          type: TOTP
          enabledAt: 2000-01-23T04:56:07.000+00:00
          enabled: true
        isTwoSVActive: true
        twoSVActive: true
      properties:
        isTwoSVActive:
          type: boolean
          writeOnly: true
        methods:
          items:
            $ref: "#/components/schemas/MethodStateDTO"
          type: array
        twoSVActive:
          type: boolean
    TotpCodeVerificationDTO:
      example:
        conversationId: conversationId
        totpCode: totpCode
      properties:
        conversationId:
          type: string
        totpCode:
          type: string
      type: object
    TotpElevationRestDTO:
      example:
        totpCode: totpCode
      properties:
        totpCode:
          type: string
      type: object
    TotpRecoveryCodeAuthenticationDTO:
      example:
        conversationId: conversationId
        recoveryCode: recoveryCode
      properties:
        conversationId:
          type: string
        recoveryCode:
          type: string
      type: object
    TotpRecoveryCodeDTO:
      example:
        recoveryCode: recoveryCode
      properties:
        recoveryCode:
          type: string
    TotpUserEnrollmentDTO:
      example:
        conversationId: conversationId
        secret: secret
        userName: userName
        url: url
      properties:
        conversationId:
          type: string
        secret:
          type: string
        url:
          type: string
        userName:
          type: string
    RestBrokenIndexStatusRepository:
      example:
        details:
          projectKey: PROJECT_1
          lastIndexedCommitId: abcdef0123abcdef4567abcdef8987abcdef6543
          indexingError: Indexing timed out.
          lastIndexedTimestamp: 1732022086
          repositorySlug: rep_1
          status: BROKEN
        repository:
          hierarchyId: e3c939f9ef4a7fae272e
          defaultBranch: main
          origin:
            hierarchyId: e3c939f9ef4a7fae272e
            defaultBranch: main
            description: My repo description
            project:
              public: true
              avatarUrl: avatarUrl
              scope: PROJECT
              name: My Cool Project
              description: The description for my cool project
              links: "{}"
              avatar: avatar
              id: 2
              type: NORMAL
              key: PRJ
            relatedLinks: "{}"
            statusMessage: Available
            archived: true
            partition: 3
            public: true
            scope: REPOSITORY
            name: My repo
            forkable: true
            links: "{}"
            id: 9
            scmId: git
            state: AVAILABLE
            slug: my-repo
          description: My repo description
          project:
            public: true
            avatarUrl: avatarUrl
            scope: PROJECT
            name: My Cool Project
            description: The description for my cool project
            links: "{}"
            avatar: avatar
            id: 2
            type: NORMAL
            key: PRJ
          relatedLinks: "{}"
          statusMessage: Available
          archived: true
          partition: 5
          public: true
          scope: REPOSITORY
          name: My repo
          forkable: true
          links: "{}"
          id: 1
          scmId: git
          state: AVAILABLE
          slug: my-repo
      properties:
        details:
          $ref: "#/components/schemas/RestBrokenIndexStatusRepository_details"
        repository:
          $ref: "#/components/schemas/RestBrokenIndexStatusRepository_repository"
    RestIndexEvent:
      description: The event that is currently being processed by the indexing worker.
      properties:
        eventMetadata:
          description: "Retrieves the metadata associated with the index event. The\
            \ content of this metadata is variable and depends on the event type.\
            \ It may include identifiers such as repository ID, project ID, or user\
            \ ID, among other relevant details."
          properties: {}
          readOnly: true
          type: object
        eventType:
          description: "Retrieves the type of the event, indicating the entity (such\
            \ as project, repository, or user) that triggered the indexing operation."
          enum:
          - PROJECT
          - REPOSITORY
          - USER
          - OTHER
          type: string
        retries:
          description: Retrieves the count of how many times this event has been retried
            due to previous failures or exceptions.
          format: int32
          type: integer
      readOnly: true
      required:
      - eventType
      - retries
      type: object
    RestIndexEventMetadata:
      description: "Retrieves the metadata associated with the index event. The content\
        \ of this metadata is variable and depends on the event type. It may include\
        \ identifiers such as repository ID, project ID, or user ID, among other relevant\
        \ details."
      properties: {}
      readOnly: true
      type: object
    RestIndexingIsRepositoryQueued:
      example:
        queued: true
      properties:
        queued:
          example: true
          type: boolean
    RestIndexingProcess:
      description: A snapshot of the current process being executed by the indexing
        worker.
      properties:
        currentTask:
          description: The current task description that the indexing worker is executing.
          example: "Indexing file: 'example.txt'"
          type: string
        event:
          $ref: "#/components/schemas/RestIndexingProcess_event"
      readOnly: true
      required:
      - currentTask
      - event
      type: object
    RestIndexingThreadDetails:
      example:
        queueSize: 1
        delayedQueueSize: 6
        capturedAt: 1732136412902
        state:
          code: BROKEN
          description: description
        currentProcess:
          currentTask: "Indexing file: 'example.txt'"
          event:
            retries: 0
            eventType: PROJECT
            eventMetadata: "{}"
      properties:
        capturedAt:
          description: Returns the timestamp indicating when the current thread details
            were captured.
          example: 1732136412902
          format: int64
          type: integer
        currentProcess:
          $ref: "#/components/schemas/RestIndexingThreadDetails_currentProcess"
        delayedQueueSize:
          description: The number of items in the delayed queue. This queue contains
            retries that have been scheduled with an exponential backoff delay. The
            retries are for operations that previously failed in the main queue.
          format: int32
          type: integer
        queueSize:
          description: The number of items currently in the main queue.
          format: int32
          type: integer
        state:
          $ref: "#/components/schemas/RestIndexingThreadDetails_state"
      readOnly: true
      required:
      - capturedAt
      - delayedQueueSize
      - queueSize
      - state
      type: object
    RestIndexingThreadState:
      description: Represents the state of an indexing thread.
      properties:
        code:
          description: The current code representing the state of the indexing thread
          enum:
          - BROKEN
          - IDLE
          - PROCESSING
          - STOPPED
          - UNKNOWN
          type: string
        description:
          description: "Additional detail about the current state, meant for informational\
            \ purposes only."
          type: string
      readOnly: true
      required:
      - code
      type: object
    RestIndexingWorkerRestartRequest:
      example:
        gracefulShutdown: true
        waitForRestart: true
      properties:
        gracefulShutdown:
          default: false
          description: Should the indexing thread terminate immediately
          example: true
          type: boolean
        waitForRestart:
          default: false
          description: Should the response wait until the worker has been restarted
          example: true
          type: boolean
      type: object
    RestRepositoryIndexingDetails:
      example:
        projectKey: PROJECT_1
        lastIndexedCommitId: abcdef0123abcdef4567abcdef8987abcdef6543
        indexingError: Indexing timed out.
        lastIndexedTimestamp: 1732022086
        repositorySlug: rep_1
        status: BROKEN
      properties:
        indexingError:
          description: "Additional detail about the <b>BROKEN</b> status if available,\
            \ meant for informational purposes only. This nullable, free-form text\
            \ field should not be used for automation; rely on status instead."
          example: Indexing timed out.
          readOnly: true
          type: string
        lastIndexedCommitId:
          description: The commit hash of the last indexed commit in the repository.
          example: abcdef0123abcdef4567abcdef8987abcdef6543
          type: string
        lastIndexedTimestamp:
          description: The timestamp in epoch milliseconds of the last time the repository
            successfully was indexed
          example: 1732022086
          format: int64
          type: integer
        projectKey:
          description: The project key that the repository belongs to
          example: PROJECT_1
          type: string
        repositorySlug:
          description: The repository slug
          example: rep_1
          type: string
        status:
          description: The current indexing status of the repository.
          enum:
          - BROKEN
          - INDEXED
          - INDEXING
          - UNKNOWN
          type: string
    RestRepositoryIndexingQueueDetails:
      example:
        queuedAt: 0
        queued: true
        capturedAt: 1732136412902
        nodeId: 58ed5b70-e8ef-4d4e-be13-88221650a51b
      properties:
        capturedAt:
          description: The timestamp indicating when the current queue details were
            captured.
          example: 1732136412902
          format: int64
          type: integer
        nodeId:
          description: The ID of the node associated with the indexing queue.
          example: 58ed5b70-e8ef-4d4e-be13-88221650a51b
          type: string
        queued:
          description: Indicates whether the repository is currently queued for indexing.
          type: boolean
        queuedAt:
          description: "Gets the time at which the repository was added to the indexing\
            \ queue. If the repository is not present in the queue, this will be empty."
          format: int64
          type: integer
    RestRepositorySelector:
      example:
        projectKey: PRJ
        slug: my-repo
      properties:
        projectKey:
          example: PRJ
          type: string
        slug:
          example: my-repo
          type: string
      type: object
    RestSshAccessKeyLocations:
      properties:
        projects:
          $ref: "#/components/schemas/RestProject"
        repositories:
          $ref: "#/components/schemas/RestRepository"
      type: object
    RestSshKeySettings:
      example:
        keyTypeRestrictions:
        - minKeyLength: 2048
          allowed: true
          algorithm: RSA
        - minKeyLength: 2048
          allowed: true
          algorithm: RSA
        maxExpiryDays: 0
      properties:
        keyTypeRestrictions:
          items:
            $ref: "#/components/schemas/RestSshKeyTypeRestriction"
          type: array
        maxExpiryDays:
          format: int32
          type: integer
    RestSshKeyTypeRestriction:
      example:
        minKeyLength: 2048
        allowed: true
        algorithm: RSA
      properties:
        algorithm:
          example: RSA
          type: string
        allowed:
          example: true
          type: boolean
        minKeyLength:
          example: 2048
          format: int32
          type: integer
    RestSshSettings:
      example:
        accessKeysEnabled: true
        baseUrl: ssh://example.com
        port: 7999
        fingerprint:
          value: value
          algorithm: algorithm
        enabled: true
      properties:
        accessKeysEnabled:
          type: boolean
        baseUrl:
          example: ssh://example.com
          type: string
        enabled:
          example: true
          type: boolean
        fingerprint:
          $ref: "#/components/schemas/SimpleSshKeyFingerprint"
        port:
          example: 7999
          format: int32
          type: integer
    SimpleSshKeyFingerprint:
      example:
        value: value
        algorithm: algorithm
      properties:
        algorithm:
          type: string
        value:
          type: string
    AdminPasswordUpdate:
      example:
        password: my-secret-password
        passwordConfirm: my-secret-password
        name: jcitizen
      properties:
        name:
          example: jcitizen
          type: string
        password:
          example: my-secret-password
          type: string
          writeOnly: true
        passwordConfirm:
          example: my-secret-password
          type: string
          writeOnly: true
      type: object
    DiffContentFilter:
      type: object
    ExampleAvatarMultipartFormData:
      properties:
        avatar:
          description: The avatar file to upload.
          format: binary
          type: string
      type: object
    ExampleCertificateMultipartFormData:
      properties:
        certificate:
          description: The X.509 certificate file to upload.
          format: binary
          type: string
      type: object
    ExampleFiles:
      example:
        files:
          latestCommit:
            committer:
              emailAddress: charlie@example.com
              avatarUrl: avatarUrl
              name: Charlie
            committerTimestamp: 1449075830
            author:
              emailAddress: charlie@example.com
              avatarUrl: avatarUrl
              name: Charlie
            authorTimestamp: 1359075920
            id: abcdef0123abcdef4567abcdef8987abcdef6543
            displayId: abcdef0
            message: More work on feature 1
            parents:
            - id: abcdef0123abcdef4567abcdef8987abcdef6543
              displayId: abcdef0
            - id: abcdef0123abcdef4567abcdef8987abcdef6543
              displayId: abcdef0
          readmeMd:
            committer:
              emailAddress: charlie@example.com
              avatarUrl: avatarUrl
              name: Charlie
            committerTimestamp: 1449075830
            author:
              emailAddress: charlie@example.com
              avatarUrl: avatarUrl
              name: Charlie
            authorTimestamp: 1359075920
            id: abcdef0123abcdef4567abcdef8987abcdef6543
            displayId: abcdef0
            message: More work on feature 1
            parents:
            - id: abcdef0123abcdef4567abcdef8987abcdef6543
              displayId: abcdef0
            - id: abcdef0123abcdef4567abcdef8987abcdef6543
              displayId: abcdef0
          pomXml:
            committer:
              emailAddress: charlie@example.com
              avatarUrl: avatarUrl
              name: Charlie
            committerTimestamp: 1449075830
            author:
              emailAddress: charlie@example.com
              avatarUrl: avatarUrl
              name: Charlie
            authorTimestamp: 1359075920
            id: abcdef0123abcdef4567abcdef8987abcdef6543
            displayId: abcdef0
            message: More work on feature 1
            parents:
            - id: abcdef0123abcdef4567abcdef8987abcdef6543
              displayId: abcdef0
            - id: abcdef0123abcdef4567abcdef8987abcdef6543
              displayId: abcdef0
      properties:
        files:
          $ref: "#/components/schemas/ExampleJsonLastModifiedCallback"
    ExampleJsonLastModifiedCallback:
      example:
        latestCommit:
          committer:
            emailAddress: charlie@example.com
            avatarUrl: avatarUrl
            name: Charlie
          committerTimestamp: 1449075830
          author:
            emailAddress: charlie@example.com
            avatarUrl: avatarUrl
            name: Charlie
          authorTimestamp: 1359075920
          id: abcdef0123abcdef4567abcdef8987abcdef6543
          displayId: abcdef0
          message: More work on feature 1
          parents:
          - id: abcdef0123abcdef4567abcdef8987abcdef6543
            displayId: abcdef0
          - id: abcdef0123abcdef4567abcdef8987abcdef6543
            displayId: abcdef0
        readmeMd:
          committer:
            emailAddress: charlie@example.com
            avatarUrl: avatarUrl
            name: Charlie
          committerTimestamp: 1449075830
          author:
            emailAddress: charlie@example.com
            avatarUrl: avatarUrl
            name: Charlie
          authorTimestamp: 1359075920
          id: abcdef0123abcdef4567abcdef8987abcdef6543
          displayId: abcdef0
          message: More work on feature 1
          parents:
          - id: abcdef0123abcdef4567abcdef8987abcdef6543
            displayId: abcdef0
          - id: abcdef0123abcdef4567abcdef8987abcdef6543
            displayId: abcdef0
        pomXml:
          committer:
            emailAddress: charlie@example.com
            avatarUrl: avatarUrl
            name: Charlie
          committerTimestamp: 1449075830
          author:
            emailAddress: charlie@example.com
            avatarUrl: avatarUrl
            name: Charlie
          authorTimestamp: 1359075920
          id: abcdef0123abcdef4567abcdef8987abcdef6543
          displayId: abcdef0
          message: More work on feature 1
          parents:
          - id: abcdef0123abcdef4567abcdef8987abcdef6543
            displayId: abcdef0
          - id: abcdef0123abcdef4567abcdef8987abcdef6543
            displayId: abcdef0
      properties:
        latestCommit:
          $ref: "#/components/schemas/RestChangeset_toCommit"
        pomXml:
          $ref: "#/components/schemas/RestChangeset_toCommit"
        readmeMd:
          $ref: "#/components/schemas/RestChangeset_toCommit"
    ExampleMultipartFormData:
      properties:
        branch:
          description: The branch on which the <code>path</code> should be modified
            or created.
          type: string
        content:
          description: The full content of the file at <code>path</code>.
          type: string
        message:
          description: "The message associated with this change, to be used as the\
            \ commit message. Or null if the default message should be used."
          type: string
        sourceBranch:
          description: "The starting point for <code>branch</code>. If provided and\
            \ different from <code>branch</code>, <code>branch</code> will be created\
            \ as a new branch, branching off from <code>sourceBranch</code>."
          type: string
        sourceCommitId:
          description: "The commit ID of the file before it was edited, used to identify\
            \ if content has changed. Or null if this is a new file"
          type: string
      type: object
    ExamplePostMultipartFormData:
      properties:
        content:
          description: The hook script contents.
          type: string
        description:
          description: A description of the hook script (useful when querying registered
            hook scripts).
          type: string
        name:
          description: The name of the hook script (useful when querying registered
            hook scripts).
          type: string
        type:
          description: The type of hook script; supported values are "PRE" for pre-receive
            hooks and "POST" for post-receive hooks.
          type: string
      type: object
    ExamplePreviewMigration:
      example:
        repositories:
        - hierarchyId: e3c939f9ef4a7fae272e
          defaultBranch: main
          origin:
            hierarchyId: e3c939f9ef4a7fae272e
            defaultBranch: main
            description: My repo description
            project:
              public: true
              avatarUrl: avatarUrl
              scope: PROJECT
              name: My Cool Project
              description: The description for my cool project
              links: "{}"
              avatar: avatar
              id: 2
              type: NORMAL
              key: PRJ
            relatedLinks: "{}"
            statusMessage: Available
            archived: true
            partition: 3
            public: true
            scope: REPOSITORY
            name: My repo
            forkable: true
            links: "{}"
            id: 9
            scmId: git
            state: AVAILABLE
            slug: my-repo
          description: My repo description
          project:
            public: true
            avatarUrl: avatarUrl
            scope: PROJECT
            name: My Cool Project
            description: The description for my cool project
            links: "{}"
            avatar: avatar
            id: 2
            type: NORMAL
            key: PRJ
          relatedLinks: "{}"
          statusMessage: Available
          archived: true
          partition: 6
          public: true
          scope: REPOSITORY
          name: My repo
          forkable: true
          links: "{}"
          id: 0
          scmId: git
          state: AVAILABLE
          slug: my-repo
        - hierarchyId: e3c939f9ef4a7fae272e
          defaultBranch: main
          origin:
            hierarchyId: e3c939f9ef4a7fae272e
            defaultBranch: main
            description: My repo description
            project:
              public: true
              avatarUrl: avatarUrl
              scope: PROJECT
              name: My Cool Project
              description: The description for my cool project
              links: "{}"
              avatar: avatar
              id: 2
              type: NORMAL
              key: PRJ
            relatedLinks: "{}"
            statusMessage: Available
            archived: true
            partition: 3
            public: true
            scope: REPOSITORY
            name: My repo
            forkable: true
            links: "{}"
            id: 9
            scmId: git
            state: AVAILABLE
            slug: my-repo
          description: My repo description
          project:
            public: true
            avatarUrl: avatarUrl
            scope: PROJECT
            name: My Cool Project
            description: The description for my cool project
            links: "{}"
            avatar: avatar
            id: 2
            type: NORMAL
            key: PRJ
          relatedLinks: "{}"
          statusMessage: Available
          archived: true
          partition: 6
          public: true
          scope: REPOSITORY
          name: My repo
          forkable: true
          links: "{}"
          id: 0
          scmId: git
          state: AVAILABLE
          slug: my-repo
      properties:
        repositories:
          items:
            $ref: "#/components/schemas/RestRepository"
          type: array
    ExamplePutMultipartFormData:
      example:
        name: name
        description: description
        content: content
      properties:
        content:
          description: The hook script contents.
          type: string
        description:
          description: A description of the hook script (useful when querying registered
            hook scripts).
          type: string
        name:
          description: The name of the hook script (useful when querying registered
            hook scripts).
          type: string
      type: object
    ExampleRequirements:
      properties:
        count:
          example: "3"
          type: string
        enabled:
          example: true
          type: boolean
    ExampleSettings:
      example:
        stringValue: This is an arbitrary string
        booleanValue: true
        integerValue: 1
        doubleValue: 1.1
        longValue: -2147483648
      properties:
        booleanValue:
          example: true
          type: boolean
        doubleValue:
          example: 1.1
          format: double
          type: number
        integerValue:
          example: 1
          format: int32
          type: integer
        longValue:
          example: -2147483648
          format: int64
          type: integer
        stringValue:
          example: This is an arbitrary string
          type: string
    ExampleSettingsMap:
      example:
        string key: string value
        long key: 10
        boolean key: true
      properties:
        boolean key:
          example: true
          type: boolean
        long key:
          example: 10
          type: number
        string key:
          example: string value
          type: string
    ExampleSocketAddress:
      properties:
        address:
          example: node.example.com
          type: string
        port:
          example: 8230
          format: int32
          type: integer
    ExampleStatus:
      properties:
        currentNumberOfUsers:
          example: 2
          format: int32
          type: integer
        serverId:
          example: <actual server ID>
          type: string
    FileListResource: {}
    FilePart:
      properties:
        contentType:
          type: string
        formField:
          type: boolean
        inputStream:
          type: object
        name:
          type: string
        size:
          format: int64
          type: integer
        value:
          type: string
      type: object
    Group:
      properties:
        name:
          example: group_a
          type: string
    GroupAndUsers:
      example:
        users:
        - user1
        - user2
        group: group
      properties:
        group:
          example: group
          type: string
        users:
          example:
          - user1
          - user2
          items:
            type: string
          type: array
          uniqueItems: true
      required:
      - users
      type: object
    GroupPickerContext:
      example:
        itemName: group_a
        context: user_a
      properties:
        context:
          example: user_a
          type: string
        itemName:
          example: group_a
          type: string
      type: object
    OptionalBodyBeanParam:
      type: object
    RepositoryHookDetails:
      example:
        configFormKey: configFormKey
        supportedScopes:
        - GLOBAL
        - GLOBAL
        name: name
        description: description
        type: PRE_RECEIVE
        version: version
        key: key
      properties:
        configFormKey:
          type: string
        description:
          type: string
        key:
          type: string
        name:
          type: string
        supportedScopes:
          items:
            enum:
            - GLOBAL
            - PROJECT
            - REPOSITORY
            type: string
          type: array
          uniqueItems: true
        type:
          enum:
          - PRE_RECEIVE
          - PRE_PULL_REQUEST_MERGE
          - POST_RECEIVE
          type: string
        version:
          type: string
    RestAggregateRejectCounter:
      example:
        lastRejectTime: 1630041546433
        rejectCount: 5
        user:
          emailAddress: jane@example.com
          avatarUrl: avatarUrl
          displayName: Jane Citizen
          name: jcitizen
          active: true
          links: "{}"
          id: 101
          type: NORMAL
          slug: jcitizen
      properties:
        lastRejectTime:
          example: 1630041546433
          type: number
        rejectCount:
          example: 5
          format: int64
          type: integer
        user:
          $ref: "#/components/schemas/RestComment_anchor_pullRequest_author_user"
    RestAnnouncementBanner:
      example:
        audience: AUTHENTICATED
        message: message
        enabled: true
      properties:
        audience:
          enum:
          - AUTHENTICATED
          - ALL
          type: string
        enabled:
          type: boolean
        message:
          type: string
    RestApplicationProperties:
      example:
        displayName: Example.com Bitbucket
        buildDate: "1358897885952000"
        buildNumber: "20220123103656677"
        version: 2.1.0
      properties:
        buildDate:
          example: "1358897885952000"
          type: string
        buildNumber:
          example: "20220123103656677"
          type: string
        displayName:
          example: Example.com Bitbucket
          type: string
        version:
          example: 2.1.0
          type: string
    RestApplySuggestionRequest:
      example:
        commitMessage: A commit message
        commentVersion: 0
        pullRequestVersion: 1
        suggestionIndex: 2
      properties:
        commentVersion:
          example: 0
          format: int32
          type: integer
        commitMessage:
          example: A commit message
          type: string
        pullRequestVersion:
          example: 1
          format: int32
          type: integer
        suggestionIndex:
          example: 2
          format: int32
          type: integer
      type: object
    RestAttachmentMetadata:
      example:
        metadata: "{\\\"A\\\":\\\"B\\\"}"
        id: 1
        url: test.com/test
      properties:
        id:
          example: 1
          format: int64
          type: integer
        metadata:
          example: "{\\\"A\\\":\\\"B\\\"}"
          type: string
        url:
          example: test.com/test
          type: string
    RestAutoDeclineSettings:
      example:
        scope:
          resourceId: 2
          type: GLOBAL
        inactivityWeeks: 4
        enabled: true
      properties:
        enabled:
          example: true
          type: boolean
        inactivityWeeks:
          example: 4
          format: int32
          type: integer
        scope:
          $ref: "#/components/schemas/RestReviewerGroup_scope"
    RestAutoDeclineSettingsRequest:
      example:
        inactivityWeeks: 4
        enabled: true
      properties:
        enabled:
          example: true
          type: boolean
        inactivityWeeks:
          example: 4
          format: int32
          type: integer
      type: object
    RestAutoMergeProcessingResult:
      example:
        autoMergeProcessingStatus: CANCELLED
        pullRequest:
          author:
            approved: true
            role: AUTHOR
            user:
              emailAddress: jane@example.com
              avatarUrl: avatarUrl
              displayName: Jane Citizen
              name: jcitizen
              active: true
              links: "{}"
              id: 101
              type: NORMAL
              slug: jcitizen
            lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
            status: UNAPPROVED
          description: "It is a kludge, but put the tuple from the database in the\
            \ cache."
          updatedDate: 14490759200
          htmlDescription: htmlDescription
          title: Talking Nerdy
          reviewers:
          - approved: true
            role: AUTHOR
            user:
              emailAddress: jane@example.com
              avatarUrl: avatarUrl
              displayName: Jane Citizen
              name: jcitizen
              active: true
              links: "{}"
              id: 101
              type: NORMAL
              slug: jcitizen
            lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
            status: UNAPPROVED
          - approved: true
            role: AUTHOR
            user:
              emailAddress: jane@example.com
              avatarUrl: avatarUrl
              displayName: Jane Citizen
              name: jcitizen
              active: true
              links: "{}"
              id: 101
              type: NORMAL
              slug: jcitizen
            lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
            status: UNAPPROVED
          version: 0
          toRef:
            latestCommit: babecafebabecafebabecafebabecafebabecafe
            id: refs/heads/feature-ABC-123
            displayId: feature-ABC-1233
            repository:
              hierarchyId: e3c939f9ef4a7fae272e
              defaultBranch: main
              origin:
                hierarchyId: e3c939f9ef4a7fae272e
                defaultBranch: main
                description: My repo description
                project:
                  public: true
                  avatarUrl: avatarUrl
                  scope: PROJECT
                  name: My Cool Project
                  description: The description for my cool project
                  links: "{}"
                  avatar: avatar
                  id: 2
                  type: NORMAL
                  key: PRJ
                relatedLinks: "{}"
                statusMessage: Available
                archived: true
                partition: 3
                public: true
                scope: REPOSITORY
                name: My repo
                forkable: true
                links: "{}"
                id: 9
                scmId: git
                state: AVAILABLE
                slug: my-repo
              description: My repo description
              project:
                public: true
                avatarUrl: avatarUrl
                scope: PROJECT
                name: My Cool Project
                description: The description for my cool project
                links: "{}"
                avatar: avatar
                id: 2
                type: NORMAL
                key: PRJ
              relatedLinks: "{}"
              statusMessage: Available
              archived: true
              partition: 4
              public: true
              scope: REPOSITORY
              name: My repo
              forkable: true
              links: "{}"
              id: 7
              scmId: git
              state: AVAILABLE
              slug: my-repo
            type: BRANCH
          descriptionAsHtml: descriptionAsHtml
          createdDate: 13590759200
          closedDate: 19990759200
          draft: true
          closed: true
          fromRef:
            latestCommit: babecafebabecafebabecafebabecafebabecafe
            id: refs/heads/feature-ABC-123
            displayId: feature-ABC-1233
            repository:
              hierarchyId: e3c939f9ef4a7fae272e
              defaultBranch: main
              origin:
                hierarchyId: e3c939f9ef4a7fae272e
                defaultBranch: main
                description: My repo description
                project:
                  public: true
                  avatarUrl: avatarUrl
                  scope: PROJECT
                  name: My Cool Project
                  description: The description for my cool project
                  links: "{}"
                  avatar: avatar
                  id: 2
                  type: NORMAL
                  key: PRJ
                relatedLinks: "{}"
                statusMessage: Available
                archived: true
                partition: 3
                public: true
                scope: REPOSITORY
                name: My repo
                forkable: true
                links: "{}"
                id: 9
                scmId: git
                state: AVAILABLE
                slug: my-repo
              description: My repo description
              project:
                public: true
                avatarUrl: avatarUrl
                scope: PROJECT
                name: My Cool Project
                description: The description for my cool project
                links: "{}"
                avatar: avatar
                id: 2
                type: NORMAL
                key: PRJ
              relatedLinks: "{}"
              statusMessage: Available
              archived: true
              partition: 4
              public: true
              scope: REPOSITORY
              name: My repo
              forkable: true
              links: "{}"
              id: 7
              scmId: git
              state: AVAILABLE
              slug: my-repo
            type: BRANCH
          links: "{}"
          id: 1
          state: DECLINED
          locked: true
          open: true
          participants:
          - approved: true
            role: AUTHOR
            user:
              emailAddress: jane@example.com
              avatarUrl: avatarUrl
              displayName: Jane Citizen
              name: jcitizen
              active: true
              links: "{}"
              id: 101
              type: NORMAL
              slug: jcitizen
            lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
            status: UNAPPROVED
          - approved: true
            role: AUTHOR
            user:
              emailAddress: jane@example.com
              avatarUrl: avatarUrl
              displayName: Jane Citizen
              name: jcitizen
              active: true
              links: "{}"
              id: 101
              type: NORMAL
              slug: jcitizen
            lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
            status: UNAPPROVED
      properties:
        autoMergeProcessingStatus:
          enum:
          - CANCELLED
          - VETOED
          - STALE
          - MERGED
          - LOCK_FAILURE
          - UNKNOWN
          example: CANCELLED
          type: string
        pullRequest:
          $ref: "#/components/schemas/RestAutoMergeProcessingResult_pullRequest"
    RestAutoMergeProjectSettingsRequest:
      example:
        restrictionAction: CREATE
        enabled: false
      properties:
        enabled:
          example: false
          type: boolean
        restrictionAction:
          enum:
          - CREATE
          - DELETE
          - NONE
          example: CREATE
          type: string
      type: object
    RestAutoMergeRequest:
      example:
        fromHash: babecafebabecafebabecafebabecafebabecafe
        createdDate: 13590759200
        strategyId: (Optional) squash
        message: (Optional) A descriptive message for the merge commit
        toRefId: refs/heads/feature-ABC-123
        autoSubject: true
      properties:
        autoSubject:
          example: true
          type: boolean
        createdDate:
          example: 13590759200
          format: int64
          type: integer
        fromHash:
          example: babecafebabecafebabecafebabecafebabecafe
          type: string
        message:
          example: (Optional) A descriptive message for the merge commit
          type: string
        strategyId:
          example: (Optional) squash
          type: string
        toRefId:
          example: refs/heads/feature-ABC-123
          type: string
    RestAutoMergeRestrictedSettings:
      example:
        restrictionState: NONE
        scope:
          resourceId: 2
          type: GLOBAL
        enabled: false
      properties:
        enabled:
          example: false
          type: boolean
        restrictionState:
          description: The restriction state of this scope's project.
          enum:
          - NONE
          - RESTRICTED_UNMODIFIABLE
          - RESTRICTED_MODIFIABLE
          type: string
        scope:
          $ref: "#/components/schemas/RestAutoMergeRestrictedSettings_scope"
    RestAutoMergeSettingsRequest:
      example:
        enabled: false
      properties:
        enabled:
          example: false
          type: boolean
      type: object
    RestBitbucketLicense:
      example:
        purchaseDate: 1331038800000
        maintenanceExpiryDate: 1372493732817
        numberOfDaysBeforeGracePeriodExpiry: 1
        daysBeforeExpiry: 0
        supportEntitlementNumber: <support entitlement number embedded in license>
        numberOfDaysBeforeMaintenanceExpiry: 5
        creationDate: 1331038800000
        gracePeriodEndDate: 1372493732817
        serverId: <server ID embedded in license>
        expiryDate: 1372493732817
        license: <encoded license text>
        unlimitedNumberOfUsers: true
        numberOfDaysBeforeExpiry: 6
        maximumNumberOfUsers: 12
        status:
          serverId: <actual server ID>
          currentNumberOfUsers: 2
      properties:
        creationDate:
          example: 1331038800000
          format: int64
          readOnly: true
          type: integer
        daysBeforeExpiry:
          format: int32
          readOnly: true
          type: integer
        expiryDate:
          example: 1372493732817
          format: int64
          readOnly: true
          type: integer
        gracePeriodEndDate:
          example: 1372493732817
          format: int64
          readOnly: true
          type: integer
        license:
          example: <encoded license text>
          type: string
        maintenanceExpiryDate:
          example: 1372493732817
          format: int64
          readOnly: true
          type: integer
        maximumNumberOfUsers:
          example: 12
          format: int32
          readOnly: true
          type: integer
        numberOfDaysBeforeExpiry:
          format: int32
          readOnly: true
          type: integer
        numberOfDaysBeforeGracePeriodExpiry:
          format: int32
          readOnly: true
          type: integer
        numberOfDaysBeforeMaintenanceExpiry:
          format: int32
          readOnly: true
          type: integer
        purchaseDate:
          example: 1331038800000
          format: int64
          readOnly: true
          type: integer
        serverId:
          example: <server ID embedded in license>
          readOnly: true
          type: string
        status:
          $ref: "#/components/schemas/RestBitbucketLicense_status"
        supportEntitlementNumber:
          example: <support entitlement number embedded in license>
          readOnly: true
          type: string
        unlimitedNumberOfUsers:
          readOnly: true
          type: boolean
    RestBuildCapabilities:
      example:
        buildStatus:
        - richBuildStatus
        - richBuildStatus
      properties:
        buildStatus:
          items:
            example: richBuildStatus
            type: string
          type: array
    RestBuildStatusSetRequest:
      example:
        duration: 1500000
        testResults:
          failed: 1
          skipped: 5
          successful: 134
        lastUpdated: 1359075920
        parent: TEST-REP
        ref: refs/heads/master
        name: Database Matrix Tests
        description: Unit test build
        state: CANCELLED
        buildNumber: "3"
        key: TEST-REP123
        url: https://bamboo.example.com/browse/TEST-REP1-3
      properties:
        buildNumber:
          example: "3"
          maxLength: 255
          minLength: 0
          type: string
        description:
          example: Unit test build
          type: string
        duration:
          example: 1500000
          format: int64
          type: integer
        key:
          example: TEST-REP123
          maxLength: 255
          minLength: 0
          type: string
        lastUpdated:
          example: 1359075920
          format: int64
          type: integer
        name:
          example: Database Matrix Tests
          maxLength: 255
          minLength: 0
          type: string
        parent:
          example: TEST-REP
          maxLength: 1024
          minLength: 0
          type: string
        ref:
          example: refs/heads/master
          maxLength: 1024
          minLength: 0
          pattern: ^refs\/.*
          type: string
        state:
          enum:
          - CANCELLED
          - FAILED
          - INPROGRESS
          - SUCCESSFUL
          - UNKNOWN
          type: string
        testResults:
          $ref: "#/components/schemas/RestBuildStatus_testResults"
        url:
          example: https://bamboo.example.com/browse/TEST-REP1-3
          maxLength: 450
          minLength: 0
          type: string
      required:
      - key
      - state
      - url
      type: object
    RestBulkUserRateLimitSettingsUpdateRequest:
      example:
        settings:
          fillRate: 5
          capacity: 60
        usernames:
        - usernames
        - usernames
        whitelisted: true
      properties:
        settings:
          $ref: "#/components/schemas/RestBulkUserRateLimitSettingsUpdateRequest_settings"
        usernames:
          items:
            type: string
          type: array
          uniqueItems: true
        whitelisted:
          type: boolean
      type: object
    RestChange:
      example:
        path:
          parent: path/to
          components:
          - path
          - to
          - file.txt
          extension: txt
          name: file.txt
        srcExecutable: true
        fromContentId: bcdef0123abcdef4567abcdef8987abcdef6543a
        srcPath:
          parent: path/to
          components:
          - path
          - to
          - file.txt
          extension: txt
          name: file.txt
        contentId: abcdef0123abcdef4567abcdef8987abcdef6543
        links: "{}"
        nodeType: DIRECTORY
        type: ADD
        executable: true
        conflict:
          ourChange:
            path:
              parent: path/to
              components:
              - path
              - to
              - file.txt
              extension: txt
              name: file.txt
            srcPath:
              parent: path/to
              components:
              - path
              - to
              - file.txt
              extension: txt
              name: file.txt
            type: ADD
          theirChange:
            path:
              parent: path/to
              components:
              - path
              - to
              - file.txt
              extension: txt
              name: file.txt
            srcPath:
              parent: path/to
              components:
              - path
              - to
              - file.txt
              extension: txt
              name: file.txt
            type: ADD
        percentUnchanged: 98
      properties:
        conflict:
          $ref: "#/components/schemas/RestChange_conflict"
        contentId:
          example: abcdef0123abcdef4567abcdef8987abcdef6543
          type: string
        executable:
          type: boolean
        fromContentId:
          example: bcdef0123abcdef4567abcdef8987abcdef6543a
          type: string
        links:
          properties: {}
          type: object
          writeOnly: true
        nodeType:
          enum:
          - DIRECTORY
          - FILE
          - SUBMODULE
          type: string
        path:
          $ref: "#/components/schemas/RestComment_anchor_path"
        percentUnchanged:
          example: 98
          format: int32
          type: integer
        srcExecutable:
          type: boolean
        srcPath:
          $ref: "#/components/schemas/RestComment_anchor_path"
        type:
          enum:
          - ADD
          - COPY
          - DELETE
          - MODIFY
          - MOVE
          - UNKNOWN
          type: string
    RestClusterInformation:
      example:
        running: true
        nodes:
        - buildVersion: 7.0.0
          address:
            address: node.example.com
            port: 8230
          name: foo
          id: d4fde8b1-2504-4998-a0ba-14fbe98edd4d
          local: true
        - buildVersion: 7.0.0
          address:
            address: node.example.com
            port: 8230
          name: foo
          id: d4fde8b1-2504-4998-a0ba-14fbe98edd4d
          local: true
        localNode:
          buildVersion: 7.0.0
          address:
            address: node.example.com
            port: 8230
          name: foo
          id: d4fde8b1-2504-4998-a0ba-14fbe98edd4d
          local: true
      properties:
        localNode:
          $ref: "#/components/schemas/RestClusterInformation_localNode"
        nodes:
          items:
            $ref: "#/components/schemas/RestClusterNode"
          type: array
        running:
          type: boolean
    RestCommitMessageSuggestion:
      example:
        body: Merge in PROJECT_1/repo_1 from feature/feature-2 to main
        title: "Pull request #2: add new feature"
      properties:
        body:
          example: Merge in PROJECT_1/repo_1 from feature/feature-2 to main
          type: string
        title:
          example: "Pull request #2: add new feature"
          type: string
    RestConflict:
      properties:
        ourChange:
          $ref: "#/components/schemas/RestChange_conflict_ourChange"
        theirChange:
          $ref: "#/components/schemas/RestChange_conflict_ourChange"
    RestConflictChange:
      properties:
        path:
          $ref: "#/components/schemas/RestComment_anchor_path"
        srcPath:
          $ref: "#/components/schemas/RestComment_anchor_path"
        type:
          enum:
          - ADD
          - COPY
          - DELETE
          - MODIFY
          - MOVE
          - UNKNOWN
          type: string
    RestConnectivitySummary:
      properties:
        errorMessage:
          example: Unable to connect to the node.
          type: string
        reachable:
          example: true
          type: boolean
        roundTripTime:
          example: 100
          format: int64
          type: integer
    RestCreateBranchRequest:
      example:
        name: my-branch-or-tag
        startPoint: 8d351a10fb428c0c1239530256e21cf24f136e73
        message: This is my branch or tag
      properties:
        message:
          example: This is my branch or tag
          type: string
        name:
          example: my-branch-or-tag
          type: string
        startPoint:
          example: 8d351a10fb428c0c1239530256e21cf24f136e73
          type: string
      type: object
    RestCreateTagRequest:
      example:
        name: my-branch-or-tag
        startPoint: 8d351a10fb428c0c1239530256e21cf24f136e73
        message: This is my branch or tag
      properties:
        message:
          example: This is my branch or tag
          type: string
        name:
          example: my-branch-or-tag
          type: string
        startPoint:
          example: 8d351a10fb428c0c1239530256e21cf24f136e73
          type: string
      type: object
    RestDefaultBranch:
      properties:
        id:
          type: string
      type: object
    RestDeployment:
      example:
        lastUpdated: 1449075920
        environment:
          displayName: US East Mirror
          type: production
          key: us-east-mirror
          url: https://foo-bar.production/us-east
        toCommit:
          id: abcdef0123abcdef4567abcdef8987abcdef6543
          displayId: abcdef0
        displayName: US East Mirror
        deploymentSequenceNumber: 5
        description: Production and mirror environments
        fromCommit:
          id: abcdef0123abcdef4567abcdef8987abcdef6543
          displayId: abcdef0
        state: PENDING
        repository:
          hierarchyId: e3c939f9ef4a7fae272e
          defaultBranch: main
          origin:
            hierarchyId: e3c939f9ef4a7fae272e
            defaultBranch: main
            description: My repo description
            project:
              public: true
              avatarUrl: avatarUrl
              scope: PROJECT
              name: My Cool Project
              description: The description for my cool project
              links: "{}"
              avatar: avatar
              id: 2
              type: NORMAL
              key: PRJ
            relatedLinks: "{}"
            statusMessage: Available
            archived: true
            partition: 3
            public: true
            scope: REPOSITORY
            name: My repo
            forkable: true
            links: "{}"
            id: 9
            scmId: git
            state: AVAILABLE
            slug: my-repo
          description: My repo description
          project:
            public: true
            avatarUrl: avatarUrl
            scope: PROJECT
            name: My Cool Project
            description: The description for my cool project
            links: "{}"
            avatar: avatar
            id: 2
            type: NORMAL
            key: PRJ
          relatedLinks: "{}"
          statusMessage: Available
          archived: true
          partition: 4
          public: true
          scope: REPOSITORY
          name: My repo
          forkable: true
          links: "{}"
          id: 7
          scmId: git
          state: AVAILABLE
          slug: my-repo
        key: PROD-MIR
        url: http://example.ci.org/projects/PROJ/deploy/mirror-deploy/100
      properties:
        deploymentSequenceNumber:
          example: 5
          format: int64
          type: integer
        description:
          example: Production and mirror environments
          type: string
        displayName:
          example: US East Mirror
          type: string
        environment:
          $ref: "#/components/schemas/RestDeployment_environment"
        fromCommit:
          $ref: "#/components/schemas/RestChangeset_fromCommit"
        key:
          example: PROD-MIR
          type: string
        lastUpdated:
          example: 1449075920
          format: int64
          type: integer
        repository:
          $ref: "#/components/schemas/RestChangeset_repository"
        state:
          enum:
          - PENDING
          - IN_PROGRESS
          - CANCELLED
          - FAILED
          - ROLLED_BACK
          - SUCCESSFUL
          - UNKNOWN
          type: string
        toCommit:
          $ref: "#/components/schemas/RestChangeset_fromCommit"
        url:
          example: http://example.ci.org/projects/PROJ/deploy/mirror-deploy/100
          type: string
    RestDeploymentEnvironment:
      example:
        displayName: US East Mirror
        type: production
        key: us-east-mirror
        url: https://foo-bar.production/us-east
      properties:
        displayName:
          example: US East Mirror
          maxLength: 255
          minLength: 0
          type: string
        key:
          example: us-east-mirror
          maxLength: 255
          minLength: 0
          type: string
        type:
          example: production
          pattern: DEVELOPMENT|TESTING|STAGING|PRODUCTION
          type: string
        url:
          example: https://foo-bar.production/us-east
          maxLength: 1024
          minLength: 0
          type: string
    RestDeploymentSetRequest:
      example:
        lastUpdated: 1359075920
        environment:
          displayName: US East Mirror
          type: production
          key: us-east-mirror
          url: https://foo-bar.production/us-east
        displayName: US East marketing website production
        deploymentSequenceNumber: 2
        description: 2nd deployment of commit 44bca31f4be to US East production
        state: SUCCESSFUL
        key: marketing-us-prod
        url: https://my-dep-tool/marketing-us-prod/2
      properties:
        deploymentSequenceNumber:
          example: 2
          format: int64
          type: integer
        description:
          example: 2nd deployment of commit 44bca31f4be to US East production
          maxLength: 255
          minLength: 0
          type: string
        displayName:
          example: US East marketing website production
          maxLength: 255
          minLength: 0
          type: string
        environment:
          $ref: "#/components/schemas/RestDeploymentEnvironment"
        key:
          example: marketing-us-prod
          maxLength: 255
          minLength: 0
          type: string
        lastUpdated:
          example: 1359075920
          format: int64
          minimum: 0
          type: integer
        state:
          enum:
          - PENDING
          - IN_PROGRESS
          - CANCELLED
          - FAILED
          - ROLLED_BACK
          - SUCCESSFUL
          - UNKNOWN
          example: SUCCESSFUL
          type: string
        url:
          example: https://my-dep-tool/marketing-us-prod/2
          maxLength: 1024
          minLength: 0
          type: string
      required:
      - deploymentSequenceNumber
      - description
      - displayName
      - environment
      - key
      - state
      - url
      type: object
    RestDetailedGroup:
      example:
        deletable: true
        name: group-a
      properties:
        deletable:
          type: boolean
        name:
          example: group-a
          type: string
    RestDetailedInvocation:
      example:
        duration: 0
        result: "{}"
        eventScope:
          id: id
          type: type
        request: "{}"
        start: 5
        finish: 6
        id: 1
        event: event
      properties:
        duration:
          format: int32
          type: integer
        event:
          type: string
        eventScope:
          $ref: "#/components/schemas/RestDetailedInvocation_eventScope"
        finish:
          format: int32
          type: integer
        id:
          format: int32
          type: integer
        request:
          properties: {}
          type: object
        result:
          properties: {}
          type: object
        start:
          format: int32
          type: integer
    RestDetailedUser:
      example:
        mutableGroups: true
        avatarUrl: avatarUrl
        displayName: Jane Citizen
        createdTimestamp: 1368145580548
        mutableDetails: true
        deletable: true
        active: true
        type: NORMAL
        emailAddress: jane@example.com
        lastAuthenticationTimestamp: 1368145580548
        name: jcitizen
        links: "{}"
        id: 101
        directoryName: Bitbucket Internal Directory
        slug: jcitizen
      properties:
        active:
          type: boolean
        avatarUrl:
          type: string
          writeOnly: true
        createdTimestamp:
          example: 1368145580548
          type: number
        deletable:
          type: boolean
        directoryName:
          example: Bitbucket Internal Directory
          type: string
        displayName:
          example: Jane Citizen
          type: string
        emailAddress:
          example: jane@example.com
          type: string
        id:
          example: 101
          format: int32
          readOnly: true
          type: integer
        lastAuthenticationTimestamp:
          example: 1368145580548
          type: number
        links:
          properties: {}
          type: object
          writeOnly: true
        mutableDetails:
          type: boolean
        mutableGroups:
          type: boolean
        name:
          example: jcitizen
          type: string
        slug:
          example: jcitizen
          type: string
        type:
          enum:
          - NORMAL
          - SERVICE
          type: string
    RestDiff:
      example:
        binary: true
        lineComments:
        - severity: NORMAL
          parent:
            severity: NORMAL
            resolver:
              emailAddress: jane@example.com
              avatarUrl: avatarUrl
              displayName: Jane Citizen
              name: jcitizen
              active: true
              links: "{}"
              id: 101
              type: NORMAL
              slug: jcitizen
            comments:
            - null
            - null
            threadResolved: true
            author:
              emailAddress: jane@example.com
              avatarUrl: avatarUrl
              displayName: Jane Citizen
              name: jcitizen
              active: true
              links: "{}"
              id: 101
              type: NORMAL
              slug: jcitizen
            pending: true
            anchored: true
            updatedDate: 1449075920
            version: 1
            threadResolvedDate: 1569075920
            threadResolver:
              emailAddress: jane@example.com
              avatarUrl: avatarUrl
              displayName: Jane Citizen
              name: jcitizen
              active: true
              links: "{}"
              id: 101
              type: NORMAL
              slug: jcitizen
            createdDate: 1359075920
            anchor:
              multilineSpan:
                srcSpanEnd: 2
                dstSpanStart: 2
                dstSpanEnd: 3
                srcSpanStart: 1
              path:
                parent: path/to
                components:
                - path
                - to
                - file.txt
                extension: txt
                name: file.txt
              fromHash: 62a0505e8204115b8b9c8a95bfa264a8c0896a93
              line: 98
              multilineMarker:
                startLine: 5
                startLineType: ADDED
              lineType: ADDED
              srcPath:
                parent: path/to
                components:
                - path
                - to
                - file.txt
                extension: txt
                name: file.txt
              diffType: COMMIT
              toHash: 3cdd5d19178a54d2e51b5098d43b57571241d0ab
              fileType: FROM
              pullRequest:
                author:
                  approved: true
                  role: AUTHOR
                  user:
                    emailAddress: jane@example.com
                    avatarUrl: avatarUrl
                    displayName: Jane Citizen
                    name: jcitizen
                    active: true
                    links: "{}"
                    id: 101
                    type: NORMAL
                    slug: jcitizen
                  lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
                  status: UNAPPROVED
                description: "It is a kludge, but put the tuple from the database\
                  \ in the cache."
                updatedDate: 14490759200
                htmlDescription: htmlDescription
                title: Talking Nerdy
                reviewers:
                - approved: true
                  role: AUTHOR
                  user:
                    emailAddress: jane@example.com
                    avatarUrl: avatarUrl
                    displayName: Jane Citizen
                    name: jcitizen
                    active: true
                    links: "{}"
                    id: 101
                    type: NORMAL
                    slug: jcitizen
                  lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
                  status: UNAPPROVED
                - approved: true
                  role: AUTHOR
                  user:
                    emailAddress: jane@example.com
                    avatarUrl: avatarUrl
                    displayName: Jane Citizen
                    name: jcitizen
                    active: true
                    links: "{}"
                    id: 101
                    type: NORMAL
                    slug: jcitizen
                  lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
                  status: UNAPPROVED
                version: 0
                toRef:
                  latestCommit: babecafebabecafebabecafebabecafebabecafe
                  id: refs/heads/feature-ABC-123
                  displayId: feature-ABC-1233
                  repository:
                    hierarchyId: e3c939f9ef4a7fae272e
                    defaultBranch: main
                    origin:
                      hierarchyId: e3c939f9ef4a7fae272e
                      defaultBranch: main
                      description: My repo description
                      project:
                        public: true
                        avatarUrl: avatarUrl
                        scope: PROJECT
                        name: My Cool Project
                        description: The description for my cool project
                        links: "{}"
                        avatar: avatar
                        id: 2
                        type: NORMAL
                        key: PRJ
                      relatedLinks: "{}"
                      statusMessage: Available
                      archived: true
                      partition: 3
                      public: true
                      scope: REPOSITORY
                      name: My repo
                      forkable: true
                      links: "{}"
                      id: 9
                      scmId: git
                      state: AVAILABLE
                      slug: my-repo
                    description: My repo description
                    project:
                      public: true
                      avatarUrl: avatarUrl
                      scope: PROJECT
                      name: My Cool Project
                      description: The description for my cool project
                      links: "{}"
                      avatar: avatar
                      id: 2
                      type: NORMAL
                      key: PRJ
                    relatedLinks: "{}"
                    statusMessage: Available
                    archived: true
                    partition: 4
                    public: true
                    scope: REPOSITORY
                    name: My repo
                    forkable: true
                    links: "{}"
                    id: 7
                    scmId: git
                    state: AVAILABLE
                    slug: my-repo
                  type: BRANCH
                descriptionAsHtml: descriptionAsHtml
                createdDate: 13590759200
                closedDate: 19990759200
                draft: true
                closed: true
                fromRef:
                  latestCommit: babecafebabecafebabecafebabecafebabecafe
                  id: refs/heads/feature-ABC-123
                  displayId: feature-ABC-1233
                  repository:
                    hierarchyId: e3c939f9ef4a7fae272e
                    defaultBranch: main
                    origin:
                      hierarchyId: e3c939f9ef4a7fae272e
                      defaultBranch: main
                      description: My repo description
                      project:
                        public: true
                        avatarUrl: avatarUrl
                        scope: PROJECT
                        name: My Cool Project
                        description: The description for my cool project
                        links: "{}"
                        avatar: avatar
                        id: 2
                        type: NORMAL
                        key: PRJ
                      relatedLinks: "{}"
                      statusMessage: Available
                      archived: true
                      partition: 3
                      public: true
                      scope: REPOSITORY
                      name: My repo
                      forkable: true
                      links: "{}"
                      id: 9
                      scmId: git
                      state: AVAILABLE
                      slug: my-repo
                    description: My repo description
                    project:
                      public: true
                      avatarUrl: avatarUrl
                      scope: PROJECT
                      name: My Cool Project
                      description: The description for my cool project
                      links: "{}"
                      avatar: avatar
                      id: 2
                      type: NORMAL
                      key: PRJ
                    relatedLinks: "{}"
                    statusMessage: Available
                    archived: true
                    partition: 4
                    public: true
                    scope: REPOSITORY
                    name: My repo
                    forkable: true
                    links: "{}"
                    id: 7
                    scmId: git
                    state: AVAILABLE
                    slug: my-repo
                  type: BRANCH
                links: "{}"
                id: 1
                state: DECLINED
                locked: true
                open: true
                participants:
                - approved: true
                  role: AUTHOR
                  user:
                    emailAddress: jane@example.com
                    avatarUrl: avatarUrl
                    displayName: Jane Citizen
                    name: jcitizen
                    active: true
                    links: "{}"
                    id: 101
                    type: NORMAL
                    slug: jcitizen
                  lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
                  status: UNAPPROVED
                - approved: true
                  role: AUTHOR
                  user:
                    emailAddress: jane@example.com
                    avatarUrl: avatarUrl
                    displayName: Jane Citizen
                    name: jcitizen
                    active: true
                    links: "{}"
                    id: 101
                    type: NORMAL
                    slug: jcitizen
                  lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
                  status: UNAPPROVED
            html: html
            id: 1
            state: OPEN
            text: An insightful comment.
            reply: true
            properties: "{}"
            resolvedDate: 1239075920
          resolver:
            emailAddress: jane@example.com
            avatarUrl: avatarUrl
            displayName: Jane Citizen
            name: jcitizen
            active: true
            links: "{}"
            id: 101
            type: NORMAL
            slug: jcitizen
          comments:
          - null
          - null
          threadResolved: true
          author:
            emailAddress: jane@example.com
            avatarUrl: avatarUrl
            displayName: Jane Citizen
            name: jcitizen
            active: true
            links: "{}"
            id: 101
            type: NORMAL
            slug: jcitizen
          pending: true
          anchored: true
          updatedDate: 1449075920
          version: 1
          threadResolvedDate: 1569075920
          threadResolver:
            emailAddress: jane@example.com
            avatarUrl: avatarUrl
            displayName: Jane Citizen
            name: jcitizen
            active: true
            links: "{}"
            id: 101
            type: NORMAL
            slug: jcitizen
          createdDate: 1359075920
          anchor:
            multilineSpan:
              srcSpanEnd: 2
              dstSpanStart: 2
              dstSpanEnd: 3
              srcSpanStart: 1
            path:
              parent: path/to
              components:
              - path
              - to
              - file.txt
              extension: txt
              name: file.txt
            fromHash: 62a0505e8204115b8b9c8a95bfa264a8c0896a93
            line: 98
            multilineMarker:
              startLine: 5
              startLineType: ADDED
            lineType: ADDED
            srcPath:
              parent: path/to
              components:
              - path
              - to
              - file.txt
              extension: txt
              name: file.txt
            diffType: COMMIT
            toHash: 3cdd5d19178a54d2e51b5098d43b57571241d0ab
            fileType: FROM
            pullRequest:
              author:
                approved: true
                role: AUTHOR
                user:
                  emailAddress: jane@example.com
                  avatarUrl: avatarUrl
                  displayName: Jane Citizen
                  name: jcitizen
                  active: true
                  links: "{}"
                  id: 101
                  type: NORMAL
                  slug: jcitizen
                lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
                status: UNAPPROVED
              description: "It is a kludge, but put the tuple from the database in\
                \ the cache."
              updatedDate: 14490759200
              htmlDescription: htmlDescription
              title: Talking Nerdy
              reviewers:
              - approved: true
                role: AUTHOR
                user:
                  emailAddress: jane@example.com
                  avatarUrl: avatarUrl
                  displayName: Jane Citizen
                  name: jcitizen
                  active: true
                  links: "{}"
                  id: 101
                  type: NORMAL
                  slug: jcitizen
                lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
                status: UNAPPROVED
              - approved: true
                role: AUTHOR
                user:
                  emailAddress: jane@example.com
                  avatarUrl: avatarUrl
                  displayName: Jane Citizen
                  name: jcitizen
                  active: true
                  links: "{}"
                  id: 101
                  type: NORMAL
                  slug: jcitizen
                lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
                status: UNAPPROVED
              version: 0
              toRef:
                latestCommit: babecafebabecafebabecafebabecafebabecafe
                id: refs/heads/feature-ABC-123
                displayId: feature-ABC-1233
                repository:
                  hierarchyId: e3c939f9ef4a7fae272e
                  defaultBranch: main
                  origin:
                    hierarchyId: e3c939f9ef4a7fae272e
                    defaultBranch: main
                    description: My repo description
                    project:
                      public: true
                      avatarUrl: avatarUrl
                      scope: PROJECT
                      name: My Cool Project
                      description: The description for my cool project
                      links: "{}"
                      avatar: avatar
                      id: 2
                      type: NORMAL
                      key: PRJ
                    relatedLinks: "{}"
                    statusMessage: Available
                    archived: true
                    partition: 3
                    public: true
                    scope: REPOSITORY
                    name: My repo
                    forkable: true
                    links: "{}"
                    id: 9
                    scmId: git
                    state: AVAILABLE
                    slug: my-repo
                  description: My repo description
                  project:
                    public: true
                    avatarUrl: avatarUrl
                    scope: PROJECT
                    name: My Cool Project
                    description: The description for my cool project
                    links: "{}"
                    avatar: avatar
                    id: 2
                    type: NORMAL
                    key: PRJ
                  relatedLinks: "{}"
                  statusMessage: Available
                  archived: true
                  partition: 4
                  public: true
                  scope: REPOSITORY
                  name: My repo
                  forkable: true
                  links: "{}"
                  id: 7
                  scmId: git
                  state: AVAILABLE
                  slug: my-repo
                type: BRANCH
              descriptionAsHtml: descriptionAsHtml
              createdDate: 13590759200
              closedDate: 19990759200
              draft: true
              closed: true
              fromRef:
                latestCommit: babecafebabecafebabecafebabecafebabecafe
                id: refs/heads/feature-ABC-123
                displayId: feature-ABC-1233
                repository:
                  hierarchyId: e3c939f9ef4a7fae272e
                  defaultBranch: main
                  origin:
                    hierarchyId: e3c939f9ef4a7fae272e
                    defaultBranch: main
                    description: My repo description
                    project:
                      public: true
                      avatarUrl: avatarUrl
                      scope: PROJECT
                      name: My Cool Project
                      description: The description for my cool project
                      links: "{}"
                      avatar: avatar
                      id: 2
                      type: NORMAL
                      key: PRJ
                    relatedLinks: "{}"
                    statusMessage: Available
                    archived: true
                    partition: 3
                    public: true
                    scope: REPOSITORY
                    name: My repo
                    forkable: true
                    links: "{}"
                    id: 9
                    scmId: git
                    state: AVAILABLE
                    slug: my-repo
                  description: My repo description
                  project:
                    public: true
                    avatarUrl: avatarUrl
                    scope: PROJECT
                    name: My Cool Project
                    description: The description for my cool project
                    links: "{}"
                    avatar: avatar
                    id: 2
                    type: NORMAL
                    key: PRJ
                  relatedLinks: "{}"
                  statusMessage: Available
                  archived: true
                  partition: 4
                  public: true
                  scope: REPOSITORY
                  name: My repo
                  forkable: true
                  links: "{}"
                  id: 7
                  scmId: git
                  state: AVAILABLE
                  slug: my-repo
                type: BRANCH
              links: "{}"
              id: 1
              state: DECLINED
              locked: true
              open: true
              participants:
              - approved: true
                role: AUTHOR
                user:
                  emailAddress: jane@example.com
                  avatarUrl: avatarUrl
                  displayName: Jane Citizen
                  name: jcitizen
                  active: true
                  links: "{}"
                  id: 101
                  type: NORMAL
                  slug: jcitizen
                lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
                status: UNAPPROVED
              - approved: true
                role: AUTHOR
                user:
                  emailAddress: jane@example.com
                  avatarUrl: avatarUrl
                  displayName: Jane Citizen
                  name: jcitizen
                  active: true
                  links: "{}"
                  id: 101
                  type: NORMAL
                  slug: jcitizen
                lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
                status: UNAPPROVED
          html: html
          id: 1
          state: OPEN
          text: An insightful comment.
          reply: true
          properties: "{}"
          resolvedDate: 1239075920
        - severity: NORMAL
          parent:
            severity: NORMAL
            resolver:
              emailAddress: jane@example.com
              avatarUrl: avatarUrl
              displayName: Jane Citizen
              name: jcitizen
              active: true
              links: "{}"
              id: 101
              type: NORMAL
              slug: jcitizen
            comments:
            - null
            - null
            threadResolved: true
            author:
              emailAddress: jane@example.com
              avatarUrl: avatarUrl
              displayName: Jane Citizen
              name: jcitizen
              active: true
              links: "{}"
              id: 101
              type: NORMAL
              slug: jcitizen
            pending: true
            anchored: true
            updatedDate: 1449075920
            version: 1
            threadResolvedDate: 1569075920
            threadResolver:
              emailAddress: jane@example.com
              avatarUrl: avatarUrl
              displayName: Jane Citizen
              name: jcitizen
              active: true
              links: "{}"
              id: 101
              type: NORMAL
              slug: jcitizen
            createdDate: 1359075920
            anchor:
              multilineSpan:
                srcSpanEnd: 2
                dstSpanStart: 2
                dstSpanEnd: 3
                srcSpanStart: 1
              path:
                parent: path/to
                components:
                - path
                - to
                - file.txt
                extension: txt
                name: file.txt
              fromHash: 62a0505e8204115b8b9c8a95bfa264a8c0896a93
              line: 98
              multilineMarker:
                startLine: 5
                startLineType: ADDED
              lineType: ADDED
              srcPath:
                parent: path/to
                components:
                - path
                - to
                - file.txt
                extension: txt
                name: file.txt
              diffType: COMMIT
              toHash: 3cdd5d19178a54d2e51b5098d43b57571241d0ab
              fileType: FROM
              pullRequest:
                author:
                  approved: true
                  role: AUTHOR
                  user:
                    emailAddress: jane@example.com
                    avatarUrl: avatarUrl
                    displayName: Jane Citizen
                    name: jcitizen
                    active: true
                    links: "{}"
                    id: 101
                    type: NORMAL
                    slug: jcitizen
                  lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
                  status: UNAPPROVED
                description: "It is a kludge, but put the tuple from the database\
                  \ in the cache."
                updatedDate: 14490759200
                htmlDescription: htmlDescription
                title: Talking Nerdy
                reviewers:
                - approved: true
                  role: AUTHOR
                  user:
                    emailAddress: jane@example.com
                    avatarUrl: avatarUrl
                    displayName: Jane Citizen
                    name: jcitizen
                    active: true
                    links: "{}"
                    id: 101
                    type: NORMAL
                    slug: jcitizen
                  lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
                  status: UNAPPROVED
                - approved: true
                  role: AUTHOR
                  user:
                    emailAddress: jane@example.com
                    avatarUrl: avatarUrl
                    displayName: Jane Citizen
                    name: jcitizen
                    active: true
                    links: "{}"
                    id: 101
                    type: NORMAL
                    slug: jcitizen
                  lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
                  status: UNAPPROVED
                version: 0
                toRef:
                  latestCommit: babecafebabecafebabecafebabecafebabecafe
                  id: refs/heads/feature-ABC-123
                  displayId: feature-ABC-1233
                  repository:
                    hierarchyId: e3c939f9ef4a7fae272e
                    defaultBranch: main
                    origin:
                      hierarchyId: e3c939f9ef4a7fae272e
                      defaultBranch: main
                      description: My repo description
                      project:
                        public: true
                        avatarUrl: avatarUrl
                        scope: PROJECT
                        name: My Cool Project
                        description: The description for my cool project
                        links: "{}"
                        avatar: avatar
                        id: 2
                        type: NORMAL
                        key: PRJ
                      relatedLinks: "{}"
                      statusMessage: Available
                      archived: true
                      partition: 3
                      public: true
                      scope: REPOSITORY
                      name: My repo
                      forkable: true
                      links: "{}"
                      id: 9
                      scmId: git
                      state: AVAILABLE
                      slug: my-repo
                    description: My repo description
                    project:
                      public: true
                      avatarUrl: avatarUrl
                      scope: PROJECT
                      name: My Cool Project
                      description: The description for my cool project
                      links: "{}"
                      avatar: avatar
                      id: 2
                      type: NORMAL
                      key: PRJ
                    relatedLinks: "{}"
                    statusMessage: Available
                    archived: true
                    partition: 4
                    public: true
                    scope: REPOSITORY
                    name: My repo
                    forkable: true
                    links: "{}"
                    id: 7
                    scmId: git
                    state: AVAILABLE
                    slug: my-repo
                  type: BRANCH
                descriptionAsHtml: descriptionAsHtml
                createdDate: 13590759200
                closedDate: 19990759200
                draft: true
                closed: true
                fromRef:
                  latestCommit: babecafebabecafebabecafebabecafebabecafe
                  id: refs/heads/feature-ABC-123
                  displayId: feature-ABC-1233
                  repository:
                    hierarchyId: e3c939f9ef4a7fae272e
                    defaultBranch: main
                    origin:
                      hierarchyId: e3c939f9ef4a7fae272e
                      defaultBranch: main
                      description: My repo description
                      project:
                        public: true
                        avatarUrl: avatarUrl
                        scope: PROJECT
                        name: My Cool Project
                        description: The description for my cool project
                        links: "{}"
                        avatar: avatar
                        id: 2
                        type: NORMAL
                        key: PRJ
                      relatedLinks: "{}"
                      statusMessage: Available
                      archived: true
                      partition: 3
                      public: true
                      scope: REPOSITORY
                      name: My repo
                      forkable: true
                      links: "{}"
                      id: 9
                      scmId: git
                      state: AVAILABLE
                      slug: my-repo
                    description: My repo description
                    project:
                      public: true
                      avatarUrl: avatarUrl
                      scope: PROJECT
                      name: My Cool Project
                      description: The description for my cool project
                      links: "{}"
                      avatar: avatar
                      id: 2
                      type: NORMAL
                      key: PRJ
                    relatedLinks: "{}"
                    statusMessage: Available
                    archived: true
                    partition: 4
                    public: true
                    scope: REPOSITORY
                    name: My repo
                    forkable: true
                    links: "{}"
                    id: 7
                    scmId: git
                    state: AVAILABLE
                    slug: my-repo
                  type: BRANCH
                links: "{}"
                id: 1
                state: DECLINED
                locked: true
                open: true
                participants:
                - approved: true
                  role: AUTHOR
                  user:
                    emailAddress: jane@example.com
                    avatarUrl: avatarUrl
                    displayName: Jane Citizen
                    name: jcitizen
                    active: true
                    links: "{}"
                    id: 101
                    type: NORMAL
                    slug: jcitizen
                  lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
                  status: UNAPPROVED
                - approved: true
                  role: AUTHOR
                  user:
                    emailAddress: jane@example.com
                    avatarUrl: avatarUrl
                    displayName: Jane Citizen
                    name: jcitizen
                    active: true
                    links: "{}"
                    id: 101
                    type: NORMAL
                    slug: jcitizen
                  lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
                  status: UNAPPROVED
            html: html
            id: 1
            state: OPEN
            text: An insightful comment.
            reply: true
            properties: "{}"
            resolvedDate: 1239075920
          resolver:
            emailAddress: jane@example.com
            avatarUrl: avatarUrl
            displayName: Jane Citizen
            name: jcitizen
            active: true
            links: "{}"
            id: 101
            type: NORMAL
            slug: jcitizen
          comments:
          - null
          - null
          threadResolved: true
          author:
            emailAddress: jane@example.com
            avatarUrl: avatarUrl
            displayName: Jane Citizen
            name: jcitizen
            active: true
            links: "{}"
            id: 101
            type: NORMAL
            slug: jcitizen
          pending: true
          anchored: true
          updatedDate: 1449075920
          version: 1
          threadResolvedDate: 1569075920
          threadResolver:
            emailAddress: jane@example.com
            avatarUrl: avatarUrl
            displayName: Jane Citizen
            name: jcitizen
            active: true
            links: "{}"
            id: 101
            type: NORMAL
            slug: jcitizen
          createdDate: 1359075920
          anchor:
            multilineSpan:
              srcSpanEnd: 2
              dstSpanStart: 2
              dstSpanEnd: 3
              srcSpanStart: 1
            path:
              parent: path/to
              components:
              - path
              - to
              - file.txt
              extension: txt
              name: file.txt
            fromHash: 62a0505e8204115b8b9c8a95bfa264a8c0896a93
            line: 98
            multilineMarker:
              startLine: 5
              startLineType: ADDED
            lineType: ADDED
            srcPath:
              parent: path/to
              components:
              - path
              - to
              - file.txt
              extension: txt
              name: file.txt
            diffType: COMMIT
            toHash: 3cdd5d19178a54d2e51b5098d43b57571241d0ab
            fileType: FROM
            pullRequest:
              author:
                approved: true
                role: AUTHOR
                user:
                  emailAddress: jane@example.com
                  avatarUrl: avatarUrl
                  displayName: Jane Citizen
                  name: jcitizen
                  active: true
                  links: "{}"
                  id: 101
                  type: NORMAL
                  slug: jcitizen
                lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
                status: UNAPPROVED
              description: "It is a kludge, but put the tuple from the database in\
                \ the cache."
              updatedDate: 14490759200
              htmlDescription: htmlDescription
              title: Talking Nerdy
              reviewers:
              - approved: true
                role: AUTHOR
                user:
                  emailAddress: jane@example.com
                  avatarUrl: avatarUrl
                  displayName: Jane Citizen
                  name: jcitizen
                  active: true
                  links: "{}"
                  id: 101
                  type: NORMAL
                  slug: jcitizen
                lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
                status: UNAPPROVED
              - approved: true
                role: AUTHOR
                user:
                  emailAddress: jane@example.com
                  avatarUrl: avatarUrl
                  displayName: Jane Citizen
                  name: jcitizen
                  active: true
                  links: "{}"
                  id: 101
                  type: NORMAL
                  slug: jcitizen
                lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
                status: UNAPPROVED
              version: 0
              toRef:
                latestCommit: babecafebabecafebabecafebabecafebabecafe
                id: refs/heads/feature-ABC-123
                displayId: feature-ABC-1233
                repository:
                  hierarchyId: e3c939f9ef4a7fae272e
                  defaultBranch: main
                  origin:
                    hierarchyId: e3c939f9ef4a7fae272e
                    defaultBranch: main
                    description: My repo description
                    project:
                      public: true
                      avatarUrl: avatarUrl
                      scope: PROJECT
                      name: My Cool Project
                      description: The description for my cool project
                      links: "{}"
                      avatar: avatar
                      id: 2
                      type: NORMAL
                      key: PRJ
                    relatedLinks: "{}"
                    statusMessage: Available
                    archived: true
                    partition: 3
                    public: true
                    scope: REPOSITORY
                    name: My repo
                    forkable: true
                    links: "{}"
                    id: 9
                    scmId: git
                    state: AVAILABLE
                    slug: my-repo
                  description: My repo description
                  project:
                    public: true
                    avatarUrl: avatarUrl
                    scope: PROJECT
                    name: My Cool Project
                    description: The description for my cool project
                    links: "{}"
                    avatar: avatar
                    id: 2
                    type: NORMAL
                    key: PRJ
                  relatedLinks: "{}"
                  statusMessage: Available
                  archived: true
                  partition: 4
                  public: true
                  scope: REPOSITORY
                  name: My repo
                  forkable: true
                  links: "{}"
                  id: 7
                  scmId: git
                  state: AVAILABLE
                  slug: my-repo
                type: BRANCH
              descriptionAsHtml: descriptionAsHtml
              createdDate: 13590759200
              closedDate: 19990759200
              draft: true
              closed: true
              fromRef:
                latestCommit: babecafebabecafebabecafebabecafebabecafe
                id: refs/heads/feature-ABC-123
                displayId: feature-ABC-1233
                repository:
                  hierarchyId: e3c939f9ef4a7fae272e
                  defaultBranch: main
                  origin:
                    hierarchyId: e3c939f9ef4a7fae272e
                    defaultBranch: main
                    description: My repo description
                    project:
                      public: true
                      avatarUrl: avatarUrl
                      scope: PROJECT
                      name: My Cool Project
                      description: The description for my cool project
                      links: "{}"
                      avatar: avatar
                      id: 2
                      type: NORMAL
                      key: PRJ
                    relatedLinks: "{}"
                    statusMessage: Available
                    archived: true
                    partition: 3
                    public: true
                    scope: REPOSITORY
                    name: My repo
                    forkable: true
                    links: "{}"
                    id: 9
                    scmId: git
                    state: AVAILABLE
                    slug: my-repo
                  description: My repo description
                  project:
                    public: true
                    avatarUrl: avatarUrl
                    scope: PROJECT
                    name: My Cool Project
                    description: The description for my cool project
                    links: "{}"
                    avatar: avatar
                    id: 2
                    type: NORMAL
                    key: PRJ
                  relatedLinks: "{}"
                  statusMessage: Available
                  archived: true
                  partition: 4
                  public: true
                  scope: REPOSITORY
                  name: My repo
                  forkable: true
                  links: "{}"
                  id: 7
                  scmId: git
                  state: AVAILABLE
                  slug: my-repo
                type: BRANCH
              links: "{}"
              id: 1
              state: DECLINED
              locked: true
              open: true
              participants:
              - approved: true
                role: AUTHOR
                user:
                  emailAddress: jane@example.com
                  avatarUrl: avatarUrl
                  displayName: Jane Citizen
                  name: jcitizen
                  active: true
                  links: "{}"
                  id: 101
                  type: NORMAL
                  slug: jcitizen
                lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
                status: UNAPPROVED
              - approved: true
                role: AUTHOR
                user:
                  emailAddress: jane@example.com
                  avatarUrl: avatarUrl
                  displayName: Jane Citizen
                  name: jcitizen
                  active: true
                  links: "{}"
                  id: 101
                  type: NORMAL
                  slug: jcitizen
                lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
                status: UNAPPROVED
          html: html
          id: 1
          state: OPEN
          text: An insightful comment.
          reply: true
          properties: "{}"
          resolvedDate: 1239075920
        destination:
          parent: path/to
          components:
          - path
          - to
          - file.txt
          extension: txt
          name: file.txt
        hunks:
        - sourceLine: 2
          sourceSpan: 7
          context: context
          destinationSpan: 6
          truncated: true
          destinationLine: 0
          segments:
          - truncated: true
            lines:
            - conflictMarker: MARKER
              line: line
              destination: 5
              truncated: true
              source: 5
              commentIds:
              - 1
              - 1
            - conflictMarker: MARKER
              line: line
              destination: 5
              truncated: true
              source: 5
              commentIds:
              - 1
              - 1
            type: ADDED
          - truncated: true
            lines:
            - conflictMarker: MARKER
              line: line
              destination: 5
              truncated: true
              source: 5
              commentIds:
              - 1
              - 1
            - conflictMarker: MARKER
              line: line
              destination: 5
              truncated: true
              source: 5
              commentIds:
              - 1
              - 1
            type: ADDED
        - sourceLine: 2
          sourceSpan: 7
          context: context
          destinationSpan: 6
          truncated: true
          destinationLine: 0
          segments:
          - truncated: true
            lines:
            - conflictMarker: MARKER
              line: line
              destination: 5
              truncated: true
              source: 5
              commentIds:
              - 1
              - 1
            - conflictMarker: MARKER
              line: line
              destination: 5
              truncated: true
              source: 5
              commentIds:
              - 1
              - 1
            type: ADDED
          - truncated: true
            lines:
            - conflictMarker: MARKER
              line: line
              destination: 5
              truncated: true
              source: 5
              commentIds:
              - 1
              - 1
            - conflictMarker: MARKER
              line: line
              destination: 5
              truncated: true
              source: 5
              commentIds:
              - 1
              - 1
            type: ADDED
        truncated: true
        source:
          parent: path/to
          components:
          - path
          - to
          - file.txt
          extension: txt
          name: file.txt
        properties: "{}"
      properties:
        binary:
          type: boolean
        destination:
          $ref: "#/components/schemas/RestComment_anchor_path"
        hunks:
          items:
            $ref: "#/components/schemas/RestDiffHunk"
          type: array
        lineComments:
          items:
            $ref: "#/components/schemas/RestComment"
          type: array
        properties:
          type: object
        source:
          $ref: "#/components/schemas/RestComment_anchor_path"
        truncated:
          type: boolean
    RestDiffHunk:
      example:
        sourceLine: 2
        sourceSpan: 7
        context: context
        destinationSpan: 6
        truncated: true
        destinationLine: 0
        segments:
        - truncated: true
          lines:
          - conflictMarker: MARKER
            line: line
            destination: 5
            truncated: true
            source: 5
            commentIds:
            - 1
            - 1
          - conflictMarker: MARKER
            line: line
            destination: 5
            truncated: true
            source: 5
            commentIds:
            - 1
            - 1
          type: ADDED
        - truncated: true
          lines:
          - conflictMarker: MARKER
            line: line
            destination: 5
            truncated: true
            source: 5
            commentIds:
            - 1
            - 1
          - conflictMarker: MARKER
            line: line
            destination: 5
            truncated: true
            source: 5
            commentIds:
            - 1
            - 1
          type: ADDED
      properties:
        context:
          type: string
        destinationLine:
          format: int32
          type: integer
        destinationSpan:
          format: int32
          type: integer
        segments:
          items:
            $ref: "#/components/schemas/RestDiffSegment"
          type: array
        sourceLine:
          format: int32
          type: integer
        sourceSpan:
          format: int32
          type: integer
        truncated:
          type: boolean
    RestDiffLine:
      example:
        conflictMarker: MARKER
        line: line
        destination: 5
        truncated: true
        source: 5
        commentIds:
        - 1
        - 1
      properties:
        commentIds:
          items:
            format: int64
            type: integer
          type: array
        conflictMarker:
          enum:
          - MARKER
          - OURS
          - THEIRS
          type: string
        destination:
          format: int32
          type: integer
        line:
          type: string
        source:
          format: int32
          type: integer
        truncated:
          type: boolean
    RestDiffSegment:
      example:
        truncated: true
        lines:
        - conflictMarker: MARKER
          line: line
          destination: 5
          truncated: true
          source: 5
          commentIds:
          - 1
          - 1
        - conflictMarker: MARKER
          line: line
          destination: 5
          truncated: true
          source: 5
          commentIds:
          - 1
          - 1
        type: ADDED
      properties:
        lines:
          items:
            $ref: "#/components/schemas/RestDiffLine"
          type: array
        truncated:
          type: boolean
        type:
          enum:
          - ADDED
          - CONTEXT
          - REMOVED
          type: string
    RestDiffStatsSummary:
      properties: {}
    RestErasedUser:
      example:
        newIdentifier: user-123ab
      properties:
        newIdentifier:
          example: user-123ab
          type: string
    RestExportRequest:
      example:
        repositoriesRequest:
          includes:
          - projectKey: PRJ
            slug: my-repo
          - projectKey: PRJ
            slug: my-repo
        exportLocation: example/sub/directory
      properties:
        exportLocation:
          example: example/sub/directory
          type: string
        repositoriesRequest:
          $ref: "#/components/schemas/RestExportRequest_repositoriesRequest"
      required:
      - repositoriesRequest
      type: object
    RestHookScript:
      example:
        createdDate: 2000-01-23T04:56:07.000+00:00
        name: name
        description: description
        pluginKey: pluginKey
        id: 0
        updatedDate: 2000-01-23T04:56:07.000+00:00
        type: POST
        version: 6
      properties:
        createdDate:
          format: date-time
          type: string
        description:
          type: string
        id:
          format: int64
          type: integer
        name:
          type: string
        pluginKey:
          type: string
        type:
          enum:
          - POST
          - PRE
          type: string
        updatedDate:
          format: date-time
          type: string
        version:
          format: int32
          type: integer
    RestHookScriptConfig:
      example:
        triggerIds:
        - triggerIds
        - triggerIds
        scope:
          resourceId: 2
          type: GLOBAL
        script:
          createdDate: 2000-01-23T04:56:07.000+00:00
          name: name
          description: description
          pluginKey: pluginKey
          id: 1
          updatedDate: 2000-01-23T04:56:07.000+00:00
          type: POST
          version: 5
      properties:
        scope:
          $ref: "#/components/schemas/RestReviewerGroup_scope"
        script:
          $ref: "#/components/schemas/RestHookScriptConfig_script"
        triggerIds:
          items:
            type: string
          type: array
          uniqueItems: true
    RestHookScriptTriggers:
      example:
        triggerIds:
        - triggerIds
        - triggerIds
      properties:
        triggerIds:
          items:
            type: string
          type: array
          uniqueItems: true
      type: object
    RestImportRequest:
      example:
        archivePath: Bitbucket_export_1.tar
      properties:
        archivePath:
          example: Bitbucket_export_1.tar
          type: string
      type: object
    RestInvocationHistory:
      properties: {}
    RestInvocationRequest:
      properties: {}
    RestInvocationResult:
      properties: {}
    RestJob:
      example:
        endDate: 1497657603000
        initiator:
          emailAddress: jane@example.com
          avatarUrl: avatarUrl
          displayName: Jane Citizen
          name: jcitizen
          active: true
          links: "{}"
          id: 101
          type: NORMAL
          slug: jcitizen
        progress:
          percentage: 42
          message: Working on it...
        id: 1
        state: INITIALISING
        updatedDate: 1497657603000
        type: com.atlassian.bitbucket.migration.export
        nodeId: 1bec7499-077a-4b58-b27c-996a9c2187a4
        startDate: 1497657601000
      properties:
        endDate:
          example: 1497657603000
          format: int64
          type: integer
        id:
          example: 1
          format: int64
          type: integer
        initiator:
          $ref: "#/components/schemas/RestComment_anchor_pullRequest_author_user"
        nodeId:
          example: 1bec7499-077a-4b58-b27c-996a9c2187a4
          type: string
        progress:
          $ref: "#/components/schemas/RestJob_progress"
        startDate:
          example: 1497657601000
          format: int64
          type: integer
        state:
          enum:
          - INITIALISING
          - READY
          - RUNNING
          - FINALISING
          - COMPLETED
          - FAILED
          - CANCELING
          - CANCELED
          - TIMED_OUT
          - ABORTED
          type: string
        type:
          example: com.atlassian.bitbucket.migration.export
          type: string
        updatedDate:
          example: 1497657603000
          format: int64
          type: integer
    RestJobMessage:
      example:
        severity: INFO
        createdDate: 2000-01-23T04:56:07.000+00:00
        subject: job
        id: "617"
        text: Something of interest happened
      properties:
        createdDate:
          format: date-time
          type: string
        id:
          example: "617"
          type: string
        severity:
          enum:
          - INFO
          - WARN
          - ERROR
          type: string
        subject:
          example: job
          type: string
        text:
          example: Something of interest happened
          type: string
    RestLabel:
      example:
        name: labelName
      properties:
        name:
          example: labelName
          type: string
    RestLabelable:
      example:
        hierarchyId: e3c939f9ef4a7fae272e
        defaultBranch: main
        origin:
          hierarchyId: e3c939f9ef4a7fae272e
          defaultBranch: main
          description: My repo description
          project:
            public: true
            avatarUrl: avatarUrl
            scope: PROJECT
            name: My Cool Project
            description: The description for my cool project
            links: "{}"
            avatar: avatar
            id: 2
            type: NORMAL
            key: PRJ
          relatedLinks: "{}"
          statusMessage: Available
          archived: true
          partition: 3
          public: true
          scope: REPOSITORY
          name: My repo
          forkable: true
          links: "{}"
          id: 9
          scmId: git
          state: AVAILABLE
          slug: my-repo
        description: My repo description
        project:
          public: true
          avatarUrl: avatarUrl
          scope: PROJECT
          name: My Cool Project
          description: The description for my cool project
          links: "{}"
          avatar: avatar
          id: 2
          type: NORMAL
          key: PRJ
        relatedLinks: "{}"
        statusMessage: Available
        archived: true
        partition: 5
        public: true
        scope: REPOSITORY
        name: My repo
        forkable: true
        labelableType: REPOSITORY
        links: "{}"
        id: 1
        scmId: git
        state: AVAILABLE
        slug: my-repo
      properties:
        archived:
          readOnly: true
          type: boolean
        defaultBranch:
          example: main
          type: string
          writeOnly: true
        description:
          example: My repo description
          readOnly: true
          type: string
        forkable:
          readOnly: true
          type: boolean
        hierarchyId:
          example: e3c939f9ef4a7fae272e
          readOnly: true
          type: string
        id:
          format: int32
          readOnly: true
          type: integer
        labelableType:
          enum:
          - REPOSITORY
          type: string
        links:
          properties: {}
          type: object
          writeOnly: true
        name:
          example: My repo
          type: string
        origin:
          $ref: "#/components/schemas/RestChangeset_repository_origin"
        partition:
          format: int32
          readOnly: true
          type: integer
        project:
          $ref: "#/components/schemas/RestChangeset_repository_origin_project"
        public:
          readOnly: true
          type: boolean
        relatedLinks:
          properties: {}
          readOnly: true
          type: object
        scmId:
          example: git
          type: string
        scope:
          example: REPOSITORY
          readOnly: true
          type: string
        slug:
          example: my-repo
          type: string
        state:
          enum:
          - AVAILABLE
          - INITIALISATION_FAILED
          - INITIALISING
          - OFFLINE
          readOnly: true
          type: string
        statusMessage:
          example: Available
          readOnly: true
          type: string
    RestLogLevel:
      example:
        logLevel: DEBUG
      properties:
        logLevel:
          example: DEBUG
          type: string
    RestLoggingSettings:
      example:
        debugLoggingEnabled: false
        profilingEnabled: false
      properties:
        debugLoggingEnabled:
          example: false
          type: boolean
        profilingEnabled:
          example: false
          type: boolean
    RestMailConfiguration:
      example:
        hostname: smtp.example.com
        password: password
        protocol: SMTP
        senderAddress: stash-no-reply@company.com
        port: 465
        requireStartTls: true
        useStartTls: true
        username: user
      properties:
        hostname:
          example: smtp.example.com
          type: string
        password:
          example: password
          type: string
        port:
          example: 465
          format: int32
          type: integer
        protocol:
          enum:
          - SMTP
          - SMTPS
          type: string
        requireStartTls:
          type: boolean
        senderAddress:
          example: stash-no-reply@company.com
          type: string
        useStartTls:
          type: boolean
        username:
          example: user
          type: string
    RestMarkup:
      example:
        html: <h1>Hello World!</h1>
      properties:
        html:
          example: <h1>Hello World!</h1>
          type: string
    RestMeshConnectivityReport:
      example:
        reports:
        - node:
            name: My Node
            id: "1"
            type: BITBUCKET
          summaries:
          - summary:
              roundTripTime: 100
              errorMessage: Unable to connect to the node.
              reachable: true
            node:
              name: My Node
              id: "1"
              type: BITBUCKET
          - summary:
              roundTripTime: 100
              errorMessage: Unable to connect to the node.
              reachable: true
            node:
              name: My Node
              id: "1"
              type: BITBUCKET
        - node:
            name: My Node
            id: "1"
            type: BITBUCKET
          summaries:
          - summary:
              roundTripTime: 100
              errorMessage: Unable to connect to the node.
              reachable: true
            node:
              name: My Node
              id: "1"
              type: BITBUCKET
          - summary:
              roundTripTime: 100
              errorMessage: Unable to connect to the node.
              reachable: true
            node:
              name: My Node
              id: "1"
              type: BITBUCKET
      properties:
        reports:
          items:
            $ref: "#/components/schemas/RestNodeConnectivityReport"
          type: array
    RestMeshMigrationQueueStateCounts:
      properties: {}
    RestMeshMigrationRequest:
      example:
        all: true
        repositoryIds:
        - 1
        - 1
        projectIds:
        - 6
        - 6
        maxBytesPerSecond:
          asLong: 0
          present: true
      properties:
        all:
          type: boolean
        maxBytesPerSecond:
          $ref: "#/components/schemas/startMeshMigration_request_maxBytesPerSecond"
        projectIds:
          items:
            format: int32
            type: integer
          type: array
          uniqueItems: true
        repositoryIds:
          items:
            format: int32
            type: integer
          type: array
          uniqueItems: true
      type: object
    RestMeshMigrationSummary:
      example:
        jobId: 1
        maxBandwidth: 5
        progress: 53
        startTime: 1331038800000
        endTime: 1331038800000
        state: RUNNING
        queue: "{}"
      properties:
        endTime:
          example: 1331038800000
          format: int64
          type: integer
        jobId:
          format: int64
          type: integer
        maxBandwidth:
          format: int64
          type: integer
        progress:
          example: 53
          format: int32
          type: integer
        queue:
          properties: {}
          type: object
        startTime:
          example: 1331038800000
          format: int64
          type: integer
        state:
          example: RUNNING
          type: string
    RestMeshNode:
      example:
        offline: false
        lastSeenDate: 1630041546433
        name: My node
        rpcId: "1"
        id: "1"
        rpcUrl: http://127.0.0.1:7999
        state: AVAILABLE
        availabilityZone: zone-1
      properties:
        availabilityZone:
          example: zone-1
          type: string
        id:
          example: "1"
          type: string
        lastSeenDate:
          example: 1630041546433
          type: number
        name:
          example: My node
          type: string
        offline:
          example: false
          type: boolean
        rpcId:
          example: "1"
          type: string
        rpcUrl:
          example: http://127.0.0.1:7999
          type: string
        state:
          enum:
          - AVAILABLE
          - DELETING
          - DISABLED
          - DRAINING
          - OFFLINE
          example: AVAILABLE
          type: string
    RestMigrationRepository:
      example:
        migrationState: QUEUED
        repository:
          hierarchyId: e3c939f9ef4a7fae272e
          defaultBranch: main
          origin:
            hierarchyId: e3c939f9ef4a7fae272e
            defaultBranch: main
            description: My repo description
            project:
              public: true
              avatarUrl: avatarUrl
              scope: PROJECT
              name: My Cool Project
              description: The description for my cool project
              links: "{}"
              avatar: avatar
              id: 2
              type: NORMAL
              key: PRJ
            relatedLinks: "{}"
            statusMessage: Available
            archived: true
            partition: 3
            public: true
            scope: REPOSITORY
            name: My repo
            forkable: true
            links: "{}"
            id: 9
            scmId: git
            state: AVAILABLE
            slug: my-repo
          description: My repo description
          project:
            public: true
            avatarUrl: avatarUrl
            scope: PROJECT
            name: My Cool Project
            description: The description for my cool project
            links: "{}"
            avatar: avatar
            id: 2
            type: NORMAL
            key: PRJ
          relatedLinks: "{}"
          statusMessage: Available
          archived: true
          partition: 4
          public: true
          scope: REPOSITORY
          name: My repo
          forkable: true
          links: "{}"
          id: 7
          scmId: git
          state: AVAILABLE
          slug: my-repo
      properties:
        migrationState:
          enum:
          - QUEUED
          - STAGING
          - STAGED
          - MIGRATED
          - FAILED
          - CANCELED
          - SKIPPED
          type: string
        repository:
          $ref: "#/components/schemas/RestChangeset_repository"
    RestNode:
      properties:
        id:
          example: "1"
          type: string
        name:
          example: My Node
          type: string
        type:
          enum:
          - BITBUCKET
          - MESH
          type: string
    RestNodeConnectivityReport:
      example:
        node:
          name: My Node
          id: "1"
          type: BITBUCKET
        summaries:
        - summary:
            roundTripTime: 100
            errorMessage: Unable to connect to the node.
            reachable: true
          node:
            name: My Node
            id: "1"
            type: BITBUCKET
        - summary:
            roundTripTime: 100
            errorMessage: Unable to connect to the node.
            reachable: true
          node:
            name: My Node
            id: "1"
            type: BITBUCKET
      properties:
        node:
          $ref: "#/components/schemas/RestNodeConnectivityReport_node"
        summaries:
          items:
            $ref: "#/components/schemas/RestNodeConnectivitySummary"
          type: array
    RestNodeConnectivitySummary:
      example:
        summary:
          roundTripTime: 100
          errorMessage: Unable to connect to the node.
          reachable: true
        node:
          name: My Node
          id: "1"
          type: BITBUCKET
      properties:
        node:
          $ref: "#/components/schemas/RestNodeConnectivityReport_node"
        summary:
          $ref: "#/components/schemas/RestNodeConnectivitySummary_summary"
    RestPermitted:
      example:
        permitted: true
      properties:
        permitted:
          example: true
          type: boolean
    RestPermittedGroup:
      example:
        permission: ADMIN
        group:
          name: group_a
      properties:
        group:
          $ref: "#/components/schemas/RestPermittedGroup_group"
        permission:
          example: ADMIN
          type: string
    RestPermittedUser:
      example:
        permission: USER_ADMIN
        user:
          emailAddress: jane@example.com
          avatarUrl: avatarUrl
          displayName: Jane Citizen
          name: jcitizen
          active: true
          links: "{}"
          id: 101
          type: NORMAL
          slug: jcitizen
      properties:
        permission:
          enum:
          - USER_ADMIN
          - PROJECT_VIEW
          - REPO_READ
          - REPO_WRITE
          - REPO_ADMIN
          - PROJECT_READ
          - PROJECT_WRITE
          - REPO_CREATE
          - PROJECT_ADMIN
          - LICENSED_USER
          - PROJECT_CREATE
          - ADMIN
          - SYS_ADMIN
          type: string
        user:
          $ref: "#/components/schemas/RestComment_anchor_pullRequest_author_user"
    RestProgress:
      properties:
        message:
          example: Working on it...
          type: string
        percentage:
          example: 42
          format: int32
          type: integer
    RestProjectSettingsRestriction:
      example:
        namespace: org.featuredeveloper
        project:
          public: true
          avatarUrl: avatarUrl
          scope: PROJECT
          name: My Cool Project
          description: The description for my cool project
          links: "{}"
          avatar: avatar
          id: 2
          type: NORMAL
          key: PRJ
        processedState: PROCESSED
        componentKey: my-admin-component
        featureKey: my-admin-feature
      properties:
        componentKey:
          example: my-admin-component
          type: string
        featureKey:
          example: my-admin-feature
          type: string
        namespace:
          example: org.featuredeveloper
          type: string
        processedState:
          enum:
          - UNPROCESSED
          - PROCESSED
          - FAILED
          - IN_PROGRESS
          example: PROCESSED
          type: string
        project:
          $ref: "#/components/schemas/RestChangeset_repository_origin_project"
    RestProjectSettingsRestrictionRequest:
      example:
        namespace: org.featuredeveloper
        componentKey: my-admin-component
        featureKey: my-admin-feature
      properties:
        componentKey:
          example: my-admin-component
          type: string
        featureKey:
          example: my-admin-feature
          type: string
        namespace:
          example: org.featuredeveloper
          type: string
      required:
      - featureKey
      - namespace
      type: object
    RestPullRequestActivity:
      example:
        createdDate: 19990759200
        action: APPROVED
        id: 1
        user:
          emailAddress: jane@example.com
          avatarUrl: avatarUrl
          displayName: Jane Citizen
          name: jcitizen
          active: true
          links: "{}"
          id: 101
          type: NORMAL
          slug: jcitizen
      properties:
        action:
          enum:
          - APPROVED
          - AUTO_MERGE_CANCELLED
          - AUTO_MERGE_REQUESTED
          - COMMENTED
          - DECLINED
          - DELETED
          - MERGED
          - OPENED
          - REOPENED
          - RESCOPED
          - REVIEW_COMMENTED
          - REVIEW_DISCARDED
          - REVIEW_FINISHED
          - REVIEWED
          - UNAPPROVED
          - UPDATED
          type: string
        createdDate:
          example: 19990759200
          format: int64
          type: integer
        id:
          example: 1
          format: int64
          type: integer
        user:
          $ref: "#/components/schemas/RestComment_anchor_pullRequest_author_user"
    RestPullRequestAssignParticipantRoleRequest:
      example:
        role: AUTHOR
        user:
          emailAddress: jane@example.com
          avatarUrl: avatarUrl
          displayName: Jane Citizen
          name: jcitizen
          active: true
          links: "{}"
          id: 101
          type: NORMAL
          slug: jcitizen
      properties:
        role:
          enum:
          - AUTHOR
          - REVIEWER
          - PARTICIPANT
          type: string
        user:
          $ref: "#/components/schemas/RestComment_anchor_pullRequest_author_user"
      type: object
    RestPullRequestAssignStatusRequest:
      example:
        lastReviewedCommit: 685cac2c4499ff1f308851e35d2b4357844d8927
        status: UNAPPROVED
      properties:
        lastReviewedCommit:
          example: 685cac2c4499ff1f308851e35d2b4357844d8927
          type: string
        status:
          enum:
          - UNAPPROVED
          - NEEDS_WORK
          - APPROVED
          type: string
      type: object
    RestPullRequestCommitMessageTemplate:
      properties:
        body:
          example: "Merge in ${toProjectKey}/${toRepoSlug} from ${crossRepoProjectRepo}${fromRefName}\
            \ to ${toRefName}"
          type: string
        title:
          example: "Pull request #${id}: ${title}"
          type: string
    RestPullRequestDeclineRequest:
      example:
        comment: An optional comment explaining why the pull request is being declined
        version: 0
      properties:
        comment:
          example: An optional comment explaining why the pull request is being declined
          type: string
        version:
          format: int32
          type: integer
      type: object
    RestPullRequestDeleteRequest:
      example:
        version: 0
      properties:
        version:
          format: int32
          type: integer
      type: object
    RestPullRequestFinishReviewRequest:
      example:
        participantStatus: approved
        commentText: General comment text
        lastReviewedCommit: 685cac2c4499ff1f308851e35d2b4357844d8927
      properties:
        commentText:
          example: General comment text
          type: string
        lastReviewedCommit:
          example: 685cac2c4499ff1f308851e35d2b4357844d8927
          type: string
        participantStatus:
          example: approved
          type: string
      type: object
    RestPullRequestMergeConfig:
      example:
        strategies:
        - flag: --no-ff
          name: Merge commit
          description: Always create a merge commit
          links: "{}"
          id: no-ff
          enabled: true
        - flag: --no-ff
          name: Merge commit
          description: Always create a merge commit
          links: "{}"
          id: no-ff
          enabled: true
        commitMessageTemplate:
          body: "Merge in ${toProjectKey}/${toRepoSlug} from ${crossRepoProjectRepo}${fromRefName}\
            \ to ${toRefName}"
          title: "Pull request #${id}: ${title}"
        defaultStrategy:
          flag: --no-ff
          name: Merge commit
          description: Always create a merge commit
          links: "{}"
          id: no-ff
          enabled: true
        type: repository
        commitSummaries: 0
      properties:
        commitMessageTemplate:
          $ref: "#/components/schemas/RestPullRequestMergeConfig_commitMessageTemplate"
        commitSummaries:
          format: int32
          type: integer
        defaultStrategy:
          $ref: "#/components/schemas/RestPullRequestMergeConfig_defaultStrategy"
        strategies:
          items:
            $ref: "#/components/schemas/RestPullRequestMergeStrategy"
          type: array
        type:
          example: repository
          readOnly: true
          type: string
    RestPullRequestMergeRequest:
      example:
        autoMerge: false
        strategyId: (Optional) squash
        message: (Optional) A descriptive message for the merge commit
        autoSubject: "(Optional, 5.7+) true to prepend an auto-generated subject to\
          \ the message (default), or false to use the message as-is"
        version: 0
      properties:
        autoMerge:
          example: false
          type: boolean
        autoSubject:
          example: "(Optional, 5.7+) true to prepend an auto-generated subject to\
            \ the message (default), or false to use the message as-is"
          type: string
        message:
          example: (Optional) A descriptive message for the merge commit
          type: string
        strategyId:
          example: (Optional) squash
          type: string
        version:
          format: int32
          type: integer
      type: object
    RestPullRequestMergeStrategy:
      example:
        flag: --no-ff
        name: Merge commit
        description: Always create a merge commit
        links: "{}"
        id: no-ff
        enabled: true
      properties:
        description:
          example: Always create a merge commit
          readOnly: true
          type: string
        enabled:
          readOnly: true
          type: boolean
        flag:
          example: --no-ff
          readOnly: true
          type: string
        id:
          example: no-ff
          type: string
        links:
          properties: {}
          type: object
          writeOnly: true
        name:
          example: Merge commit
          readOnly: true
          type: string
    RestPullRequestMergeability:
      example:
        conflicted: true
        vetoes:
        - detailedMessage: You have insufficient permissions to rebase 'refs/heads/feature-branch'.
          summaryMessage: Insufficient branch permissions
        - detailedMessage: You have insufficient permissions to rebase 'refs/heads/feature-branch'.
          summaryMessage: Insufficient branch permissions
        outcome: CLEAN
      properties:
        conflicted:
          type: boolean
        outcome:
          enum:
          - CLEAN
          - CONFLICTED
          - UNKNOWN
          type: string
        vetoes:
          items:
            $ref: "#/components/schemas/RestRepositoryHookVeto"
          type: array
    RestPullRequestReopenRequest:
      example:
        version: 0
      properties:
        version:
          format: int32
          type: integer
      type: object
    RestPullRequestSettings:
      example:
        mergeConfig:
          strategies:
          - flag: --no-ff
            name: Merge commit
            description: Always create a merge commit
            links: "{}"
            id: no-ff
            enabled: true
          - flag: --no-ff
            name: Merge commit
            description: Always create a merge commit
            links: "{}"
            id: no-ff
            enabled: true
          commitMessageTemplate:
            body: "Merge in ${toProjectKey}/${toRepoSlug} from ${crossRepoProjectRepo}${fromRefName}\
              \ to ${toRefName}"
            title: "Pull request #${id}: ${title}"
          defaultStrategy:
            flag: --no-ff
            name: Merge commit
            description: Always create a merge commit
            links: "{}"
            id: no-ff
            enabled: true
          type: repository
          commitSummaries: 0
      properties:
        mergeConfig:
          $ref: "#/components/schemas/RestPullRequestSettings_mergeConfig"
    RestPullRequestSuggestion:
      example:
        changeTme: 1359075920
        refChange:
          fromHash: 6053a1eaa1c009dd11092d09a72f3c41af1b59ad
          ref:
            id: refs/heads/master
            displayId: master
            type: BRANCH
          toHash: d6edcbf924697ab811a867421dab60d954ccad99
          refId: refs/heads/master
          type: ADD
        fromRef:
          id: refs/heads/master
          displayId: master
          type: BRANCH
        repository:
          hierarchyId: e3c939f9ef4a7fae272e
          defaultBranch: main
          origin:
            hierarchyId: e3c939f9ef4a7fae272e
            defaultBranch: main
            description: My repo description
            project:
              public: true
              avatarUrl: avatarUrl
              scope: PROJECT
              name: My Cool Project
              description: The description for my cool project
              links: "{}"
              avatar: avatar
              id: 2
              type: NORMAL
              key: PRJ
            relatedLinks: "{}"
            statusMessage: Available
            archived: true
            partition: 3
            public: true
            scope: REPOSITORY
            name: My repo
            forkable: true
            links: "{}"
            id: 9
            scmId: git
            state: AVAILABLE
            slug: my-repo
          description: My repo description
          project:
            public: true
            avatarUrl: avatarUrl
            scope: PROJECT
            name: My Cool Project
            description: The description for my cool project
            links: "{}"
            avatar: avatar
            id: 2
            type: NORMAL
            key: PRJ
          relatedLinks: "{}"
          statusMessage: Available
          archived: true
          partition: 4
          public: true
          scope: REPOSITORY
          name: My repo
          forkable: true
          links: "{}"
          id: 7
          scmId: git
          state: AVAILABLE
          slug: my-repo
        toRef:
          id: refs/heads/master
          displayId: master
          type: BRANCH
      properties:
        changeTme:
          example: 1359075920
          format: int64
          type: integer
        fromRef:
          $ref: "#/components/schemas/RestPullRequestRebaseResult_refChange_ref"
        refChange:
          $ref: "#/components/schemas/RestPullRequestRebaseResult_refChange"
        repository:
          $ref: "#/components/schemas/RestChangeset_repository"
        toRef:
          $ref: "#/components/schemas/RestPullRequestRebaseResult_refChange_ref"
    RestPushRefChange:
      properties:
        fromHash:
          example: 6053a1eaa1c009dd11092d09a72f3c41af1b59ad
          type: string
        ref:
          $ref: "#/components/schemas/RestPullRequestRebaseResult_refChange_ref"
        refId:
          example: refs/heads/master
          type: string
        toHash:
          example: d6edcbf924697ab811a867421dab60d954ccad99
          type: string
        type:
          enum:
          - ADD
          - DELETE
          - UPDATE
          type: string
        updatedType:
          enum:
          - UNKNOWN
          - UNRESOLVED
          - NOT_FORCED
          - FORCED
          type: string
    RestRateLimitSettings:
      example:
        enabled: true
        defaultSettings:
          fillRate: 5
          capacity: 60
      properties:
        defaultSettings:
          $ref: "#/components/schemas/RestBulkUserRateLimitSettingsUpdateRequest_settings"
        enabled:
          type: boolean
    RestRepositoriesExportRequest:
      properties:
        includes:
          items:
            $ref: "#/components/schemas/RestRepositorySelector"
          type: array
          uniqueItems: true
      required:
      - includes
      type: object
    RestRepositoryHook:
      example:
        configured: true
        scope:
          resourceId: 2
          type: GLOBAL
        details:
          configFormKey: configFormKey
          supportedScopes:
          - GLOBAL
          - GLOBAL
          name: name
          description: description
          type: PRE_RECEIVE
          version: version
          key: key
        enabled: true
      properties:
        configured:
          type: boolean
        details:
          $ref: "#/components/schemas/RepositoryHookDetails"
        enabled:
          type: boolean
        scope:
          $ref: "#/components/schemas/RestReviewerGroup_scope"
    RestRepositoryPullRequestSettings:
      example:
        requiredAllTasksComplete: true
        requiredAllApprovers: true
        requiredApprovers:
          count: "3"
          enabled: true
        requiredSuccessfulBuildsDeprecated: 6
        mergeConfig:
          strategies:
          - flag: --no-ff
            name: Merge commit
            description: Always create a merge commit
            links: "{}"
            id: no-ff
            enabled: true
          - flag: --no-ff
            name: Merge commit
            description: Always create a merge commit
            links: "{}"
            id: no-ff
            enabled: true
          commitMessageTemplate:
            body: "Merge in ${toProjectKey}/${toRepoSlug} from ${crossRepoProjectRepo}${fromRefName}\
              \ to ${toRefName}"
            title: "Pull request #${id}: ${title}"
          defaultStrategy:
            flag: --no-ff
            name: Merge commit
            description: Always create a merge commit
            links: "{}"
            id: no-ff
            enabled: true
          type: repository
          commitSummaries: 0
        requiredApproversDeprecated: 0
        requiredSuccessfulBuilds:
          count: "3"
          enabled: true
      properties:
        mergeConfig:
          $ref: "#/components/schemas/RestPullRequestSettings_mergeConfig"
        requiredAllApprovers:
          type: boolean
        requiredAllTasksComplete:
          type: boolean
        requiredApprovers:
          $ref: "#/components/schemas/RestRepositoryPullRequestSettings_requiredApprovers"
        requiredApproversDeprecated:
          format: int32
          type: integer
        requiredSuccessfulBuilds:
          $ref: "#/components/schemas/RestRepositoryPullRequestSettings_requiredApprovers"
        requiredSuccessfulBuildsDeprecated:
          format: int32
          type: integer
    RestRepositoryRefChangeActivity:
      example:
        createdDate: 19990759200
        refChange:
          fromHash: 6053a1eaa1c009dd11092d09a72f3c41af1b59ad
          ref:
            id: refs/heads/master
            displayId: master
            type: BRANCH
          toHash: d6edcbf924697ab811a867421dab60d954ccad99
          refId: refs/heads/master
          type: ADD
          updatedType: UNKNOWN
        id: 1
        trigger: push
        repository:
          hierarchyId: e3c939f9ef4a7fae272e
          defaultBranch: main
          origin:
            hierarchyId: e3c939f9ef4a7fae272e
            defaultBranch: main
            description: My repo description
            project:
              public: true
              avatarUrl: avatarUrl
              scope: PROJECT
              name: My Cool Project
              description: The description for my cool project
              links: "{}"
              avatar: avatar
              id: 2
              type: NORMAL
              key: PRJ
            relatedLinks: "{}"
            statusMessage: Available
            archived: true
            partition: 3
            public: true
            scope: REPOSITORY
            name: My repo
            forkable: true
            links: "{}"
            id: 9
            scmId: git
            state: AVAILABLE
            slug: my-repo
          description: My repo description
          project:
            public: true
            avatarUrl: avatarUrl
            scope: PROJECT
            name: My Cool Project
            description: The description for my cool project
            links: "{}"
            avatar: avatar
            id: 2
            type: NORMAL
            key: PRJ
          relatedLinks: "{}"
          statusMessage: Available
          archived: true
          partition: 4
          public: true
          scope: REPOSITORY
          name: My repo
          forkable: true
          links: "{}"
          id: 7
          scmId: git
          state: AVAILABLE
          slug: my-repo
        user:
          emailAddress: jane@example.com
          avatarUrl: avatarUrl
          displayName: Jane Citizen
          name: jcitizen
          active: true
          links: "{}"
          id: 101
          type: NORMAL
          slug: jcitizen
      properties:
        createdDate:
          example: 19990759200
          format: int64
          type: integer
        id:
          example: 1
          format: int64
          type: integer
        refChange:
          $ref: "#/components/schemas/RestRepositoryRefChangeActivity_refChange"
        repository:
          $ref: "#/components/schemas/RestChangeset_repository"
        trigger:
          example: push
          type: string
        user:
          $ref: "#/components/schemas/RestComment_anchor_pullRequest_author_user"
    RestScopesExample:
      example:
        links: "{}"
        scopes:
        - "{}"
        - "{}"
      properties:
        links:
          properties: {}
          type: object
          writeOnly: true
        scopes:
          items:
            type: object
          type: array
    RestSecretScanningAllowlistRule:
      example:
        pathRegex: '*.pem'
        lineRegex: "(BBDC-[a-zA-Z0-9+]{44})"
        name: Bitbucket DC HTTP access token
        id: 7
      properties:
        id:
          description: The ID of the rule
          example: 7
          format: int64
          type: integer
        lineRegex:
          description: "If present, regular expression for matching a secret on a\
            \ code line"
          example: "(BBDC-[a-zA-Z0-9+]{44})"
          type: string
        name:
          description: Human readable name for the rule
          example: Bitbucket DC HTTP access token
          type: string
        pathRegex:
          description: "If present, regular expression matching file names"
          example: '*.pem'
          type: string
    RestSecretScanningAllowlistRuleSetRequest:
      example:
        pathRegex: '*.pem'
        lineRegex: "(BBDC-[a-zA-Z0-9+]{44})"
        name: Bitbucket DC HTTP access token
      properties:
        lineRegex:
          description: Regular expression for matching a secret on a code line
          example: "(BBDC-[a-zA-Z0-9+]{44})"
          type: string
        name:
          description: Human readable name for the rule
          example: Bitbucket DC HTTP access token
          type: string
        pathRegex:
          description: Regular expression matching file names
          example: '*.pem'
          type: string
      type: object
    RestSecretScanningRule:
      example:
        pathRegex: '*.pem'
        lineRegex: "(BBDC-[a-zA-Z0-9+]{44})"
        scope:
          resourceId: 2
          type: GLOBAL
        name: Bitbucket DC HTTP access token
        id: 7
      properties:
        id:
          description: The ID of the rule
          example: 7
          format: int64
          type: integer
        lineRegex:
          description: "If present, regular expression for matching a secret on a\
            \ code line"
          example: "(BBDC-[a-zA-Z0-9+]{44})"
          type: string
        name:
          description: Human readable name for the rule
          example: Bitbucket DC HTTP access token
          type: string
        pathRegex:
          description: "If present, regular expression matching file names"
          example: '*.pem'
          type: string
        scope:
          $ref: "#/components/schemas/RestSecretScanningRule_scope"
    RestSecretScanningRuleSetRequest:
      example:
        pathRegex: '*.pem'
        lineRegex: "(BBDC-[a-zA-Z0-9+]{44})"
        name: Bitbucket DC HTTP access token
      properties:
        lineRegex:
          description: Regular expression for matching a secret on a code line
          example: "(BBDC-[a-zA-Z0-9+]{44})"
          type: string
        name:
          description: Human readable name for the rule
          example: Bitbucket DC HTTP access token
          type: string
        pathRegex:
          description: Regular expression matching file names
          example: '*.pem'
          type: string
      type: object
    RestSystemSigningConfiguration:
      example:
        enabled: false
      properties:
        enabled:
          example: false
          type: boolean
    RestTestResults:
      properties:
        failed:
          example: 1
          format: int32
          type: integer
        skipped:
          example: 5
          format: int32
          type: integer
        successful:
          example: 134
          format: int32
          type: integer
    RestTokenBucketSettings:
      properties:
        capacity:
          example: 60
          format: int32
          type: integer
        fillRate:
          example: 5
          format: int32
          type: integer
    RestUserDirectory:
      example:
        name: Bitbucket Internal Directory
        active: true
        description: This directory has users that are able to access Bitbucket DC
        type: Crowd
      properties:
        active:
          example: true
          type: boolean
        description:
          example: This directory has users that are able to access Bitbucket DC
          type: string
        name:
          example: Bitbucket Internal Directory
          type: string
        type:
          example: Crowd
          type: string
    RestUserRateLimitSettings:
      example:
        settings:
          fillRate: 5
          capacity: 60
        whitelisted: true
        user:
          emailAddress: jane@example.com
          avatarUrl: avatarUrl
          displayName: Jane Citizen
          name: jcitizen
          active: true
          links: "{}"
          id: 101
          type: NORMAL
          slug: jcitizen
      properties:
        settings:
          $ref: "#/components/schemas/RestBulkUserRateLimitSettingsUpdateRequest_settings"
        user:
          $ref: "#/components/schemas/RestComment_anchor_pullRequest_author_user"
        whitelisted:
          type: boolean
    RestUserRateLimitSettingsUpdateRequest:
      example:
        settings:
          fillRate: 5
          capacity: 60
        whitelisted: true
      properties:
        settings:
          $ref: "#/components/schemas/RestBulkUserRateLimitSettingsUpdateRequest_settings"
        whitelisted:
          type: boolean
      type: object
    RestWebhook:
      example:
        configuration: "{}"
        credentials:
          password: password
          username: username
        scopeType: scopeType
        name: name
        active: true
        sslVerificationRequired: true
        events:
        - events
        - events
        url: url
        statistics: "{}"
      properties:
        active:
          type: boolean
        configuration:
          type: object
        credentials:
          $ref: "#/components/schemas/RestWebhookCredentials"
        events:
          items:
            type: string
          type: array
          uniqueItems: true
        name:
          type: string
        scopeType:
          type: string
        sslVerificationRequired:
          type: boolean
        statistics:
          properties: {}
          type: object
          writeOnly: true
        url:
          type: string
    RestWebhookCredentials:
      example:
        password: password
        username: username
      properties:
        password:
          type: string
        username:
          type: string
    RestWebhookRequestResponse:
      properties: {}
    RestWebhookScope:
      properties:
        id:
          type: string
        type:
          type: string
    RestX509Certificate:
      example:
        fingerprint: e5e8d632c0b86f5bd5ef9a0d55c58ba1fd7776f6bb7c35ca23d85d23281ce58f
        id: 7
      properties:
        fingerprint:
          description: The SHA-256 fingerprint of the X.509 certificate
          example: e5e8d632c0b86f5bd5ef9a0d55c58ba1fd7776f6bb7c35ca23d85d23281ce58f
          type: string
        id:
          description: The ID of the X.509 certificate
          example: 7
          format: int64
          type: integer
    UserAndGroups:
      example:
        groups:
        - group_a
        - group_b
        user: user
      properties:
        groups:
          example:
          - group_a
          - group_b
          items:
            type: string
          type: array
          uniqueItems: true
        user:
          example: user
          type: string
      required:
      - groups
      type: object
    UserPasswordUpdate:
      example:
        password: my-secret-password
        passwordConfirm: my-secret-password
        oldPassword: my-old-secret-password
      properties:
        oldPassword:
          example: my-old-secret-password
          type: string
        password:
          example: my-secret-password
          type: string
          writeOnly: true
        passwordConfirm:
          example: my-secret-password
          type: string
          writeOnly: true
      type: object
    UserPickerContext:
      example:
        itemName: user_a
        context: group_a
      properties:
        context:
          example: group_a
          type: string
        itemName:
          example: user_a
          type: string
      type: object
    UserRename:
      example:
        newName: jcitizen-new
        name: jcitizen
      properties:
        name:
          example: jcitizen
          type: string
        newName:
          example: jcitizen-new
          type: string
      type: object
    UserUpdate:
      example:
        displayName: Jane Citizen
        name: jcitizen
        email: jane@example.com
      properties:
        displayName:
          example: Jane Citizen
          type: string
        email:
          example: jane@example.com
          type: string
        name:
          example: jcitizen
          type: string
      type: object
    UserUpdateWithCredentials:
      example:
        password: user-password
        displayName: Jane Citizen
        name: jcitizen
        email: jane@example.com
      properties:
        displayName:
          example: Jane Citizen
          type: string
        email:
          example: jane@example.com
          type: string
        name:
          example: jcitizen
          type: string
        password:
          description: "The user's password, which the system may require when users\
            \ update their email."
          example: user-password
          type: string
      type: object
    getAllAccessTokens_200_response:
      example:
        size: 1
        nextPageStart: 0
        isLastPage: true
        values:
        - createdDate: 2000-01-23T04:56:07.000+00:00
          name: My access token
          id: "252973515069"
        - createdDate: 2000-01-23T04:56:07.000+00:00
          name: My access token
          id: "252973515069"
        limit: 25
        start: 6
      properties:
        isLastPage:
          type: boolean
        limit:
          example: 25
          type: number
        nextPageStart:
          format: int32
          type: integer
        size:
          example: 1
          type: number
        start:
          format: int32
          type: integer
        values:
          items:
            $ref: "#/components/schemas/RestAccessToken"
          type: array
      type: object
    getAllAccessTokens_401_response:
      example:
        errors:
        - context: context
          message: message
          exceptionName: exceptionName
        - context: context
          message: message
          exceptionName: exceptionName
      properties:
        errors:
          items:
            $ref: "#/components/schemas/RestErrorMessage"
          type: array
      type: object
    findByCommit_200_response:
      example:
        size: 1
        nextPageStart: 0
        isLastPage: true
        values:
        - id: refs/heads/master
          displayId: master
          type: BRANCH
        - id: refs/heads/master
          displayId: master
          type: BRANCH
        limit: 25
        start: 6
      properties:
        isLastPage:
          type: boolean
        limit:
          example: 25
          type: number
        nextPageStart:
          format: int32
          type: integer
        size:
          example: 1
          type: number
        start:
          format: int32
          type: integer
        values:
          items:
            $ref: "#/components/schemas/RestMinimalRef"
          type: array
      type: object
    getBuildStatus_200_response:
      example:
        size: 1
        nextPageStart: 0
        isLastPage: true
        values:
        - testResults:
            failed: 1
            skipped: 5
            successful: 134
          parent: TEST-REP
          description: A description of the build goes here
          updatedDate: 1587533699278
          buildNumber: "3"
          repositorySlug: my-repo
          url: https://bamboo.example.com/browse/TEST-REP3
          duration: 1
          projectKey: PRJ
          ref: refs/heads/master
          createdDate: 1587533099278
          name: Database Matrix Tests
          state: CANCELLED
          key: TEST-REP3
        - testResults:
            failed: 1
            skipped: 5
            successful: 134
          parent: TEST-REP
          description: A description of the build goes here
          updatedDate: 1587533699278
          buildNumber: "3"
          repositorySlug: my-repo
          url: https://bamboo.example.com/browse/TEST-REP3
          duration: 1
          projectKey: PRJ
          ref: refs/heads/master
          createdDate: 1587533099278
          name: Database Matrix Tests
          state: CANCELLED
          key: TEST-REP3
        limit: 25
        start: 6
      properties:
        isLastPage:
          type: boolean
        limit:
          example: 25
          type: number
        nextPageStart:
          format: int32
          type: integer
        size:
          example: 1
          type: number
        start:
          format: int32
          type: integer
        values:
          items:
            $ref: "#/components/schemas/RestBuildStatus"
          type: array
      type: object
    getPageOfRequiredBuildsMergeChecks_200_response:
      example:
        size: 1
        nextPageStart: 0
        isLastPage: true
        values:
        - exemptRefMatcher:
            id: refs/heads/main
            displayId: main
            type:
              name: Branch
              id: ANY_REF
          buildParentKeys:
          - build-key-1
          - build-key-2
          id: 15
          refMatcher:
            id: refs/heads/main
            displayId: main
            type:
              name: Branch
              id: ANY_REF
        - exemptRefMatcher:
            id: refs/heads/main
            displayId: main
            type:
              name: Branch
              id: ANY_REF
          buildParentKeys:
          - build-key-1
          - build-key-2
          id: 15
          refMatcher:
            id: refs/heads/main
            displayId: main
            type:
              name: Branch
              id: ANY_REF
        limit: 25
        start: 6
      properties:
        isLastPage:
          type: boolean
        limit:
          example: 25
          type: number
        nextPageStart:
          format: int32
          type: integer
        size:
          example: 1
          type: number
        start:
          format: int32
          type: integer
        values:
          items:
            $ref: "#/components/schemas/RestRequiredBuildCondition"
          type: array
      type: object
    getReports_200_response:
      example:
        size: 1
        nextPageStart: 0
        isLastPage: true
        values:
        - result: PASS
          createdDate: 1630041546433
          data:
          - title: data.title
            type: NUMBER
            value: 9
          - title: data.title
            type: NUMBER
            value: 9
          link: http://integration.example.com
          details: "This is the details of the report, it can be a longer string describing\
            \ the report"
          reporter: Reporter/tool that produced this report
          title: report.title
          key: report.key
          logoUrl: http://integration.example.com/logo
        - result: PASS
          createdDate: 1630041546433
          data:
          - title: data.title
            type: NUMBER
            value: 9
          - title: data.title
            type: NUMBER
            value: 9
          link: http://integration.example.com
          details: "This is the details of the report, it can be a longer string describing\
            \ the report"
          reporter: Reporter/tool that produced this report
          title: report.title
          key: report.key
          logoUrl: http://integration.example.com/logo
        limit: 25
        start: 6
      properties:
        isLastPage:
          type: boolean
        limit:
          example: 25
          type: number
        nextPageStart:
          format: int32
          type: integer
        size:
          example: 1
          type: number
        start:
          format: int32
          type: integer
        values:
          items:
            $ref: "#/components/schemas/RestInsightReport"
          type: array
      type: object
    updatePullRequestCondition_1_request_sourceMatcher_type:
      example:
        name: Branch
        id: ANY_REF
      properties:
        id:
          enum:
          - ANY_REF
          - BRANCH
          - PATTERN
          - MODEL_CATEGORY
          - MODEL_BRANCH
          type: string
        name:
          example: Branch
          type: string
      type: object
    updatePullRequestCondition_1_request_sourceMatcher:
      example:
        id: refs/heads/main
        displayId: main
        type:
          name: Branch
          id: ANY_REF
      properties:
        displayId:
          example: main
          type: string
        id:
          example: refs/heads/main
          type: string
        type:
          $ref: "#/components/schemas/updatePullRequestCondition_1_request_sourceMatcher_type"
      type: object
    updatePullRequestCondition_1_request:
      properties:
        requiredApprovals:
          example: 1
          format: int32
          type: integer
        reviewerGroups:
          items:
            $ref: "#/components/schemas/RestReviewerGroup"
          type: array
        reviewers:
          items:
            $ref: "#/components/schemas/RestApplicationUser"
          type: array
        sourceMatcher:
          $ref: "#/components/schemas/updatePullRequestCondition_1_request_sourceMatcher"
        targetMatcher:
          $ref: "#/components/schemas/updatePullRequestCondition_1_request_sourceMatcher"
      type: object
    getDefaultTasks_1_200_response:
      example:
        size: 1
        nextPageStart: 0
        isLastPage: true
        values:
        - description: Default task description
          html: html
          id: 1
        - description: Default task description
          html: html
          id: 1
        limit: 25
        start: 6
      properties:
        isLastPage:
          type: boolean
        limit:
          example: 25
          type: number
        nextPageStart:
          format: int32
          type: integer
        size:
          example: 1
          type: number
        start:
          format: int32
          type: integer
        values:
          items:
            $ref: "#/components/schemas/RestDefaultTask"
          type: array
      type: object
    getCommitsByIssueKey_200_response:
      example:
        size: 1
        nextPageStart: 0
        isLastPage: true
        values:
        - toCommit:
            committer:
              emailAddress: charlie@example.com
              avatarUrl: avatarUrl
              name: Charlie
            committerTimestamp: 1449075830
            author:
              emailAddress: charlie@example.com
              avatarUrl: avatarUrl
              name: Charlie
            authorTimestamp: 1359075920
            id: abcdef0123abcdef4567abcdef8987abcdef6543
            displayId: abcdef0
            message: More work on feature 1
            parents:
            - id: abcdef0123abcdef4567abcdef8987abcdef6543
              displayId: abcdef0
            - id: abcdef0123abcdef4567abcdef8987abcdef6543
              displayId: abcdef0
          changes:
            size: 5
            nextPageStart: 5
            isLastPage: true
            values: "{}"
            limit: 1
            start: 2
          links: "{}"
          fromCommit:
            id: abcdef0123abcdef4567abcdef8987abcdef6543
            displayId: abcdef0
          repository:
            hierarchyId: e3c939f9ef4a7fae272e
            defaultBranch: main
            origin:
              hierarchyId: e3c939f9ef4a7fae272e
              defaultBranch: main
              description: My repo description
              project:
                public: true
                avatarUrl: avatarUrl
                scope: PROJECT
                name: My Cool Project
                description: The description for my cool project
                links: "{}"
                avatar: avatar
                id: 2
                type: NORMAL
                key: PRJ
              relatedLinks: "{}"
              statusMessage: Available
              archived: true
              partition: 3
              public: true
              scope: REPOSITORY
              name: My repo
              forkable: true
              links: "{}"
              id: 9
              scmId: git
              state: AVAILABLE
              slug: my-repo
            description: My repo description
            project:
              public: true
              avatarUrl: avatarUrl
              scope: PROJECT
              name: My Cool Project
              description: The description for my cool project
              links: "{}"
              avatar: avatar
              id: 2
              type: NORMAL
              key: PRJ
            relatedLinks: "{}"
            statusMessage: Available
            archived: true
            partition: 4
            public: true
            scope: REPOSITORY
            name: My repo
            forkable: true
            links: "{}"
            id: 7
            scmId: git
            state: AVAILABLE
            slug: my-repo
        - toCommit:
            committer:
              emailAddress: charlie@example.com
              avatarUrl: avatarUrl
              name: Charlie
            committerTimestamp: 1449075830
            author:
              emailAddress: charlie@example.com
              avatarUrl: avatarUrl
              name: Charlie
            authorTimestamp: 1359075920
            id: abcdef0123abcdef4567abcdef8987abcdef6543
            displayId: abcdef0
            message: More work on feature 1
            parents:
            - id: abcdef0123abcdef4567abcdef8987abcdef6543
              displayId: abcdef0
            - id: abcdef0123abcdef4567abcdef8987abcdef6543
              displayId: abcdef0
          changes:
            size: 5
            nextPageStart: 5
            isLastPage: true
            values: "{}"
            limit: 1
            start: 2
          links: "{}"
          fromCommit:
            id: abcdef0123abcdef4567abcdef8987abcdef6543
            displayId: abcdef0
          repository:
            hierarchyId: e3c939f9ef4a7fae272e
            defaultBranch: main
            origin:
              hierarchyId: e3c939f9ef4a7fae272e
              defaultBranch: main
              description: My repo description
              project:
                public: true
                avatarUrl: avatarUrl
                scope: PROJECT
                name: My Cool Project
                description: The description for my cool project
                links: "{}"
                avatar: avatar
                id: 2
                type: NORMAL
                key: PRJ
              relatedLinks: "{}"
              statusMessage: Available
              archived: true
              partition: 3
              public: true
              scope: REPOSITORY
              name: My repo
              forkable: true
              links: "{}"
              id: 9
              scmId: git
              state: AVAILABLE
              slug: my-repo
            description: My repo description
            project:
              public: true
              avatarUrl: avatarUrl
              scope: PROJECT
              name: My Cool Project
              description: The description for my cool project
              links: "{}"
              avatar: avatar
              id: 2
              type: NORMAL
              key: PRJ
            relatedLinks: "{}"
            statusMessage: Available
            archived: true
            partition: 4
            public: true
            scope: REPOSITORY
            name: My repo
            forkable: true
            links: "{}"
            id: 7
            scmId: git
            state: AVAILABLE
            slug: my-repo
        limit: 25
        start: 6
      properties:
        isLastPage:
          type: boolean
        limit:
          example: 25
          type: number
        nextPageStart:
          format: int32
          type: integer
        size:
          example: 1
          type: number
        start:
          format: int32
          type: integer
        values:
          items:
            $ref: "#/components/schemas/RestChangeset"
          type: array
      type: object
    getKeysForUser_200_response:
      example:
        size: 1
        nextPageStart: 0
        isLastPage: true
        values:
        - expiryDate: 61550496000000
          emailAddress: bitbucket@example.com
          fingerprint: 43:51:43:a1:b5:fc:8b:b7:0a:3a:a9:b1:0f:66:73:a8
          subKeys: []
          id: 00000000000004d2
          text: |
            -----BEGIN PGP SIGNATURE-----

            iQEzBAABCAAdFiEEM8MrWnoxlp3K1lFY5BMGiWNefn4FAlkqKE4ACgkQ5BMGiWNe
            fn6/kggAyzKhDDqdVb3Rq02hiSqeqKa1JuKRqDmzIpa6Pxa+1CpCnxwaIVrGgIii
            vj0ZNJzL1Bm2xm0JasotJDiZq5pFKi0FfQ0WmskuhsW1VY/f08TltHpHvK2kHVRr
            GEMVDUb0nj0I7Duc8XTipiYoDGS1GvydNR/bu3SsFTcZyapXirQcTCRT6/Sn0/IP
            pUeIwQo1qK4e8gTOhWhfWEiVig39lQhiZFtm5S/vfAY72/Rgp68zMYmwasMSnBgF
            /LLFW6lXAqZIoAP8AnmsMRjCH6mS98+/lxKq2+K71+2YUUIAnNEeO09Lufo3B3Da
            Pbs7BpD28w4lKlzb2EQ0n0C9rrxdPA==
            =VZpm
            -----END PGP SIGNATURE-----
        - expiryDate: 61550496000000
          emailAddress: bitbucket@example.com
          fingerprint: 43:51:43:a1:b5:fc:8b:b7:0a:3a:a9:b1:0f:66:73:a8
          subKeys: []
          id: 00000000000004d2
          text: |
            -----BEGIN PGP SIGNATURE-----

            iQEzBAABCAAdFiEEM8MrWnoxlp3K1lFY5BMGiWNefn4FAlkqKE4ACgkQ5BMGiWNe
            fn6/kggAyzKhDDqdVb3Rq02hiSqeqKa1JuKRqDmzIpa6Pxa+1CpCnxwaIVrGgIii
            vj0ZNJzL1Bm2xm0JasotJDiZq5pFKi0FfQ0WmskuhsW1VY/f08TltHpHvK2kHVRr
            GEMVDUb0nj0I7Duc8XTipiYoDGS1GvydNR/bu3SsFTcZyapXirQcTCRT6/Sn0/IP
            pUeIwQo1qK4e8gTOhWhfWEiVig39lQhiZFtm5S/vfAY72/Rgp68zMYmwasMSnBgF
            /LLFW6lXAqZIoAP8AnmsMRjCH6mS98+/lxKq2+K71+2YUUIAnNEeO09Lufo3B3Da
            Pbs7BpD28w4lKlzb2EQ0n0C9rrxdPA==
            =VZpm
            -----END PGP SIGNATURE-----
        limit: 25
        start: 6
      properties:
        isLastPage:
          type: boolean
        limit:
          example: 25
          type: number
        nextPageStart:
          format: int32
          type: integer
        size:
          example: 1
          type: number
        start:
          format: int32
          type: integer
        values:
          items:
            $ref: "#/components/schemas/RestGpgKey"
          type: array
      type: object
    listMirrors_200_response:
      example:
        size: 1
        nextPageStart: 0
        isLastPage: true
        values:
        - baseUrl: http://vietnam.example.com
          mirrorType: SINGLE
          productVersion: 8.0.0
          lastSeenDate: 2000-01-23T04:56:07.000+00:00
          name: Mirror
          id: B0F5-CS21-45C2-CCK3
          enabled: true
        - baseUrl: http://vietnam.example.com
          mirrorType: SINGLE
          productVersion: 8.0.0
          lastSeenDate: 2000-01-23T04:56:07.000+00:00
          name: Mirror
          id: B0F5-CS21-45C2-CCK3
          enabled: true
        limit: 25
        start: 6
      properties:
        isLastPage:
          type: boolean
        limit:
          example: 25
          type: number
        nextPageStart:
          format: int32
          type: integer
        size:
          example: 1
          type: number
        start:
          format: int32
          type: integer
        values:
          items:
            $ref: "#/components/schemas/RestMirrorServer"
          type: array
      type: object
    getAllReposForProject_200_response:
      example:
        size: 1
        nextPageStart: 0
        isLastPage: true
        values:
        - hierarchyId: e3c939f9ef4a7fae272e
          defaultBranch: main
          origin:
            hierarchyId: e3c939f9ef4a7fae272e
            defaultBranch: main
            description: My repo description
            project:
              public: true
              avatarUrl: avatarUrl
              scope: PROJECT
              name: My Cool Project
              description: The description for my cool project
              links: "{}"
              avatar: avatar
              id: 2
              type: NORMAL
              key: PRJ
            relatedLinks: "{}"
            statusMessage: Available
            archived: true
            partition: 3
            public: true
            scope: REPOSITORY
            name: My repo
            forkable: true
            links: "{}"
            id: 9
            scmId: git
            state: AVAILABLE
            slug: my-repo
          description: My repo description
          project:
            public: true
            avatarUrl: avatarUrl
            scope: PROJECT
            name: My Cool Project
            description: The description for my cool project
            links: "{}"
            avatar: avatar
            id: 2
            type: NORMAL
            key: PRJ
          relatedLinks: "{}"
          statusMessage: Available
          archived: true
          partition: 5
          public: true
          scope: REPOSITORY
          name: My repo
          forkable: true
          links: "{}"
          id: 1
          scmId: git
          state: AVAILABLE
          properties:
            defaultBranchId: refs/heads/master
            metadataHash: 11e5cd17e8d74d84a11f2c8a6bbc6ae0a2b69059e54030f49214c94d980364c1
            contentHash: 457389a0b871fb61012a7351d09aefc0cf1c57c306449d4b5df4d2f381df8433
          slug: my-repo
        - hierarchyId: e3c939f9ef4a7fae272e
          defaultBranch: main
          origin:
            hierarchyId: e3c939f9ef4a7fae272e
            defaultBranch: main
            description: My repo description
            project:
              public: true
              avatarUrl: avatarUrl
              scope: PROJECT
              name: My Cool Project
              description: The description for my cool project
              links: "{}"
              avatar: avatar
              id: 2
              type: NORMAL
              key: PRJ
            relatedLinks: "{}"
            statusMessage: Available
            archived: true
            partition: 3
            public: true
            scope: REPOSITORY
            name: My repo
            forkable: true
            links: "{}"
            id: 9
            scmId: git
            state: AVAILABLE
            slug: my-repo
          description: My repo description
          project:
            public: true
            avatarUrl: avatarUrl
            scope: PROJECT
            name: My Cool Project
            description: The description for my cool project
            links: "{}"
            avatar: avatar
            id: 2
            type: NORMAL
            key: PRJ
          relatedLinks: "{}"
          statusMessage: Available
          archived: true
          partition: 5
          public: true
          scope: REPOSITORY
          name: My repo
          forkable: true
          links: "{}"
          id: 1
          scmId: git
          state: AVAILABLE
          properties:
            defaultBranchId: refs/heads/master
            metadataHash: 11e5cd17e8d74d84a11f2c8a6bbc6ae0a2b69059e54030f49214c94d980364c1
            contentHash: 457389a0b871fb61012a7351d09aefc0cf1c57c306449d4b5df4d2f381df8433
          slug: my-repo
        limit: 25
        start: 6
      properties:
        isLastPage:
          type: boolean
        limit:
          example: 25
          type: number
        nextPageStart:
          format: int32
          type: integer
        size:
          example: 1
          type: number
        start:
          format: int32
          type: integer
        values:
          items:
            $ref: "#/components/schemas/EnrichedRepository"
          type: array
      type: object
    listRequests_200_response:
      example:
        size: 1
        nextPageStart: 0
        isLastPage: true
        values:
        - mirrorName: Bitbucket Mirror
          mirrorType: SINGLE
          productVersion: 8.0.0
          mirrorBaseUrl: https://bitbucket-eu.example.com:7990/bitbucket
          id: 1
          mirrorId: 4f0eb5fc-67fc-48f8-b4a7-87981f026c6a
          state: PENDING
        - mirrorName: Bitbucket Mirror
          mirrorType: SINGLE
          productVersion: 8.0.0
          mirrorBaseUrl: https://bitbucket-eu.example.com:7990/bitbucket
          id: 1
          mirrorId: 4f0eb5fc-67fc-48f8-b4a7-87981f026c6a
          state: PENDING
        limit: 25
        start: 6
      properties:
        isLastPage:
          type: boolean
        limit:
          example: 25
          type: number
        nextPageStart:
          format: int32
          type: integer
        size:
          example: 1
          type: number
        start:
          format: int32
          type: integer
        values:
          items:
            $ref: "#/components/schemas/RestMirroringRequest"
          type: array
      type: object
    getRepoSyncStatus_200_response:
      example:
        size: 1
        nextPageStart: 0
        isLastPage: true
        values:
        - localRepoId: 1
          upstreamId: 148728f5-df0f-3f3e-af11-5ca16be3725f
          failedSyncCount: 1
          hashes:
            metadata: 677513e1f2a93ff50e7b709e3c96454c23a3fcd40046ab385c4093e30809500a
            content: 677513e1f2a93ff50e7b709e3c96454c23a3fcd40046ab385c4093e30809500a
          lastSyncDate: 2000-01-23T04:56:07.000+00:00
          localProjectId: 1
          externalRepoId: "1"
          initialSyncDate: 2000-01-23T04:56:07.000+00:00
        - localRepoId: 1
          upstreamId: 148728f5-df0f-3f3e-af11-5ca16be3725f
          failedSyncCount: 1
          hashes:
            metadata: 677513e1f2a93ff50e7b709e3c96454c23a3fcd40046ab385c4093e30809500a
            content: 677513e1f2a93ff50e7b709e3c96454c23a3fcd40046ab385c4093e30809500a
          lastSyncDate: 2000-01-23T04:56:07.000+00:00
          localProjectId: 1
          externalRepoId: "1"
          initialSyncDate: 2000-01-23T04:56:07.000+00:00
        limit: 25
        start: 6
      properties:
        isLastPage:
          type: boolean
        limit:
          example: 25
          type: number
        nextPageStart:
          format: int32
          type: integer
        size:
          example: 1
          type: number
        start:
          format: int32
          type: integer
        values:
          items:
            $ref: "#/components/schemas/RestMirrorRepositorySynchronizationStatus"
          type: array
      type: object
    getRestrictions_1_200_response:
      example:
        size: 1
        nextPageStart: 0
        isLastPage: true
        values:
        - accessKeys:
          - project:
              public: true
              avatarUrl: avatarUrl
              scope: PROJECT
              name: My Cool Project
              description: The description for my cool project
              links: "{}"
              avatar: avatar
              id: 2
              type: NORMAL
              key: PRJ
            permission: USER_ADMIN
            repository:
              hierarchyId: e3c939f9ef4a7fae272e
              defaultBranch: main
              origin:
                hierarchyId: e3c939f9ef4a7fae272e
                defaultBranch: main
                description: My repo description
                project:
                  public: true
                  avatarUrl: avatarUrl
                  scope: PROJECT
                  name: My Cool Project
                  description: The description for my cool project
                  links: "{}"
                  avatar: avatar
                  id: 2
                  type: NORMAL
                  key: PRJ
                relatedLinks: "{}"
                statusMessage: Available
                archived: true
                partition: 3
                public: true
                scope: REPOSITORY
                name: My repo
                forkable: true
                links: "{}"
                id: 9
                scmId: git
                state: AVAILABLE
                slug: my-repo
              description: My repo description
              project:
                public: true
                avatarUrl: avatarUrl
                scope: PROJECT
                name: My Cool Project
                description: The description for my cool project
                links: "{}"
                avatar: avatar
                id: 2
                type: NORMAL
                key: PRJ
              relatedLinks: "{}"
              statusMessage: Available
              archived: true
              partition: 4
              public: true
              scope: REPOSITORY
              name: My repo
              forkable: true
              links: "{}"
              id: 7
              scmId: git
              state: AVAILABLE
              slug: my-repo
            key:
              bitLength: 1
              algorithmType: algorithmType
              createdDate: 2000-01-23T04:56:07.000+00:00
              lastAuthenticated: "1630041546434"
              fingerprint: Cbg38r+gDCiNHqBk6Y1BKO+EvufFBqhFWIEXh8oq9MI
              warning: RSA_UNSAFE_MODULUS
              expiryDays: 30
              id: 1
              label: me@127.0.0.1
              text: ssh-rsa AAAAB3... me@127.0.0.1
          - project:
              public: true
              avatarUrl: avatarUrl
              scope: PROJECT
              name: My Cool Project
              description: The description for my cool project
              links: "{}"
              avatar: avatar
              id: 2
              type: NORMAL
              key: PRJ
            permission: USER_ADMIN
            repository:
              hierarchyId: e3c939f9ef4a7fae272e
              defaultBranch: main
              origin:
                hierarchyId: e3c939f9ef4a7fae272e
                defaultBranch: main
                description: My repo description
                project:
                  public: true
                  avatarUrl: avatarUrl
                  scope: PROJECT
                  name: My Cool Project
                  description: The description for my cool project
                  links: "{}"
                  avatar: avatar
                  id: 2
                  type: NORMAL
                  key: PRJ
                relatedLinks: "{}"
                statusMessage: Available
                archived: true
                partition: 3
                public: true
                scope: REPOSITORY
                name: My repo
                forkable: true
                links: "{}"
                id: 9
                scmId: git
                state: AVAILABLE
                slug: my-repo
              description: My repo description
              project:
                public: true
                avatarUrl: avatarUrl
                scope: PROJECT
                name: My Cool Project
                description: The description for my cool project
                links: "{}"
                avatar: avatar
                id: 2
                type: NORMAL
                key: PRJ
              relatedLinks: "{}"
              statusMessage: Available
              archived: true
              partition: 4
              public: true
              scope: REPOSITORY
              name: My repo
              forkable: true
              links: "{}"
              id: 7
              scmId: git
              state: AVAILABLE
              slug: my-repo
            key:
              bitLength: 1
              algorithmType: algorithmType
              createdDate: 2000-01-23T04:56:07.000+00:00
              lastAuthenticated: "1630041546434"
              fingerprint: Cbg38r+gDCiNHqBk6Y1BKO+EvufFBqhFWIEXh8oq9MI
              warning: RSA_UNSAFE_MODULUS
              expiryDays: 30
              id: 1
              label: me@127.0.0.1
              text: ssh-rsa AAAAB3... me@127.0.0.1
          scope:
            resourceId: 2
            type: GLOBAL
          groups:
          - group_a
          - group_b
          id: 1
          matcher:
            id: refs/heads/main
            displayId: main
            type:
              name: Branch
              id: ANY_REF
          type: pull-request-only
          users:
          - emailAddress: jane@example.com
            avatarUrl: avatarUrl
            displayName: Jane Citizen
            name: jcitizen
            active: true
            links: "{}"
            id: 101
            type: NORMAL
            slug: jcitizen
          - emailAddress: jane@example.com
            avatarUrl: avatarUrl
            displayName: Jane Citizen
            name: jcitizen
            active: true
            links: "{}"
            id: 101
            type: NORMAL
            slug: jcitizen
        - accessKeys:
          - project:
              public: true
              avatarUrl: avatarUrl
              scope: PROJECT
              name: My Cool Project
              description: The description for my cool project
              links: "{}"
              avatar: avatar
              id: 2
              type: NORMAL
              key: PRJ
            permission: USER_ADMIN
            repository:
              hierarchyId: e3c939f9ef4a7fae272e
              defaultBranch: main
              origin:
                hierarchyId: e3c939f9ef4a7fae272e
                defaultBranch: main
                description: My repo description
                project:
                  public: true
                  avatarUrl: avatarUrl
                  scope: PROJECT
                  name: My Cool Project
                  description: The description for my cool project
                  links: "{}"
                  avatar: avatar
                  id: 2
                  type: NORMAL
                  key: PRJ
                relatedLinks: "{}"
                statusMessage: Available
                archived: true
                partition: 3
                public: true
                scope: REPOSITORY
                name: My repo
                forkable: true
                links: "{}"
                id: 9
                scmId: git
                state: AVAILABLE
                slug: my-repo
              description: My repo description
              project:
                public: true
                avatarUrl: avatarUrl
                scope: PROJECT
                name: My Cool Project
                description: The description for my cool project
                links: "{}"
                avatar: avatar
                id: 2
                type: NORMAL
                key: PRJ
              relatedLinks: "{}"
              statusMessage: Available
              archived: true
              partition: 4
              public: true
              scope: REPOSITORY
              name: My repo
              forkable: true
              links: "{}"
              id: 7
              scmId: git
              state: AVAILABLE
              slug: my-repo
            key:
              bitLength: 1
              algorithmType: algorithmType
              createdDate: 2000-01-23T04:56:07.000+00:00
              lastAuthenticated: "1630041546434"
              fingerprint: Cbg38r+gDCiNHqBk6Y1BKO+EvufFBqhFWIEXh8oq9MI
              warning: RSA_UNSAFE_MODULUS
              expiryDays: 30
              id: 1
              label: me@127.0.0.1
              text: ssh-rsa AAAAB3... me@127.0.0.1
          - project:
              public: true
              avatarUrl: avatarUrl
              scope: PROJECT
              name: My Cool Project
              description: The description for my cool project
              links: "{}"
              avatar: avatar
              id: 2
              type: NORMAL
              key: PRJ
            permission: USER_ADMIN
            repository:
              hierarchyId: e3c939f9ef4a7fae272e
              defaultBranch: main
              origin:
                hierarchyId: e3c939f9ef4a7fae272e
                defaultBranch: main
                description: My repo description
                project:
                  public: true
                  avatarUrl: avatarUrl
                  scope: PROJECT
                  name: My Cool Project
                  description: The description for my cool project
                  links: "{}"
                  avatar: avatar
                  id: 2
                  type: NORMAL
                  key: PRJ
                relatedLinks: "{}"
                statusMessage: Available
                archived: true
                partition: 3
                public: true
                scope: REPOSITORY
                name: My repo
                forkable: true
                links: "{}"
                id: 9
                scmId: git
                state: AVAILABLE
                slug: my-repo
              description: My repo description
              project:
                public: true
                avatarUrl: avatarUrl
                scope: PROJECT
                name: My Cool Project
                description: The description for my cool project
                links: "{}"
                avatar: avatar
                id: 2
                type: NORMAL
                key: PRJ
              relatedLinks: "{}"
              statusMessage: Available
              archived: true
              partition: 4
              public: true
              scope: REPOSITORY
              name: My repo
              forkable: true
              links: "{}"
              id: 7
              scmId: git
              state: AVAILABLE
              slug: my-repo
            key:
              bitLength: 1
              algorithmType: algorithmType
              createdDate: 2000-01-23T04:56:07.000+00:00
              lastAuthenticated: "1630041546434"
              fingerprint: Cbg38r+gDCiNHqBk6Y1BKO+EvufFBqhFWIEXh8oq9MI
              warning: RSA_UNSAFE_MODULUS
              expiryDays: 30
              id: 1
              label: me@127.0.0.1
              text: ssh-rsa AAAAB3... me@127.0.0.1
          scope:
            resourceId: 2
            type: GLOBAL
          groups:
          - group_a
          - group_b
          id: 1
          matcher:
            id: refs/heads/main
            displayId: main
            type:
              name: Branch
              id: ANY_REF
          type: pull-request-only
          users:
          - emailAddress: jane@example.com
            avatarUrl: avatarUrl
            displayName: Jane Citizen
            name: jcitizen
            active: true
            links: "{}"
            id: 101
            type: NORMAL
            slug: jcitizen
          - emailAddress: jane@example.com
            avatarUrl: avatarUrl
            displayName: Jane Citizen
            name: jcitizen
            active: true
            links: "{}"
            id: 101
            type: NORMAL
            slug: jcitizen
        limit: 25
        start: 6
      properties:
        isLastPage:
          type: boolean
        limit:
          example: 25
          type: number
        nextPageStart:
          format: int32
          type: integer
        size:
          example: 1
          type: number
        start:
          format: int32
          type: integer
        values:
          items:
            $ref: "#/components/schemas/RestRefRestriction"
          type: array
      type: object
    getIdps_200_response:
      example:
        size: 1
        isLastPage: true
        limit: 25
        start: 6
        results:
        - include-customer-logins: true
          signature-algorithm: RSA_SHA256
          name-id-policy: NONE
          discovery-enabled: true
          additional-scopes:
          - additional-scopes
          - additional-scopes
          certificate: certificate
          idp-type: GENERIC
          username-claim: username-claim
          enabled: true
          token-endpoint: token-endpoint
          enable-remember-me: true
          sso-type: NONE
          username-attribute: username-attribute
          id: 0
          client-id: client-id
          authorization-endpoint: authorization-endpoint
          sign-authnrequest: true
          buttonText: buttonText
          issuer-url: issuer-url
          sso-url: sso-url
          last-updated: 2000-01-23T04:56:07.000+00:00
          client-secret: client-secret
          crowd-url: crowd-url
          name: name
          sso-issuer: sso-issuer
          jit-configuration:
            mapping-groups: mapping-groups
            mapping-email: mapping-email
            mapping-display-name: mapping-display-name
            additional-openid-scopes:
            - additional-openid-scopes
            - additional-openid-scopes
            user-provisioning-enabled: true
          userinfo-endpoint: userinfo-endpoint
        - include-customer-logins: true
          signature-algorithm: RSA_SHA256
          name-id-policy: NONE
          discovery-enabled: true
          additional-scopes:
          - additional-scopes
          - additional-scopes
          certificate: certificate
          idp-type: GENERIC
          username-claim: username-claim
          enabled: true
          token-endpoint: token-endpoint
          enable-remember-me: true
          sso-type: NONE
          username-attribute: username-attribute
          id: 0
          client-id: client-id
          authorization-endpoint: authorization-endpoint
          sign-authnrequest: true
          buttonText: buttonText
          issuer-url: issuer-url
          sso-url: sso-url
          last-updated: 2000-01-23T04:56:07.000+00:00
          client-secret: client-secret
          crowd-url: crowd-url
          name: name
          sso-issuer: sso-issuer
          jit-configuration:
            mapping-groups: mapping-groups
            mapping-email: mapping-email
            mapping-display-name: mapping-display-name
            additional-openid-scopes:
            - additional-openid-scopes
            - additional-openid-scopes
            user-provisioning-enabled: true
          userinfo-endpoint: userinfo-endpoint
      properties:
        isLastPage:
          type: boolean
        limit:
          example: 25
          type: number
        results:
          items:
            $ref: "#/components/schemas/IdpConfigEntity"
          type: array
        size:
          example: 1
          type: number
        start:
          format: int32
          type: integer
      type: object
    getLoginOptions_200_response:
      example:
        size: 1
        isLastPage: true
        limit: 25
        start: 6
        results:
        - buttonText: buttonText
          loginLink: loginLink
          id: 0
          type: LOGIN_FORM
        - buttonText: buttonText
          loginLink: loginLink
          id: 0
          type: LOGIN_FORM
      properties:
        isLastPage:
          type: boolean
        limit:
          example: 25
          type: number
        results:
          items:
            $ref: "#/components/schemas/LoginOptionEntity"
          type: array
        size:
          example: 1
          type: number
        start:
          format: int32
          type: integer
      type: object
    getBrokenIndexStatusRepos_200_response:
      example:
        size: 1
        nextPageStart: 0
        isLastPage: true
        values:
        - details:
            projectKey: PROJECT_1
            lastIndexedCommitId: abcdef0123abcdef4567abcdef8987abcdef6543
            indexingError: Indexing timed out.
            lastIndexedTimestamp: 1732022086
            repositorySlug: rep_1
            status: BROKEN
          repository:
            hierarchyId: e3c939f9ef4a7fae272e
            defaultBranch: main
            origin:
              hierarchyId: e3c939f9ef4a7fae272e
              defaultBranch: main
              description: My repo description
              project:
                public: true
                avatarUrl: avatarUrl
                scope: PROJECT
                name: My Cool Project
                description: The description for my cool project
                links: "{}"
                avatar: avatar
                id: 2
                type: NORMAL
                key: PRJ
              relatedLinks: "{}"
              statusMessage: Available
              archived: true
              partition: 3
              public: true
              scope: REPOSITORY
              name: My repo
              forkable: true
              links: "{}"
              id: 9
              scmId: git
              state: AVAILABLE
              slug: my-repo
            description: My repo description
            project:
              public: true
              avatarUrl: avatarUrl
              scope: PROJECT
              name: My Cool Project
              description: The description for my cool project
              links: "{}"
              avatar: avatar
              id: 2
              type: NORMAL
              key: PRJ
            relatedLinks: "{}"
            statusMessage: Available
            archived: true
            partition: 5
            public: true
            scope: REPOSITORY
            name: My repo
            forkable: true
            links: "{}"
            id: 1
            scmId: git
            state: AVAILABLE
            slug: my-repo
        - details:
            projectKey: PROJECT_1
            lastIndexedCommitId: abcdef0123abcdef4567abcdef8987abcdef6543
            indexingError: Indexing timed out.
            lastIndexedTimestamp: 1732022086
            repositorySlug: rep_1
            status: BROKEN
          repository:
            hierarchyId: e3c939f9ef4a7fae272e
            defaultBranch: main
            origin:
              hierarchyId: e3c939f9ef4a7fae272e
              defaultBranch: main
              description: My repo description
              project:
                public: true
                avatarUrl: avatarUrl
                scope: PROJECT
                name: My Cool Project
                description: The description for my cool project
                links: "{}"
                avatar: avatar
                id: 2
                type: NORMAL
                key: PRJ
              relatedLinks: "{}"
              statusMessage: Available
              archived: true
              partition: 3
              public: true
              scope: REPOSITORY
              name: My repo
              forkable: true
              links: "{}"
              id: 9
              scmId: git
              state: AVAILABLE
              slug: my-repo
            description: My repo description
            project:
              public: true
              avatarUrl: avatarUrl
              scope: PROJECT
              name: My Cool Project
              description: The description for my cool project
              links: "{}"
              avatar: avatar
              id: 2
              type: NORMAL
              key: PRJ
            relatedLinks: "{}"
            statusMessage: Available
            archived: true
            partition: 5
            public: true
            scope: REPOSITORY
            name: My repo
            forkable: true
            links: "{}"
            id: 1
            scmId: git
            state: AVAILABLE
            slug: my-repo
        limit: 25
        start: 6
      properties:
        isLastPage:
          type: boolean
        limit:
          example: 25
          type: number
        nextPageStart:
          format: int32
          type: integer
        size:
          example: 1
          type: number
        start:
          format: int32
          type: integer
        values:
          items:
            $ref: "#/components/schemas/RestBrokenIndexStatusRepository"
          type: array
      type: object
    getForRepository_1_200_response:
      example:
        size: 1
        nextPageStart: 0
        isLastPage: true
        values:
        - project:
            public: true
            avatarUrl: avatarUrl
            scope: PROJECT
            name: My Cool Project
            description: The description for my cool project
            links: "{}"
            avatar: avatar
            id: 2
            type: NORMAL
            key: PRJ
          permission: USER_ADMIN
          repository:
            hierarchyId: e3c939f9ef4a7fae272e
            defaultBranch: main
            origin:
              hierarchyId: e3c939f9ef4a7fae272e
              defaultBranch: main
              description: My repo description
              project:
                public: true
                avatarUrl: avatarUrl
                scope: PROJECT
                name: My Cool Project
                description: The description for my cool project
                links: "{}"
                avatar: avatar
                id: 2
                type: NORMAL
                key: PRJ
              relatedLinks: "{}"
              statusMessage: Available
              archived: true
              partition: 3
              public: true
              scope: REPOSITORY
              name: My repo
              forkable: true
              links: "{}"
              id: 9
              scmId: git
              state: AVAILABLE
              slug: my-repo
            description: My repo description
            project:
              public: true
              avatarUrl: avatarUrl
              scope: PROJECT
              name: My Cool Project
              description: The description for my cool project
              links: "{}"
              avatar: avatar
              id: 2
              type: NORMAL
              key: PRJ
            relatedLinks: "{}"
            statusMessage: Available
            archived: true
            partition: 4
            public: true
            scope: REPOSITORY
            name: My repo
            forkable: true
            links: "{}"
            id: 7
            scmId: git
            state: AVAILABLE
            slug: my-repo
          key:
            bitLength: 1
            algorithmType: algorithmType
            createdDate: 2000-01-23T04:56:07.000+00:00
            lastAuthenticated: "1630041546434"
            fingerprint: Cbg38r+gDCiNHqBk6Y1BKO+EvufFBqhFWIEXh8oq9MI
            warning: RSA_UNSAFE_MODULUS
            expiryDays: 30
            id: 1
            label: me@127.0.0.1
            text: ssh-rsa AAAAB3... me@127.0.0.1
        - project:
            public: true
            avatarUrl: avatarUrl
            scope: PROJECT
            name: My Cool Project
            description: The description for my cool project
            links: "{}"
            avatar: avatar
            id: 2
            type: NORMAL
            key: PRJ
          permission: USER_ADMIN
          repository:
            hierarchyId: e3c939f9ef4a7fae272e
            defaultBranch: main
            origin:
              hierarchyId: e3c939f9ef4a7fae272e
              defaultBranch: main
              description: My repo description
              project:
                public: true
                avatarUrl: avatarUrl
                scope: PROJECT
                name: My Cool Project
                description: The description for my cool project
                links: "{}"
                avatar: avatar
                id: 2
                type: NORMAL
                key: PRJ
              relatedLinks: "{}"
              statusMessage: Available
              archived: true
              partition: 3
              public: true
              scope: REPOSITORY
              name: My repo
              forkable: true
              links: "{}"
              id: 9
              scmId: git
              state: AVAILABLE
              slug: my-repo
            description: My repo description
            project:
              public: true
              avatarUrl: avatarUrl
              scope: PROJECT
              name: My Cool Project
              description: The description for my cool project
              links: "{}"
              avatar: avatar
              id: 2
              type: NORMAL
              key: PRJ
            relatedLinks: "{}"
            statusMessage: Available
            archived: true
            partition: 4
            public: true
            scope: REPOSITORY
            name: My repo
            forkable: true
            links: "{}"
            id: 7
            scmId: git
            state: AVAILABLE
            slug: my-repo
          key:
            bitLength: 1
            algorithmType: algorithmType
            createdDate: 2000-01-23T04:56:07.000+00:00
            lastAuthenticated: "1630041546434"
            fingerprint: Cbg38r+gDCiNHqBk6Y1BKO+EvufFBqhFWIEXh8oq9MI
            warning: RSA_UNSAFE_MODULUS
            expiryDays: 30
            id: 1
            label: me@127.0.0.1
            text: ssh-rsa AAAAB3... me@127.0.0.1
        limit: 25
        start: 6
      properties:
        isLastPage:
          type: boolean
        limit:
          example: 25
          type: number
        nextPageStart:
          format: int32
          type: integer
        size:
          example: 1
          type: number
        start:
          format: int32
          type: integer
        values:
          items:
            $ref: "#/components/schemas/RestSshAccessKey"
          type: array
      type: object
    getSshKeys_200_response:
      example:
        size: 1
        nextPageStart: 0
        isLastPage: true
        values:
        - bitLength: 1
          algorithmType: algorithmType
          createdDate: 2000-01-23T04:56:07.000+00:00
          lastAuthenticated: "1630041546434"
          fingerprint: Cbg38r+gDCiNHqBk6Y1BKO+EvufFBqhFWIEXh8oq9MI
          warning: RSA_UNSAFE_MODULUS
          expiryDays: 30
          id: 1
          label: me@127.0.0.1
          text: ssh-rsa AAAAB3... me@127.0.0.1
        - bitLength: 1
          algorithmType: algorithmType
          createdDate: 2000-01-23T04:56:07.000+00:00
          lastAuthenticated: "1630041546434"
          fingerprint: Cbg38r+gDCiNHqBk6Y1BKO+EvufFBqhFWIEXh8oq9MI
          warning: RSA_UNSAFE_MODULUS
          expiryDays: 30
          id: 1
          label: me@127.0.0.1
          text: ssh-rsa AAAAB3... me@127.0.0.1
        limit: 25
        start: 6
      properties:
        isLastPage:
          type: boolean
        limit:
          example: 25
          type: number
        nextPageStart:
          format: int32
          type: integer
        size:
          example: 1
          type: number
        start:
          format: int32
          type: integer
        values:
          items:
            $ref: "#/components/schemas/RestSshKey"
          type: array
      type: object
    addSshKey_request:
      example:
        bitLength: 1
        algorithmType: algorithmType
        createdDate: 2000-01-23T04:56:07.000+00:00
        lastAuthenticated: "1630041546434"
        fingerprint: Cbg38r+gDCiNHqBk6Y1BKO+EvufFBqhFWIEXh8oq9MI
        warning: RSA_UNSAFE_MODULUS
        expiryDays: 30
        id: 1
        label: me@127.0.0.1
        text: ssh-rsa AAAAB3... me@127.0.0.1
      properties:
        algorithmType:
          type: string
        bitLength:
          format: int32
          type: integer
        createdDate:
          format: date-time
          readOnly: true
          type: string
        expiryDays:
          example: 30
          format: int32
          type: integer
        fingerprint:
          example: Cbg38r+gDCiNHqBk6Y1BKO+EvufFBqhFWIEXh8oq9MI
          readOnly: true
          type: string
        id:
          example: 1
          format: int32
          readOnly: true
          type: integer
        label:
          example: me@127.0.0.1
          type: string
        lastAuthenticated:
          example: "1630041546434"
          readOnly: true
          type: string
        text:
          example: ssh-rsa AAAAB3... me@127.0.0.1
          type: string
        warning:
          description: "Contains a warning about the key, for example that it's deprecated"
          example: RSA_UNSAFE_MODULUS
          readOnly: true
          type: string
      type: object
    setBanner_request:
      properties:
        audience:
          enum:
          - AUTHENTICATED
          - ALL
          type: string
        enabled:
          type: boolean
        message:
          type: string
      required:
      - audience
      type: object
    setDefaultBranch_request:
      properties:
        id:
          type: string
      type: object
    getGroups_1_200_response:
      example:
        size: 1
        nextPageStart: 0
        isLastPage: true
        values:
        - deletable: true
          name: group-a
        - deletable: true
          name: group-a
        limit: 25
        start: 6
      properties:
        isLastPage:
          type: boolean
        limit:
          example: 25
          type: number
        nextPageStart:
          format: int32
          type: integer
        size:
          example: 1
          type: number
        start:
          format: int32
          type: integer
        values:
          items:
            $ref: "#/components/schemas/RestDetailedGroup"
          type: array
      type: object
    findUsersInGroup_200_response:
      example:
        size: 1
        nextPageStart: 0
        isLastPage: true
        values:
        - mutableGroups: true
          avatarUrl: avatarUrl
          displayName: Jane Citizen
          createdTimestamp: 1368145580548
          mutableDetails: true
          deletable: true
          active: true
          type: NORMAL
          emailAddress: jane@example.com
          lastAuthenticationTimestamp: 1368145580548
          name: jcitizen
          links: "{}"
          id: 101
          directoryName: Bitbucket Internal Directory
          slug: jcitizen
        - mutableGroups: true
          avatarUrl: avatarUrl
          displayName: Jane Citizen
          createdTimestamp: 1368145580548
          mutableDetails: true
          deletable: true
          active: true
          type: NORMAL
          emailAddress: jane@example.com
          lastAuthenticationTimestamp: 1368145580548
          name: jcitizen
          links: "{}"
          id: 101
          directoryName: Bitbucket Internal Directory
          slug: jcitizen
        limit: 25
        start: 6
      properties:
        isLastPage:
          type: boolean
        limit:
          example: 25
          type: number
        nextPageStart:
          format: int32
          type: integer
        size:
          example: 1
          type: number
        start:
          format: int32
          type: integer
        values:
          items:
            $ref: "#/components/schemas/RestDetailedUser"
          type: array
      type: object
    setMailConfig_request:
      properties:
        hostname:
          example: smtp.example.com
          type: string
        password:
          example: password
          type: string
        port:
          example: 465
          format: int32
          type: integer
        protocol:
          enum:
          - SMTP
          - SMTPS
          type: string
        requireStartTls:
          type: boolean
        senderAddress:
          example: stash-no-reply@company.com
          type: string
        useStartTls:
          type: boolean
        username:
          example: user
          type: string
      type: object
    getGroupsWithAnyPermission_200_response:
      example:
        size: 1
        nextPageStart: 0
        isLastPage: true
        values:
        - permission: ADMIN
          group:
            name: group_a
        - permission: ADMIN
          group:
            name: group_a
        limit: 25
        start: 6
      properties:
        isLastPage:
          type: boolean
        limit:
          example: 25
          type: number
        nextPageStart:
          format: int32
          type: integer
        size:
          example: 1
          type: number
        start:
          format: int32
          type: integer
        values:
          items:
            $ref: "#/components/schemas/RestPermittedGroup"
          type: array
      type: object
    getUsersWithoutAnyPermission_200_response:
      example:
        size: 1
        nextPageStart: 0
        isLastPage: true
        values:
        - emailAddress: jane@example.com
          avatarUrl: avatarUrl
          displayName: Jane Citizen
          name: jcitizen
          active: true
          links: "{}"
          id: 101
          type: NORMAL
          slug: jcitizen
        - emailAddress: jane@example.com
          avatarUrl: avatarUrl
          displayName: Jane Citizen
          name: jcitizen
          active: true
          links: "{}"
          id: 101
          type: NORMAL
          slug: jcitizen
        limit: 25
        start: 6
      properties:
        isLastPage:
          type: boolean
        limit:
          example: 25
          type: number
        nextPageStart:
          format: int32
          type: integer
        size:
          example: 1
          type: number
        start:
          format: int32
          type: integer
        values:
          items:
            $ref: "#/components/schemas/RestApplicationUser"
          type: array
      type: object
    getHistory_200_response:
      example:
        size: 1
        nextPageStart: 0
        isLastPage: true
        values:
        - lastRejectTime: 1630041546433
          rejectCount: 5
          user:
            emailAddress: jane@example.com
            avatarUrl: avatarUrl
            displayName: Jane Citizen
            name: jcitizen
            active: true
            links: "{}"
            id: 101
            type: NORMAL
            slug: jcitizen
        - lastRejectTime: 1630041546433
          rejectCount: 5
          user:
            emailAddress: jane@example.com
            avatarUrl: avatarUrl
            displayName: Jane Citizen
            name: jcitizen
            active: true
            links: "{}"
            id: 101
            type: NORMAL
            slug: jcitizen
        limit: 25
        start: 6
      properties:
        isLastPage:
          type: boolean
        limit:
          example: 25
          type: number
        nextPageStart:
          format: int32
          type: integer
        size:
          example: 1
          type: number
        start:
          format: int32
          type: integer
        values:
          items:
            $ref: "#/components/schemas/RestAggregateRejectCounter"
          type: array
      type: object
    getAllRateLimitSettings_200_response:
      example:
        size: 1
        nextPageStart: 0
        isLastPage: true
        values:
        - settings:
            fillRate: 5
            capacity: 60
          whitelisted: true
          user:
            emailAddress: jane@example.com
            avatarUrl: avatarUrl
            displayName: Jane Citizen
            name: jcitizen
            active: true
            links: "{}"
            id: 101
            type: NORMAL
            slug: jcitizen
        - settings:
            fillRate: 5
            capacity: 60
          whitelisted: true
          user:
            emailAddress: jane@example.com
            avatarUrl: avatarUrl
            displayName: Jane Citizen
            name: jcitizen
            active: true
            links: "{}"
            id: 101
            type: NORMAL
            slug: jcitizen
        limit: 25
        start: 6
      properties:
        isLastPage:
          type: boolean
        limit:
          example: 25
          type: number
        nextPageStart:
          format: int32
          type: integer
        size:
          example: 1
          type: number
        start:
          format: int32
          type: integer
        values:
          items:
            $ref: "#/components/schemas/RestUserRateLimitSettings"
          type: array
      type: object
    getPullRequestSuggestions_200_response:
      example:
        size: 1
        nextPageStart: 0
        isLastPage: true
        values:
        - changeTme: 1359075920
          refChange:
            fromHash: 6053a1eaa1c009dd11092d09a72f3c41af1b59ad
            ref:
              id: refs/heads/master
              displayId: master
              type: BRANCH
            toHash: d6edcbf924697ab811a867421dab60d954ccad99
            refId: refs/heads/master
            type: ADD
          fromRef:
            id: refs/heads/master
            displayId: master
            type: BRANCH
          repository:
            hierarchyId: e3c939f9ef4a7fae272e
            defaultBranch: main
            origin:
              hierarchyId: e3c939f9ef4a7fae272e
              defaultBranch: main
              description: My repo description
              project:
                public: true
                avatarUrl: avatarUrl
                scope: PROJECT
                name: My Cool Project
                description: The description for my cool project
                links: "{}"
                avatar: avatar
                id: 2
                type: NORMAL
                key: PRJ
              relatedLinks: "{}"
              statusMessage: Available
              archived: true
              partition: 3
              public: true
              scope: REPOSITORY
              name: My repo
              forkable: true
              links: "{}"
              id: 9
              scmId: git
              state: AVAILABLE
              slug: my-repo
            description: My repo description
            project:
              public: true
              avatarUrl: avatarUrl
              scope: PROJECT
              name: My Cool Project
              description: The description for my cool project
              links: "{}"
              avatar: avatar
              id: 2
              type: NORMAL
              key: PRJ
            relatedLinks: "{}"
            statusMessage: Available
            archived: true
            partition: 4
            public: true
            scope: REPOSITORY
            name: My repo
            forkable: true
            links: "{}"
            id: 7
            scmId: git
            state: AVAILABLE
            slug: my-repo
          toRef:
            id: refs/heads/master
            displayId: master
            type: BRANCH
        - changeTme: 1359075920
          refChange:
            fromHash: 6053a1eaa1c009dd11092d09a72f3c41af1b59ad
            ref:
              id: refs/heads/master
              displayId: master
              type: BRANCH
            toHash: d6edcbf924697ab811a867421dab60d954ccad99
            refId: refs/heads/master
            type: ADD
          fromRef:
            id: refs/heads/master
            displayId: master
            type: BRANCH
          repository:
            hierarchyId: e3c939f9ef4a7fae272e
            defaultBranch: main
            origin:
              hierarchyId: e3c939f9ef4a7fae272e
              defaultBranch: main
              description: My repo description
              project:
                public: true
                avatarUrl: avatarUrl
                scope: PROJECT
                name: My Cool Project
                description: The description for my cool project
                links: "{}"
                avatar: avatar
                id: 2
                type: NORMAL
                key: PRJ
              relatedLinks: "{}"
              statusMessage: Available
              archived: true
              partition: 3
              public: true
              scope: REPOSITORY
              name: My repo
              forkable: true
              links: "{}"
              id: 9
              scmId: git
              state: AVAILABLE
              slug: my-repo
            description: My repo description
            project:
              public: true
              avatarUrl: avatarUrl
              scope: PROJECT
              name: My Cool Project
              description: The description for my cool project
              links: "{}"
              avatar: avatar
              id: 2
              type: NORMAL
              key: PRJ
            relatedLinks: "{}"
            statusMessage: Available
            archived: true
            partition: 4
            public: true
            scope: REPOSITORY
            name: My repo
            forkable: true
            links: "{}"
            id: 7
            scmId: git
            state: AVAILABLE
            slug: my-repo
          toRef:
            id: refs/heads/master
            displayId: master
            type: BRANCH
        limit: 25
        start: 6
      properties:
        isLastPage:
          type: boolean
        limit:
          example: 25
          type: number
        nextPageStart:
          format: int32
          type: integer
        size:
          example: 1
          type: number
        start:
          format: int32
          type: integer
        values:
          items:
            $ref: "#/components/schemas/RestPullRequestSuggestion"
          type: array
      type: object
    getPullRequests_1_200_response:
      example:
        size: 1
        nextPageStart: 0
        isLastPage: true
        values:
        - author:
            approved: true
            role: AUTHOR
            user:
              emailAddress: jane@example.com
              avatarUrl: avatarUrl
              displayName: Jane Citizen
              name: jcitizen
              active: true
              links: "{}"
              id: 101
              type: NORMAL
              slug: jcitizen
            lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
            status: UNAPPROVED
          description: "It is a kludge, but put the tuple from the database in the\
            \ cache."
          updatedDate: 14490759200
          htmlDescription: htmlDescription
          title: Talking Nerdy
          reviewers:
          - approved: true
            role: AUTHOR
            user:
              emailAddress: jane@example.com
              avatarUrl: avatarUrl
              displayName: Jane Citizen
              name: jcitizen
              active: true
              links: "{}"
              id: 101
              type: NORMAL
              slug: jcitizen
            lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
            status: UNAPPROVED
          - approved: true
            role: AUTHOR
            user:
              emailAddress: jane@example.com
              avatarUrl: avatarUrl
              displayName: Jane Citizen
              name: jcitizen
              active: true
              links: "{}"
              id: 101
              type: NORMAL
              slug: jcitizen
            lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
            status: UNAPPROVED
          version: 1
          toRef:
            latestCommit: babecafebabecafebabecafebabecafebabecafe
            id: refs/heads/feature-ABC-123
            displayId: feature-ABC-1233
            repository:
              hierarchyId: e3c939f9ef4a7fae272e
              defaultBranch: main
              origin:
                hierarchyId: e3c939f9ef4a7fae272e
                defaultBranch: main
                description: My repo description
                project:
                  public: true
                  avatarUrl: avatarUrl
                  scope: PROJECT
                  name: My Cool Project
                  description: The description for my cool project
                  links: "{}"
                  avatar: avatar
                  id: 2
                  type: NORMAL
                  key: PRJ
                relatedLinks: "{}"
                statusMessage: Available
                archived: true
                partition: 3
                public: true
                scope: REPOSITORY
                name: My repo
                forkable: true
                links: "{}"
                id: 9
                scmId: git
                state: AVAILABLE
                slug: my-repo
              description: My repo description
              project:
                public: true
                avatarUrl: avatarUrl
                scope: PROJECT
                name: My Cool Project
                description: The description for my cool project
                links: "{}"
                avatar: avatar
                id: 2
                type: NORMAL
                key: PRJ
              relatedLinks: "{}"
              statusMessage: Available
              archived: true
              partition: 4
              public: true
              scope: REPOSITORY
              name: My repo
              forkable: true
              links: "{}"
              id: 7
              scmId: git
              state: AVAILABLE
              slug: my-repo
            type: BRANCH
          descriptionAsHtml: descriptionAsHtml
          createdDate: 13590759200
          closedDate: 19990759200
          draft: true
          closed: true
          fromRef:
            latestCommit: babecafebabecafebabecafebabecafebabecafe
            id: refs/heads/feature-ABC-123
            displayId: feature-ABC-1233
            repository:
              hierarchyId: e3c939f9ef4a7fae272e
              defaultBranch: main
              origin:
                hierarchyId: e3c939f9ef4a7fae272e
                defaultBranch: main
                description: My repo description
                project:
                  public: true
                  avatarUrl: avatarUrl
                  scope: PROJECT
                  name: My Cool Project
                  description: The description for my cool project
                  links: "{}"
                  avatar: avatar
                  id: 2
                  type: NORMAL
                  key: PRJ
                relatedLinks: "{}"
                statusMessage: Available
                archived: true
                partition: 3
                public: true
                scope: REPOSITORY
                name: My repo
                forkable: true
                links: "{}"
                id: 9
                scmId: git
                state: AVAILABLE
                slug: my-repo
              description: My repo description
              project:
                public: true
                avatarUrl: avatarUrl
                scope: PROJECT
                name: My Cool Project
                description: The description for my cool project
                links: "{}"
                avatar: avatar
                id: 2
                type: NORMAL
                key: PRJ
              relatedLinks: "{}"
              statusMessage: Available
              archived: true
              partition: 4
              public: true
              scope: REPOSITORY
              name: My repo
              forkable: true
              links: "{}"
              id: 7
              scmId: git
              state: AVAILABLE
              slug: my-repo
            type: BRANCH
          links: "{}"
          id: 1
          state: DECLINED
          locked: true
          open: true
          participants:
          - approved: true
            role: AUTHOR
            user:
              emailAddress: jane@example.com
              avatarUrl: avatarUrl
              displayName: Jane Citizen
              name: jcitizen
              active: true
              links: "{}"
              id: 101
              type: NORMAL
              slug: jcitizen
            lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
            status: UNAPPROVED
          - approved: true
            role: AUTHOR
            user:
              emailAddress: jane@example.com
              avatarUrl: avatarUrl
              displayName: Jane Citizen
              name: jcitizen
              active: true
              links: "{}"
              id: 101
              type: NORMAL
              slug: jcitizen
            lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
            status: UNAPPROVED
        - author:
            approved: true
            role: AUTHOR
            user:
              emailAddress: jane@example.com
              avatarUrl: avatarUrl
              displayName: Jane Citizen
              name: jcitizen
              active: true
              links: "{}"
              id: 101
              type: NORMAL
              slug: jcitizen
            lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
            status: UNAPPROVED
          description: "It is a kludge, but put the tuple from the database in the\
            \ cache."
          updatedDate: 14490759200
          htmlDescription: htmlDescription
          title: Talking Nerdy
          reviewers:
          - approved: true
            role: AUTHOR
            user:
              emailAddress: jane@example.com
              avatarUrl: avatarUrl
              displayName: Jane Citizen
              name: jcitizen
              active: true
              links: "{}"
              id: 101
              type: NORMAL
              slug: jcitizen
            lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
            status: UNAPPROVED
          - approved: true
            role: AUTHOR
            user:
              emailAddress: jane@example.com
              avatarUrl: avatarUrl
              displayName: Jane Citizen
              name: jcitizen
              active: true
              links: "{}"
              id: 101
              type: NORMAL
              slug: jcitizen
            lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
            status: UNAPPROVED
          version: 1
          toRef:
            latestCommit: babecafebabecafebabecafebabecafebabecafe
            id: refs/heads/feature-ABC-123
            displayId: feature-ABC-1233
            repository:
              hierarchyId: e3c939f9ef4a7fae272e
              defaultBranch: main
              origin:
                hierarchyId: e3c939f9ef4a7fae272e
                defaultBranch: main
                description: My repo description
                project:
                  public: true
                  avatarUrl: avatarUrl
                  scope: PROJECT
                  name: My Cool Project
                  description: The description for my cool project
                  links: "{}"
                  avatar: avatar
                  id: 2
                  type: NORMAL
                  key: PRJ
                relatedLinks: "{}"
                statusMessage: Available
                archived: true
                partition: 3
                public: true
                scope: REPOSITORY
                name: My repo
                forkable: true
                links: "{}"
                id: 9
                scmId: git
                state: AVAILABLE
                slug: my-repo
              description: My repo description
              project:
                public: true
                avatarUrl: avatarUrl
                scope: PROJECT
                name: My Cool Project
                description: The description for my cool project
                links: "{}"
                avatar: avatar
                id: 2
                type: NORMAL
                key: PRJ
              relatedLinks: "{}"
              statusMessage: Available
              archived: true
              partition: 4
              public: true
              scope: REPOSITORY
              name: My repo
              forkable: true
              links: "{}"
              id: 7
              scmId: git
              state: AVAILABLE
              slug: my-repo
            type: BRANCH
          descriptionAsHtml: descriptionAsHtml
          createdDate: 13590759200
          closedDate: 19990759200
          draft: true
          closed: true
          fromRef:
            latestCommit: babecafebabecafebabecafebabecafebabecafe
            id: refs/heads/feature-ABC-123
            displayId: feature-ABC-1233
            repository:
              hierarchyId: e3c939f9ef4a7fae272e
              defaultBranch: main
              origin:
                hierarchyId: e3c939f9ef4a7fae272e
                defaultBranch: main
                description: My repo description
                project:
                  public: true
                  avatarUrl: avatarUrl
                  scope: PROJECT
                  name: My Cool Project
                  description: The description for my cool project
                  links: "{}"
                  avatar: avatar
                  id: 2
                  type: NORMAL
                  key: PRJ
                relatedLinks: "{}"
                statusMessage: Available
                archived: true
                partition: 3
                public: true
                scope: REPOSITORY
                name: My repo
                forkable: true
                links: "{}"
                id: 9
                scmId: git
                state: AVAILABLE
                slug: my-repo
              description: My repo description
              project:
                public: true
                avatarUrl: avatarUrl
                scope: PROJECT
                name: My Cool Project
                description: The description for my cool project
                links: "{}"
                avatar: avatar
                id: 2
                type: NORMAL
                key: PRJ
              relatedLinks: "{}"
              statusMessage: Available
              archived: true
              partition: 4
              public: true
              scope: REPOSITORY
              name: My repo
              forkable: true
              links: "{}"
              id: 7
              scmId: git
              state: AVAILABLE
              slug: my-repo
            type: BRANCH
          links: "{}"
          id: 1
          state: DECLINED
          locked: true
          open: true
          participants:
          - approved: true
            role: AUTHOR
            user:
              emailAddress: jane@example.com
              avatarUrl: avatarUrl
              displayName: Jane Citizen
              name: jcitizen
              active: true
              links: "{}"
              id: 101
              type: NORMAL
              slug: jcitizen
            lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
            status: UNAPPROVED
          - approved: true
            role: AUTHOR
            user:
              emailAddress: jane@example.com
              avatarUrl: avatarUrl
              displayName: Jane Citizen
              name: jcitizen
              active: true
              links: "{}"
              id: 101
              type: NORMAL
              slug: jcitizen
            lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
            status: UNAPPROVED
        limit: 25
        start: 6
      properties:
        isLastPage:
          type: boolean
        limit:
          example: 25
          type: number
        nextPageStart:
          format: int32
          type: integer
        size:
          example: 1
          type: number
        start:
          format: int32
          type: integer
        values:
          items:
            $ref: "#/components/schemas/RestPullRequest"
          type: array
      type: object
    getGroups_200_response:
      example:
        size: 1
        nextPageStart: 0
        isLastPage: true
        values:
        - values
        - values
        limit: 25
        start: 6
      properties:
        isLastPage:
          type: boolean
        limit:
          example: 25
          type: number
        nextPageStart:
          format: int32
          type: integer
        size:
          example: 1
          type: number
        start:
          format: int32
          type: integer
        values:
          items:
            type: string
          type: array
      type: object
    getLabels_200_response:
      example:
        size: 1
        nextPageStart: 0
        isLastPage: true
        values:
        - name: labelName
        - name: labelName
        limit: 25
        start: 6
      properties:
        isLastPage:
          type: boolean
        limit:
          example: 25
          type: number
        nextPageStart:
          format: int32
          type: integer
        size:
          example: 1
          type: number
        start:
          format: int32
          type: integer
        values:
          items:
            $ref: "#/components/schemas/RestLabel"
          type: array
      type: object
    getLabelables_200_response:
      example:
        size: 1
        nextPageStart: 0
        isLastPage: true
        values:
        - hierarchyId: e3c939f9ef4a7fae272e
          defaultBranch: main
          origin:
            hierarchyId: e3c939f9ef4a7fae272e
            defaultBranch: main
            description: My repo description
            project:
              public: true
              avatarUrl: avatarUrl
              scope: PROJECT
              name: My Cool Project
              description: The description for my cool project
              links: "{}"
              avatar: avatar
              id: 2
              type: NORMAL
              key: PRJ
            relatedLinks: "{}"
            statusMessage: Available
            archived: true
            partition: 3
            public: true
            scope: REPOSITORY
            name: My repo
            forkable: true
            links: "{}"
            id: 9
            scmId: git
            state: AVAILABLE
            slug: my-repo
          description: My repo description
          project:
            public: true
            avatarUrl: avatarUrl
            scope: PROJECT
            name: My Cool Project
            description: The description for my cool project
            links: "{}"
            avatar: avatar
            id: 2
            type: NORMAL
            key: PRJ
          relatedLinks: "{}"
          statusMessage: Available
          archived: true
          partition: 5
          public: true
          scope: REPOSITORY
          name: My repo
          forkable: true
          labelableType: REPOSITORY
          links: "{}"
          id: 1
          scmId: git
          state: AVAILABLE
          slug: my-repo
        - hierarchyId: e3c939f9ef4a7fae272e
          defaultBranch: main
          origin:
            hierarchyId: e3c939f9ef4a7fae272e
            defaultBranch: main
            description: My repo description
            project:
              public: true
              avatarUrl: avatarUrl
              scope: PROJECT
              name: My Cool Project
              description: The description for my cool project
              links: "{}"
              avatar: avatar
              id: 2
              type: NORMAL
              key: PRJ
            relatedLinks: "{}"
            statusMessage: Available
            archived: true
            partition: 3
            public: true
            scope: REPOSITORY
            name: My repo
            forkable: true
            links: "{}"
            id: 9
            scmId: git
            state: AVAILABLE
            slug: my-repo
          description: My repo description
          project:
            public: true
            avatarUrl: avatarUrl
            scope: PROJECT
            name: My Cool Project
            description: The description for my cool project
            links: "{}"
            avatar: avatar
            id: 2
            type: NORMAL
            key: PRJ
          relatedLinks: "{}"
          statusMessage: Available
          archived: true
          partition: 5
          public: true
          scope: REPOSITORY
          name: My repo
          forkable: true
          labelableType: REPOSITORY
          links: "{}"
          id: 1
          scmId: git
          state: AVAILABLE
          slug: my-repo
        limit: 25
        start: 6
      properties:
        isLastPage:
          type: boolean
        limit:
          example: 25
          type: number
        nextPageStart:
          format: int32
          type: integer
        size:
          example: 1
          type: number
        start:
          format: int32
          type: integer
        values:
          items:
            $ref: "#/components/schemas/RestLabelable"
          type: array
      type: object
    setSettings_2_request:
      properties:
        debugLoggingEnabled:
          example: false
          type: boolean
        profilingEnabled:
          example: false
          type: boolean
      required:
      - debugLoggingEnabled
      - profilingEnabled
      type: object
    getExportJobMessages_200_response:
      example:
        size: 1
        nextPageStart: 0
        isLastPage: true
        values:
        - severity: INFO
          createdDate: 2000-01-23T04:56:07.000+00:00
          subject: job
          id: "617"
          text: Something of interest happened
        - severity: INFO
          createdDate: 2000-01-23T04:56:07.000+00:00
          subject: job
          id: "617"
          text: Something of interest happened
        limit: 25
        start: 6
      properties:
        isLastPage:
          type: boolean
        limit:
          example: 25
          type: number
        nextPageStart:
          format: int32
          type: integer
        size:
          example: 1
          type: number
        start:
          format: int32
          type: integer
        values:
          items:
            $ref: "#/components/schemas/RestJobMessage"
          type: array
      type: object
    startMeshMigration_request_maxBytesPerSecond:
      example:
        asLong: 0
        present: true
      properties:
        asLong:
          format: int64
          type: integer
        present:
          type: boolean
      type: object
    startMeshMigration_request:
      properties:
        all:
          type: boolean
        maxBytesPerSecond:
          $ref: "#/components/schemas/startMeshMigration_request_maxBytesPerSecond"
        projectIds:
          items:
            format: int32
            type: integer
          type: array
          uniqueItems: true
        repositoryIds:
          items:
            format: int32
            type: integer
          type: array
          uniqueItems: true
      type: object
    searchMeshMigrationRepos_200_response:
      example:
        size: 1
        nextPageStart: 0
        isLastPage: true
        values:
        - migrationState: QUEUED
          repository:
            hierarchyId: e3c939f9ef4a7fae272e
            defaultBranch: main
            origin:
              hierarchyId: e3c939f9ef4a7fae272e
              defaultBranch: main
              description: My repo description
              project:
                public: true
                avatarUrl: avatarUrl
                scope: PROJECT
                name: My Cool Project
                description: The description for my cool project
                links: "{}"
                avatar: avatar
                id: 2
                type: NORMAL
                key: PRJ
              relatedLinks: "{}"
              statusMessage: Available
              archived: true
              partition: 3
              public: true
              scope: REPOSITORY
              name: My repo
              forkable: true
              links: "{}"
              id: 9
              scmId: git
              state: AVAILABLE
              slug: my-repo
            description: My repo description
            project:
              public: true
              avatarUrl: avatarUrl
              scope: PROJECT
              name: My Cool Project
              description: The description for my cool project
              links: "{}"
              avatar: avatar
              id: 2
              type: NORMAL
              key: PRJ
            relatedLinks: "{}"
            statusMessage: Available
            archived: true
            partition: 4
            public: true
            scope: REPOSITORY
            name: My repo
            forkable: true
            links: "{}"
            id: 7
            scmId: git
            state: AVAILABLE
            slug: my-repo
        - migrationState: QUEUED
          repository:
            hierarchyId: e3c939f9ef4a7fae272e
            defaultBranch: main
            origin:
              hierarchyId: e3c939f9ef4a7fae272e
              defaultBranch: main
              description: My repo description
              project:
                public: true
                avatarUrl: avatarUrl
                scope: PROJECT
                name: My Cool Project
                description: The description for my cool project
                links: "{}"
                avatar: avatar
                id: 2
                type: NORMAL
                key: PRJ
              relatedLinks: "{}"
              statusMessage: Available
              archived: true
              partition: 3
              public: true
              scope: REPOSITORY
              name: My repo
              forkable: true
              links: "{}"
              id: 9
              scmId: git
              state: AVAILABLE
              slug: my-repo
            description: My repo description
            project:
              public: true
              avatarUrl: avatarUrl
              scope: PROJECT
              name: My Cool Project
              description: The description for my cool project
              links: "{}"
              avatar: avatar
              id: 2
              type: NORMAL
              key: PRJ
            relatedLinks: "{}"
            statusMessage: Available
            archived: true
            partition: 4
            public: true
            scope: REPOSITORY
            name: My repo
            forkable: true
            links: "{}"
            id: 7
            scmId: git
            state: AVAILABLE
            slug: my-repo
        limit: 25
        start: 6
      properties:
        isLastPage:
          type: boolean
        limit:
          example: 25
          type: number
        nextPageStart:
          format: int32
          type: integer
        size:
          example: 1
          type: number
        start:
          format: int32
          type: integer
        values:
          items:
            $ref: "#/components/schemas/RestMigrationRepository"
          type: array
      type: object
    getAllMeshMigrationSummaries_200_response:
      example:
        size: 1
        nextPageStart: 0
        isLastPage: true
        values:
        - jobId: 1
          maxBandwidth: 5
          progress: 53
          startTime: 1331038800000
          endTime: 1331038800000
          state: RUNNING
          queue: "{}"
        - jobId: 1
          maxBandwidth: 5
          progress: 53
          startTime: 1331038800000
          endTime: 1331038800000
          state: RUNNING
          queue: "{}"
        limit: 25
        start: 6
      properties:
        isLastPage:
          type: boolean
        limit:
          example: 25
          type: number
        nextPageStart:
          format: int32
          type: integer
        size:
          example: 1
          type: number
        start:
          format: int32
          type: integer
        values:
          items:
            $ref: "#/components/schemas/RestMeshMigrationSummary"
          type: array
      type: object
    getRepositoriesRecentlyAccessed_200_response:
      example:
        size: 1
        nextPageStart: 0
        isLastPage: true
        values:
        - hierarchyId: e3c939f9ef4a7fae272e
          defaultBranch: main
          origin:
            hierarchyId: e3c939f9ef4a7fae272e
            defaultBranch: main
            description: My repo description
            project:
              public: true
              avatarUrl: avatarUrl
              scope: PROJECT
              name: My Cool Project
              description: The description for my cool project
              links: "{}"
              avatar: avatar
              id: 2
              type: NORMAL
              key: PRJ
            relatedLinks: "{}"
            statusMessage: Available
            archived: true
            partition: 3
            public: true
            scope: REPOSITORY
            name: My repo
            forkable: true
            links: "{}"
            id: 9
            scmId: git
            state: AVAILABLE
            slug: my-repo
          description: My repo description
          project:
            public: true
            avatarUrl: avatarUrl
            scope: PROJECT
            name: My Cool Project
            description: The description for my cool project
            links: "{}"
            avatar: avatar
            id: 2
            type: NORMAL
            key: PRJ
          relatedLinks: "{}"
          statusMessage: Available
          archived: true
          partition: 6
          public: true
          scope: REPOSITORY
          name: My repo
          forkable: true
          links: "{}"
          id: 0
          scmId: git
          state: AVAILABLE
          slug: my-repo
        - hierarchyId: e3c939f9ef4a7fae272e
          defaultBranch: main
          origin:
            hierarchyId: e3c939f9ef4a7fae272e
            defaultBranch: main
            description: My repo description
            project:
              public: true
              avatarUrl: avatarUrl
              scope: PROJECT
              name: My Cool Project
              description: The description for my cool project
              links: "{}"
              avatar: avatar
              id: 2
              type: NORMAL
              key: PRJ
            relatedLinks: "{}"
            statusMessage: Available
            archived: true
            partition: 3
            public: true
            scope: REPOSITORY
            name: My repo
            forkable: true
            links: "{}"
            id: 9
            scmId: git
            state: AVAILABLE
            slug: my-repo
          description: My repo description
          project:
            public: true
            avatarUrl: avatarUrl
            scope: PROJECT
            name: My Cool Project
            description: The description for my cool project
            links: "{}"
            avatar: avatar
            id: 2
            type: NORMAL
            key: PRJ
          relatedLinks: "{}"
          statusMessage: Available
          archived: true
          partition: 6
          public: true
          scope: REPOSITORY
          name: My repo
          forkable: true
          links: "{}"
          id: 0
          scmId: git
          state: AVAILABLE
          slug: my-repo
        limit: 25
        start: 6
      properties:
        isLastPage:
          type: boolean
        limit:
          example: 25
          type: number
        nextPageStart:
          format: int32
          type: integer
        size:
          example: 1
          type: number
        start:
          format: int32
          type: integer
        values:
          items:
            $ref: "#/components/schemas/RestRepository"
          type: array
      type: object
    getProjects_200_response:
      example:
        size: 1
        nextPageStart: 0
        isLastPage: true
        values:
        - public: true
          avatarUrl: avatarUrl
          scope: PROJECT
          name: My Cool Project
          description: The description for my cool project
          links: "{}"
          avatar: avatar
          id: 0
          type: NORMAL
          key: PRJ
        - public: true
          avatarUrl: avatarUrl
          scope: PROJECT
          name: My Cool Project
          description: The description for my cool project
          links: "{}"
          avatar: avatar
          id: 0
          type: NORMAL
          key: PRJ
        limit: 25
        start: 6
      properties:
        isLastPage:
          type: boolean
        limit:
          example: 25
          type: number
        nextPageStart:
          format: int32
          type: integer
        size:
          example: 1
          type: number
        start:
          format: int32
          type: integer
        values:
          items:
            $ref: "#/components/schemas/RestProject"
          type: array
      type: object
    getConfigurations_200_response:
      example:
        size: 1
        nextPageStart: 0
        isLastPage: true
        values:
        - triggerIds:
          - triggerIds
          - triggerIds
          scope:
            resourceId: 2
            type: GLOBAL
          script:
            createdDate: 2000-01-23T04:56:07.000+00:00
            name: name
            description: description
            pluginKey: pluginKey
            id: 1
            updatedDate: 2000-01-23T04:56:07.000+00:00
            type: POST
            version: 5
        - triggerIds:
          - triggerIds
          - triggerIds
          scope:
            resourceId: 2
            type: GLOBAL
          script:
            createdDate: 2000-01-23T04:56:07.000+00:00
            name: name
            description: description
            pluginKey: pluginKey
            id: 1
            updatedDate: 2000-01-23T04:56:07.000+00:00
            type: POST
            version: 5
        limit: 25
        start: 6
      properties:
        isLastPage:
          type: boolean
        limit:
          example: 25
          type: number
        nextPageStart:
          format: int32
          type: integer
        size:
          example: 1
          type: number
        start:
          format: int32
          type: integer
        values:
          items:
            $ref: "#/components/schemas/RestHookScriptConfig"
          type: array
      type: object
    getUsersWithAnyPermission_1_200_response:
      example:
        size: 1
        nextPageStart: 0
        isLastPage: true
        values:
        - permission: USER_ADMIN
          user:
            emailAddress: jane@example.com
            avatarUrl: avatarUrl
            displayName: Jane Citizen
            name: jcitizen
            active: true
            links: "{}"
            id: 101
            type: NORMAL
            slug: jcitizen
        - permission: USER_ADMIN
          user:
            emailAddress: jane@example.com
            avatarUrl: avatarUrl
            displayName: Jane Citizen
            name: jcitizen
            active: true
            links: "{}"
            id: 101
            type: NORMAL
            slug: jcitizen
        limit: 25
        start: 6
      properties:
        isLastPage:
          type: boolean
        limit:
          example: 25
          type: number
        nextPageStart:
          format: int32
          type: integer
        size:
          example: 1
          type: number
        start:
          format: int32
          type: integer
        values:
          items:
            $ref: "#/components/schemas/RestPermittedUser"
          type: array
      type: object
    getBranches_200_response:
      example:
        size: 1
        nextPageStart: 0
        isLastPage: true
        values:
        - latestCommit: 8d51122def5632836d1cb1026e879069e10a1e13
          default: true
          latestChangeset: 8d51122def5632836d1cb1026e879069e10a1e13
          id: refs/heads/master
          displayId: displayId
          type: ""
        - latestCommit: 8d51122def5632836d1cb1026e879069e10a1e13
          default: true
          latestChangeset: 8d51122def5632836d1cb1026e879069e10a1e13
          id: refs/heads/master
          displayId: displayId
          type: ""
        limit: 25
        start: 6
      properties:
        isLastPage:
          type: boolean
        limit:
          example: 25
          type: number
        nextPageStart:
          format: int32
          type: integer
        size:
          example: 1
          type: number
        start:
          format: int32
          type: integer
        values:
          items:
            $ref: "#/components/schemas/RestBranch"
          type: array
      type: object
    getChanges_1_200_response:
      example:
        size: 1
        nextPageStart: 0
        isLastPage: true
        values:
        - path:
            parent: path/to
            components:
            - path
            - to
            - file.txt
            extension: txt
            name: file.txt
          srcExecutable: true
          fromContentId: bcdef0123abcdef4567abcdef8987abcdef6543a
          srcPath:
            parent: path/to
            components:
            - path
            - to
            - file.txt
            extension: txt
            name: file.txt
          contentId: abcdef0123abcdef4567abcdef8987abcdef6543
          links: "{}"
          nodeType: DIRECTORY
          type: ADD
          executable: true
          conflict:
            ourChange:
              path:
                parent: path/to
                components:
                - path
                - to
                - file.txt
                extension: txt
                name: file.txt
              srcPath:
                parent: path/to
                components:
                - path
                - to
                - file.txt
                extension: txt
                name: file.txt
              type: ADD
            theirChange:
              path:
                parent: path/to
                components:
                - path
                - to
                - file.txt
                extension: txt
                name: file.txt
              srcPath:
                parent: path/to
                components:
                - path
                - to
                - file.txt
                extension: txt
                name: file.txt
              type: ADD
          percentUnchanged: 98
        - path:
            parent: path/to
            components:
            - path
            - to
            - file.txt
            extension: txt
            name: file.txt
          srcExecutable: true
          fromContentId: bcdef0123abcdef4567abcdef8987abcdef6543a
          srcPath:
            parent: path/to
            components:
            - path
            - to
            - file.txt
            extension: txt
            name: file.txt
          contentId: abcdef0123abcdef4567abcdef8987abcdef6543
          links: "{}"
          nodeType: DIRECTORY
          type: ADD
          executable: true
          conflict:
            ourChange:
              path:
                parent: path/to
                components:
                - path
                - to
                - file.txt
                extension: txt
                name: file.txt
              srcPath:
                parent: path/to
                components:
                - path
                - to
                - file.txt
                extension: txt
                name: file.txt
              type: ADD
            theirChange:
              path:
                parent: path/to
                components:
                - path
                - to
                - file.txt
                extension: txt
                name: file.txt
              srcPath:
                parent: path/to
                components:
                - path
                - to
                - file.txt
                extension: txt
                name: file.txt
              type: ADD
          percentUnchanged: 98
        limit: 25
        start: 6
      properties:
        isLastPage:
          type: boolean
        limit:
          example: 25
          type: number
        nextPageStart:
          format: int32
          type: integer
        size:
          example: 1
          type: number
        start:
          format: int32
          type: integer
        values:
          items:
            $ref: "#/components/schemas/RestChange"
          type: array
      type: object
    getCommits_200_response:
      example:
        size: 1
        nextPageStart: 0
        isLastPage: true
        values:
        - committer:
            emailAddress: charlie@example.com
            avatarUrl: avatarUrl
            name: Charlie
          committerTimestamp: 1449075830
          author:
            emailAddress: charlie@example.com
            avatarUrl: avatarUrl
            name: Charlie
          authorTimestamp: 1359075920
          id: abcdef0123abcdef4567abcdef8987abcdef6543
          displayId: abcdef0
          message: More work on feature 1
          parents:
          - id: abcdef0123abcdef4567abcdef8987abcdef6543
            displayId: abcdef0
          - id: abcdef0123abcdef4567abcdef8987abcdef6543
            displayId: abcdef0
        - committer:
            emailAddress: charlie@example.com
            avatarUrl: avatarUrl
            name: Charlie
          committerTimestamp: 1449075830
          author:
            emailAddress: charlie@example.com
            avatarUrl: avatarUrl
            name: Charlie
          authorTimestamp: 1359075920
          id: abcdef0123abcdef4567abcdef8987abcdef6543
          displayId: abcdef0
          message: More work on feature 1
          parents:
          - id: abcdef0123abcdef4567abcdef8987abcdef6543
            displayId: abcdef0
          - id: abcdef0123abcdef4567abcdef8987abcdef6543
            displayId: abcdef0
        limit: 25
        start: 6
      properties:
        isLastPage:
          type: boolean
        limit:
          example: 25
          type: number
        nextPageStart:
          format: int32
          type: integer
        size:
          example: 1
          type: number
        start:
          format: int32
          type: integer
        values:
          items:
            $ref: "#/components/schemas/RestCommit"
          type: array
      type: object
    getComments_200_response:
      example:
        size: 1
        nextPageStart: 0
        isLastPage: true
        values:
        - severity: NORMAL
          parent:
            severity: NORMAL
            resolver:
              emailAddress: jane@example.com
              avatarUrl: avatarUrl
              displayName: Jane Citizen
              name: jcitizen
              active: true
              links: "{}"
              id: 101
              type: NORMAL
              slug: jcitizen
            comments:
            - null
            - null
            threadResolved: true
            author:
              emailAddress: jane@example.com
              avatarUrl: avatarUrl
              displayName: Jane Citizen
              name: jcitizen
              active: true
              links: "{}"
              id: 101
              type: NORMAL
              slug: jcitizen
            pending: true
            anchored: true
            updatedDate: 1449075920
            version: 1
            threadResolvedDate: 1569075920
            threadResolver:
              emailAddress: jane@example.com
              avatarUrl: avatarUrl
              displayName: Jane Citizen
              name: jcitizen
              active: true
              links: "{}"
              id: 101
              type: NORMAL
              slug: jcitizen
            createdDate: 1359075920
            anchor:
              multilineSpan:
                srcSpanEnd: 2
                dstSpanStart: 2
                dstSpanEnd: 3
                srcSpanStart: 1
              path:
                parent: path/to
                components:
                - path
                - to
                - file.txt
                extension: txt
                name: file.txt
              fromHash: 62a0505e8204115b8b9c8a95bfa264a8c0896a93
              line: 98
              multilineMarker:
                startLine: 5
                startLineType: ADDED
              lineType: ADDED
              srcPath:
                parent: path/to
                components:
                - path
                - to
                - file.txt
                extension: txt
                name: file.txt
              diffType: COMMIT
              toHash: 3cdd5d19178a54d2e51b5098d43b57571241d0ab
              fileType: FROM
              pullRequest:
                author:
                  approved: true
                  role: AUTHOR
                  user:
                    emailAddress: jane@example.com
                    avatarUrl: avatarUrl
                    displayName: Jane Citizen
                    name: jcitizen
                    active: true
                    links: "{}"
                    id: 101
                    type: NORMAL
                    slug: jcitizen
                  lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
                  status: UNAPPROVED
                description: "It is a kludge, but put the tuple from the database\
                  \ in the cache."
                updatedDate: 14490759200
                htmlDescription: htmlDescription
                title: Talking Nerdy
                reviewers:
                - approved: true
                  role: AUTHOR
                  user:
                    emailAddress: jane@example.com
                    avatarUrl: avatarUrl
                    displayName: Jane Citizen
                    name: jcitizen
                    active: true
                    links: "{}"
                    id: 101
                    type: NORMAL
                    slug: jcitizen
                  lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
                  status: UNAPPROVED
                - approved: true
                  role: AUTHOR
                  user:
                    emailAddress: jane@example.com
                    avatarUrl: avatarUrl
                    displayName: Jane Citizen
                    name: jcitizen
                    active: true
                    links: "{}"
                    id: 101
                    type: NORMAL
                    slug: jcitizen
                  lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
                  status: UNAPPROVED
                version: 0
                toRef:
                  latestCommit: babecafebabecafebabecafebabecafebabecafe
                  id: refs/heads/feature-ABC-123
                  displayId: feature-ABC-1233
                  repository:
                    hierarchyId: e3c939f9ef4a7fae272e
                    defaultBranch: main
                    origin:
                      hierarchyId: e3c939f9ef4a7fae272e
                      defaultBranch: main
                      description: My repo description
                      project:
                        public: true
                        avatarUrl: avatarUrl
                        scope: PROJECT
                        name: My Cool Project
                        description: The description for my cool project
                        links: "{}"
                        avatar: avatar
                        id: 2
                        type: NORMAL
                        key: PRJ
                      relatedLinks: "{}"
                      statusMessage: Available
                      archived: true
                      partition: 3
                      public: true
                      scope: REPOSITORY
                      name: My repo
                      forkable: true
                      links: "{}"
                      id: 9
                      scmId: git
                      state: AVAILABLE
                      slug: my-repo
                    description: My repo description
                    project:
                      public: true
                      avatarUrl: avatarUrl
                      scope: PROJECT
                      name: My Cool Project
                      description: The description for my cool project
                      links: "{}"
                      avatar: avatar
                      id: 2
                      type: NORMAL
                      key: PRJ
                    relatedLinks: "{}"
                    statusMessage: Available
                    archived: true
                    partition: 4
                    public: true
                    scope: REPOSITORY
                    name: My repo
                    forkable: true
                    links: "{}"
                    id: 7
                    scmId: git
                    state: AVAILABLE
                    slug: my-repo
                  type: BRANCH
                descriptionAsHtml: descriptionAsHtml
                createdDate: 13590759200
                closedDate: 19990759200
                draft: true
                closed: true
                fromRef:
                  latestCommit: babecafebabecafebabecafebabecafebabecafe
                  id: refs/heads/feature-ABC-123
                  displayId: feature-ABC-1233
                  repository:
                    hierarchyId: e3c939f9ef4a7fae272e
                    defaultBranch: main
                    origin:
                      hierarchyId: e3c939f9ef4a7fae272e
                      defaultBranch: main
                      description: My repo description
                      project:
                        public: true
                        avatarUrl: avatarUrl
                        scope: PROJECT
                        name: My Cool Project
                        description: The description for my cool project
                        links: "{}"
                        avatar: avatar
                        id: 2
                        type: NORMAL
                        key: PRJ
                      relatedLinks: "{}"
                      statusMessage: Available
                      archived: true
                      partition: 3
                      public: true
                      scope: REPOSITORY
                      name: My repo
                      forkable: true
                      links: "{}"
                      id: 9
                      scmId: git
                      state: AVAILABLE
                      slug: my-repo
                    description: My repo description
                    project:
                      public: true
                      avatarUrl: avatarUrl
                      scope: PROJECT
                      name: My Cool Project
                      description: The description for my cool project
                      links: "{}"
                      avatar: avatar
                      id: 2
                      type: NORMAL
                      key: PRJ
                    relatedLinks: "{}"
                    statusMessage: Available
                    archived: true
                    partition: 4
                    public: true
                    scope: REPOSITORY
                    name: My repo
                    forkable: true
                    links: "{}"
                    id: 7
                    scmId: git
                    state: AVAILABLE
                    slug: my-repo
                  type: BRANCH
                links: "{}"
                id: 1
                state: DECLINED
                locked: true
                open: true
                participants:
                - approved: true
                  role: AUTHOR
                  user:
                    emailAddress: jane@example.com
                    avatarUrl: avatarUrl
                    displayName: Jane Citizen
                    name: jcitizen
                    active: true
                    links: "{}"
                    id: 101
                    type: NORMAL
                    slug: jcitizen
                  lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
                  status: UNAPPROVED
                - approved: true
                  role: AUTHOR
                  user:
                    emailAddress: jane@example.com
                    avatarUrl: avatarUrl
                    displayName: Jane Citizen
                    name: jcitizen
                    active: true
                    links: "{}"
                    id: 101
                    type: NORMAL
                    slug: jcitizen
                  lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
                  status: UNAPPROVED
            html: html
            id: 1
            state: OPEN
            text: An insightful comment.
            reply: true
            properties: "{}"
            resolvedDate: 1239075920
          resolver:
            emailAddress: jane@example.com
            avatarUrl: avatarUrl
            displayName: Jane Citizen
            name: jcitizen
            active: true
            links: "{}"
            id: 101
            type: NORMAL
            slug: jcitizen
          comments:
          - null
          - null
          threadResolved: true
          author:
            emailAddress: jane@example.com
            avatarUrl: avatarUrl
            displayName: Jane Citizen
            name: jcitizen
            active: true
            links: "{}"
            id: 101
            type: NORMAL
            slug: jcitizen
          pending: true
          anchored: true
          updatedDate: 1449075920
          version: 1
          threadResolvedDate: 1569075920
          threadResolver:
            emailAddress: jane@example.com
            avatarUrl: avatarUrl
            displayName: Jane Citizen
            name: jcitizen
            active: true
            links: "{}"
            id: 101
            type: NORMAL
            slug: jcitizen
          createdDate: 1359075920
          anchor:
            multilineSpan:
              srcSpanEnd: 2
              dstSpanStart: 2
              dstSpanEnd: 3
              srcSpanStart: 1
            path:
              parent: path/to
              components:
              - path
              - to
              - file.txt
              extension: txt
              name: file.txt
            fromHash: 62a0505e8204115b8b9c8a95bfa264a8c0896a93
            line: 98
            multilineMarker:
              startLine: 5
              startLineType: ADDED
            lineType: ADDED
            srcPath:
              parent: path/to
              components:
              - path
              - to
              - file.txt
              extension: txt
              name: file.txt
            diffType: COMMIT
            toHash: 3cdd5d19178a54d2e51b5098d43b57571241d0ab
            fileType: FROM
            pullRequest:
              author:
                approved: true
                role: AUTHOR
                user:
                  emailAddress: jane@example.com
                  avatarUrl: avatarUrl
                  displayName: Jane Citizen
                  name: jcitizen
                  active: true
                  links: "{}"
                  id: 101
                  type: NORMAL
                  slug: jcitizen
                lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
                status: UNAPPROVED
              description: "It is a kludge, but put the tuple from the database in\
                \ the cache."
              updatedDate: 14490759200
              htmlDescription: htmlDescription
              title: Talking Nerdy
              reviewers:
              - approved: true
                role: AUTHOR
                user:
                  emailAddress: jane@example.com
                  avatarUrl: avatarUrl
                  displayName: Jane Citizen
                  name: jcitizen
                  active: true
                  links: "{}"
                  id: 101
                  type: NORMAL
                  slug: jcitizen
                lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
                status: UNAPPROVED
              - approved: true
                role: AUTHOR
                user:
                  emailAddress: jane@example.com
                  avatarUrl: avatarUrl
                  displayName: Jane Citizen
                  name: jcitizen
                  active: true
                  links: "{}"
                  id: 101
                  type: NORMAL
                  slug: jcitizen
                lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
                status: UNAPPROVED
              version: 0
              toRef:
                latestCommit: babecafebabecafebabecafebabecafebabecafe
                id: refs/heads/feature-ABC-123
                displayId: feature-ABC-1233
                repository:
                  hierarchyId: e3c939f9ef4a7fae272e
                  defaultBranch: main
                  origin:
                    hierarchyId: e3c939f9ef4a7fae272e
                    defaultBranch: main
                    description: My repo description
                    project:
                      public: true
                      avatarUrl: avatarUrl
                      scope: PROJECT
                      name: My Cool Project
                      description: The description for my cool project
                      links: "{}"
                      avatar: avatar
                      id: 2
                      type: NORMAL
                      key: PRJ
                    relatedLinks: "{}"
                    statusMessage: Available
                    archived: true
                    partition: 3
                    public: true
                    scope: REPOSITORY
                    name: My repo
                    forkable: true
                    links: "{}"
                    id: 9
                    scmId: git
                    state: AVAILABLE
                    slug: my-repo
                  description: My repo description
                  project:
                    public: true
                    avatarUrl: avatarUrl
                    scope: PROJECT
                    name: My Cool Project
                    description: The description for my cool project
                    links: "{}"
                    avatar: avatar
                    id: 2
                    type: NORMAL
                    key: PRJ
                  relatedLinks: "{}"
                  statusMessage: Available
                  archived: true
                  partition: 4
                  public: true
                  scope: REPOSITORY
                  name: My repo
                  forkable: true
                  links: "{}"
                  id: 7
                  scmId: git
                  state: AVAILABLE
                  slug: my-repo
                type: BRANCH
              descriptionAsHtml: descriptionAsHtml
              createdDate: 13590759200
              closedDate: 19990759200
              draft: true
              closed: true
              fromRef:
                latestCommit: babecafebabecafebabecafebabecafebabecafe
                id: refs/heads/feature-ABC-123
                displayId: feature-ABC-1233
                repository:
                  hierarchyId: e3c939f9ef4a7fae272e
                  defaultBranch: main
                  origin:
                    hierarchyId: e3c939f9ef4a7fae272e
                    defaultBranch: main
                    description: My repo description
                    project:
                      public: true
                      avatarUrl: avatarUrl
                      scope: PROJECT
                      name: My Cool Project
                      description: The description for my cool project
                      links: "{}"
                      avatar: avatar
                      id: 2
                      type: NORMAL
                      key: PRJ
                    relatedLinks: "{}"
                    statusMessage: Available
                    archived: true
                    partition: 3
                    public: true
                    scope: REPOSITORY
                    name: My repo
                    forkable: true
                    links: "{}"
                    id: 9
                    scmId: git
                    state: AVAILABLE
                    slug: my-repo
                  description: My repo description
                  project:
                    public: true
                    avatarUrl: avatarUrl
                    scope: PROJECT
                    name: My Cool Project
                    description: The description for my cool project
                    links: "{}"
                    avatar: avatar
                    id: 2
                    type: NORMAL
                    key: PRJ
                  relatedLinks: "{}"
                  statusMessage: Available
                  archived: true
                  partition: 4
                  public: true
                  scope: REPOSITORY
                  name: My repo
                  forkable: true
                  links: "{}"
                  id: 7
                  scmId: git
                  state: AVAILABLE
                  slug: my-repo
                type: BRANCH
              links: "{}"
              id: 1
              state: DECLINED
              locked: true
              open: true
              participants:
              - approved: true
                role: AUTHOR
                user:
                  emailAddress: jane@example.com
                  avatarUrl: avatarUrl
                  displayName: Jane Citizen
                  name: jcitizen
                  active: true
                  links: "{}"
                  id: 101
                  type: NORMAL
                  slug: jcitizen
                lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
                status: UNAPPROVED
              - approved: true
                role: AUTHOR
                user:
                  emailAddress: jane@example.com
                  avatarUrl: avatarUrl
                  displayName: Jane Citizen
                  name: jcitizen
                  active: true
                  links: "{}"
                  id: 101
                  type: NORMAL
                  slug: jcitizen
                lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
                status: UNAPPROVED
          html: html
          id: 1
          state: OPEN
          text: An insightful comment.
          reply: true
          properties: "{}"
          resolvedDate: 1239075920
        - severity: NORMAL
          parent:
            severity: NORMAL
            resolver:
              emailAddress: jane@example.com
              avatarUrl: avatarUrl
              displayName: Jane Citizen
              name: jcitizen
              active: true
              links: "{}"
              id: 101
              type: NORMAL
              slug: jcitizen
            comments:
            - null
            - null
            threadResolved: true
            author:
              emailAddress: jane@example.com
              avatarUrl: avatarUrl
              displayName: Jane Citizen
              name: jcitizen
              active: true
              links: "{}"
              id: 101
              type: NORMAL
              slug: jcitizen
            pending: true
            anchored: true
            updatedDate: 1449075920
            version: 1
            threadResolvedDate: 1569075920
            threadResolver:
              emailAddress: jane@example.com
              avatarUrl: avatarUrl
              displayName: Jane Citizen
              name: jcitizen
              active: true
              links: "{}"
              id: 101
              type: NORMAL
              slug: jcitizen
            createdDate: 1359075920
            anchor:
              multilineSpan:
                srcSpanEnd: 2
                dstSpanStart: 2
                dstSpanEnd: 3
                srcSpanStart: 1
              path:
                parent: path/to
                components:
                - path
                - to
                - file.txt
                extension: txt
                name: file.txt
              fromHash: 62a0505e8204115b8b9c8a95bfa264a8c0896a93
              line: 98
              multilineMarker:
                startLine: 5
                startLineType: ADDED
              lineType: ADDED
              srcPath:
                parent: path/to
                components:
                - path
                - to
                - file.txt
                extension: txt
                name: file.txt
              diffType: COMMIT
              toHash: 3cdd5d19178a54d2e51b5098d43b57571241d0ab
              fileType: FROM
              pullRequest:
                author:
                  approved: true
                  role: AUTHOR
                  user:
                    emailAddress: jane@example.com
                    avatarUrl: avatarUrl
                    displayName: Jane Citizen
                    name: jcitizen
                    active: true
                    links: "{}"
                    id: 101
                    type: NORMAL
                    slug: jcitizen
                  lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
                  status: UNAPPROVED
                description: "It is a kludge, but put the tuple from the database\
                  \ in the cache."
                updatedDate: 14490759200
                htmlDescription: htmlDescription
                title: Talking Nerdy
                reviewers:
                - approved: true
                  role: AUTHOR
                  user:
                    emailAddress: jane@example.com
                    avatarUrl: avatarUrl
                    displayName: Jane Citizen
                    name: jcitizen
                    active: true
                    links: "{}"
                    id: 101
                    type: NORMAL
                    slug: jcitizen
                  lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
                  status: UNAPPROVED
                - approved: true
                  role: AUTHOR
                  user:
                    emailAddress: jane@example.com
                    avatarUrl: avatarUrl
                    displayName: Jane Citizen
                    name: jcitizen
                    active: true
                    links: "{}"
                    id: 101
                    type: NORMAL
                    slug: jcitizen
                  lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
                  status: UNAPPROVED
                version: 0
                toRef:
                  latestCommit: babecafebabecafebabecafebabecafebabecafe
                  id: refs/heads/feature-ABC-123
                  displayId: feature-ABC-1233
                  repository:
                    hierarchyId: e3c939f9ef4a7fae272e
                    defaultBranch: main
                    origin:
                      hierarchyId: e3c939f9ef4a7fae272e
                      defaultBranch: main
                      description: My repo description
                      project:
                        public: true
                        avatarUrl: avatarUrl
                        scope: PROJECT
                        name: My Cool Project
                        description: The description for my cool project
                        links: "{}"
                        avatar: avatar
                        id: 2
                        type: NORMAL
                        key: PRJ
                      relatedLinks: "{}"
                      statusMessage: Available
                      archived: true
                      partition: 3
                      public: true
                      scope: REPOSITORY
                      name: My repo
                      forkable: true
                      links: "{}"
                      id: 9
                      scmId: git
                      state: AVAILABLE
                      slug: my-repo
                    description: My repo description
                    project:
                      public: true
                      avatarUrl: avatarUrl
                      scope: PROJECT
                      name: My Cool Project
                      description: The description for my cool project
                      links: "{}"
                      avatar: avatar
                      id: 2
                      type: NORMAL
                      key: PRJ
                    relatedLinks: "{}"
                    statusMessage: Available
                    archived: true
                    partition: 4
                    public: true
                    scope: REPOSITORY
                    name: My repo
                    forkable: true
                    links: "{}"
                    id: 7
                    scmId: git
                    state: AVAILABLE
                    slug: my-repo
                  type: BRANCH
                descriptionAsHtml: descriptionAsHtml
                createdDate: 13590759200
                closedDate: 19990759200
                draft: true
                closed: true
                fromRef:
                  latestCommit: babecafebabecafebabecafebabecafebabecafe
                  id: refs/heads/feature-ABC-123
                  displayId: feature-ABC-1233
                  repository:
                    hierarchyId: e3c939f9ef4a7fae272e
                    defaultBranch: main
                    origin:
                      hierarchyId: e3c939f9ef4a7fae272e
                      defaultBranch: main
                      description: My repo description
                      project:
                        public: true
                        avatarUrl: avatarUrl
                        scope: PROJECT
                        name: My Cool Project
                        description: The description for my cool project
                        links: "{}"
                        avatar: avatar
                        id: 2
                        type: NORMAL
                        key: PRJ
                      relatedLinks: "{}"
                      statusMessage: Available
                      archived: true
                      partition: 3
                      public: true
                      scope: REPOSITORY
                      name: My repo
                      forkable: true
                      links: "{}"
                      id: 9
                      scmId: git
                      state: AVAILABLE
                      slug: my-repo
                    description: My repo description
                    project:
                      public: true
                      avatarUrl: avatarUrl
                      scope: PROJECT
                      name: My Cool Project
                      description: The description for my cool project
                      links: "{}"
                      avatar: avatar
                      id: 2
                      type: NORMAL
                      key: PRJ
                    relatedLinks: "{}"
                    statusMessage: Available
                    archived: true
                    partition: 4
                    public: true
                    scope: REPOSITORY
                    name: My repo
                    forkable: true
                    links: "{}"
                    id: 7
                    scmId: git
                    state: AVAILABLE
                    slug: my-repo
                  type: BRANCH
                links: "{}"
                id: 1
                state: DECLINED
                locked: true
                open: true
                participants:
                - approved: true
                  role: AUTHOR
                  user:
                    emailAddress: jane@example.com
                    avatarUrl: avatarUrl
                    displayName: Jane Citizen
                    name: jcitizen
                    active: true
                    links: "{}"
                    id: 101
                    type: NORMAL
                    slug: jcitizen
                  lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
                  status: UNAPPROVED
                - approved: true
                  role: AUTHOR
                  user:
                    emailAddress: jane@example.com
                    avatarUrl: avatarUrl
                    displayName: Jane Citizen
                    name: jcitizen
                    active: true
                    links: "{}"
                    id: 101
                    type: NORMAL
                    slug: jcitizen
                  lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
                  status: UNAPPROVED
            html: html
            id: 1
            state: OPEN
            text: An insightful comment.
            reply: true
            properties: "{}"
            resolvedDate: 1239075920
          resolver:
            emailAddress: jane@example.com
            avatarUrl: avatarUrl
            displayName: Jane Citizen
            name: jcitizen
            active: true
            links: "{}"
            id: 101
            type: NORMAL
            slug: jcitizen
          comments:
          - null
          - null
          threadResolved: true
          author:
            emailAddress: jane@example.com
            avatarUrl: avatarUrl
            displayName: Jane Citizen
            name: jcitizen
            active: true
            links: "{}"
            id: 101
            type: NORMAL
            slug: jcitizen
          pending: true
          anchored: true
          updatedDate: 1449075920
          version: 1
          threadResolvedDate: 1569075920
          threadResolver:
            emailAddress: jane@example.com
            avatarUrl: avatarUrl
            displayName: Jane Citizen
            name: jcitizen
            active: true
            links: "{}"
            id: 101
            type: NORMAL
            slug: jcitizen
          createdDate: 1359075920
          anchor:
            multilineSpan:
              srcSpanEnd: 2
              dstSpanStart: 2
              dstSpanEnd: 3
              srcSpanStart: 1
            path:
              parent: path/to
              components:
              - path
              - to
              - file.txt
              extension: txt
              name: file.txt
            fromHash: 62a0505e8204115b8b9c8a95bfa264a8c0896a93
            line: 98
            multilineMarker:
              startLine: 5
              startLineType: ADDED
            lineType: ADDED
            srcPath:
              parent: path/to
              components:
              - path
              - to
              - file.txt
              extension: txt
              name: file.txt
            diffType: COMMIT
            toHash: 3cdd5d19178a54d2e51b5098d43b57571241d0ab
            fileType: FROM
            pullRequest:
              author:
                approved: true
                role: AUTHOR
                user:
                  emailAddress: jane@example.com
                  avatarUrl: avatarUrl
                  displayName: Jane Citizen
                  name: jcitizen
                  active: true
                  links: "{}"
                  id: 101
                  type: NORMAL
                  slug: jcitizen
                lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
                status: UNAPPROVED
              description: "It is a kludge, but put the tuple from the database in\
                \ the cache."
              updatedDate: 14490759200
              htmlDescription: htmlDescription
              title: Talking Nerdy
              reviewers:
              - approved: true
                role: AUTHOR
                user:
                  emailAddress: jane@example.com
                  avatarUrl: avatarUrl
                  displayName: Jane Citizen
                  name: jcitizen
                  active: true
                  links: "{}"
                  id: 101
                  type: NORMAL
                  slug: jcitizen
                lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
                status: UNAPPROVED
              - approved: true
                role: AUTHOR
                user:
                  emailAddress: jane@example.com
                  avatarUrl: avatarUrl
                  displayName: Jane Citizen
                  name: jcitizen
                  active: true
                  links: "{}"
                  id: 101
                  type: NORMAL
                  slug: jcitizen
                lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
                status: UNAPPROVED
              version: 0
              toRef:
                latestCommit: babecafebabecafebabecafebabecafebabecafe
                id: refs/heads/feature-ABC-123
                displayId: feature-ABC-1233
                repository:
                  hierarchyId: e3c939f9ef4a7fae272e
                  defaultBranch: main
                  origin:
                    hierarchyId: e3c939f9ef4a7fae272e
                    defaultBranch: main
                    description: My repo description
                    project:
                      public: true
                      avatarUrl: avatarUrl
                      scope: PROJECT
                      name: My Cool Project
                      description: The description for my cool project
                      links: "{}"
                      avatar: avatar
                      id: 2
                      type: NORMAL
                      key: PRJ
                    relatedLinks: "{}"
                    statusMessage: Available
                    archived: true
                    partition: 3
                    public: true
                    scope: REPOSITORY
                    name: My repo
                    forkable: true
                    links: "{}"
                    id: 9
                    scmId: git
                    state: AVAILABLE
                    slug: my-repo
                  description: My repo description
                  project:
                    public: true
                    avatarUrl: avatarUrl
                    scope: PROJECT
                    name: My Cool Project
                    description: The description for my cool project
                    links: "{}"
                    avatar: avatar
                    id: 2
                    type: NORMAL
                    key: PRJ
                  relatedLinks: "{}"
                  statusMessage: Available
                  archived: true
                  partition: 4
                  public: true
                  scope: REPOSITORY
                  name: My repo
                  forkable: true
                  links: "{}"
                  id: 7
                  scmId: git
                  state: AVAILABLE
                  slug: my-repo
                type: BRANCH
              descriptionAsHtml: descriptionAsHtml
              createdDate: 13590759200
              closedDate: 19990759200
              draft: true
              closed: true
              fromRef:
                latestCommit: babecafebabecafebabecafebabecafebabecafe
                id: refs/heads/feature-ABC-123
                displayId: feature-ABC-1233
                repository:
                  hierarchyId: e3c939f9ef4a7fae272e
                  defaultBranch: main
                  origin:
                    hierarchyId: e3c939f9ef4a7fae272e
                    defaultBranch: main
                    description: My repo description
                    project:
                      public: true
                      avatarUrl: avatarUrl
                      scope: PROJECT
                      name: My Cool Project
                      description: The description for my cool project
                      links: "{}"
                      avatar: avatar
                      id: 2
                      type: NORMAL
                      key: PRJ
                    relatedLinks: "{}"
                    statusMessage: Available
                    archived: true
                    partition: 3
                    public: true
                    scope: REPOSITORY
                    name: My repo
                    forkable: true
                    links: "{}"
                    id: 9
                    scmId: git
                    state: AVAILABLE
                    slug: my-repo
                  description: My repo description
                  project:
                    public: true
                    avatarUrl: avatarUrl
                    scope: PROJECT
                    name: My Cool Project
                    description: The description for my cool project
                    links: "{}"
                    avatar: avatar
                    id: 2
                    type: NORMAL
                    key: PRJ
                  relatedLinks: "{}"
                  statusMessage: Available
                  archived: true
                  partition: 4
                  public: true
                  scope: REPOSITORY
                  name: My repo
                  forkable: true
                  links: "{}"
                  id: 7
                  scmId: git
                  state: AVAILABLE
                  slug: my-repo
                type: BRANCH
              links: "{}"
              id: 1
              state: DECLINED
              locked: true
              open: true
              participants:
              - approved: true
                role: AUTHOR
                user:
                  emailAddress: jane@example.com
                  avatarUrl: avatarUrl
                  displayName: Jane Citizen
                  name: jcitizen
                  active: true
                  links: "{}"
                  id: 101
                  type: NORMAL
                  slug: jcitizen
                lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
                status: UNAPPROVED
              - approved: true
                role: AUTHOR
                user:
                  emailAddress: jane@example.com
                  avatarUrl: avatarUrl
                  displayName: Jane Citizen
                  name: jcitizen
                  active: true
                  links: "{}"
                  id: 101
                  type: NORMAL
                  slug: jcitizen
                lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
                status: UNAPPROVED
          html: html
          id: 1
          state: OPEN
          text: An insightful comment.
          reply: true
          properties: "{}"
          resolvedDate: 1239075920
        limit: 25
        start: 6
      properties:
        isLastPage:
          type: boolean
        limit:
          example: 25
          type: number
        nextPageStart:
          format: int32
          type: integer
        size:
          example: 1
          type: number
        start:
          format: int32
          type: integer
        values:
          items:
            $ref: "#/components/schemas/RestComment"
          type: array
      type: object
    streamFiles_200_response:
      example:
        size: 1
        nextPageStart: 0
        isLastPage: true
        values:
        - null
        - null
        limit: 25
        start: 6
      properties:
        isLastPage:
          type: boolean
        limit:
          example: 25
          type: number
        nextPageStart:
          format: int32
          type: integer
        size:
          example: 1
          type: number
        start:
          format: int32
          type: integer
        values:
          items:
            $ref: "#/components/schemas/FileListResource"
          type: array
      type: object
    getActivities_200_response:
      example:
        size: 1
        nextPageStart: 0
        isLastPage: true
        values:
        - createdDate: 19990759200
          action: APPROVED
          id: 1
          user:
            emailAddress: jane@example.com
            avatarUrl: avatarUrl
            displayName: Jane Citizen
            name: jcitizen
            active: true
            links: "{}"
            id: 101
            type: NORMAL
            slug: jcitizen
        - createdDate: 19990759200
          action: APPROVED
          id: 1
          user:
            emailAddress: jane@example.com
            avatarUrl: avatarUrl
            displayName: Jane Citizen
            name: jcitizen
            active: true
            links: "{}"
            id: 101
            type: NORMAL
            slug: jcitizen
        limit: 25
        start: 6
      properties:
        isLastPage:
          type: boolean
        limit:
          example: 25
          type: number
        nextPageStart:
          format: int32
          type: integer
        size:
          example: 1
          type: number
        start:
          format: int32
          type: integer
        values:
          items:
            $ref: "#/components/schemas/RestPullRequestActivity"
          type: array
      type: object
    listParticipants_200_response:
      example:
        size: 1
        nextPageStart: 0
        isLastPage: true
        values:
        - approved: true
          role: AUTHOR
          user:
            emailAddress: jane@example.com
            avatarUrl: avatarUrl
            displayName: Jane Citizen
            name: jcitizen
            active: true
            links: "{}"
            id: 101
            type: NORMAL
            slug: jcitizen
          lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
          status: UNAPPROVED
        - approved: true
          role: AUTHOR
          user:
            emailAddress: jane@example.com
            avatarUrl: avatarUrl
            displayName: Jane Citizen
            name: jcitizen
            active: true
            links: "{}"
            id: 101
            type: NORMAL
            slug: jcitizen
          lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
          status: UNAPPROVED
        limit: 25
        start: 6
      properties:
        isLastPage:
          type: boolean
        limit:
          example: 25
          type: number
        nextPageStart:
          format: int32
          type: integer
        size:
          example: 1
          type: number
        start:
          format: int32
          type: integer
        values:
          items:
            $ref: "#/components/schemas/RestPullRequestParticipant"
          type: array
      type: object
    getRefChangeActivity_200_response:
      example:
        size: 1
        nextPageStart: 0
        isLastPage: true
        values:
        - createdDate: 19990759200
          refChange:
            fromHash: 6053a1eaa1c009dd11092d09a72f3c41af1b59ad
            ref:
              id: refs/heads/master
              displayId: master
              type: BRANCH
            toHash: d6edcbf924697ab811a867421dab60d954ccad99
            refId: refs/heads/master
            type: ADD
            updatedType: UNKNOWN
          id: 1
          trigger: push
          repository:
            hierarchyId: e3c939f9ef4a7fae272e
            defaultBranch: main
            origin:
              hierarchyId: e3c939f9ef4a7fae272e
              defaultBranch: main
              description: My repo description
              project:
                public: true
                avatarUrl: avatarUrl
                scope: PROJECT
                name: My Cool Project
                description: The description for my cool project
                links: "{}"
                avatar: avatar
                id: 2
                type: NORMAL
                key: PRJ
              relatedLinks: "{}"
              statusMessage: Available
              archived: true
              partition: 3
              public: true
              scope: REPOSITORY
              name: My repo
              forkable: true
              links: "{}"
              id: 9
              scmId: git
              state: AVAILABLE
              slug: my-repo
            description: My repo description
            project:
              public: true
              avatarUrl: avatarUrl
              scope: PROJECT
              name: My Cool Project
              description: The description for my cool project
              links: "{}"
              avatar: avatar
              id: 2
              type: NORMAL
              key: PRJ
            relatedLinks: "{}"
            statusMessage: Available
            archived: true
            partition: 4
            public: true
            scope: REPOSITORY
            name: My repo
            forkable: true
            links: "{}"
            id: 7
            scmId: git
            state: AVAILABLE
            slug: my-repo
          user:
            emailAddress: jane@example.com
            avatarUrl: avatarUrl
            displayName: Jane Citizen
            name: jcitizen
            active: true
            links: "{}"
            id: 101
            type: NORMAL
            slug: jcitizen
        - createdDate: 19990759200
          refChange:
            fromHash: 6053a1eaa1c009dd11092d09a72f3c41af1b59ad
            ref:
              id: refs/heads/master
              displayId: master
              type: BRANCH
            toHash: d6edcbf924697ab811a867421dab60d954ccad99
            refId: refs/heads/master
            type: ADD
            updatedType: UNKNOWN
          id: 1
          trigger: push
          repository:
            hierarchyId: e3c939f9ef4a7fae272e
            defaultBranch: main
            origin:
              hierarchyId: e3c939f9ef4a7fae272e
              defaultBranch: main
              description: My repo description
              project:
                public: true
                avatarUrl: avatarUrl
                scope: PROJECT
                name: My Cool Project
                description: The description for my cool project
                links: "{}"
                avatar: avatar
                id: 2
                type: NORMAL
                key: PRJ
              relatedLinks: "{}"
              statusMessage: Available
              archived: true
              partition: 3
              public: true
              scope: REPOSITORY
              name: My repo
              forkable: true
              links: "{}"
              id: 9
              scmId: git
              state: AVAILABLE
              slug: my-repo
            description: My repo description
            project:
              public: true
              avatarUrl: avatarUrl
              scope: PROJECT
              name: My Cool Project
              description: The description for my cool project
              links: "{}"
              avatar: avatar
              id: 2
              type: NORMAL
              key: PRJ
            relatedLinks: "{}"
            statusMessage: Available
            archived: true
            partition: 4
            public: true
            scope: REPOSITORY
            name: My repo
            forkable: true
            links: "{}"
            id: 7
            scmId: git
            state: AVAILABLE
            slug: my-repo
          user:
            emailAddress: jane@example.com
            avatarUrl: avatarUrl
            displayName: Jane Citizen
            name: jcitizen
            active: true
            links: "{}"
            id: 101
            type: NORMAL
            slug: jcitizen
        limit: 25
        start: 6
      properties:
        isLastPage:
          type: boolean
        limit:
          example: 25
          type: number
        nextPageStart:
          format: int32
          type: integer
        size:
          example: 1
          type: number
        start:
          format: int32
          type: integer
        values:
          items:
            $ref: "#/components/schemas/RestRepositoryRefChangeActivity"
          type: array
      type: object
    search_2_200_response:
      example:
        size: 1
        nextPageStart: 0
        isLastPage: true
        values:
        - pathRegex: '*.pem'
          lineRegex: "(BBDC-[a-zA-Z0-9+]{44})"
          name: Bitbucket DC HTTP access token
          id: 7
        - pathRegex: '*.pem'
          lineRegex: "(BBDC-[a-zA-Z0-9+]{44})"
          name: Bitbucket DC HTTP access token
          id: 7
        limit: 25
        start: 6
      properties:
        isLastPage:
          type: boolean
        limit:
          example: 25
          type: number
        nextPageStart:
          format: int32
          type: integer
        size:
          example: 1
          type: number
        start:
          format: int32
          type: integer
        values:
          items:
            $ref: "#/components/schemas/RestSecretScanningAllowlistRule"
          type: array
      type: object
    search_3_200_response:
      example:
        size: 1
        nextPageStart: 0
        isLastPage: true
        values:
        - pathRegex: '*.pem'
          lineRegex: "(BBDC-[a-zA-Z0-9+]{44})"
          scope:
            resourceId: 2
            type: GLOBAL
          name: Bitbucket DC HTTP access token
          id: 7
        - pathRegex: '*.pem'
          lineRegex: "(BBDC-[a-zA-Z0-9+]{44})"
          scope:
            resourceId: 2
            type: GLOBAL
          name: Bitbucket DC HTTP access token
          id: 7
        limit: 25
        start: 6
      properties:
        isLastPage:
          type: boolean
        limit:
          example: 25
          type: number
        nextPageStart:
          format: int32
          type: integer
        size:
          example: 1
          type: number
        start:
          format: int32
          type: integer
        values:
          items:
            $ref: "#/components/schemas/RestSecretScanningRule"
          type: array
      type: object
    getRepositoryHooks_1_200_response:
      example:
        size: 1
        nextPageStart: 0
        isLastPage: true
        values:
        - configured: true
          scope:
            resourceId: 2
            type: GLOBAL
          details:
            configFormKey: configFormKey
            supportedScopes:
            - GLOBAL
            - GLOBAL
            name: name
            description: description
            type: PRE_RECEIVE
            version: version
            key: key
          enabled: true
        - configured: true
          scope:
            resourceId: 2
            type: GLOBAL
          details:
            configFormKey: configFormKey
            supportedScopes:
            - GLOBAL
            - GLOBAL
            name: name
            description: description
            type: PRE_RECEIVE
            version: version
            key: key
          enabled: true
        limit: 25
        start: 6
      properties:
        isLastPage:
          type: boolean
        limit:
          example: 25
          type: number
        nextPageStart:
          format: int32
          type: integer
        size:
          example: 1
          type: number
        start:
          format: int32
          type: integer
        values:
          items:
            $ref: "#/components/schemas/RestRepositoryHook"
          type: array
      type: object
    getReviewerGroups_1_200_response:
      example:
        size: 1
        nextPageStart: 0
        isLastPage: true
        values:
        - avatarUrl: avatarUrl
          scope:
            resourceId: 2
            type: GLOBAL
          name: name
          description: "null"
          id: 0
          users:
          - emailAddress: emailAddress
            displayName: displayName
            name: name
            active: true
            id: 6
            type: NORMAL
            slug: slug
          - emailAddress: emailAddress
            displayName: displayName
            name: name
            active: true
            id: 6
            type: NORMAL
            slug: slug
        - avatarUrl: avatarUrl
          scope:
            resourceId: 2
            type: GLOBAL
          name: name
          description: "null"
          id: 0
          users:
          - emailAddress: emailAddress
            displayName: displayName
            name: name
            active: true
            id: 6
            type: NORMAL
            slug: slug
          - emailAddress: emailAddress
            displayName: displayName
            name: name
            active: true
            id: 6
            type: NORMAL
            slug: slug
        limit: 25
        start: 6
      properties:
        isLastPage:
          type: boolean
        limit:
          example: 25
          type: number
        nextPageStart:
          format: int32
          type: integer
        size:
          example: 1
          type: number
        start:
          format: int32
          type: integer
        values:
          items:
            $ref: "#/components/schemas/RestReviewerGroup"
          type: array
      type: object
    getTags_200_response:
      example:
        size: 1
        nextPageStart: 0
        isLastPage: true
        values:
        - latestCommit: 8d51122def5632836d1cb1026e879069e10a1e13
          latestChangeset: 8d51122def5632836d1cb1026e879069e10a1e13
          id: refs/heads/master
          displayId: master
          type: BRANCH
          hash: 8d51122def5632836d1cb1026e879069e10a1e13
        - latestCommit: 8d51122def5632836d1cb1026e879069e10a1e13
          latestChangeset: 8d51122def5632836d1cb1026e879069e10a1e13
          id: refs/heads/master
          displayId: master
          type: BRANCH
          hash: 8d51122def5632836d1cb1026e879069e10a1e13
        limit: 25
        start: 6
      properties:
        isLastPage:
          type: boolean
        limit:
          example: 25
          type: number
        nextPageStart:
          format: int32
          type: integer
        size:
          example: 1
          type: number
        start:
          format: int32
          type: integer
        values:
          items:
            $ref: "#/components/schemas/RestTag"
          type: array
      type: object
    getAll_200_response:
      example:
        size: 1
        nextPageStart: 0
        isLastPage: true
        values:
        - namespace: org.featuredeveloper
          project:
            public: true
            avatarUrl: avatarUrl
            scope: PROJECT
            name: My Cool Project
            description: The description for my cool project
            links: "{}"
            avatar: avatar
            id: 2
            type: NORMAL
            key: PRJ
          processedState: PROCESSED
          componentKey: my-admin-component
          featureKey: my-admin-feature
        - namespace: org.featuredeveloper
          project:
            public: true
            avatarUrl: avatarUrl
            scope: PROJECT
            name: My Cool Project
            description: The description for my cool project
            links: "{}"
            avatar: avatar
            id: 2
            type: NORMAL
            key: PRJ
          processedState: PROCESSED
          componentKey: my-admin-component
          featureKey: my-admin-feature
        limit: 25
        start: 6
      properties:
        isLastPage:
          type: boolean
        limit:
          example: 25
          type: number
        nextPageStart:
          format: int32
          type: integer
        size:
          example: 1
          type: number
        start:
          format: int32
          type: integer
        values:
          items:
            $ref: "#/components/schemas/RestProjectSettingsRestriction"
          type: array
      type: object
    updateSystemSigningConfiguration_request:
      properties:
        enabled:
          example: false
          type: boolean
      type: object
    RestBuildStatus_testResults:
      example:
        failed: 1
        skipped: 5
        successful: 134
      properties:
        failed:
          example: 1
          format: int32
          type: integer
        skipped:
          example: 5
          format: int32
          type: integer
        successful:
          example: 134
          format: int32
          type: integer
      type: object
    RestPullRequestCondition_scope:
      example:
        resourceId: 2
        type: GLOBAL
      properties:
        resourceId:
          example: 2
          format: int32
          type: integer
        type:
          enum:
          - GLOBAL
          - PROJECT
          - REPOSITORY
          type: string
      readOnly: true
      type: object
    RestReviewerGroup_scope:
      example:
        resourceId: 2
        type: GLOBAL
      properties:
        resourceId:
          example: 2
          format: int32
          type: integer
        type:
          enum:
          - GLOBAL
          - PROJECT
          - REPOSITORY
          type: string
      type: object
    RestChangeset_changes:
      example:
        size: 5
        nextPageStart: 5
        isLastPage: true
        values: "{}"
        limit: 1
        start: 2
      properties:
        isLastPage:
          type: boolean
        limit:
          format: int32
          type: integer
        nextPageStart:
          format: int32
          type: integer
        size:
          format: int32
          type: integer
        start:
          format: int32
          type: integer
        values:
          type: object
      type: object
    RestChangeset_fromCommit:
      example:
        id: abcdef0123abcdef4567abcdef8987abcdef6543
        displayId: abcdef0
      properties:
        displayId:
          example: abcdef0
          type: string
        id:
          example: abcdef0123abcdef4567abcdef8987abcdef6543
          type: string
      type: object
    RestChangeset_repository_origin_project:
      example:
        public: true
        avatarUrl: avatarUrl
        scope: PROJECT
        name: My Cool Project
        description: The description for my cool project
        links: "{}"
        avatar: avatar
        id: 2
        type: NORMAL
        key: PRJ
      properties:
        avatar:
          type: string
        avatarUrl:
          type: string
          writeOnly: true
        description:
          example: The description for my cool project
          readOnly: true
          type: string
        id:
          format: int32
          readOnly: true
          type: integer
        key:
          example: PRJ
          type: string
        links:
          properties: {}
          type: object
          writeOnly: true
        name:
          example: My Cool Project
          pattern: "^[^~].*"
          readOnly: true
          type: string
        public:
          readOnly: true
          type: boolean
        scope:
          example: PROJECT
          readOnly: true
          type: string
        type:
          enum:
          - NORMAL
          - PERSONAL
          readOnly: true
          type: string
      required:
      - key
      type: object
    RestChangeset_repository_origin:
      example:
        hierarchyId: e3c939f9ef4a7fae272e
        defaultBranch: main
        description: My repo description
        project:
          public: true
          avatarUrl: avatarUrl
          scope: PROJECT
          name: My Cool Project
          description: The description for my cool project
          links: "{}"
          avatar: avatar
          id: 2
          type: NORMAL
          key: PRJ
        relatedLinks: "{}"
        statusMessage: Available
        archived: true
        partition: 3
        public: true
        scope: REPOSITORY
        name: My repo
        forkable: true
        links: "{}"
        id: 9
        scmId: git
        state: AVAILABLE
        slug: my-repo
      properties:
        archived:
          readOnly: true
          type: boolean
        defaultBranch:
          example: main
          type: string
          writeOnly: true
        description:
          example: My repo description
          readOnly: true
          type: string
        forkable:
          readOnly: true
          type: boolean
        hierarchyId:
          example: e3c939f9ef4a7fae272e
          readOnly: true
          type: string
        id:
          format: int32
          readOnly: true
          type: integer
        links:
          properties: {}
          type: object
          writeOnly: true
        name:
          example: My repo
          type: string
        partition:
          format: int32
          readOnly: true
          type: integer
        project:
          $ref: "#/components/schemas/RestChangeset_repository_origin_project"
        public:
          readOnly: true
          type: boolean
        relatedLinks:
          properties: {}
          readOnly: true
          type: object
        scmId:
          example: git
          type: string
        scope:
          example: REPOSITORY
          readOnly: true
          type: string
        slug:
          example: my-repo
          type: string
        state:
          enum:
          - AVAILABLE
          - INITIALISATION_FAILED
          - INITIALISING
          - OFFLINE
          readOnly: true
          type: string
        statusMessage:
          example: Available
          readOnly: true
          type: string
      readOnly: true
      type: object
    RestChangeset_repository:
      example:
        hierarchyId: e3c939f9ef4a7fae272e
        defaultBranch: main
        origin:
          hierarchyId: e3c939f9ef4a7fae272e
          defaultBranch: main
          description: My repo description
          project:
            public: true
            avatarUrl: avatarUrl
            scope: PROJECT
            name: My Cool Project
            description: The description for my cool project
            links: "{}"
            avatar: avatar
            id: 2
            type: NORMAL
            key: PRJ
          relatedLinks: "{}"
          statusMessage: Available
          archived: true
          partition: 3
          public: true
          scope: REPOSITORY
          name: My repo
          forkable: true
          links: "{}"
          id: 9
          scmId: git
          state: AVAILABLE
          slug: my-repo
        description: My repo description
        project:
          public: true
          avatarUrl: avatarUrl
          scope: PROJECT
          name: My Cool Project
          description: The description for my cool project
          links: "{}"
          avatar: avatar
          id: 2
          type: NORMAL
          key: PRJ
        relatedLinks: "{}"
        statusMessage: Available
        archived: true
        partition: 4
        public: true
        scope: REPOSITORY
        name: My repo
        forkable: true
        links: "{}"
        id: 7
        scmId: git
        state: AVAILABLE
        slug: my-repo
      properties:
        archived:
          readOnly: true
          type: boolean
        defaultBranch:
          example: main
          type: string
          writeOnly: true
        description:
          example: My repo description
          readOnly: true
          type: string
        forkable:
          readOnly: true
          type: boolean
        hierarchyId:
          example: e3c939f9ef4a7fae272e
          readOnly: true
          type: string
        id:
          format: int32
          readOnly: true
          type: integer
        links:
          properties: {}
          type: object
          writeOnly: true
        name:
          example: My repo
          type: string
        origin:
          $ref: "#/components/schemas/RestChangeset_repository_origin"
        partition:
          format: int32
          readOnly: true
          type: integer
        project:
          $ref: "#/components/schemas/RestChangeset_repository_origin_project"
        public:
          readOnly: true
          type: boolean
        relatedLinks:
          properties: {}
          readOnly: true
          type: object
        scmId:
          example: git
          type: string
        scope:
          example: REPOSITORY
          readOnly: true
          type: string
        slug:
          example: my-repo
          type: string
        state:
          enum:
          - AVAILABLE
          - INITIALISATION_FAILED
          - INITIALISING
          - OFFLINE
          readOnly: true
          type: string
        statusMessage:
          example: Available
          readOnly: true
          type: string
      type: object
    RestChangeset_toCommit_author:
      example:
        emailAddress: charlie@example.com
        avatarUrl: avatarUrl
        name: Charlie
      properties:
        avatarUrl:
          type: string
          writeOnly: true
        emailAddress:
          example: charlie@example.com
          type: string
        name:
          example: Charlie
          type: string
      type: object
    RestChangeset_toCommit:
      example:
        committer:
          emailAddress: charlie@example.com
          avatarUrl: avatarUrl
          name: Charlie
        committerTimestamp: 1449075830
        author:
          emailAddress: charlie@example.com
          avatarUrl: avatarUrl
          name: Charlie
        authorTimestamp: 1359075920
        id: abcdef0123abcdef4567abcdef8987abcdef6543
        displayId: abcdef0
        message: More work on feature 1
        parents:
        - id: abcdef0123abcdef4567abcdef8987abcdef6543
          displayId: abcdef0
        - id: abcdef0123abcdef4567abcdef8987abcdef6543
          displayId: abcdef0
      properties:
        author:
          $ref: "#/components/schemas/RestChangeset_toCommit_author"
        authorTimestamp:
          example: 1359075920
          format: int64
          type: integer
        committer:
          $ref: "#/components/schemas/RestChangeset_toCommit_author"
        committerTimestamp:
          example: 1449075830
          format: int64
          type: integer
        displayId:
          example: abcdef0
          type: string
        id:
          example: abcdef0123abcdef4567abcdef8987abcdef6543
          type: string
        message:
          example: More work on feature 1
          type: string
        parents:
          items:
            $ref: "#/components/schemas/RestMinimalCommit"
          type: array
      type: object
    RestComment_anchor_multilineMarker:
      example:
        startLine: 5
        startLineType: ADDED
      properties:
        startLine:
          description: The line number where the multiline comment will begin
          example: 5
          format: int32
          type: integer
        startLineType:
          description: The segment type of the start line of the multiline comment
          enum:
          - ADDED
          - CONTEXT
          - REMOVED
          type: string
      readOnly: true
      required:
      - startLineType
      type: object
    RestComment_anchor_multilineSpan:
      example:
        srcSpanEnd: 2
        dstSpanStart: 2
        dstSpanEnd: 3
        srcSpanStart: 1
      properties:
        dstSpanEnd:
          description: The line number of the last line on the right-hand side of
            the diff that the comment spans
          example: 3
          format: int32
          readOnly: true
          type: integer
        dstSpanStart:
          description: The line number of the first line on the right-hand side of
            the diff that the comment spans
          example: 2
          format: int32
          readOnly: true
          type: integer
        srcSpanEnd:
          description: The line number of the last line on the left-hand side of the
            diff that the comment spans
          example: 2
          format: int32
          readOnly: true
          type: integer
        srcSpanStart:
          description: The line number of the first line on the left-hand side of
            the diff that the comment spans
          example: 1
          format: int32
          readOnly: true
          type: integer
      readOnly: true
      type: object
    RestComment_anchor_path:
      example:
        parent: path/to
        components:
        - path
        - to
        - file.txt
        extension: txt
        name: file.txt
      properties:
        components:
          example:
          - path
          - to
          - file.txt
          items:
            type: string
          type: array
        extension:
          example: txt
          type: string
        name:
          example: file.txt
          type: string
        parent:
          example: path/to
          type: string
      type: object
    RestComment_anchor_pullRequest_author_user:
      example:
        emailAddress: jane@example.com
        avatarUrl: avatarUrl
        displayName: Jane Citizen
        name: jcitizen
        active: true
        links: "{}"
        id: 101
        type: NORMAL
        slug: jcitizen
      properties:
        active:
          type: boolean
        avatarUrl:
          type: string
          writeOnly: true
        displayName:
          example: Jane Citizen
          type: string
        emailAddress:
          example: jane@example.com
          type: string
        id:
          example: 101
          format: int32
          readOnly: true
          type: integer
        links:
          properties: {}
          type: object
          writeOnly: true
        name:
          example: jcitizen
          type: string
        slug:
          example: jcitizen
          type: string
        type:
          enum:
          - NORMAL
          - SERVICE
          type: string
      type: object
    RestComment_anchor_pullRequest_author:
      example:
        approved: true
        role: AUTHOR
        user:
          emailAddress: jane@example.com
          avatarUrl: avatarUrl
          displayName: Jane Citizen
          name: jcitizen
          active: true
          links: "{}"
          id: 101
          type: NORMAL
          slug: jcitizen
        lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
        status: UNAPPROVED
      properties:
        approved:
          type: boolean
        lastReviewedCommit:
          example: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
          type: string
        role:
          enum:
          - AUTHOR
          - REVIEWER
          - PARTICIPANT
          type: string
        status:
          enum:
          - UNAPPROVED
          - NEEDS_WORK
          - APPROVED
          type: string
        user:
          $ref: "#/components/schemas/RestComment_anchor_pullRequest_author_user"
      readOnly: true
      type: object
    RestComment_anchor_pullRequest_fromRef:
      example:
        latestCommit: babecafebabecafebabecafebabecafebabecafe
        id: refs/heads/feature-ABC-123
        displayId: feature-ABC-1233
        repository:
          hierarchyId: e3c939f9ef4a7fae272e
          defaultBranch: main
          origin:
            hierarchyId: e3c939f9ef4a7fae272e
            defaultBranch: main
            description: My repo description
            project:
              public: true
              avatarUrl: avatarUrl
              scope: PROJECT
              name: My Cool Project
              description: The description for my cool project
              links: "{}"
              avatar: avatar
              id: 2
              type: NORMAL
              key: PRJ
            relatedLinks: "{}"
            statusMessage: Available
            archived: true
            partition: 3
            public: true
            scope: REPOSITORY
            name: My repo
            forkable: true
            links: "{}"
            id: 9
            scmId: git
            state: AVAILABLE
            slug: my-repo
          description: My repo description
          project:
            public: true
            avatarUrl: avatarUrl
            scope: PROJECT
            name: My Cool Project
            description: The description for my cool project
            links: "{}"
            avatar: avatar
            id: 2
            type: NORMAL
            key: PRJ
          relatedLinks: "{}"
          statusMessage: Available
          archived: true
          partition: 4
          public: true
          scope: REPOSITORY
          name: My repo
          forkable: true
          links: "{}"
          id: 7
          scmId: git
          state: AVAILABLE
          slug: my-repo
        type: BRANCH
      properties:
        displayId:
          example: feature-ABC-1233
          type: string
        id:
          example: refs/heads/feature-ABC-123
          type: string
        latestCommit:
          example: babecafebabecafebabecafebabecafebabecafe
          type: string
        repository:
          $ref: "#/components/schemas/RestChangeset_repository"
        type:
          enum:
          - BRANCH
          - TAG
          type: string
      type: object
    RestComment_anchor_pullRequest:
      example:
        author:
          approved: true
          role: AUTHOR
          user:
            emailAddress: jane@example.com
            avatarUrl: avatarUrl
            displayName: Jane Citizen
            name: jcitizen
            active: true
            links: "{}"
            id: 101
            type: NORMAL
            slug: jcitizen
          lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
          status: UNAPPROVED
        description: "It is a kludge, but put the tuple from the database in the cache."
        updatedDate: 14490759200
        htmlDescription: htmlDescription
        title: Talking Nerdy
        reviewers:
        - approved: true
          role: AUTHOR
          user:
            emailAddress: jane@example.com
            avatarUrl: avatarUrl
            displayName: Jane Citizen
            name: jcitizen
            active: true
            links: "{}"
            id: 101
            type: NORMAL
            slug: jcitizen
          lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
          status: UNAPPROVED
        - approved: true
          role: AUTHOR
          user:
            emailAddress: jane@example.com
            avatarUrl: avatarUrl
            displayName: Jane Citizen
            name: jcitizen
            active: true
            links: "{}"
            id: 101
            type: NORMAL
            slug: jcitizen
          lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
          status: UNAPPROVED
        version: 0
        toRef:
          latestCommit: babecafebabecafebabecafebabecafebabecafe
          id: refs/heads/feature-ABC-123
          displayId: feature-ABC-1233
          repository:
            hierarchyId: e3c939f9ef4a7fae272e
            defaultBranch: main
            origin:
              hierarchyId: e3c939f9ef4a7fae272e
              defaultBranch: main
              description: My repo description
              project:
                public: true
                avatarUrl: avatarUrl
                scope: PROJECT
                name: My Cool Project
                description: The description for my cool project
                links: "{}"
                avatar: avatar
                id: 2
                type: NORMAL
                key: PRJ
              relatedLinks: "{}"
              statusMessage: Available
              archived: true
              partition: 3
              public: true
              scope: REPOSITORY
              name: My repo
              forkable: true
              links: "{}"
              id: 9
              scmId: git
              state: AVAILABLE
              slug: my-repo
            description: My repo description
            project:
              public: true
              avatarUrl: avatarUrl
              scope: PROJECT
              name: My Cool Project
              description: The description for my cool project
              links: "{}"
              avatar: avatar
              id: 2
              type: NORMAL
              key: PRJ
            relatedLinks: "{}"
            statusMessage: Available
            archived: true
            partition: 4
            public: true
            scope: REPOSITORY
            name: My repo
            forkable: true
            links: "{}"
            id: 7
            scmId: git
            state: AVAILABLE
            slug: my-repo
          type: BRANCH
        descriptionAsHtml: descriptionAsHtml
        createdDate: 13590759200
        closedDate: 19990759200
        draft: true
        closed: true
        fromRef:
          latestCommit: babecafebabecafebabecafebabecafebabecafe
          id: refs/heads/feature-ABC-123
          displayId: feature-ABC-1233
          repository:
            hierarchyId: e3c939f9ef4a7fae272e
            defaultBranch: main
            origin:
              hierarchyId: e3c939f9ef4a7fae272e
              defaultBranch: main
              description: My repo description
              project:
                public: true
                avatarUrl: avatarUrl
                scope: PROJECT
                name: My Cool Project
                description: The description for my cool project
                links: "{}"
                avatar: avatar
                id: 2
                type: NORMAL
                key: PRJ
              relatedLinks: "{}"
              statusMessage: Available
              archived: true
              partition: 3
              public: true
              scope: REPOSITORY
              name: My repo
              forkable: true
              links: "{}"
              id: 9
              scmId: git
              state: AVAILABLE
              slug: my-repo
            description: My repo description
            project:
              public: true
              avatarUrl: avatarUrl
              scope: PROJECT
              name: My Cool Project
              description: The description for my cool project
              links: "{}"
              avatar: avatar
              id: 2
              type: NORMAL
              key: PRJ
            relatedLinks: "{}"
            statusMessage: Available
            archived: true
            partition: 4
            public: true
            scope: REPOSITORY
            name: My repo
            forkable: true
            links: "{}"
            id: 7
            scmId: git
            state: AVAILABLE
            slug: my-repo
          type: BRANCH
        links: "{}"
        id: 1
        state: DECLINED
        locked: true
        open: true
        participants:
        - approved: true
          role: AUTHOR
          user:
            emailAddress: jane@example.com
            avatarUrl: avatarUrl
            displayName: Jane Citizen
            name: jcitizen
            active: true
            links: "{}"
            id: 101
            type: NORMAL
            slug: jcitizen
          lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
          status: UNAPPROVED
        - approved: true
          role: AUTHOR
          user:
            emailAddress: jane@example.com
            avatarUrl: avatarUrl
            displayName: Jane Citizen
            name: jcitizen
            active: true
            links: "{}"
            id: 101
            type: NORMAL
            slug: jcitizen
          lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
          status: UNAPPROVED
      properties:
        author:
          $ref: "#/components/schemas/RestComment_anchor_pullRequest_author"
        closed:
          type: boolean
        closedDate:
          example: 19990759200
          format: int64
          type: integer
        createdDate:
          example: 13590759200
          format: int64
          type: integer
        description:
          example: "It is a kludge, but put the tuple from the database in the cache."
          type: string
        descriptionAsHtml:
          type: string
        draft:
          type: boolean
        fromRef:
          $ref: "#/components/schemas/RestComment_anchor_pullRequest_fromRef"
        htmlDescription:
          type: string
          writeOnly: true
        id:
          example: 1
          format: int64
          type: integer
        links:
          properties: {}
          type: object
          writeOnly: true
        locked:
          type: boolean
        open:
          type: boolean
        participants:
          items:
            $ref: "#/components/schemas/RestPullRequestParticipant"
          type: array
        reviewers:
          items:
            $ref: "#/components/schemas/RestPullRequestParticipant"
          type: array
        state:
          enum:
          - DECLINED
          - MERGED
          - OPEN
          type: string
        title:
          example: Talking Nerdy
          type: string
        toRef:
          $ref: "#/components/schemas/RestComment_anchor_pullRequest_fromRef"
        updatedDate:
          example: 14490759200
          format: int64
          type: integer
        version:
          format: int32
          type: integer
      readOnly: true
      type: object
    RestComment_anchor:
      example:
        multilineSpan:
          srcSpanEnd: 2
          dstSpanStart: 2
          dstSpanEnd: 3
          srcSpanStart: 1
        path:
          parent: path/to
          components:
          - path
          - to
          - file.txt
          extension: txt
          name: file.txt
        fromHash: 62a0505e8204115b8b9c8a95bfa264a8c0896a93
        line: 98
        multilineMarker:
          startLine: 5
          startLineType: ADDED
        lineType: ADDED
        srcPath:
          parent: path/to
          components:
          - path
          - to
          - file.txt
          extension: txt
          name: file.txt
        diffType: COMMIT
        toHash: 3cdd5d19178a54d2e51b5098d43b57571241d0ab
        fileType: FROM
        pullRequest:
          author:
            approved: true
            role: AUTHOR
            user:
              emailAddress: jane@example.com
              avatarUrl: avatarUrl
              displayName: Jane Citizen
              name: jcitizen
              active: true
              links: "{}"
              id: 101
              type: NORMAL
              slug: jcitizen
            lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
            status: UNAPPROVED
          description: "It is a kludge, but put the tuple from the database in the\
            \ cache."
          updatedDate: 14490759200
          htmlDescription: htmlDescription
          title: Talking Nerdy
          reviewers:
          - approved: true
            role: AUTHOR
            user:
              emailAddress: jane@example.com
              avatarUrl: avatarUrl
              displayName: Jane Citizen
              name: jcitizen
              active: true
              links: "{}"
              id: 101
              type: NORMAL
              slug: jcitizen
            lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
            status: UNAPPROVED
          - approved: true
            role: AUTHOR
            user:
              emailAddress: jane@example.com
              avatarUrl: avatarUrl
              displayName: Jane Citizen
              name: jcitizen
              active: true
              links: "{}"
              id: 101
              type: NORMAL
              slug: jcitizen
            lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
            status: UNAPPROVED
          version: 0
          toRef:
            latestCommit: babecafebabecafebabecafebabecafebabecafe
            id: refs/heads/feature-ABC-123
            displayId: feature-ABC-1233
            repository:
              hierarchyId: e3c939f9ef4a7fae272e
              defaultBranch: main
              origin:
                hierarchyId: e3c939f9ef4a7fae272e
                defaultBranch: main
                description: My repo description
                project:
                  public: true
                  avatarUrl: avatarUrl
                  scope: PROJECT
                  name: My Cool Project
                  description: The description for my cool project
                  links: "{}"
                  avatar: avatar
                  id: 2
                  type: NORMAL
                  key: PRJ
                relatedLinks: "{}"
                statusMessage: Available
                archived: true
                partition: 3
                public: true
                scope: REPOSITORY
                name: My repo
                forkable: true
                links: "{}"
                id: 9
                scmId: git
                state: AVAILABLE
                slug: my-repo
              description: My repo description
              project:
                public: true
                avatarUrl: avatarUrl
                scope: PROJECT
                name: My Cool Project
                description: The description for my cool project
                links: "{}"
                avatar: avatar
                id: 2
                type: NORMAL
                key: PRJ
              relatedLinks: "{}"
              statusMessage: Available
              archived: true
              partition: 4
              public: true
              scope: REPOSITORY
              name: My repo
              forkable: true
              links: "{}"
              id: 7
              scmId: git
              state: AVAILABLE
              slug: my-repo
            type: BRANCH
          descriptionAsHtml: descriptionAsHtml
          createdDate: 13590759200
          closedDate: 19990759200
          draft: true
          closed: true
          fromRef:
            latestCommit: babecafebabecafebabecafebabecafebabecafe
            id: refs/heads/feature-ABC-123
            displayId: feature-ABC-1233
            repository:
              hierarchyId: e3c939f9ef4a7fae272e
              defaultBranch: main
              origin:
                hierarchyId: e3c939f9ef4a7fae272e
                defaultBranch: main
                description: My repo description
                project:
                  public: true
                  avatarUrl: avatarUrl
                  scope: PROJECT
                  name: My Cool Project
                  description: The description for my cool project
                  links: "{}"
                  avatar: avatar
                  id: 2
                  type: NORMAL
                  key: PRJ
                relatedLinks: "{}"
                statusMessage: Available
                archived: true
                partition: 3
                public: true
                scope: REPOSITORY
                name: My repo
                forkable: true
                links: "{}"
                id: 9
                scmId: git
                state: AVAILABLE
                slug: my-repo
              description: My repo description
              project:
                public: true
                avatarUrl: avatarUrl
                scope: PROJECT
                name: My Cool Project
                description: The description for my cool project
                links: "{}"
                avatar: avatar
                id: 2
                type: NORMAL
                key: PRJ
              relatedLinks: "{}"
              statusMessage: Available
              archived: true
              partition: 4
              public: true
              scope: REPOSITORY
              name: My repo
              forkable: true
              links: "{}"
              id: 7
              scmId: git
              state: AVAILABLE
              slug: my-repo
            type: BRANCH
          links: "{}"
          id: 1
          state: DECLINED
          locked: true
          open: true
          participants:
          - approved: true
            role: AUTHOR
            user:
              emailAddress: jane@example.com
              avatarUrl: avatarUrl
              displayName: Jane Citizen
              name: jcitizen
              active: true
              links: "{}"
              id: 101
              type: NORMAL
              slug: jcitizen
            lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
            status: UNAPPROVED
          - approved: true
            role: AUTHOR
            user:
              emailAddress: jane@example.com
              avatarUrl: avatarUrl
              displayName: Jane Citizen
              name: jcitizen
              active: true
              links: "{}"
              id: 101
              type: NORMAL
              slug: jcitizen
            lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
            status: UNAPPROVED
      properties:
        diffType:
          enum:
          - COMMIT
          - EFFECTIVE
          - RANGE
          type: string
        fileType:
          enum:
          - FROM
          - TO
          type: string
        fromHash:
          example: 62a0505e8204115b8b9c8a95bfa264a8c0896a93
          type: string
        line:
          example: 98
          format: int32
          type: integer
        lineType:
          enum:
          - ADDED
          - CONTEXT
          - REMOVED
          type: string
        multilineMarker:
          $ref: "#/components/schemas/RestComment_anchor_multilineMarker"
        multilineSpan:
          $ref: "#/components/schemas/RestComment_anchor_multilineSpan"
        path:
          $ref: "#/components/schemas/RestComment_anchor_path"
        pullRequest:
          $ref: "#/components/schemas/RestComment_anchor_pullRequest"
        srcPath:
          $ref: "#/components/schemas/RestComment_anchor_path"
        toHash:
          example: 3cdd5d19178a54d2e51b5098d43b57571241d0ab
          type: string
      readOnly: true
      type: object
    RestComment_author:
      example:
        emailAddress: jane@example.com
        avatarUrl: avatarUrl
        displayName: Jane Citizen
        name: jcitizen
        active: true
        links: "{}"
        id: 101
        type: NORMAL
        slug: jcitizen
      properties:
        active:
          type: boolean
        avatarUrl:
          type: string
          writeOnly: true
        displayName:
          example: Jane Citizen
          type: string
        emailAddress:
          example: jane@example.com
          type: string
        id:
          example: 101
          format: int32
          readOnly: true
          type: integer
        links:
          properties: {}
          type: object
          writeOnly: true
        name:
          example: jcitizen
          type: string
        slug:
          example: jcitizen
          type: string
        type:
          enum:
          - NORMAL
          - SERVICE
          type: string
      readOnly: true
      type: object
    RestComment_parent:
      example:
        severity: NORMAL
        resolver:
          emailAddress: jane@example.com
          avatarUrl: avatarUrl
          displayName: Jane Citizen
          name: jcitizen
          active: true
          links: "{}"
          id: 101
          type: NORMAL
          slug: jcitizen
        comments:
        - null
        - null
        threadResolved: true
        author:
          emailAddress: jane@example.com
          avatarUrl: avatarUrl
          displayName: Jane Citizen
          name: jcitizen
          active: true
          links: "{}"
          id: 101
          type: NORMAL
          slug: jcitizen
        pending: true
        anchored: true
        updatedDate: 1449075920
        version: 1
        threadResolvedDate: 1569075920
        threadResolver:
          emailAddress: jane@example.com
          avatarUrl: avatarUrl
          displayName: Jane Citizen
          name: jcitizen
          active: true
          links: "{}"
          id: 101
          type: NORMAL
          slug: jcitizen
        createdDate: 1359075920
        anchor:
          multilineSpan:
            srcSpanEnd: 2
            dstSpanStart: 2
            dstSpanEnd: 3
            srcSpanStart: 1
          path:
            parent: path/to
            components:
            - path
            - to
            - file.txt
            extension: txt
            name: file.txt
          fromHash: 62a0505e8204115b8b9c8a95bfa264a8c0896a93
          line: 98
          multilineMarker:
            startLine: 5
            startLineType: ADDED
          lineType: ADDED
          srcPath:
            parent: path/to
            components:
            - path
            - to
            - file.txt
            extension: txt
            name: file.txt
          diffType: COMMIT
          toHash: 3cdd5d19178a54d2e51b5098d43b57571241d0ab
          fileType: FROM
          pullRequest:
            author:
              approved: true
              role: AUTHOR
              user:
                emailAddress: jane@example.com
                avatarUrl: avatarUrl
                displayName: Jane Citizen
                name: jcitizen
                active: true
                links: "{}"
                id: 101
                type: NORMAL
                slug: jcitizen
              lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
              status: UNAPPROVED
            description: "It is a kludge, but put the tuple from the database in the\
              \ cache."
            updatedDate: 14490759200
            htmlDescription: htmlDescription
            title: Talking Nerdy
            reviewers:
            - approved: true
              role: AUTHOR
              user:
                emailAddress: jane@example.com
                avatarUrl: avatarUrl
                displayName: Jane Citizen
                name: jcitizen
                active: true
                links: "{}"
                id: 101
                type: NORMAL
                slug: jcitizen
              lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
              status: UNAPPROVED
            - approved: true
              role: AUTHOR
              user:
                emailAddress: jane@example.com
                avatarUrl: avatarUrl
                displayName: Jane Citizen
                name: jcitizen
                active: true
                links: "{}"
                id: 101
                type: NORMAL
                slug: jcitizen
              lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
              status: UNAPPROVED
            version: 0
            toRef:
              latestCommit: babecafebabecafebabecafebabecafebabecafe
              id: refs/heads/feature-ABC-123
              displayId: feature-ABC-1233
              repository:
                hierarchyId: e3c939f9ef4a7fae272e
                defaultBranch: main
                origin:
                  hierarchyId: e3c939f9ef4a7fae272e
                  defaultBranch: main
                  description: My repo description
                  project:
                    public: true
                    avatarUrl: avatarUrl
                    scope: PROJECT
                    name: My Cool Project
                    description: The description for my cool project
                    links: "{}"
                    avatar: avatar
                    id: 2
                    type: NORMAL
                    key: PRJ
                  relatedLinks: "{}"
                  statusMessage: Available
                  archived: true
                  partition: 3
                  public: true
                  scope: REPOSITORY
                  name: My repo
                  forkable: true
                  links: "{}"
                  id: 9
                  scmId: git
                  state: AVAILABLE
                  slug: my-repo
                description: My repo description
                project:
                  public: true
                  avatarUrl: avatarUrl
                  scope: PROJECT
                  name: My Cool Project
                  description: The description for my cool project
                  links: "{}"
                  avatar: avatar
                  id: 2
                  type: NORMAL
                  key: PRJ
                relatedLinks: "{}"
                statusMessage: Available
                archived: true
                partition: 4
                public: true
                scope: REPOSITORY
                name: My repo
                forkable: true
                links: "{}"
                id: 7
                scmId: git
                state: AVAILABLE
                slug: my-repo
              type: BRANCH
            descriptionAsHtml: descriptionAsHtml
            createdDate: 13590759200
            closedDate: 19990759200
            draft: true
            closed: true
            fromRef:
              latestCommit: babecafebabecafebabecafebabecafebabecafe
              id: refs/heads/feature-ABC-123
              displayId: feature-ABC-1233
              repository:
                hierarchyId: e3c939f9ef4a7fae272e
                defaultBranch: main
                origin:
                  hierarchyId: e3c939f9ef4a7fae272e
                  defaultBranch: main
                  description: My repo description
                  project:
                    public: true
                    avatarUrl: avatarUrl
                    scope: PROJECT
                    name: My Cool Project
                    description: The description for my cool project
                    links: "{}"
                    avatar: avatar
                    id: 2
                    type: NORMAL
                    key: PRJ
                  relatedLinks: "{}"
                  statusMessage: Available
                  archived: true
                  partition: 3
                  public: true
                  scope: REPOSITORY
                  name: My repo
                  forkable: true
                  links: "{}"
                  id: 9
                  scmId: git
                  state: AVAILABLE
                  slug: my-repo
                description: My repo description
                project:
                  public: true
                  avatarUrl: avatarUrl
                  scope: PROJECT
                  name: My Cool Project
                  description: The description for my cool project
                  links: "{}"
                  avatar: avatar
                  id: 2
                  type: NORMAL
                  key: PRJ
                relatedLinks: "{}"
                statusMessage: Available
                archived: true
                partition: 4
                public: true
                scope: REPOSITORY
                name: My repo
                forkable: true
                links: "{}"
                id: 7
                scmId: git
                state: AVAILABLE
                slug: my-repo
              type: BRANCH
            links: "{}"
            id: 1
            state: DECLINED
            locked: true
            open: true
            participants:
            - approved: true
              role: AUTHOR
              user:
                emailAddress: jane@example.com
                avatarUrl: avatarUrl
                displayName: Jane Citizen
                name: jcitizen
                active: true
                links: "{}"
                id: 101
                type: NORMAL
                slug: jcitizen
              lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
              status: UNAPPROVED
            - approved: true
              role: AUTHOR
              user:
                emailAddress: jane@example.com
                avatarUrl: avatarUrl
                displayName: Jane Citizen
                name: jcitizen
                active: true
                links: "{}"
                id: 101
                type: NORMAL
                slug: jcitizen
              lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
              status: UNAPPROVED
        html: html
        id: 1
        state: OPEN
        text: An insightful comment.
        reply: true
        properties: "{}"
        resolvedDate: 1239075920
      properties:
        anchor:
          $ref: "#/components/schemas/RestComment_anchor"
        anchored:
          readOnly: true
          type: boolean
        author:
          $ref: "#/components/schemas/RestComment_author"
        comments:
          items:
            $ref: "#/components/schemas/RestComment"
          readOnly: true
          type: array
        createdDate:
          example: 1359075920
          format: int64
          readOnly: true
          type: integer
        html:
          readOnly: true
          type: string
        id:
          example: 1
          format: int64
          type: integer
        pending:
          readOnly: true
          type: boolean
        properties:
          type: object
        reply:
          readOnly: true
          type: boolean
        resolvedDate:
          example: 1239075920
          format: int64
          readOnly: true
          type: integer
        resolver:
          $ref: "#/components/schemas/RestComment_author"
        severity:
          example: NORMAL
          type: string
        state:
          example: OPEN
          type: string
        text:
          example: An insightful comment.
          type: string
        threadResolved:
          description: Indicates if this comment thread has been marked as resolved
            or not
          type: boolean
        threadResolvedDate:
          example: 1569075920
          format: int64
          readOnly: true
          type: integer
        threadResolver:
          $ref: "#/components/schemas/RestComment_author"
        updatedDate:
          example: 1449075920
          format: int64
          readOnly: true
          type: integer
        version:
          example: 1
          format: int32
          type: integer
      readOnly: true
      type: object
    RestUserReaction_comment:
      example:
        severity: NORMAL
        parent:
          severity: NORMAL
          resolver:
            emailAddress: jane@example.com
            avatarUrl: avatarUrl
            displayName: Jane Citizen
            name: jcitizen
            active: true
            links: "{}"
            id: 101
            type: NORMAL
            slug: jcitizen
          comments:
          - null
          - null
          threadResolved: true
          author:
            emailAddress: jane@example.com
            avatarUrl: avatarUrl
            displayName: Jane Citizen
            name: jcitizen
            active: true
            links: "{}"
            id: 101
            type: NORMAL
            slug: jcitizen
          pending: true
          anchored: true
          updatedDate: 1449075920
          version: 1
          threadResolvedDate: 1569075920
          threadResolver:
            emailAddress: jane@example.com
            avatarUrl: avatarUrl
            displayName: Jane Citizen
            name: jcitizen
            active: true
            links: "{}"
            id: 101
            type: NORMAL
            slug: jcitizen
          createdDate: 1359075920
          anchor:
            multilineSpan:
              srcSpanEnd: 2
              dstSpanStart: 2
              dstSpanEnd: 3
              srcSpanStart: 1
            path:
              parent: path/to
              components:
              - path
              - to
              - file.txt
              extension: txt
              name: file.txt
            fromHash: 62a0505e8204115b8b9c8a95bfa264a8c0896a93
            line: 98
            multilineMarker:
              startLine: 5
              startLineType: ADDED
            lineType: ADDED
            srcPath:
              parent: path/to
              components:
              - path
              - to
              - file.txt
              extension: txt
              name: file.txt
            diffType: COMMIT
            toHash: 3cdd5d19178a54d2e51b5098d43b57571241d0ab
            fileType: FROM
            pullRequest:
              author:
                approved: true
                role: AUTHOR
                user:
                  emailAddress: jane@example.com
                  avatarUrl: avatarUrl
                  displayName: Jane Citizen
                  name: jcitizen
                  active: true
                  links: "{}"
                  id: 101
                  type: NORMAL
                  slug: jcitizen
                lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
                status: UNAPPROVED
              description: "It is a kludge, but put the tuple from the database in\
                \ the cache."
              updatedDate: 14490759200
              htmlDescription: htmlDescription
              title: Talking Nerdy
              reviewers:
              - approved: true
                role: AUTHOR
                user:
                  emailAddress: jane@example.com
                  avatarUrl: avatarUrl
                  displayName: Jane Citizen
                  name: jcitizen
                  active: true
                  links: "{}"
                  id: 101
                  type: NORMAL
                  slug: jcitizen
                lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
                status: UNAPPROVED
              - approved: true
                role: AUTHOR
                user:
                  emailAddress: jane@example.com
                  avatarUrl: avatarUrl
                  displayName: Jane Citizen
                  name: jcitizen
                  active: true
                  links: "{}"
                  id: 101
                  type: NORMAL
                  slug: jcitizen
                lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
                status: UNAPPROVED
              version: 0
              toRef:
                latestCommit: babecafebabecafebabecafebabecafebabecafe
                id: refs/heads/feature-ABC-123
                displayId: feature-ABC-1233
                repository:
                  hierarchyId: e3c939f9ef4a7fae272e
                  defaultBranch: main
                  origin:
                    hierarchyId: e3c939f9ef4a7fae272e
                    defaultBranch: main
                    description: My repo description
                    project:
                      public: true
                      avatarUrl: avatarUrl
                      scope: PROJECT
                      name: My Cool Project
                      description: The description for my cool project
                      links: "{}"
                      avatar: avatar
                      id: 2
                      type: NORMAL
                      key: PRJ
                    relatedLinks: "{}"
                    statusMessage: Available
                    archived: true
                    partition: 3
                    public: true
                    scope: REPOSITORY
                    name: My repo
                    forkable: true
                    links: "{}"
                    id: 9
                    scmId: git
                    state: AVAILABLE
                    slug: my-repo
                  description: My repo description
                  project:
                    public: true
                    avatarUrl: avatarUrl
                    scope: PROJECT
                    name: My Cool Project
                    description: The description for my cool project
                    links: "{}"
                    avatar: avatar
                    id: 2
                    type: NORMAL
                    key: PRJ
                  relatedLinks: "{}"
                  statusMessage: Available
                  archived: true
                  partition: 4
                  public: true
                  scope: REPOSITORY
                  name: My repo
                  forkable: true
                  links: "{}"
                  id: 7
                  scmId: git
                  state: AVAILABLE
                  slug: my-repo
                type: BRANCH
              descriptionAsHtml: descriptionAsHtml
              createdDate: 13590759200
              closedDate: 19990759200
              draft: true
              closed: true
              fromRef:
                latestCommit: babecafebabecafebabecafebabecafebabecafe
                id: refs/heads/feature-ABC-123
                displayId: feature-ABC-1233
                repository:
                  hierarchyId: e3c939f9ef4a7fae272e
                  defaultBranch: main
                  origin:
                    hierarchyId: e3c939f9ef4a7fae272e
                    defaultBranch: main
                    description: My repo description
                    project:
                      public: true
                      avatarUrl: avatarUrl
                      scope: PROJECT
                      name: My Cool Project
                      description: The description for my cool project
                      links: "{}"
                      avatar: avatar
                      id: 2
                      type: NORMAL
                      key: PRJ
                    relatedLinks: "{}"
                    statusMessage: Available
                    archived: true
                    partition: 3
                    public: true
                    scope: REPOSITORY
                    name: My repo
                    forkable: true
                    links: "{}"
                    id: 9
                    scmId: git
                    state: AVAILABLE
                    slug: my-repo
                  description: My repo description
                  project:
                    public: true
                    avatarUrl: avatarUrl
                    scope: PROJECT
                    name: My Cool Project
                    description: The description for my cool project
                    links: "{}"
                    avatar: avatar
                    id: 2
                    type: NORMAL
                    key: PRJ
                  relatedLinks: "{}"
                  statusMessage: Available
                  archived: true
                  partition: 4
                  public: true
                  scope: REPOSITORY
                  name: My repo
                  forkable: true
                  links: "{}"
                  id: 7
                  scmId: git
                  state: AVAILABLE
                  slug: my-repo
                type: BRANCH
              links: "{}"
              id: 1
              state: DECLINED
              locked: true
              open: true
              participants:
              - approved: true
                role: AUTHOR
                user:
                  emailAddress: jane@example.com
                  avatarUrl: avatarUrl
                  displayName: Jane Citizen
                  name: jcitizen
                  active: true
                  links: "{}"
                  id: 101
                  type: NORMAL
                  slug: jcitizen
                lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
                status: UNAPPROVED
              - approved: true
                role: AUTHOR
                user:
                  emailAddress: jane@example.com
                  avatarUrl: avatarUrl
                  displayName: Jane Citizen
                  name: jcitizen
                  active: true
                  links: "{}"
                  id: 101
                  type: NORMAL
                  slug: jcitizen
                lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
                status: UNAPPROVED
          html: html
          id: 1
          state: OPEN
          text: An insightful comment.
          reply: true
          properties: "{}"
          resolvedDate: 1239075920
        resolver:
          emailAddress: jane@example.com
          avatarUrl: avatarUrl
          displayName: Jane Citizen
          name: jcitizen
          active: true
          links: "{}"
          id: 101
          type: NORMAL
          slug: jcitizen
        comments:
        - severity: NORMAL
          parent:
            severity: NORMAL
            resolver:
              emailAddress: jane@example.com
              avatarUrl: avatarUrl
              displayName: Jane Citizen
              name: jcitizen
              active: true
              links: "{}"
              id: 101
              type: NORMAL
              slug: jcitizen
            comments:
            - null
            - null
            threadResolved: true
            author:
              emailAddress: jane@example.com
              avatarUrl: avatarUrl
              displayName: Jane Citizen
              name: jcitizen
              active: true
              links: "{}"
              id: 101
              type: NORMAL
              slug: jcitizen
            pending: true
            anchored: true
            updatedDate: 1449075920
            version: 1
            threadResolvedDate: 1569075920
            threadResolver:
              emailAddress: jane@example.com
              avatarUrl: avatarUrl
              displayName: Jane Citizen
              name: jcitizen
              active: true
              links: "{}"
              id: 101
              type: NORMAL
              slug: jcitizen
            createdDate: 1359075920
            anchor:
              multilineSpan:
                srcSpanEnd: 2
                dstSpanStart: 2
                dstSpanEnd: 3
                srcSpanStart: 1
              path:
                parent: path/to
                components:
                - path
                - to
                - file.txt
                extension: txt
                name: file.txt
              fromHash: 62a0505e8204115b8b9c8a95bfa264a8c0896a93
              line: 98
              multilineMarker:
                startLine: 5
                startLineType: ADDED
              lineType: ADDED
              srcPath:
                parent: path/to
                components:
                - path
                - to
                - file.txt
                extension: txt
                name: file.txt
              diffType: COMMIT
              toHash: 3cdd5d19178a54d2e51b5098d43b57571241d0ab
              fileType: FROM
              pullRequest:
                author:
                  approved: true
                  role: AUTHOR
                  user:
                    emailAddress: jane@example.com
                    avatarUrl: avatarUrl
                    displayName: Jane Citizen
                    name: jcitizen
                    active: true
                    links: "{}"
                    id: 101
                    type: NORMAL
                    slug: jcitizen
                  lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
                  status: UNAPPROVED
                description: "It is a kludge, but put the tuple from the database\
                  \ in the cache."
                updatedDate: 14490759200
                htmlDescription: htmlDescription
                title: Talking Nerdy
                reviewers:
                - approved: true
                  role: AUTHOR
                  user:
                    emailAddress: jane@example.com
                    avatarUrl: avatarUrl
                    displayName: Jane Citizen
                    name: jcitizen
                    active: true
                    links: "{}"
                    id: 101
                    type: NORMAL
                    slug: jcitizen
                  lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
                  status: UNAPPROVED
                - approved: true
                  role: AUTHOR
                  user:
                    emailAddress: jane@example.com
                    avatarUrl: avatarUrl
                    displayName: Jane Citizen
                    name: jcitizen
                    active: true
                    links: "{}"
                    id: 101
                    type: NORMAL
                    slug: jcitizen
                  lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
                  status: UNAPPROVED
                version: 0
                toRef:
                  latestCommit: babecafebabecafebabecafebabecafebabecafe
                  id: refs/heads/feature-ABC-123
                  displayId: feature-ABC-1233
                  repository:
                    hierarchyId: e3c939f9ef4a7fae272e
                    defaultBranch: main
                    origin:
                      hierarchyId: e3c939f9ef4a7fae272e
                      defaultBranch: main
                      description: My repo description
                      project:
                        public: true
                        avatarUrl: avatarUrl
                        scope: PROJECT
                        name: My Cool Project
                        description: The description for my cool project
                        links: "{}"
                        avatar: avatar
                        id: 2
                        type: NORMAL
                        key: PRJ
                      relatedLinks: "{}"
                      statusMessage: Available
                      archived: true
                      partition: 3
                      public: true
                      scope: REPOSITORY
                      name: My repo
                      forkable: true
                      links: "{}"
                      id: 9
                      scmId: git
                      state: AVAILABLE
                      slug: my-repo
                    description: My repo description
                    project:
                      public: true
                      avatarUrl: avatarUrl
                      scope: PROJECT
                      name: My Cool Project
                      description: The description for my cool project
                      links: "{}"
                      avatar: avatar
                      id: 2
                      type: NORMAL
                      key: PRJ
                    relatedLinks: "{}"
                    statusMessage: Available
                    archived: true
                    partition: 4
                    public: true
                    scope: REPOSITORY
                    name: My repo
                    forkable: true
                    links: "{}"
                    id: 7
                    scmId: git
                    state: AVAILABLE
                    slug: my-repo
                  type: BRANCH
                descriptionAsHtml: descriptionAsHtml
                createdDate: 13590759200
                closedDate: 19990759200
                draft: true
                closed: true
                fromRef:
                  latestCommit: babecafebabecafebabecafebabecafebabecafe
                  id: refs/heads/feature-ABC-123
                  displayId: feature-ABC-1233
                  repository:
                    hierarchyId: e3c939f9ef4a7fae272e
                    defaultBranch: main
                    origin:
                      hierarchyId: e3c939f9ef4a7fae272e
                      defaultBranch: main
                      description: My repo description
                      project:
                        public: true
                        avatarUrl: avatarUrl
                        scope: PROJECT
                        name: My Cool Project
                        description: The description for my cool project
                        links: "{}"
                        avatar: avatar
                        id: 2
                        type: NORMAL
                        key: PRJ
                      relatedLinks: "{}"
                      statusMessage: Available
                      archived: true
                      partition: 3
                      public: true
                      scope: REPOSITORY
                      name: My repo
                      forkable: true
                      links: "{}"
                      id: 9
                      scmId: git
                      state: AVAILABLE
                      slug: my-repo
                    description: My repo description
                    project:
                      public: true
                      avatarUrl: avatarUrl
                      scope: PROJECT
                      name: My Cool Project
                      description: The description for my cool project
                      links: "{}"
                      avatar: avatar
                      id: 2
                      type: NORMAL
                      key: PRJ
                    relatedLinks: "{}"
                    statusMessage: Available
                    archived: true
                    partition: 4
                    public: true
                    scope: REPOSITORY
                    name: My repo
                    forkable: true
                    links: "{}"
                    id: 7
                    scmId: git
                    state: AVAILABLE
                    slug: my-repo
                  type: BRANCH
                links: "{}"
                id: 1
                state: DECLINED
                locked: true
                open: true
                participants:
                - approved: true
                  role: AUTHOR
                  user:
                    emailAddress: jane@example.com
                    avatarUrl: avatarUrl
                    displayName: Jane Citizen
                    name: jcitizen
                    active: true
                    links: "{}"
                    id: 101
                    type: NORMAL
                    slug: jcitizen
                  lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
                  status: UNAPPROVED
                - approved: true
                  role: AUTHOR
                  user:
                    emailAddress: jane@example.com
                    avatarUrl: avatarUrl
                    displayName: Jane Citizen
                    name: jcitizen
                    active: true
                    links: "{}"
                    id: 101
                    type: NORMAL
                    slug: jcitizen
                  lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
                  status: UNAPPROVED
            html: html
            id: 1
            state: OPEN
            text: An insightful comment.
            reply: true
            properties: "{}"
            resolvedDate: 1239075920
          resolver:
            emailAddress: jane@example.com
            avatarUrl: avatarUrl
            displayName: Jane Citizen
            name: jcitizen
            active: true
            links: "{}"
            id: 101
            type: NORMAL
            slug: jcitizen
          comments:
          - null
          - null
          threadResolved: true
          author:
            emailAddress: jane@example.com
            avatarUrl: avatarUrl
            displayName: Jane Citizen
            name: jcitizen
            active: true
            links: "{}"
            id: 101
            type: NORMAL
            slug: jcitizen
          pending: true
          anchored: true
          updatedDate: 1449075920
          version: 1
          threadResolvedDate: 1569075920
          threadResolver:
            emailAddress: jane@example.com
            avatarUrl: avatarUrl
            displayName: Jane Citizen
            name: jcitizen
            active: true
            links: "{}"
            id: 101
            type: NORMAL
            slug: jcitizen
          createdDate: 1359075920
          anchor:
            multilineSpan:
              srcSpanEnd: 2
              dstSpanStart: 2
              dstSpanEnd: 3
              srcSpanStart: 1
            path:
              parent: path/to
              components:
              - path
              - to
              - file.txt
              extension: txt
              name: file.txt
            fromHash: 62a0505e8204115b8b9c8a95bfa264a8c0896a93
            line: 98
            multilineMarker:
              startLine: 5
              startLineType: ADDED
            lineType: ADDED
            srcPath:
              parent: path/to
              components:
              - path
              - to
              - file.txt
              extension: txt
              name: file.txt
            diffType: COMMIT
            toHash: 3cdd5d19178a54d2e51b5098d43b57571241d0ab
            fileType: FROM
            pullRequest:
              author:
                approved: true
                role: AUTHOR
                user:
                  emailAddress: jane@example.com
                  avatarUrl: avatarUrl
                  displayName: Jane Citizen
                  name: jcitizen
                  active: true
                  links: "{}"
                  id: 101
                  type: NORMAL
                  slug: jcitizen
                lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
                status: UNAPPROVED
              description: "It is a kludge, but put the tuple from the database in\
                \ the cache."
              updatedDate: 14490759200
              htmlDescription: htmlDescription
              title: Talking Nerdy
              reviewers:
              - approved: true
                role: AUTHOR
                user:
                  emailAddress: jane@example.com
                  avatarUrl: avatarUrl
                  displayName: Jane Citizen
                  name: jcitizen
                  active: true
                  links: "{}"
                  id: 101
                  type: NORMAL
                  slug: jcitizen
                lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
                status: UNAPPROVED
              - approved: true
                role: AUTHOR
                user:
                  emailAddress: jane@example.com
                  avatarUrl: avatarUrl
                  displayName: Jane Citizen
                  name: jcitizen
                  active: true
                  links: "{}"
                  id: 101
                  type: NORMAL
                  slug: jcitizen
                lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
                status: UNAPPROVED
              version: 0
              toRef:
                latestCommit: babecafebabecafebabecafebabecafebabecafe
                id: refs/heads/feature-ABC-123
                displayId: feature-ABC-1233
                repository:
                  hierarchyId: e3c939f9ef4a7fae272e
                  defaultBranch: main
                  origin:
                    hierarchyId: e3c939f9ef4a7fae272e
                    defaultBranch: main
                    description: My repo description
                    project:
                      public: true
                      avatarUrl: avatarUrl
                      scope: PROJECT
                      name: My Cool Project
                      description: The description for my cool project
                      links: "{}"
                      avatar: avatar
                      id: 2
                      type: NORMAL
                      key: PRJ
                    relatedLinks: "{}"
                    statusMessage: Available
                    archived: true
                    partition: 3
                    public: true
                    scope: REPOSITORY
                    name: My repo
                    forkable: true
                    links: "{}"
                    id: 9
                    scmId: git
                    state: AVAILABLE
                    slug: my-repo
                  description: My repo description
                  project:
                    public: true
                    avatarUrl: avatarUrl
                    scope: PROJECT
                    name: My Cool Project
                    description: The description for my cool project
                    links: "{}"
                    avatar: avatar
                    id: 2
                    type: NORMAL
                    key: PRJ
                  relatedLinks: "{}"
                  statusMessage: Available
                  archived: true
                  partition: 4
                  public: true
                  scope: REPOSITORY
                  name: My repo
                  forkable: true
                  links: "{}"
                  id: 7
                  scmId: git
                  state: AVAILABLE
                  slug: my-repo
                type: BRANCH
              descriptionAsHtml: descriptionAsHtml
              createdDate: 13590759200
              closedDate: 19990759200
              draft: true
              closed: true
              fromRef:
                latestCommit: babecafebabecafebabecafebabecafebabecafe
                id: refs/heads/feature-ABC-123
                displayId: feature-ABC-1233
                repository:
                  hierarchyId: e3c939f9ef4a7fae272e
                  defaultBranch: main
                  origin:
                    hierarchyId: e3c939f9ef4a7fae272e
                    defaultBranch: main
                    description: My repo description
                    project:
                      public: true
                      avatarUrl: avatarUrl
                      scope: PROJECT
                      name: My Cool Project
                      description: The description for my cool project
                      links: "{}"
                      avatar: avatar
                      id: 2
                      type: NORMAL
                      key: PRJ
                    relatedLinks: "{}"
                    statusMessage: Available
                    archived: true
                    partition: 3
                    public: true
                    scope: REPOSITORY
                    name: My repo
                    forkable: true
                    links: "{}"
                    id: 9
                    scmId: git
                    state: AVAILABLE
                    slug: my-repo
                  description: My repo description
                  project:
                    public: true
                    avatarUrl: avatarUrl
                    scope: PROJECT
                    name: My Cool Project
                    description: The description for my cool project
                    links: "{}"
                    avatar: avatar
                    id: 2
                    type: NORMAL
                    key: PRJ
                  relatedLinks: "{}"
                  statusMessage: Available
                  archived: true
                  partition: 4
                  public: true
                  scope: REPOSITORY
                  name: My repo
                  forkable: true
                  links: "{}"
                  id: 7
                  scmId: git
                  state: AVAILABLE
                  slug: my-repo
                type: BRANCH
              links: "{}"
              id: 1
              state: DECLINED
              locked: true
              open: true
              participants:
              - approved: true
                role: AUTHOR
                user:
                  emailAddress: jane@example.com
                  avatarUrl: avatarUrl
                  displayName: Jane Citizen
                  name: jcitizen
                  active: true
                  links: "{}"
                  id: 101
                  type: NORMAL
                  slug: jcitizen
                lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
                status: UNAPPROVED
              - approved: true
                role: AUTHOR
                user:
                  emailAddress: jane@example.com
                  avatarUrl: avatarUrl
                  displayName: Jane Citizen
                  name: jcitizen
                  active: true
                  links: "{}"
                  id: 101
                  type: NORMAL
                  slug: jcitizen
                lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
                status: UNAPPROVED
          html: html
          id: 1
          state: OPEN
          text: An insightful comment.
          reply: true
          properties: "{}"
          resolvedDate: 1239075920
        - severity: NORMAL
          parent:
            severity: NORMAL
            resolver:
              emailAddress: jane@example.com
              avatarUrl: avatarUrl
              displayName: Jane Citizen
              name: jcitizen
              active: true
              links: "{}"
              id: 101
              type: NORMAL
              slug: jcitizen
            comments:
            - null
            - null
            threadResolved: true
            author:
              emailAddress: jane@example.com
              avatarUrl: avatarUrl
              displayName: Jane Citizen
              name: jcitizen
              active: true
              links: "{}"
              id: 101
              type: NORMAL
              slug: jcitizen
            pending: true
            anchored: true
            updatedDate: 1449075920
            version: 1
            threadResolvedDate: 1569075920
            threadResolver:
              emailAddress: jane@example.com
              avatarUrl: avatarUrl
              displayName: Jane Citizen
              name: jcitizen
              active: true
              links: "{}"
              id: 101
              type: NORMAL
              slug: jcitizen
            createdDate: 1359075920
            anchor:
              multilineSpan:
                srcSpanEnd: 2
                dstSpanStart: 2
                dstSpanEnd: 3
                srcSpanStart: 1
              path:
                parent: path/to
                components:
                - path
                - to
                - file.txt
                extension: txt
                name: file.txt
              fromHash: 62a0505e8204115b8b9c8a95bfa264a8c0896a93
              line: 98
              multilineMarker:
                startLine: 5
                startLineType: ADDED
              lineType: ADDED
              srcPath:
                parent: path/to
                components:
                - path
                - to
                - file.txt
                extension: txt
                name: file.txt
              diffType: COMMIT
              toHash: 3cdd5d19178a54d2e51b5098d43b57571241d0ab
              fileType: FROM
              pullRequest:
                author:
                  approved: true
                  role: AUTHOR
                  user:
                    emailAddress: jane@example.com
                    avatarUrl: avatarUrl
                    displayName: Jane Citizen
                    name: jcitizen
                    active: true
                    links: "{}"
                    id: 101
                    type: NORMAL
                    slug: jcitizen
                  lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
                  status: UNAPPROVED
                description: "It is a kludge, but put the tuple from the database\
                  \ in the cache."
                updatedDate: 14490759200
                htmlDescription: htmlDescription
                title: Talking Nerdy
                reviewers:
                - approved: true
                  role: AUTHOR
                  user:
                    emailAddress: jane@example.com
                    avatarUrl: avatarUrl
                    displayName: Jane Citizen
                    name: jcitizen
                    active: true
                    links: "{}"
                    id: 101
                    type: NORMAL
                    slug: jcitizen
                  lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
                  status: UNAPPROVED
                - approved: true
                  role: AUTHOR
                  user:
                    emailAddress: jane@example.com
                    avatarUrl: avatarUrl
                    displayName: Jane Citizen
                    name: jcitizen
                    active: true
                    links: "{}"
                    id: 101
                    type: NORMAL
                    slug: jcitizen
                  lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
                  status: UNAPPROVED
                version: 0
                toRef:
                  latestCommit: babecafebabecafebabecafebabecafebabecafe
                  id: refs/heads/feature-ABC-123
                  displayId: feature-ABC-1233
                  repository:
                    hierarchyId: e3c939f9ef4a7fae272e
                    defaultBranch: main
                    origin:
                      hierarchyId: e3c939f9ef4a7fae272e
                      defaultBranch: main
                      description: My repo description
                      project:
                        public: true
                        avatarUrl: avatarUrl
                        scope: PROJECT
                        name: My Cool Project
                        description: The description for my cool project
                        links: "{}"
                        avatar: avatar
                        id: 2
                        type: NORMAL
                        key: PRJ
                      relatedLinks: "{}"
                      statusMessage: Available
                      archived: true
                      partition: 3
                      public: true
                      scope: REPOSITORY
                      name: My repo
                      forkable: true
                      links: "{}"
                      id: 9
                      scmId: git
                      state: AVAILABLE
                      slug: my-repo
                    description: My repo description
                    project:
                      public: true
                      avatarUrl: avatarUrl
                      scope: PROJECT
                      name: My Cool Project
                      description: The description for my cool project
                      links: "{}"
                      avatar: avatar
                      id: 2
                      type: NORMAL
                      key: PRJ
                    relatedLinks: "{}"
                    statusMessage: Available
                    archived: true
                    partition: 4
                    public: true
                    scope: REPOSITORY
                    name: My repo
                    forkable: true
                    links: "{}"
                    id: 7
                    scmId: git
                    state: AVAILABLE
                    slug: my-repo
                  type: BRANCH
                descriptionAsHtml: descriptionAsHtml
                createdDate: 13590759200
                closedDate: 19990759200
                draft: true
                closed: true
                fromRef:
                  latestCommit: babecafebabecafebabecafebabecafebabecafe
                  id: refs/heads/feature-ABC-123
                  displayId: feature-ABC-1233
                  repository:
                    hierarchyId: e3c939f9ef4a7fae272e
                    defaultBranch: main
                    origin:
                      hierarchyId: e3c939f9ef4a7fae272e
                      defaultBranch: main
                      description: My repo description
                      project:
                        public: true
                        avatarUrl: avatarUrl
                        scope: PROJECT
                        name: My Cool Project
                        description: The description for my cool project
                        links: "{}"
                        avatar: avatar
                        id: 2
                        type: NORMAL
                        key: PRJ
                      relatedLinks: "{}"
                      statusMessage: Available
                      archived: true
                      partition: 3
                      public: true
                      scope: REPOSITORY
                      name: My repo
                      forkable: true
                      links: "{}"
                      id: 9
                      scmId: git
                      state: AVAILABLE
                      slug: my-repo
                    description: My repo description
                    project:
                      public: true
                      avatarUrl: avatarUrl
                      scope: PROJECT
                      name: My Cool Project
                      description: The description for my cool project
                      links: "{}"
                      avatar: avatar
                      id: 2
                      type: NORMAL
                      key: PRJ
                    relatedLinks: "{}"
                    statusMessage: Available
                    archived: true
                    partition: 4
                    public: true
                    scope: REPOSITORY
                    name: My repo
                    forkable: true
                    links: "{}"
                    id: 7
                    scmId: git
                    state: AVAILABLE
                    slug: my-repo
                  type: BRANCH
                links: "{}"
                id: 1
                state: DECLINED
                locked: true
                open: true
                participants:
                - approved: true
                  role: AUTHOR
                  user:
                    emailAddress: jane@example.com
                    avatarUrl: avatarUrl
                    displayName: Jane Citizen
                    name: jcitizen
                    active: true
                    links: "{}"
                    id: 101
                    type: NORMAL
                    slug: jcitizen
                  lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
                  status: UNAPPROVED
                - approved: true
                  role: AUTHOR
                  user:
                    emailAddress: jane@example.com
                    avatarUrl: avatarUrl
                    displayName: Jane Citizen
                    name: jcitizen
                    active: true
                    links: "{}"
                    id: 101
                    type: NORMAL
                    slug: jcitizen
                  lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
                  status: UNAPPROVED
            html: html
            id: 1
            state: OPEN
            text: An insightful comment.
            reply: true
            properties: "{}"
            resolvedDate: 1239075920
          resolver:
            emailAddress: jane@example.com
            avatarUrl: avatarUrl
            displayName: Jane Citizen
            name: jcitizen
            active: true
            links: "{}"
            id: 101
            type: NORMAL
            slug: jcitizen
          comments:
          - null
          - null
          threadResolved: true
          author:
            emailAddress: jane@example.com
            avatarUrl: avatarUrl
            displayName: Jane Citizen
            name: jcitizen
            active: true
            links: "{}"
            id: 101
            type: NORMAL
            slug: jcitizen
          pending: true
          anchored: true
          updatedDate: 1449075920
          version: 1
          threadResolvedDate: 1569075920
          threadResolver:
            emailAddress: jane@example.com
            avatarUrl: avatarUrl
            displayName: Jane Citizen
            name: jcitizen
            active: true
            links: "{}"
            id: 101
            type: NORMAL
            slug: jcitizen
          createdDate: 1359075920
          anchor:
            multilineSpan:
              srcSpanEnd: 2
              dstSpanStart: 2
              dstSpanEnd: 3
              srcSpanStart: 1
            path:
              parent: path/to
              components:
              - path
              - to
              - file.txt
              extension: txt
              name: file.txt
            fromHash: 62a0505e8204115b8b9c8a95bfa264a8c0896a93
            line: 98
            multilineMarker:
              startLine: 5
              startLineType: ADDED
            lineType: ADDED
            srcPath:
              parent: path/to
              components:
              - path
              - to
              - file.txt
              extension: txt
              name: file.txt
            diffType: COMMIT
            toHash: 3cdd5d19178a54d2e51b5098d43b57571241d0ab
            fileType: FROM
            pullRequest:
              author:
                approved: true
                role: AUTHOR
                user:
                  emailAddress: jane@example.com
                  avatarUrl: avatarUrl
                  displayName: Jane Citizen
                  name: jcitizen
                  active: true
                  links: "{}"
                  id: 101
                  type: NORMAL
                  slug: jcitizen
                lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
                status: UNAPPROVED
              description: "It is a kludge, but put the tuple from the database in\
                \ the cache."
              updatedDate: 14490759200
              htmlDescription: htmlDescription
              title: Talking Nerdy
              reviewers:
              - approved: true
                role: AUTHOR
                user:
                  emailAddress: jane@example.com
                  avatarUrl: avatarUrl
                  displayName: Jane Citizen
                  name: jcitizen
                  active: true
                  links: "{}"
                  id: 101
                  type: NORMAL
                  slug: jcitizen
                lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
                status: UNAPPROVED
              - approved: true
                role: AUTHOR
                user:
                  emailAddress: jane@example.com
                  avatarUrl: avatarUrl
                  displayName: Jane Citizen
                  name: jcitizen
                  active: true
                  links: "{}"
                  id: 101
                  type: NORMAL
                  slug: jcitizen
                lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
                status: UNAPPROVED
              version: 0
              toRef:
                latestCommit: babecafebabecafebabecafebabecafebabecafe
                id: refs/heads/feature-ABC-123
                displayId: feature-ABC-1233
                repository:
                  hierarchyId: e3c939f9ef4a7fae272e
                  defaultBranch: main
                  origin:
                    hierarchyId: e3c939f9ef4a7fae272e
                    defaultBranch: main
                    description: My repo description
                    project:
                      public: true
                      avatarUrl: avatarUrl
                      scope: PROJECT
                      name: My Cool Project
                      description: The description for my cool project
                      links: "{}"
                      avatar: avatar
                      id: 2
                      type: NORMAL
                      key: PRJ
                    relatedLinks: "{}"
                    statusMessage: Available
                    archived: true
                    partition: 3
                    public: true
                    scope: REPOSITORY
                    name: My repo
                    forkable: true
                    links: "{}"
                    id: 9
                    scmId: git
                    state: AVAILABLE
                    slug: my-repo
                  description: My repo description
                  project:
                    public: true
                    avatarUrl: avatarUrl
                    scope: PROJECT
                    name: My Cool Project
                    description: The description for my cool project
                    links: "{}"
                    avatar: avatar
                    id: 2
                    type: NORMAL
                    key: PRJ
                  relatedLinks: "{}"
                  statusMessage: Available
                  archived: true
                  partition: 4
                  public: true
                  scope: REPOSITORY
                  name: My repo
                  forkable: true
                  links: "{}"
                  id: 7
                  scmId: git
                  state: AVAILABLE
                  slug: my-repo
                type: BRANCH
              descriptionAsHtml: descriptionAsHtml
              createdDate: 13590759200
              closedDate: 19990759200
              draft: true
              closed: true
              fromRef:
                latestCommit: babecafebabecafebabecafebabecafebabecafe
                id: refs/heads/feature-ABC-123
                displayId: feature-ABC-1233
                repository:
                  hierarchyId: e3c939f9ef4a7fae272e
                  defaultBranch: main
                  origin:
                    hierarchyId: e3c939f9ef4a7fae272e
                    defaultBranch: main
                    description: My repo description
                    project:
                      public: true
                      avatarUrl: avatarUrl
                      scope: PROJECT
                      name: My Cool Project
                      description: The description for my cool project
                      links: "{}"
                      avatar: avatar
                      id: 2
                      type: NORMAL
                      key: PRJ
                    relatedLinks: "{}"
                    statusMessage: Available
                    archived: true
                    partition: 3
                    public: true
                    scope: REPOSITORY
                    name: My repo
                    forkable: true
                    links: "{}"
                    id: 9
                    scmId: git
                    state: AVAILABLE
                    slug: my-repo
                  description: My repo description
                  project:
                    public: true
                    avatarUrl: avatarUrl
                    scope: PROJECT
                    name: My Cool Project
                    description: The description for my cool project
                    links: "{}"
                    avatar: avatar
                    id: 2
                    type: NORMAL
                    key: PRJ
                  relatedLinks: "{}"
                  statusMessage: Available
                  archived: true
                  partition: 4
                  public: true
                  scope: REPOSITORY
                  name: My repo
                  forkable: true
                  links: "{}"
                  id: 7
                  scmId: git
                  state: AVAILABLE
                  slug: my-repo
                type: BRANCH
              links: "{}"
              id: 1
              state: DECLINED
              locked: true
              open: true
              participants:
              - approved: true
                role: AUTHOR
                user:
                  emailAddress: jane@example.com
                  avatarUrl: avatarUrl
                  displayName: Jane Citizen
                  name: jcitizen
                  active: true
                  links: "{}"
                  id: 101
                  type: NORMAL
                  slug: jcitizen
                lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
                status: UNAPPROVED
              - approved: true
                role: AUTHOR
                user:
                  emailAddress: jane@example.com
                  avatarUrl: avatarUrl
                  displayName: Jane Citizen
                  name: jcitizen
                  active: true
                  links: "{}"
                  id: 101
                  type: NORMAL
                  slug: jcitizen
                lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
                status: UNAPPROVED
          html: html
          id: 1
          state: OPEN
          text: An insightful comment.
          reply: true
          properties: "{}"
          resolvedDate: 1239075920
        threadResolved: true
        author:
          emailAddress: jane@example.com
          avatarUrl: avatarUrl
          displayName: Jane Citizen
          name: jcitizen
          active: true
          links: "{}"
          id: 101
          type: NORMAL
          slug: jcitizen
        pending: true
        anchored: true
        updatedDate: 1449075920
        version: 1
        threadResolvedDate: 1569075920
        threadResolver:
          emailAddress: jane@example.com
          avatarUrl: avatarUrl
          displayName: Jane Citizen
          name: jcitizen
          active: true
          links: "{}"
          id: 101
          type: NORMAL
          slug: jcitizen
        createdDate: 1359075920
        anchor:
          multilineSpan:
            srcSpanEnd: 2
            dstSpanStart: 2
            dstSpanEnd: 3
            srcSpanStart: 1
          path:
            parent: path/to
            components:
            - path
            - to
            - file.txt
            extension: txt
            name: file.txt
          fromHash: 62a0505e8204115b8b9c8a95bfa264a8c0896a93
          line: 98
          multilineMarker:
            startLine: 5
            startLineType: ADDED
          lineType: ADDED
          srcPath:
            parent: path/to
            components:
            - path
            - to
            - file.txt
            extension: txt
            name: file.txt
          diffType: COMMIT
          toHash: 3cdd5d19178a54d2e51b5098d43b57571241d0ab
          fileType: FROM
          pullRequest:
            author:
              approved: true
              role: AUTHOR
              user:
                emailAddress: jane@example.com
                avatarUrl: avatarUrl
                displayName: Jane Citizen
                name: jcitizen
                active: true
                links: "{}"
                id: 101
                type: NORMAL
                slug: jcitizen
              lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
              status: UNAPPROVED
            description: "It is a kludge, but put the tuple from the database in the\
              \ cache."
            updatedDate: 14490759200
            htmlDescription: htmlDescription
            title: Talking Nerdy
            reviewers:
            - approved: true
              role: AUTHOR
              user:
                emailAddress: jane@example.com
                avatarUrl: avatarUrl
                displayName: Jane Citizen
                name: jcitizen
                active: true
                links: "{}"
                id: 101
                type: NORMAL
                slug: jcitizen
              lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
              status: UNAPPROVED
            - approved: true
              role: AUTHOR
              user:
                emailAddress: jane@example.com
                avatarUrl: avatarUrl
                displayName: Jane Citizen
                name: jcitizen
                active: true
                links: "{}"
                id: 101
                type: NORMAL
                slug: jcitizen
              lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
              status: UNAPPROVED
            version: 0
            toRef:
              latestCommit: babecafebabecafebabecafebabecafebabecafe
              id: refs/heads/feature-ABC-123
              displayId: feature-ABC-1233
              repository:
                hierarchyId: e3c939f9ef4a7fae272e
                defaultBranch: main
                origin:
                  hierarchyId: e3c939f9ef4a7fae272e
                  defaultBranch: main
                  description: My repo description
                  project:
                    public: true
                    avatarUrl: avatarUrl
                    scope: PROJECT
                    name: My Cool Project
                    description: The description for my cool project
                    links: "{}"
                    avatar: avatar
                    id: 2
                    type: NORMAL
                    key: PRJ
                  relatedLinks: "{}"
                  statusMessage: Available
                  archived: true
                  partition: 3
                  public: true
                  scope: REPOSITORY
                  name: My repo
                  forkable: true
                  links: "{}"
                  id: 9
                  scmId: git
                  state: AVAILABLE
                  slug: my-repo
                description: My repo description
                project:
                  public: true
                  avatarUrl: avatarUrl
                  scope: PROJECT
                  name: My Cool Project
                  description: The description for my cool project
                  links: "{}"
                  avatar: avatar
                  id: 2
                  type: NORMAL
                  key: PRJ
                relatedLinks: "{}"
                statusMessage: Available
                archived: true
                partition: 4
                public: true
                scope: REPOSITORY
                name: My repo
                forkable: true
                links: "{}"
                id: 7
                scmId: git
                state: AVAILABLE
                slug: my-repo
              type: BRANCH
            descriptionAsHtml: descriptionAsHtml
            createdDate: 13590759200
            closedDate: 19990759200
            draft: true
            closed: true
            fromRef:
              latestCommit: babecafebabecafebabecafebabecafebabecafe
              id: refs/heads/feature-ABC-123
              displayId: feature-ABC-1233
              repository:
                hierarchyId: e3c939f9ef4a7fae272e
                defaultBranch: main
                origin:
                  hierarchyId: e3c939f9ef4a7fae272e
                  defaultBranch: main
                  description: My repo description
                  project:
                    public: true
                    avatarUrl: avatarUrl
                    scope: PROJECT
                    name: My Cool Project
                    description: The description for my cool project
                    links: "{}"
                    avatar: avatar
                    id: 2
                    type: NORMAL
                    key: PRJ
                  relatedLinks: "{}"
                  statusMessage: Available
                  archived: true
                  partition: 3
                  public: true
                  scope: REPOSITORY
                  name: My repo
                  forkable: true
                  links: "{}"
                  id: 9
                  scmId: git
                  state: AVAILABLE
                  slug: my-repo
                description: My repo description
                project:
                  public: true
                  avatarUrl: avatarUrl
                  scope: PROJECT
                  name: My Cool Project
                  description: The description for my cool project
                  links: "{}"
                  avatar: avatar
                  id: 2
                  type: NORMAL
                  key: PRJ
                relatedLinks: "{}"
                statusMessage: Available
                archived: true
                partition: 4
                public: true
                scope: REPOSITORY
                name: My repo
                forkable: true
                links: "{}"
                id: 7
                scmId: git
                state: AVAILABLE
                slug: my-repo
              type: BRANCH
            links: "{}"
            id: 1
            state: DECLINED
            locked: true
            open: true
            participants:
            - approved: true
              role: AUTHOR
              user:
                emailAddress: jane@example.com
                avatarUrl: avatarUrl
                displayName: Jane Citizen
                name: jcitizen
                active: true
                links: "{}"
                id: 101
                type: NORMAL
                slug: jcitizen
              lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
              status: UNAPPROVED
            - approved: true
              role: AUTHOR
              user:
                emailAddress: jane@example.com
                avatarUrl: avatarUrl
                displayName: Jane Citizen
                name: jcitizen
                active: true
                links: "{}"
                id: 101
                type: NORMAL
                slug: jcitizen
              lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
              status: UNAPPROVED
        html: html
        id: 1
        state: OPEN
        text: An insightful comment.
        reply: true
        properties: "{}"
        resolvedDate: 1239075920
      properties:
        anchor:
          $ref: "#/components/schemas/RestComment_anchor"
        anchored:
          readOnly: true
          type: boolean
        author:
          $ref: "#/components/schemas/RestComment_author"
        comments:
          items:
            $ref: "#/components/schemas/RestComment"
          readOnly: true
          type: array
        createdDate:
          example: 1359075920
          format: int64
          readOnly: true
          type: integer
        html:
          readOnly: true
          type: string
        id:
          example: 1
          format: int64
          type: integer
        parent:
          $ref: "#/components/schemas/RestComment_parent"
        pending:
          readOnly: true
          type: boolean
        properties:
          type: object
        reply:
          readOnly: true
          type: boolean
        resolvedDate:
          example: 1239075920
          format: int64
          readOnly: true
          type: integer
        resolver:
          $ref: "#/components/schemas/RestComment_author"
        severity:
          example: NORMAL
          type: string
        state:
          example: OPEN
          type: string
        text:
          example: An insightful comment.
          type: string
        threadResolved:
          description: Indicates if this comment thread has been marked as resolved
            or not
          type: boolean
        threadResolvedDate:
          example: 1569075920
          format: int64
          readOnly: true
          type: integer
        threadResolver:
          $ref: "#/components/schemas/RestComment_author"
        updatedDate:
          example: 1449075920
          format: int64
          readOnly: true
          type: integer
        version:
          example: 1
          format: int32
          type: integer
      type: object
    RestUserReaction_emoticon:
      example:
        shortcut: shortcut
        value: value
        url: url
      properties:
        shortcut:
          type: string
        url:
          type: string
        value:
          type: string
      type: object
    RestPullRequestRebaseResult_refChange_ref:
      example:
        id: refs/heads/master
        displayId: master
        type: BRANCH
      properties:
        displayId:
          example: master
          type: string
        id:
          example: refs/heads/master
          type: string
        type:
          enum:
          - BRANCH
          - TAG
          type: string
      type: object
    RestPullRequestRebaseResult_refChange:
      example:
        fromHash: 6053a1eaa1c009dd11092d09a72f3c41af1b59ad
        ref:
          id: refs/heads/master
          displayId: master
          type: BRANCH
        toHash: d6edcbf924697ab811a867421dab60d954ccad99
        refId: refs/heads/master
        type: ADD
      properties:
        fromHash:
          example: 6053a1eaa1c009dd11092d09a72f3c41af1b59ad
          type: string
        ref:
          $ref: "#/components/schemas/RestPullRequestRebaseResult_refChange_ref"
        refId:
          example: refs/heads/master
          type: string
        toHash:
          example: d6edcbf924697ab811a867421dab60d954ccad99
          type: string
        type:
          enum:
          - ADD
          - DELETE
          - UPDATE
          type: string
      type: object
    EnrichedRepository_properties:
      example:
        defaultBranchId: refs/heads/master
        metadataHash: 11e5cd17e8d74d84a11f2c8a6bbc6ae0a2b69059e54030f49214c94d980364c1
        contentHash: 457389a0b871fb61012a7351d09aefc0cf1c57c306449d4b5df4d2f381df8433
      properties:
        contentHash:
          example: 457389a0b871fb61012a7351d09aefc0cf1c57c306449d4b5df4d2f381df8433
          type: string
        defaultBranchId:
          example: refs/heads/master
          type: string
        metadataHash:
          example: 11e5cd17e8d74d84a11f2c8a6bbc6ae0a2b69059e54030f49214c94d980364c1
          type: string
      type: object
    RestMirroredRepositoryDescriptor_mirrorServer:
      example:
        baseUrl: http://vietnam.example.com
        mirrorType: SINGLE
        productVersion: 8.0.0
        lastSeenDate: 2000-01-23T04:56:07.000+00:00
        name: Mirror
        id: B0F5-CS21-45C2-CCK3
        enabled: true
      properties:
        baseUrl:
          example: http://vietnam.example.com
          type: string
        enabled:
          type: boolean
        id:
          example: B0F5-CS21-45C2-CCK3
          type: string
        lastSeenDate:
          format: date-time
          type: string
        mirrorType:
          enum:
          - SINGLE
          - FARM
          type: string
        name:
          example: Mirror
          type: string
        productVersion:
          example: 8.0.0
          type: string
      required:
      - lastSeenDate
      type: object
    RestClusterNode_address:
      example:
        address: node.example.com
        port: 8230
      properties:
        address:
          example: node.example.com
          type: string
        port:
          example: 8230
          format: int32
          type: integer
      type: object
    RestMirrorRepositorySynchronizationStatus_hashes:
      example:
        metadata: 677513e1f2a93ff50e7b709e3c96454c23a3fcd40046ab385c4093e30809500a
        content: 677513e1f2a93ff50e7b709e3c96454c23a3fcd40046ab385c4093e30809500a
      properties:
        content:
          example: 677513e1f2a93ff50e7b709e3c96454c23a3fcd40046ab385c4093e30809500a
          type: string
        metadata:
          example: 677513e1f2a93ff50e7b709e3c96454c23a3fcd40046ab385c4093e30809500a
          type: string
      type: object
    RestRefSyncStatus_aheadRefs:
      example:
        id: refs/heads/master
        state: AHEAD
        tag: true
        displayId: master
        type: BRANCH
      properties:
        displayId:
          example: master
          type: string
        id:
          example: refs/heads/master
          type: string
        state:
          enum:
          - AHEAD
          - DIVERGED
          - ORPHANED
          type: string
        tag:
          type: boolean
        type:
          enum:
          - BRANCH
          - TAG
          type: string
      readOnly: true
      type: object
    RestBrokenIndexStatusRepository_details:
      description: Details about the last index attempt for the given repository
      example:
        projectKey: PROJECT_1
        lastIndexedCommitId: abcdef0123abcdef4567abcdef8987abcdef6543
        indexingError: Indexing timed out.
        lastIndexedTimestamp: 1732022086
        repositorySlug: rep_1
        status: BROKEN
      properties:
        indexingError:
          description: "Additional detail about the <b>BROKEN</b> status if available,\
            \ meant for informational purposes only. This nullable, free-form text\
            \ field should not be used for automation; rely on status instead."
          example: Indexing timed out.
          readOnly: true
          type: string
        lastIndexedCommitId:
          description: The commit hash of the last indexed commit in the repository.
          example: abcdef0123abcdef4567abcdef8987abcdef6543
          type: string
        lastIndexedTimestamp:
          description: The timestamp in epoch milliseconds of the last time the repository
            successfully was indexed
          example: 1732022086
          format: int64
          type: integer
        projectKey:
          description: The project key that the repository belongs to
          example: PROJECT_1
          type: string
        repositorySlug:
          description: The repository slug
          example: rep_1
          type: string
        status:
          description: The current indexing status of the repository.
          enum:
          - BROKEN
          - INDEXED
          - INDEXING
          - UNKNOWN
          type: string
      required:
      - projectKey
      - repositorySlug
      - status
      type: object
    RestBrokenIndexStatusRepository_repository:
      description: The repository which has entered a broken status
      example:
        hierarchyId: e3c939f9ef4a7fae272e
        defaultBranch: main
        origin:
          hierarchyId: e3c939f9ef4a7fae272e
          defaultBranch: main
          description: My repo description
          project:
            public: true
            avatarUrl: avatarUrl
            scope: PROJECT
            name: My Cool Project
            description: The description for my cool project
            links: "{}"
            avatar: avatar
            id: 2
            type: NORMAL
            key: PRJ
          relatedLinks: "{}"
          statusMessage: Available
          archived: true
          partition: 3
          public: true
          scope: REPOSITORY
          name: My repo
          forkable: true
          links: "{}"
          id: 9
          scmId: git
          state: AVAILABLE
          slug: my-repo
        description: My repo description
        project:
          public: true
          avatarUrl: avatarUrl
          scope: PROJECT
          name: My Cool Project
          description: The description for my cool project
          links: "{}"
          avatar: avatar
          id: 2
          type: NORMAL
          key: PRJ
        relatedLinks: "{}"
        statusMessage: Available
        archived: true
        partition: 5
        public: true
        scope: REPOSITORY
        name: My repo
        forkable: true
        links: "{}"
        id: 1
        scmId: git
        state: AVAILABLE
        slug: my-repo
      properties:
        archived:
          readOnly: true
          type: boolean
        defaultBranch:
          example: main
          type: string
          writeOnly: true
        description:
          example: My repo description
          readOnly: true
          type: string
        forkable:
          readOnly: true
          type: boolean
        hierarchyId:
          example: e3c939f9ef4a7fae272e
          readOnly: true
          type: string
        id:
          format: int32
          readOnly: true
          type: integer
        links:
          properties: {}
          type: object
          writeOnly: true
        name:
          example: My repo
          type: string
        origin:
          $ref: "#/components/schemas/RestChangeset_repository_origin"
        partition:
          format: int32
          readOnly: true
          type: integer
        project:
          $ref: "#/components/schemas/RestChangeset_repository_origin_project"
        public:
          readOnly: true
          type: boolean
        relatedLinks:
          properties: {}
          readOnly: true
          type: object
        scmId:
          example: git
          type: string
        scope:
          example: REPOSITORY
          readOnly: true
          type: string
        slug:
          example: my-repo
          type: string
        state:
          enum:
          - AVAILABLE
          - INITIALISATION_FAILED
          - INITIALISING
          - OFFLINE
          readOnly: true
          type: string
        statusMessage:
          example: Available
          readOnly: true
          type: string
      type: object
    RestIndexingProcess_event:
      description: The event that is currently being processed by the indexing worker.
      example:
        retries: 0
        eventType: PROJECT
        eventMetadata: "{}"
      properties:
        eventMetadata:
          description: "Retrieves the metadata associated with the index event. The\
            \ content of this metadata is variable and depends on the event type.\
            \ It may include identifiers such as repository ID, project ID, or user\
            \ ID, among other relevant details."
          properties: {}
          readOnly: true
          type: object
        eventType:
          description: "Retrieves the type of the event, indicating the entity (such\
            \ as project, repository, or user) that triggered the indexing operation."
          enum:
          - PROJECT
          - REPOSITORY
          - USER
          - OTHER
          type: string
        retries:
          description: Retrieves the count of how many times this event has been retried
            due to previous failures or exceptions.
          format: int32
          type: integer
      readOnly: true
      required:
      - eventType
      - retries
      type: object
    RestIndexingThreadDetails_currentProcess:
      description: A snapshot of the current process being executed by the indexing
        worker.
      example:
        currentTask: "Indexing file: 'example.txt'"
        event:
          retries: 0
          eventType: PROJECT
          eventMetadata: "{}"
      properties:
        currentTask:
          description: The current task description that the indexing worker is executing.
          example: "Indexing file: 'example.txt'"
          type: string
        event:
          $ref: "#/components/schemas/RestIndexingProcess_event"
      readOnly: true
      required:
      - currentTask
      - event
      type: object
    RestIndexingThreadDetails_state:
      description: Represents the state of an indexing thread.
      example:
        code: BROKEN
        description: description
      properties:
        code:
          description: The current code representing the state of the indexing thread
          enum:
          - BROKEN
          - IDLE
          - PROCESSING
          - STOPPED
          - UNKNOWN
          type: string
        description:
          description: "Additional detail about the current state, meant for informational\
            \ purposes only."
          type: string
      readOnly: true
      required:
      - code
      type: object
    RestAutoMergeProcessingResult_pullRequest:
      example:
        author:
          approved: true
          role: AUTHOR
          user:
            emailAddress: jane@example.com
            avatarUrl: avatarUrl
            displayName: Jane Citizen
            name: jcitizen
            active: true
            links: "{}"
            id: 101
            type: NORMAL
            slug: jcitizen
          lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
          status: UNAPPROVED
        description: "It is a kludge, but put the tuple from the database in the cache."
        updatedDate: 14490759200
        htmlDescription: htmlDescription
        title: Talking Nerdy
        reviewers:
        - approved: true
          role: AUTHOR
          user:
            emailAddress: jane@example.com
            avatarUrl: avatarUrl
            displayName: Jane Citizen
            name: jcitizen
            active: true
            links: "{}"
            id: 101
            type: NORMAL
            slug: jcitizen
          lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
          status: UNAPPROVED
        - approved: true
          role: AUTHOR
          user:
            emailAddress: jane@example.com
            avatarUrl: avatarUrl
            displayName: Jane Citizen
            name: jcitizen
            active: true
            links: "{}"
            id: 101
            type: NORMAL
            slug: jcitizen
          lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
          status: UNAPPROVED
        version: 0
        toRef:
          latestCommit: babecafebabecafebabecafebabecafebabecafe
          id: refs/heads/feature-ABC-123
          displayId: feature-ABC-1233
          repository:
            hierarchyId: e3c939f9ef4a7fae272e
            defaultBranch: main
            origin:
              hierarchyId: e3c939f9ef4a7fae272e
              defaultBranch: main
              description: My repo description
              project:
                public: true
                avatarUrl: avatarUrl
                scope: PROJECT
                name: My Cool Project
                description: The description for my cool project
                links: "{}"
                avatar: avatar
                id: 2
                type: NORMAL
                key: PRJ
              relatedLinks: "{}"
              statusMessage: Available
              archived: true
              partition: 3
              public: true
              scope: REPOSITORY
              name: My repo
              forkable: true
              links: "{}"
              id: 9
              scmId: git
              state: AVAILABLE
              slug: my-repo
            description: My repo description
            project:
              public: true
              avatarUrl: avatarUrl
              scope: PROJECT
              name: My Cool Project
              description: The description for my cool project
              links: "{}"
              avatar: avatar
              id: 2
              type: NORMAL
              key: PRJ
            relatedLinks: "{}"
            statusMessage: Available
            archived: true
            partition: 4
            public: true
            scope: REPOSITORY
            name: My repo
            forkable: true
            links: "{}"
            id: 7
            scmId: git
            state: AVAILABLE
            slug: my-repo
          type: BRANCH
        descriptionAsHtml: descriptionAsHtml
        createdDate: 13590759200
        closedDate: 19990759200
        draft: true
        closed: true
        fromRef:
          latestCommit: babecafebabecafebabecafebabecafebabecafe
          id: refs/heads/feature-ABC-123
          displayId: feature-ABC-1233
          repository:
            hierarchyId: e3c939f9ef4a7fae272e
            defaultBranch: main
            origin:
              hierarchyId: e3c939f9ef4a7fae272e
              defaultBranch: main
              description: My repo description
              project:
                public: true
                avatarUrl: avatarUrl
                scope: PROJECT
                name: My Cool Project
                description: The description for my cool project
                links: "{}"
                avatar: avatar
                id: 2
                type: NORMAL
                key: PRJ
              relatedLinks: "{}"
              statusMessage: Available
              archived: true
              partition: 3
              public: true
              scope: REPOSITORY
              name: My repo
              forkable: true
              links: "{}"
              id: 9
              scmId: git
              state: AVAILABLE
              slug: my-repo
            description: My repo description
            project:
              public: true
              avatarUrl: avatarUrl
              scope: PROJECT
              name: My Cool Project
              description: The description for my cool project
              links: "{}"
              avatar: avatar
              id: 2
              type: NORMAL
              key: PRJ
            relatedLinks: "{}"
            statusMessage: Available
            archived: true
            partition: 4
            public: true
            scope: REPOSITORY
            name: My repo
            forkable: true
            links: "{}"
            id: 7
            scmId: git
            state: AVAILABLE
            slug: my-repo
          type: BRANCH
        links: "{}"
        id: 1
        state: DECLINED
        locked: true
        open: true
        participants:
        - approved: true
          role: AUTHOR
          user:
            emailAddress: jane@example.com
            avatarUrl: avatarUrl
            displayName: Jane Citizen
            name: jcitizen
            active: true
            links: "{}"
            id: 101
            type: NORMAL
            slug: jcitizen
          lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
          status: UNAPPROVED
        - approved: true
          role: AUTHOR
          user:
            emailAddress: jane@example.com
            avatarUrl: avatarUrl
            displayName: Jane Citizen
            name: jcitizen
            active: true
            links: "{}"
            id: 101
            type: NORMAL
            slug: jcitizen
          lastReviewedCommit: 7549846524f8aed2bd1c0249993ae1bf9d3c9998
          status: UNAPPROVED
      properties:
        author:
          $ref: "#/components/schemas/RestComment_anchor_pullRequest_author"
        closed:
          type: boolean
        closedDate:
          example: 19990759200
          format: int64
          type: integer
        createdDate:
          example: 13590759200
          format: int64
          type: integer
        description:
          example: "It is a kludge, but put the tuple from the database in the cache."
          type: string
        descriptionAsHtml:
          type: string
        draft:
          type: boolean
        fromRef:
          $ref: "#/components/schemas/RestComment_anchor_pullRequest_fromRef"
        htmlDescription:
          type: string
          writeOnly: true
        id:
          example: 1
          format: int64
          type: integer
        links:
          properties: {}
          type: object
          writeOnly: true
        locked:
          type: boolean
        open:
          type: boolean
        participants:
          items:
            $ref: "#/components/schemas/RestPullRequestParticipant"
          type: array
        reviewers:
          items:
            $ref: "#/components/schemas/RestPullRequestParticipant"
          type: array
        state:
          enum:
          - DECLINED
          - MERGED
          - OPEN
          type: string
        title:
          example: Talking Nerdy
          type: string
        toRef:
          $ref: "#/components/schemas/RestComment_anchor_pullRequest_fromRef"
        updatedDate:
          example: 14490759200
          format: int64
          type: integer
        version:
          format: int32
          type: integer
      type: object
    RestAutoMergeRestrictedSettings_scope:
      description: The scope that these settings apply to.
      example:
        resourceId: 2
        type: GLOBAL
      properties:
        resourceId:
          example: 2
          format: int32
          type: integer
        type:
          enum:
          - GLOBAL
          - PROJECT
          - REPOSITORY
          type: string
      type: object
    RestBitbucketLicense_status:
      example:
        serverId: <actual server ID>
        currentNumberOfUsers: 2
      properties:
        currentNumberOfUsers:
          example: 2
          format: int32
          type: integer
        serverId:
          example: <actual server ID>
          type: string
      readOnly: true
      type: object
    RestBulkUserRateLimitSettingsUpdateRequest_settings:
      example:
        fillRate: 5
        capacity: 60
      properties:
        capacity:
          example: 60
          format: int32
          type: integer
        fillRate:
          example: 5
          format: int32
          type: integer
      type: object
    RestChange_conflict_ourChange:
      example:
        path:
          parent: path/to
          components:
          - path
          - to
          - file.txt
          extension: txt
          name: file.txt
        srcPath:
          parent: path/to
          components:
          - path
          - to
          - file.txt
          extension: txt
          name: file.txt
        type: ADD
      properties:
        path:
          $ref: "#/components/schemas/RestComment_anchor_path"
        srcPath:
          $ref: "#/components/schemas/RestComment_anchor_path"
        type:
          enum:
          - ADD
          - COPY
          - DELETE
          - MODIFY
          - MOVE
          - UNKNOWN
          type: string
      type: object
    RestChange_conflict:
      example:
        ourChange:
          path:
            parent: path/to
            components:
            - path
            - to
            - file.txt
            extension: txt
            name: file.txt
          srcPath:
            parent: path/to
            components:
            - path
            - to
            - file.txt
            extension: txt
            name: file.txt
          type: ADD
        theirChange:
          path:
            parent: path/to
            components:
            - path
            - to
            - file.txt
            extension: txt
            name: file.txt
          srcPath:
            parent: path/to
            components:
            - path
            - to
            - file.txt
            extension: txt
            name: file.txt
          type: ADD
      properties:
        ourChange:
          $ref: "#/components/schemas/RestChange_conflict_ourChange"
        theirChange:
          $ref: "#/components/schemas/RestChange_conflict_ourChange"
      type: object
    RestClusterInformation_localNode:
      example:
        buildVersion: 7.0.0
        address:
          address: node.example.com
          port: 8230
        name: foo
        id: d4fde8b1-2504-4998-a0ba-14fbe98edd4d
        local: true
      properties:
        address:
          $ref: "#/components/schemas/RestClusterNode_address"
        buildVersion:
          example: 7.0.0
          type: string
        id:
          example: d4fde8b1-2504-4998-a0ba-14fbe98edd4d
          type: string
        local:
          type: boolean
        name:
          example: foo
          type: string
      type: object
    RestDeployment_environment:
      example:
        displayName: US East Mirror
        type: production
        key: us-east-mirror
        url: https://foo-bar.production/us-east
      properties:
        displayName:
          example: US East Mirror
          maxLength: 255
          minLength: 0
          type: string
        key:
          example: us-east-mirror
          maxLength: 255
          minLength: 0
          type: string
        type:
          example: production
          pattern: DEVELOPMENT|TESTING|STAGING|PRODUCTION
          type: string
        url:
          example: https://foo-bar.production/us-east
          maxLength: 1024
          minLength: 0
          type: string
      required:
      - displayName
      - key
      type: object
    RestDetailedInvocation_eventScope:
      example:
        id: id
        type: type
      properties:
        id:
          type: string
        type:
          type: string
      type: object
    RestExportRequest_repositoriesRequest:
      example:
        includes:
        - projectKey: PRJ
          slug: my-repo
        - projectKey: PRJ
          slug: my-repo
      properties:
        includes:
          items:
            $ref: "#/components/schemas/RestRepositorySelector"
          type: array
          uniqueItems: true
      required:
      - includes
      type: object
    RestHookScriptConfig_script:
      example:
        createdDate: 2000-01-23T04:56:07.000+00:00
        name: name
        description: description
        pluginKey: pluginKey
        id: 1
        updatedDate: 2000-01-23T04:56:07.000+00:00
        type: POST
        version: 5
      properties:
        createdDate:
          format: date-time
          type: string
        description:
          type: string
        id:
          format: int64
          type: integer
        name:
          type: string
        pluginKey:
          type: string
        type:
          enum:
          - POST
          - PRE
          type: string
        updatedDate:
          format: date-time
          type: string
        version:
          format: int32
          type: integer
      type: object
    RestJob_progress:
      example:
        percentage: 42
        message: Working on it...
      properties:
        message:
          example: Working on it...
          type: string
        percentage:
          example: 42
          format: int32
          type: integer
      type: object
    RestNodeConnectivityReport_node:
      example:
        name: My Node
        id: "1"
        type: BITBUCKET
      properties:
        id:
          example: "1"
          type: string
        name:
          example: My Node
          type: string
        type:
          enum:
          - BITBUCKET
          - MESH
          type: string
      type: object
    RestNodeConnectivitySummary_summary:
      example:
        roundTripTime: 100
        errorMessage: Unable to connect to the node.
        reachable: true
      properties:
        errorMessage:
          example: Unable to connect to the node.
          type: string
        reachable:
          example: true
          type: boolean
        roundTripTime:
          example: 100
          format: int64
          type: integer
      type: object
    RestPermittedGroup_group:
      example:
        name: group_a
      properties:
        name:
          example: group_a
          type: string
      type: object
    RestPullRequestMergeConfig_commitMessageTemplate:
      example:
        body: "Merge in ${toProjectKey}/${toRepoSlug} from ${crossRepoProjectRepo}${fromRefName}\
          \ to ${toRefName}"
        title: "Pull request #${id}: ${title}"
      properties:
        body:
          example: "Merge in ${toProjectKey}/${toRepoSlug} from ${crossRepoProjectRepo}${fromRefName}\
            \ to ${toRefName}"
          type: string
        title:
          example: "Pull request #${id}: ${title}"
          type: string
      type: object
    RestPullRequestMergeConfig_defaultStrategy:
      example:
        flag: --no-ff
        name: Merge commit
        description: Always create a merge commit
        links: "{}"
        id: no-ff
        enabled: true
      properties:
        description:
          example: Always create a merge commit
          readOnly: true
          type: string
        enabled:
          readOnly: true
          type: boolean
        flag:
          example: --no-ff
          readOnly: true
          type: string
        id:
          example: no-ff
          type: string
        links:
          properties: {}
          type: object
          writeOnly: true
        name:
          example: Merge commit
          readOnly: true
          type: string
      type: object
    RestPullRequestSettings_mergeConfig:
      example:
        strategies:
        - flag: --no-ff
          name: Merge commit
          description: Always create a merge commit
          links: "{}"
          id: no-ff
          enabled: true
        - flag: --no-ff
          name: Merge commit
          description: Always create a merge commit
          links: "{}"
          id: no-ff
          enabled: true
        commitMessageTemplate:
          body: "Merge in ${toProjectKey}/${toRepoSlug} from ${crossRepoProjectRepo}${fromRefName}\
            \ to ${toRefName}"
          title: "Pull request #${id}: ${title}"
        defaultStrategy:
          flag: --no-ff
          name: Merge commit
          description: Always create a merge commit
          links: "{}"
          id: no-ff
          enabled: true
        type: repository
        commitSummaries: 0
      properties:
        commitMessageTemplate:
          $ref: "#/components/schemas/RestPullRequestMergeConfig_commitMessageTemplate"
        commitSummaries:
          format: int32
          type: integer
        defaultStrategy:
          $ref: "#/components/schemas/RestPullRequestMergeConfig_defaultStrategy"
        strategies:
          items:
            $ref: "#/components/schemas/RestPullRequestMergeStrategy"
          type: array
        type:
          example: repository
          readOnly: true
          type: string
      type: object
    RestRepositoryPullRequestSettings_requiredApprovers:
      example:
        count: "3"
        enabled: true
      properties:
        count:
          example: "3"
          type: string
        enabled:
          example: true
          type: boolean
      type: object
    RestRepositoryRefChangeActivity_refChange:
      example:
        fromHash: 6053a1eaa1c009dd11092d09a72f3c41af1b59ad
        ref:
          id: refs/heads/master
          displayId: master
          type: BRANCH
        toHash: d6edcbf924697ab811a867421dab60d954ccad99
        refId: refs/heads/master
        type: ADD
        updatedType: UNKNOWN
      properties:
        fromHash:
          example: 6053a1eaa1c009dd11092d09a72f3c41af1b59ad
          type: string
        ref:
          $ref: "#/components/schemas/RestPullRequestRebaseResult_refChange_ref"
        refId:
          example: refs/heads/master
          type: string
        toHash:
          example: d6edcbf924697ab811a867421dab60d954ccad99
          type: string
        type:
          enum:
          - ADD
          - DELETE
          - UPDATE
          type: string
        updatedType:
          enum:
          - UNKNOWN
          - UNRESOLVED
          - NOT_FORCED
          - FORCED
          type: string
      type: object
    RestSecretScanningRule_scope:
      description: The scope in which this rule was configured for.
      example:
        resourceId: 2
        type: GLOBAL
      properties:
        resourceId:
          example: 2
          format: int32
          type: integer
        type:
          enum:
          - GLOBAL
          - PROJECT
          - REPOSITORY
          type: string
      type: object
  securitySchemes:
    basic:
      description: "In order to use basic authorization, provide username:password\
        \ Base64 encoded in the 'Authorization' header."
      scheme: basic
      type: http
x-atlassian-narrative:
  documents:
  - title: About
    anchor: about
    body: |
      The Bitbucket Data Center and Server REST API enables you to interact with Bitbucket programmatically. This page documents the REST resources available in Bitbucket, including the HTTP response codes and example requests and responses.

      General information about using the REST APIs can be found at [Using the REST API](/server/bitbucket/how-tos/command-line-rest/)
      and [Authenticating with the REST API](/server/bitbucket/how-tos/example-basic-authentication/).
  - title: Intro
    anchor: intro
    body: |
      This is the reference document for the Bitbucket Data Center REST API. The REST API is for developers who want to:

      -   integrate &product_name; with other applications;
      -   create scripts that interact with Bitbucket Data Center or
      -   develop plugins that enhance the Bitbucket Data Center UI, using REST to interact with the backend.

      You can read more about developing Bitbucket Data Center plugins in the
      [Developer Documentation](https://developer.atlassian.com/server/bitbucket/)

      ## Getting started

      Because the REST API is based on open standards, you can use any web development language or command line tool
      capable of generating an HTTP request to access the API.

      If you're already working with the
      [Atlassian SDK](https://developer.atlassian.com/server/framework/atlassian-sdk/),
      the [REST API Browser](https://developer.atlassian.com/server/framework/atlassian-sdk/using-the-rest-api-browser)
      is a great tool for exploring and experimenting with the &product_name; REST API.

      ## Structure of the REST URIs

      Bitbucket Data Center's REST APIs provide access to resources (data entities) via URI paths. To use a REST API, your application will
      make an HTTP request and parse the response. The Bitbucket Data Center REST API uses JSON as its communication format, and the standard
      HTTP(S) methods like GET, PUT, POST and DELETE. URIs for Bitbucket Data Center's REST API resource have the following structure:

      `http://host:port/context/rest/api-name/api-version/path/to/resource`

      For example, the following URI would retrieve a page of the latest commits to the _jira_ repository in
      the _Jira_ project on `https://bitbucket.example.com`

      ```
      https://bitbucket.example.com/rest/api/1.0/projects/JIRA/repos/jira/commits
      ```

      See the API descriptions on the left for a full list of available resources.

      Alternatively we also publish a list of resources in
      [https://en.wikipedia.org/wiki/OpenAPI_Specification](OpenAPI) format. It is available via the triple dot menu above.

      ## Paged APIs

      Bitbucket Data Center uses paging to conserve server resources and limit response size for resources that return potentially large
      collections of items. A request to a paged API will result in a <code>values</code> array wrapped in a JSON object
      with some paging metadata, like this:

      ```json
      {
          "size": 3,
          "limit": 3,
          "isLastPage": false,
          "values": [
              {
                  /* result 0 */
              },
              {
                  /* result 1 */
              },
              {
                  /* result 2 */
              }
          ],
          "start": 0,
          "filter": null,
          "nextPageStart": 3
      }
      ```

      Clients can use the `limit` and `start` query parameters to retrieve the desired number of results.

      The `limit` parameter indicates how many results to return per page. Most APIs default to returning
      `25` if the limit is left unspecified. This number can be increased, but note that a resource-specific
      hard limit will apply. These hard limits can be configured by server administrators, so it's always best practice to
      check the `limit` attribute on the response to see what limit has been applied.
      The request to get a larger page should look like this:

      ```
      http://host:port/context/rest/api-name/api-version/path/to/resource?limit={desired size of page}
      ```

      For example:

      ```
          https://bitbucket.example.com/rest/api/1.0/projects/JIRA/repos/jira/commits?limit=1000
      ```

      The `start` parameter indicates which item should be used as the first item in the page of results. All
      paged responses contain an <code>isLastPage</code> attribute indicating whether another page of items exists.

      _Important:_ If more than one page exists (i.e. the response contains
      `"isLastPage": false`), the response object will also contain a `nextPageStart` attribute
      which _*must*_ be used by the client as the `start` parameter on the next request.
      Identifiers of adjacent objects in a page may not be contiguous, so the start of the next page is _not_
      necessarily the start of the last page plus the last page's size. A client should always use
      `nextPageStart` to avoid unexpected results from a paged API.
      The request to get a subsequent page should look like this:

      ```
          http://host:port/context/rest/api-name/api-version/path/to/resource?start={nextPageStart from previous response}
      ```

      For example:

      ```
          https://bitbucket.example.com/rest/api/1.0/projects/JIRA/repos/jira/commits?start=25
      ```

      ## Authentication

      Any authentication that works against Bitbucket Data Center will work against the REST API. _The preferred authentication methods
      are HTTP Basic (when using SSL) and OAuth_. Other supported methods include: HTTP Cookies and HTTP Aaccess Tokens

      You can find OAuth code samples in several programming languages at
      [bitbucket.org/atlassianlabs/atlassian-oauth-examples/](https://bitbucket.org/atlassianlabs/atlassian-oauth-examples/)

      The log-in page uses cookie-based authentication, so if you are using Bitbucket Data Center in a browser you can call REST from
      JavaScript on the page and rely on the authentication that the browser has established.

      ## Errors & Validation

      If a request fails due to client error, the resource will return an HTTP response code in the 40x range. These can
      be broadly categorised into:

      | HTTP Code                    | Description                                                                                                                                                                                                                                                                                                                                                                                     |
      | ---------------------------- | :---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
      | 400 (Bad Request)            | One or more of the required parameters or attributes: were missing from the request; incorrectly formatted; or inappropriate in the given context.                                                                                                                                                                                                                                              |
      | 401 (Unauthorized)           | Either: Authentication is required but was not attempted, or authentication was attempted but failed, or authentication was successful but the authenticated user does not have the requisite permission for the resource. See the individual resource documentation for details of required permissions.                                                                                       |
      | 403 (Forbidden)              | Actions are usually "forbidden" if they involve breaching the licensed user limit of the server, or degrading the authenticated user's permission level. See the individual resource documentation for more details.                                                                                                                                                                            |
      | 404 (Not Found)              | The entity you are attempting to access, or the project or repository containing it, does not exist.                                                                                                                                                                                                                                                                                            |
      | 405 (Method Not Allowed)     | The request HTTP method is not appropriate for the targeted resource. For example an HTTP GET to a resource that only accepts an HTTP POST will result in a 405.                                                                                                                                                                                                                                |
      | 409 (Conflict)               | The attempted update failed due to some conflict with an existing resource. For example: creating a project with a key that already exists, merging an out-of-date pull request, deleting a comment that has replies, etc.                                                                                                                                                                      |
      | 415 (Unsupported Media Type) | The request entity has a `Content-Type` that the server does not support. Almost all of the Bitbucket Data Center REST API accepts `application/json` format, but check the individual resource documentation for more details. Additionally, double-check that you are setting the `Content-Type` header correctly on your request (e.g. using `-H "Content-Type: application/json"` in cURL). |

      For _400_ HTTP codes the response will typically contain one or more validation error messages,
      for example:

      See the individual resource documentation for

      ```json
      {
          "errors": [
              {
                  "context": "name",
                  "message": "The name should be between 1 and 255 characters.",
                  "exceptionName": null
              },
              {
                  "context": "email",
                  "message": "The email should be a valid email address.",
                  "exceptionName": null
              }
          ]
      }
      ```

      The `context` attribute indicates which parameter or request entity attribute failed validation. Note
      that the `context` may be null.

      For _401_, _403_, _404_ and _409_
      HTTP codes, the response will contain one or more descriptive error messages:

      ```json
      {
          "errors": [
              {
                  "context": null,
                  "message": "A detailed error message.",
                  "exceptionName": null
              }
          ]
      }
      ```

      A _500_ (Server Error) HTTP code indicates an incorrect resource url or an unexpected server error.
      Double-check the URL you are trying to access, then report the issue to your server administrator or
      [Atlassian Support](https://getsupport.atlassian.com]) if problems persist.

      ## Personal Repositories

      Bitbucket Data Center allows users to manage their own repositories, called personal repositories. These are repositories associated
      with the user and to which they always have REPO_ADMIN permission.

      Accessing personal repositories via REST is achieved through the normal project-centric REST URLs
      using the user's slug prefixed by tilde as the project key. E.g. to list personal repositories for a
      user with slug "johnsmith" you would make a GET to:
      `http://example.com/rest/api/1.0/projects/~johnsmith/repos`

      In addition to this, Bitbucket Data Center allows access to these repositories through an alternate set of user-centric REST URLs
      beginning with:
      `http://example.com/rest/api/1.0/users/~{userSlug}/repos`
      E.g. to list the forks of the repository with slug
      "nodejs" in the personal project of user with slug "johnsmith" using the regular REST URL you would make a GET to:
      `http://example.com/rest/api/1.0/projects/~johnsmith/repos/nodejs/forks`
      Using the alternate URL, you would make a GET to:
      `http://example.com/rest/api/1.0/users/johnsmith/repos/nodejs/forks`
  - title: Rolling Upgrades REST API
    anchor: rolling-upgrades
    body: |
      Provides Rolling Upgrade capabilities.

      ### Table of Contents

      -   [Servers](#servers)
      -   [Paths](#paths)
          -   [`GET` /state](#op-get-state)
          -   [`GET` /nodes/{nodeId}](#op-get-nodes-nodeid)
          -   [`GET` /cluster](#op-get-cluster)
          -   [`POST` /start](#op-post-start)
          -   [`POST` /cancel](#op-post-cancel)
          -   [`POST` /approve](#op-post-approve)
      -   [Schemas](#schemas)
          -   ClusterStateResponse
          -   Link
          -   NodeInfoDTO
          -   Cluster

      ### Servers

      <table>
        <thead>
          <tr>
            <th>URL</th>
            <th>Description</th>
          <tr>
        </thead>
        <tbody>
          <tr>
            <td><a href="/rest/zdu" target="_blank">/rest/zdu</a></td>
            <td>The ZDU REST resource for the server</td>
          </tr>
        </tbody>
      </table>

      ### Paths

      ### `GET` /state

      <a id="op-get-state"></a>

      > Gets the Cluster State

      Gets the State of the Cluster and the responding Node's information.

      #### Responses

      ##### ▶ 200 - Returns full JSON representation of cluster state

      ###### Headers

      _No headers specified_

      ###### application/json

      <table>
        <thead>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
            <th>Accepted values</th>
          </tr>
        </thead>
        <tbody>
            <tr>
              <td>state</td>
              <td>
                string
              </td>
              <td>The current state of the Cluster.</td>
              <td><code>STABLE</code>, <code>READY_TO_UPGRADE</code>, <code>MIXED</code>, <code>READY_TO_RUN_UPGRADE_TASKS</code>, <code>RUNNING_UPGRADE_TASKS</code>, <code>UPGRADE_TASKS_FAILED</code></td>
            </tr>
            <tr>
              <td>buildInfo</td>
              <td>
                object
              </td>
              <td>Represents a Cluster Node and its current state.</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>buildInfo.id</td>
              <td>
                string
              </td>
              <td>The id of the Node in cluster.</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>buildInfo.name</td>
              <td>
                string
              </td>
              <td>The name of the Node.</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>buildInfo.ipAddress</td>
              <td>
                string
              </td>
              <td>The IP address of the Node.</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>buildInfo.state</td>
              <td>
                string
              </td>
              <td>The current state of the Node.</td>
              <td><code>STARTING</code>, <code>ACTIVE</code>, <code>DRAINING</code>, <code>TERMINATING</code>, <code>OFFLINE</code>, <code>ERROR</code></td>
            </tr>
            <tr>
              <td>buildInfo.tasksTotal</td>
              <td>
                integer
              </td>
              <td>The total number of active tasks on the Node.</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>buildInfo.activeUserCount</td>
              <td>
                integer
              </td>
              <td>The total number of active users on the Node.</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>buildInfo.buildNumber</td>
              <td>
                string
              </td>
              <td>The build number (DB schema version) of the Node's installed Product.</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>buildInfo.version</td>
              <td>
                string
              </td>
              <td>The version of the Node's installed Product.</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>buildInfo.local</td>
              <td>
                boolean
              </td>
              <td>True if this is the local node for the current session; otherwise false for remote nodes.</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>buildInfo.portNumber</td>
              <td>
                integer
              </td>
              <td></td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>buildInfo.links</td>
              <td>
                array(object)
              </td>
              <td>Hypermedia links</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>buildInfo.links.rel</td>
              <td>
                string
              </td>
              <td>rel</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>buildInfo.links.href</td>
              <td>
                string
              </td>
              <td>uri</td>
              <td><em>Any</em></td>
            </tr>
        </tbody>
      </table>

      ##### Example _(generated)_

      ```json
      {
          "state": "STABLE",
          "buildInfo": {
              "id": "string",
              "name": "string",
              "ipAddress": "string",
              "state": "STARTING",
              "tasksTotal": 0,
              "activeUserCount": 0,
              "buildNumber": "string",
              "version": "string",
              "local": true,
              "portNumber": 0,
              "links": [
                  {
                      "rel": "string",
                      "href": "http://example.com"
                  }
              ]
          }
      }
      ```

      ##### ▶ 401 - Returned if user is not authenticated

      ###### Headers

      _No headers specified_

      ##### ▶ 403 - Returned if the calling user does not have permission to view the content

      ###### Headers

      _No headers specified_

      #### Tags

      <div class="tags">
        <div class="tags__tag"></div>
      </div>
      </div>

      ### `GET` /nodes/{nodeId}

      <a id="op-get-nodes-nodeid"></a>

      > Gets the Node's overview

      Gets the requested Node's information.

      #### Path parameters

      ##### &#9655; nodeId

      <table>
        <thead>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>In</th>
            <th>Description</th>
            <th>Accepted values</th>
          </tr>
        </thead>
        <tbody>
            <tr>
              <td>nodeId  <strong>(required)</strong></td>
              <td>
                string
              </td>
              <td>path</td>
              <td></td>
              <td><em>Any</em></td>
            </tr>
        </tbody>
      </table>

      #### Responses

      ##### ▶ 200 - Returns full JSON representation of the cluster node

      ###### Headers

      _No headers specified_

      ###### application/json

      <table>
        <thead>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
            <th>Accepted values</th>
          </tr>
        </thead>
        <tbody>
            <tr>
              <td>id</td>
              <td>
                string
              </td>
              <td>The id of the Node in cluster.</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>name</td>
              <td>
                string
              </td>
              <td>The name of the Node.</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>ipAddress</td>
              <td>
                string
              </td>
              <td>The IP address of the Node.</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>state</td>
              <td>
                string
              </td>
              <td>The current state of the Node.</td>
              <td><code>STARTING</code>, <code>ACTIVE</code>, <code>DRAINING</code>, <code>TERMINATING</code>, <code>OFFLINE</code>, <code>ERROR</code></td>
            </tr>
            <tr>
              <td>tasksTotal</td>
              <td>
                integer
              </td>
              <td>The total number of active tasks on the Node.</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>activeUserCount</td>
              <td>
                integer
              </td>
              <td>The total number of active users on the Node.</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>buildNumber</td>
              <td>
                string
              </td>
              <td>The build number (DB schema version) of the Node's installed Product.</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>version</td>
              <td>
                string
              </td>
              <td>The version of the Node's installed Product.</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>local</td>
              <td>
                boolean
              </td>
              <td>True if this is the local node for the current session; otherwise false for remote nodes.</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>portNumber</td>
              <td>
                integer
              </td>
              <td></td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>links</td>
              <td>
                array(object)
              </td>
              <td>Hypermedia links</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>links.rel</td>
              <td>
                string
              </td>
              <td>rel</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>links.href</td>
              <td>
                string
              </td>
              <td>uri</td>
              <td><em>Any</em></td>
            </tr>
        </tbody>
      </table>

      ##### Example _(generated)_

      ```json
      {
          "id": "string",
          "name": "string",
          "ipAddress": "string",
          "state": "STARTING",
          "tasksTotal": 0,
          "activeUserCount": 0,
          "buildNumber": "string",
          "version": "string",
          "local": true,
          "portNumber": 0,
          "links": [
              {
                  "rel": "string",
                  "href": "http://example.com"
              }
          ]
      }
      ```

      ##### ▶ 401 - Returned if user is not authenticated

      ###### Headers

      _No headers specified_

      ##### ▶ 403 - Returned if the calling user does not have permission to view the content

      ###### Headers

      _No headers specified_

      ##### ▶ 404 - Returned if there is no content with the given id

      ###### Headers

      _No headers specified_

      #### Tags

      <div class="tags">
        <div class="tags__tag"></div>
      </div>
      </div>

      ### `GET` /cluster

      <a id="op-get-cluster"></a>

      > Gets the Cluster overview

      Gets an overview of a Cluster including its current state and composition of Nodes.

      #### Responses

      ##### ▶ 200 - Returns full JSON representation of the cluster

      ###### Headers

      _No headers specified_

      ###### application/json

      <table>
        <thead>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
            <th>Accepted values</th>
          </tr>
        </thead>
        <tbody>
            <tr>
              <td>upgradeModeEnabled</td>
              <td>
                boolean
              </td>
              <td>If true, it's safe to upgrade the nodes of the cluster</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>state</td>
              <td>
                string
              </td>
              <td>The current state of the Cluster.</td>
              <td><code>STABLE</code>, <code>READY_TO_UPGRADE</code>, <code>MIXED</code>, <code>READY_TO_RUN_UPGRADE_TASKS</code>, <code>RUNNING_UPGRADE_TASKS</code>, <code>UPGRADE_TASKS_FAILED</code></td>
            </tr>
            <tr>
              <td>originalVersion</td>
              <td>
                string
              </td>
              <td>The original product version when ZDU was enabled</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>nodes</td>
              <td>
                array(object)
              </td>
              <td>The nodes which form the Cluster.</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>nodes.id</td>
              <td>
                string
              </td>
              <td>The id of the Node in cluster.</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>nodes.name</td>
              <td>
                string
              </td>
              <td>The name of the Node.</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>nodes.ipAddress</td>
              <td>
                string
              </td>
              <td>The IP address of the Node.</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>nodes.state</td>
              <td>
                string
              </td>
              <td>The current state of the Node.</td>
              <td><code>STARTING</code>, <code>ACTIVE</code>, <code>DRAINING</code>, <code>TERMINATING</code>, <code>OFFLINE</code>, <code>ERROR</code></td>
            </tr>
            <tr>
              <td>nodes.tasksTotal</td>
              <td>
                integer
              </td>
              <td>The total number of active tasks on the Node.</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>nodes.activeUserCount</td>
              <td>
                integer
              </td>
              <td>The total number of active users on the Node.</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>nodes.buildNumber</td>
              <td>
                string
              </td>
              <td>The build number (DB schema version) of the Node's installed Product.</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>nodes.version</td>
              <td>
                string
              </td>
              <td>The version of the Node's installed Product.</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>nodes.local</td>
              <td>
                boolean
              </td>
              <td>True if this is the local node for the current session; otherwise false for remote nodes.</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>nodes.portNumber</td>
              <td>
                integer
              </td>
              <td></td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>nodes.links</td>
              <td>
                array(object)
              </td>
              <td>Hypermedia links</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>nodes.links.rel</td>
              <td>
                string
              </td>
              <td>rel</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>nodes.links.href</td>
              <td>
                string
              </td>
              <td>uri</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>links</td>
              <td>
                array(object)
              </td>
              <td>Hypermedia links</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>links.rel</td>
              <td>
                string
              </td>
              <td>rel</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>links.href</td>
              <td>
                string
              </td>
              <td>uri</td>
              <td><em>Any</em></td>
            </tr>
        </tbody>
      </table>

      ##### Example _(generated)_

      ```json
      {
          "upgradeModeEnabled": true,
          "state": "STABLE",
          "originalVersion": "string",
          "nodes": [
              {
                  "id": "string",
                  "name": "string",
                  "ipAddress": "string",
                  "state": "STARTING",
                  "tasksTotal": 0,
                  "activeUserCount": 0,
                  "buildNumber": "string",
                  "version": "string",
                  "local": true,
                  "portNumber": 0,
                  "links": [
                      {
                          "rel": "string",
                          "href": "http://example.com"
                      }
                  ]
              }
          ],
          "links": [
              {
                  "rel": "string",
                  "href": "http://example.com"
              }
          ]
      }
      ```

      ##### ▶ 401 - Returned if user is not authenticated

      ###### Headers

      _No headers specified_

      ##### ▶ 403 - Returned if the calling user does not have permission to view the content

      ###### Headers

      _No headers specified_

      #### Tags

      <div class="tags">
        <div class="tags__tag"></div>
      </div>
      </div>

      ### `POST` /start

      <a id="op-post-start"></a>

      > Start ZDU upgrade

      Enables Upgrading of individual Nodes within the Cluster, allowing a heterogeneous Cluster formation.

      #### Responses

      ##### ▶ 200 - Returns full JSON representation of the cluster

      ###### Headers

      _No headers specified_

      ###### application/json

      <table>
        <thead>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
            <th>Accepted values</th>
          </tr>
        </thead>
        <tbody>
            <tr>
              <td>upgradeModeEnabled</td>
              <td>
                boolean
              </td>
              <td>If true, it's safe to upgrade the nodes of the cluster</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>state</td>
              <td>
                string
              </td>
              <td>The current state of the Cluster.</td>
              <td><code>STABLE</code>, <code>READY_TO_UPGRADE</code>, <code>MIXED</code>, <code>READY_TO_RUN_UPGRADE_TASKS</code>, <code>RUNNING_UPGRADE_TASKS</code>, <code>UPGRADE_TASKS_FAILED</code></td>
            </tr>
            <tr>
              <td>originalVersion</td>
              <td>
                string
              </td>
              <td>The original product version when ZDU was enabled</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>nodes</td>
              <td>
                array(object)
              </td>
              <td>The nodes which form the Cluster.</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>nodes.id</td>
              <td>
                string
              </td>
              <td>The id of the Node in cluster.</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>nodes.name</td>
              <td>
                string
              </td>
              <td>The name of the Node.</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>nodes.ipAddress</td>
              <td>
                string
              </td>
              <td>The IP address of the Node.</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>nodes.state</td>
              <td>
                string
              </td>
              <td>The current state of the Node.</td>
              <td><code>STARTING</code>, <code>ACTIVE</code>, <code>DRAINING</code>, <code>TERMINATING</code>, <code>OFFLINE</code>, <code>ERROR</code></td>
            </tr>
            <tr>
              <td>nodes.tasksTotal</td>
              <td>
                integer
              </td>
              <td>The total number of active tasks on the Node.</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>nodes.activeUserCount</td>
              <td>
                integer
              </td>
              <td>The total number of active users on the Node.</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>nodes.buildNumber</td>
              <td>
                string
              </td>
              <td>The build number (DB schema version) of the Node's installed Product.</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>nodes.version</td>
              <td>
                string
              </td>
              <td>The version of the Node's installed Product.</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>nodes.local</td>
              <td>
                boolean
              </td>
              <td>True if this is the local node for the current session; otherwise false for remote nodes.</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>nodes.portNumber</td>
              <td>
                integer
              </td>
              <td></td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>nodes.links</td>
              <td>
                array(object)
              </td>
              <td>Hypermedia links</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>nodes.links.rel</td>
              <td>
                string
              </td>
              <td>rel</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>nodes.links.href</td>
              <td>
                string
              </td>
              <td>uri</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>links</td>
              <td>
                array(object)
              </td>
              <td>Hypermedia links</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>links.rel</td>
              <td>
                string
              </td>
              <td>rel</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>links.href</td>
              <td>
                string
              </td>
              <td>uri</td>
              <td><em>Any</em></td>
            </tr>
        </tbody>
      </table>

      ##### Example _(generated)_

      ```json
      {
          "upgradeModeEnabled": true,
          "state": "STABLE",
          "originalVersion": "string",
          "nodes": [
              {
                  "id": "string",
                  "name": "string",
                  "ipAddress": "string",
                  "state": "STARTING",
                  "tasksTotal": 0,
                  "activeUserCount": 0,
                  "buildNumber": "string",
                  "version": "string",
                  "local": true,
                  "portNumber": 0,
                  "links": [
                      {
                          "rel": "string",
                          "href": "http://example.com"
                      }
                  ]
              }
          ],
          "links": [
              {
                  "rel": "string",
                  "href": "http://example.com"
              }
          ]
      }
      ```

      ##### ▶ 401 - Returned if user is not authenticated

      ###### Headers

      _No headers specified_

      ##### ▶ 403 - Returned if the calling user does not have permission to view the content

      ###### Headers

      _No headers specified_

      ##### ▶ 409 - Returned if the cluster is not in a valid state

      ###### Headers

      _No headers specified_

      #### Tags

      <div class="tags">
        <div class="tags__tag"></div>
      </div>
      </div>

      ### `POST` /cancel

      <a id="op-post-cancel"></a>

      > Cancel ZDU upgrade

      Prohibits the Upgrading of individual Nodes within the Cluster. All Nodes need to be on the same version before performing this request.

      #### Responses

      ##### ▶ 200 - Returns full JSON representation of the cluster

      ###### Headers

      _No headers specified_

      ###### application/json

      <table>
        <thead>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
            <th>Accepted values</th>
          </tr>
        </thead>
        <tbody>
            <tr>
              <td>upgradeModeEnabled</td>
              <td>
                boolean
              </td>
              <td>If true, it's safe to upgrade the nodes of the cluster</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>state</td>
              <td>
                string
              </td>
              <td>The current state of the Cluster.</td>
              <td><code>STABLE</code>, <code>READY_TO_UPGRADE</code>, <code>MIXED</code>, <code>READY_TO_RUN_UPGRADE_TASKS</code>, <code>RUNNING_UPGRADE_TASKS</code>, <code>UPGRADE_TASKS_FAILED</code></td>
            </tr>
            <tr>
              <td>originalVersion</td>
              <td>
                string
              </td>
              <td>The original product version when ZDU was enabled</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>nodes</td>
              <td>
                array(object)
              </td>
              <td>The nodes which form the Cluster.</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>nodes.id</td>
              <td>
                string
              </td>
              <td>The id of the Node in cluster.</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>nodes.name</td>
              <td>
                string
              </td>
              <td>The name of the Node.</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>nodes.ipAddress</td>
              <td>
                string
              </td>
              <td>The IP address of the Node.</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>nodes.state</td>
              <td>
                string
              </td>
              <td>The current state of the Node.</td>
              <td><code>STARTING</code>, <code>ACTIVE</code>, <code>DRAINING</code>, <code>TERMINATING</code>, <code>OFFLINE</code>, <code>ERROR</code></td>
            </tr>
            <tr>
              <td>nodes.tasksTotal</td>
              <td>
                integer
              </td>
              <td>The total number of active tasks on the Node.</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>nodes.activeUserCount</td>
              <td>
                integer
              </td>
              <td>The total number of active users on the Node.</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>nodes.buildNumber</td>
              <td>
                string
              </td>
              <td>The build number (DB schema version) of the Node's installed Product.</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>nodes.version</td>
              <td>
                string
              </td>
              <td>The version of the Node's installed Product.</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>nodes.local</td>
              <td>
                boolean
              </td>
              <td>True if this is the local node for the current session; otherwise false for remote nodes.</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>nodes.portNumber</td>
              <td>
                integer
              </td>
              <td></td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>nodes.links</td>
              <td>
                array(object)
              </td>
              <td>Hypermedia links</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>nodes.links.rel</td>
              <td>
                string
              </td>
              <td>rel</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>nodes.links.href</td>
              <td>
                string
              </td>
              <td>uri</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>links</td>
              <td>
                array(object)
              </td>
              <td>Hypermedia links</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>links.rel</td>
              <td>
                string
              </td>
              <td>rel</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>links.href</td>
              <td>
                string
              </td>
              <td>uri</td>
              <td><em>Any</em></td>
            </tr>
        </tbody>
      </table>

      ##### Example _(generated)_

      ```json
      {
          "upgradeModeEnabled": true,
          "state": "STABLE",
          "originalVersion": "string",
          "nodes": [
              {
                  "id": "string",
                  "name": "string",
                  "ipAddress": "string",
                  "state": "STARTING",
                  "tasksTotal": 0,
                  "activeUserCount": 0,
                  "buildNumber": "string",
                  "version": "string",
                  "local": true,
                  "portNumber": 0,
                  "links": [
                      {
                          "rel": "string",
                          "href": "http://example.com"
                      }
                  ]
              }
          ],
          "links": [
              {
                  "rel": "string",
                  "href": "http://example.com"
              }
          ]
      }
      ```

      ##### ▶ 401 - Returned if user is not authenticated

      ###### Headers

      _No headers specified_

      ##### ▶ 403 - Returned if the calling user does not have permission to view the content

      ###### Headers

      _No headers specified_

      ##### ▶ 409 - Returned if the cluster is not in a valid state

      ###### Headers

      _No headers specified_

      #### Tags

      <div class="tags">
        <div class="tags__tag"></div>
      </div>
      </div>

      ### `POST` /approve

      <a id="op-post-approve"></a>

      > Approve the ZDU upgrade

      Finalizes the ZDU upgrade and runs specific tasks such as cleanup scripts.

      #### Responses

      ##### ▶ 200 - Returns full JSON representation of the cluster

      ###### Headers

      _No headers specified_

      ###### application/json

      <table>
        <thead>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
            <th>Accepted values</th>
          </tr>
        </thead>
        <tbody>
            <tr>
              <td>upgradeModeEnabled</td>
              <td>
                boolean
              </td>
              <td>If true, it's safe to upgrade the nodes of the cluster</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>state</td>
              <td>
                string
              </td>
              <td>The current state of the Cluster.</td>
              <td><code>STABLE</code>, <code>READY_TO_UPGRADE</code>, <code>MIXED</code>, <code>READY_TO_RUN_UPGRADE_TASKS</code>, <code>RUNNING_UPGRADE_TASKS</code>, <code>UPGRADE_TASKS_FAILED</code></td>
            </tr>
            <tr>
              <td>originalVersion</td>
              <td>
                string
              </td>
              <td>The original product version when ZDU was enabled</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>nodes</td>
              <td>
                array(object)
              </td>
              <td>The nodes which form the Cluster.</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>nodes.id</td>
              <td>
                string
              </td>
              <td>The id of the Node in cluster.</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>nodes.name</td>
              <td>
                string
              </td>
              <td>The name of the Node.</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>nodes.ipAddress</td>
              <td>
                string
              </td>
              <td>The IP address of the Node.</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>nodes.state</td>
              <td>
                string
              </td>
              <td>The current state of the Node.</td>
              <td><code>STARTING</code>, <code>ACTIVE</code>, <code>DRAINING</code>, <code>TERMINATING</code>, <code>OFFLINE</code>, <code>ERROR</code></td>
            </tr>
            <tr>
              <td>nodes.tasksTotal</td>
              <td>
                integer
              </td>
              <td>The total number of active tasks on the Node.</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>nodes.activeUserCount</td>
              <td>
                integer
              </td>
              <td>The total number of active users on the Node.</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>nodes.buildNumber</td>
              <td>
                string
              </td>
              <td>The build number (DB schema version) of the Node's installed Product.</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>nodes.version</td>
              <td>
                string
              </td>
              <td>The version of the Node's installed Product.</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>nodes.local</td>
              <td>
                boolean
              </td>
              <td>True if this is the local node for the current session; otherwise false for remote nodes.</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>nodes.portNumber</td>
              <td>
                integer
              </td>
              <td></td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>nodes.links</td>
              <td>
                array(object)
              </td>
              <td>Hypermedia links</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>nodes.links.rel</td>
              <td>
                string
              </td>
              <td>rel</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>nodes.links.href</td>
              <td>
                string
              </td>
              <td>uri</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>links</td>
              <td>
                array(object)
              </td>
              <td>Hypermedia links</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>links.rel</td>
              <td>
                string
              </td>
              <td>rel</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>links.href</td>
              <td>
                string
              </td>
              <td>uri</td>
              <td><em>Any</em></td>
            </tr>
        </tbody>
      </table>

      ##### Example _(generated)_

      ```json
      {
          "upgradeModeEnabled": true,
          "state": "STABLE",
          "originalVersion": "string",
          "nodes": [
              {
                  "id": "string",
                  "name": "string",
                  "ipAddress": "string",
                  "state": "STARTING",
                  "tasksTotal": 0,
                  "activeUserCount": 0,
                  "buildNumber": "string",
                  "version": "string",
                  "local": true,
                  "portNumber": 0,
                  "links": [
                      {
                          "rel": "string",
                          "href": "http://example.com"
                      }
                  ]
              }
          ],
          "links": [
              {
                  "rel": "string",
                  "href": "http://example.com"
              }
          ]
      }
      ```

      ##### ▶ 401 - Returned if user is not authenticated

      ###### Headers

      _No headers specified_

      ##### ▶ 403 - Returned if the calling user does not have permission to view the content

      ###### Headers

      _No headers specified_

      ##### ▶ 409 - Returned if the cluster is not in a valid state

      ###### Headers

      _No headers specified_

      ##### ▶ 500 - Internal Error

      ###### Headers

      _No headers specified_

      #### Tags

      <div class="tags">
        <div class="tags__tag"></div>
      </div>
      </div>

      ### Schemas

      #### ClusterStateResponse

      <table>
        <thead>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
            <th>Accepted values</th>
          </tr>
        </thead>
        <tbody>
            <tr>
              <td>state</td>
              <td>
                string
              </td>
              <td>The current state of the Cluster.</td>
              <td><code>STABLE</code>, <code>READY_TO_UPGRADE</code>, <code>MIXED</code>, <code>READY_TO_RUN_UPGRADE_TASKS</code>, <code>RUNNING_UPGRADE_TASKS</code>, <code>UPGRADE_TASKS_FAILED</code></td>
            </tr>
            <tr>
              <td>buildInfo</td>
              <td>
                object
              </td>
              <td>Represents a Cluster Node and its current state.</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>buildInfo.id</td>
              <td>
                string
              </td>
              <td>The id of the Node in cluster.</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>buildInfo.name</td>
              <td>
                string
              </td>
              <td>The name of the Node.</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>buildInfo.ipAddress</td>
              <td>
                string
              </td>
              <td>The IP address of the Node.</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>buildInfo.state</td>
              <td>
                string
              </td>
              <td>The current state of the Node.</td>
              <td><code>STARTING</code>, <code>ACTIVE</code>, <code>DRAINING</code>, <code>TERMINATING</code>, <code>OFFLINE</code>, <code>ERROR</code></td>
            </tr>
            <tr>
              <td>buildInfo.tasksTotal</td>
              <td>
                integer
              </td>
              <td>The total number of active tasks on the Node.</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>buildInfo.activeUserCount</td>
              <td>
                integer
              </td>
              <td>The total number of active users on the Node.</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>buildInfo.buildNumber</td>
              <td>
                string
              </td>
              <td>The build number (DB schema version) of the Node's installed Product.</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>buildInfo.version</td>
              <td>
                string
              </td>
              <td>The version of the Node's installed Product.</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>buildInfo.local</td>
              <td>
                boolean
              </td>
              <td>True if this is the local node for the current session; otherwise false for remote nodes.</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>buildInfo.portNumber</td>
              <td>
                integer
              </td>
              <td></td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>buildInfo.links</td>
              <td>
                array(object)
              </td>
              <td>Hypermedia links</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>buildInfo.links.rel</td>
              <td>
                string
              </td>
              <td>rel</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>buildInfo.links.href</td>
              <td>
                string
              </td>
              <td>uri</td>
              <td><em>Any</em></td>
            </tr>
        </tbody>
      </table>

      ##### Example _(generated)_

      ```json
      {
          "state": "STABLE",
          "buildInfo": {
              "id": "string",
              "name": "string",
              "ipAddress": "string",
              "state": "STARTING",
              "tasksTotal": 0,
              "activeUserCount": 0,
              "buildNumber": "string",
              "version": "string",
              "local": true,
              "portNumber": 0,
              "links": [
                  {
                      "rel": "string",
                      "href": "http://example.com"
                  }
              ]
          }
      }
      ```

      #### Link

      <table>
        <thead>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
            <th>Accepted values</th>
          </tr>
        </thead>
        <tbody>
            <tr>
              <td>rel</td>
              <td>
                string
              </td>
              <td>rel</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>href</td>
              <td>
                string
              </td>
              <td>uri</td>
              <td><em>Any</em></td>
            </tr>
        </tbody>
      </table>

      ##### Example _(generated)_

      ```json
      {
          "rel": "string",
          "href": "http://example.com"
      }
      ```

      #### NodeInfoDTO

      <table>
        <thead>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
            <th>Accepted values</th>
          </tr>
        </thead>
        <tbody>
            <tr>
              <td>id</td>
              <td>
                string
              </td>
              <td>The id of the Node in cluster.</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>name</td>
              <td>
                string
              </td>
              <td>The name of the Node.</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>ipAddress</td>
              <td>
                string
              </td>
              <td>The IP address of the Node.</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>state</td>
              <td>
                string
              </td>
              <td>The current state of the Node.</td>
              <td><code>STARTING</code>, <code>ACTIVE</code>, <code>DRAINING</code>, <code>TERMINATING</code>, <code>OFFLINE</code>, <code>ERROR</code></td>
            </tr>
            <tr>
              <td>tasksTotal</td>
              <td>
                integer
              </td>
              <td>The total number of active tasks on the Node.</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>activeUserCount</td>
              <td>
                integer
              </td>
              <td>The total number of active users on the Node.</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>buildNumber</td>
              <td>
                string
              </td>
              <td>The build number (DB schema version) of the Node's installed Product.</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>version</td>
              <td>
                string
              </td>
              <td>The version of the Node's installed Product.</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>local</td>
              <td>
                boolean
              </td>
              <td>True if this is the local node for the current session; otherwise false for remote nodes.</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>portNumber</td>
              <td>
                integer
              </td>
              <td></td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>links</td>
              <td>
                array(object)
              </td>
              <td>Hypermedia links</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>links.rel</td>
              <td>
                string
              </td>
              <td>rel</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>links.href</td>
              <td>
                string
              </td>
              <td>uri</td>
              <td><em>Any</em></td>
            </tr>
        </tbody>
      </table>

      ##### Example _(generated)_

      ```json
      {
          "id": "string",
          "name": "string",
          "ipAddress": "string",
          "state": "STARTING",
          "tasksTotal": 0,
          "activeUserCount": 0,
          "buildNumber": "string",
          "version": "string",
          "local": true,
          "portNumber": 0,
          "links": [
              {
                  "rel": "string",
                  "href": "http://example.com"
              }
          ]
      }
      ```

      #### Cluster

      <table>
        <thead>
          <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Description</th>
            <th>Accepted values</th>
          </tr>
        </thead>
        <tbody>
            <tr>
              <td>upgradeModeEnabled</td>
              <td>
                boolean
              </td>
              <td>If true, it's safe to upgrade the nodes of the cluster</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>state</td>
              <td>
                string
              </td>
              <td>The current state of the Cluster.</td>
              <td><code>STABLE</code>, <code>READY_TO_UPGRADE</code>, <code>MIXED</code>, <code>READY_TO_RUN_UPGRADE_TASKS</code>, <code>RUNNING_UPGRADE_TASKS</code>, <code>UPGRADE_TASKS_FAILED</code></td>
            </tr>
            <tr>
              <td>originalVersion</td>
              <td>
                string
              </td>
              <td>The original product version when ZDU was enabled</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>nodes</td>
              <td>
                array(object)
              </td>
              <td>The nodes which form the Cluster.</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>nodes.id</td>
              <td>
                string
              </td>
              <td>The id of the Node in cluster.</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>nodes.name</td>
              <td>
                string
              </td>
              <td>The name of the Node.</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>nodes.ipAddress</td>
              <td>
                string
              </td>
              <td>The IP address of the Node.</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>nodes.state</td>
              <td>
                string
              </td>
              <td>The current state of the Node.</td>
              <td><code>STARTING</code>, <code>ACTIVE</code>, <code>DRAINING</code>, <code>TERMINATING</code>, <code>OFFLINE</code>, <code>ERROR</code></td>
            </tr>
            <tr>
              <td>nodes.tasksTotal</td>
              <td>
                integer
              </td>
              <td>The total number of active tasks on the Node.</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>nodes.activeUserCount</td>
              <td>
                integer
              </td>
              <td>The total number of active users on the Node.</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>nodes.buildNumber</td>
              <td>
                string
              </td>
              <td>The build number (DB schema version) of the Node's installed Product.</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>nodes.version</td>
              <td>
                string
              </td>
              <td>The version of the Node's installed Product.</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>nodes.local</td>
              <td>
                boolean
              </td>
              <td>True if this is the local node for the current session; otherwise false for remote nodes.</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>nodes.portNumber</td>
              <td>
                integer
              </td>
              <td></td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>nodes.links</td>
              <td>
                array(object)
              </td>
              <td>Hypermedia links</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>nodes.links.rel</td>
              <td>
                string
              </td>
              <td>rel</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>nodes.links.href</td>
              <td>
                string
              </td>
              <td>uri</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>links</td>
              <td>
                array(object)
              </td>
              <td>Hypermedia links</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>links.rel</td>
              <td>
                string
              </td>
              <td>rel</td>
              <td><em>Any</em></td>
            </tr>
            <tr>
              <td>links.href</td>
              <td>
                string
              </td>
              <td>uri</td>
              <td><em>Any</em></td>
            </tr>
        </tbody>
      </table>

      ##### Example _(generated)_

      ```json
      {
          "upgradeModeEnabled": true,
          "state": "STABLE",
          "originalVersion": "string",
          "nodes": [
              {
                  "id": "string",
                  "name": "string",
                  "ipAddress": "string",
                  "state": "STARTING",
                  "tasksTotal": 0,
                  "activeUserCount": 0,
                  "buildNumber": "string",
                  "version": "string",
                  "local": true,
                  "portNumber": 0,
                  "links": [
                      {
                          "rel": "string",
                          "href": "http://example.com"
                      }
                  ]
              }
          ],
          "links": [
              {
                  "rel": "string",
                  "href": "http://example.com"
              }
          ]
      }
      ```
