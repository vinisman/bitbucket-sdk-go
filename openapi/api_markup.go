/*
Bitbucket Data Center

This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).

API version: 9.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// MarkupAPIService MarkupAPI service
type MarkupAPIService service

type ApiPreviewRequest struct {
	ctx context.Context
	ApiService *MarkupAPIService
	htmlEscape *string
	urlMode *string
	includeHeadingId *string
	hardwrap *string
	body *string
}

// (Optional) true if HTML should be escaped in the input markup, false otherwise.
func (r ApiPreviewRequest) HtmlEscape(htmlEscape string) ApiPreviewRequest {
	r.htmlEscape = &htmlEscape
	return r
}

// (Optional) The mode to use when building URLs. One of: ABSOLUTE, RELATIVE or, CONFIGURED. By default this is RELATIVE.
func (r ApiPreviewRequest) UrlMode(urlMode string) ApiPreviewRequest {
	r.urlMode = &urlMode
	return r
}

// (Optional) true if headers should contain an ID based on the heading content.
func (r ApiPreviewRequest) IncludeHeadingId(includeHeadingId string) ApiPreviewRequest {
	r.includeHeadingId = &includeHeadingId
	return r
}

// (Optional) Whether the markup implementation should convert newlines to breaks. By default this is false which reflects the standard markdown specification.
func (r ApiPreviewRequest) Hardwrap(hardwrap string) ApiPreviewRequest {
	r.hardwrap = &hardwrap
	return r
}

func (r ApiPreviewRequest) Body(body string) ApiPreviewRequest {
	r.body = &body
	return r
}

func (r ApiPreviewRequest) Execute() (*RestMarkup, *http.Response, error) {
	return r.ApiService.PreviewExecute(r)
}

/*
Preview Preview markdown render

Preview generated HTML for the given markdown content.

Only authenticated users may call this resource.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPreviewRequest
*/
func (a *MarkupAPIService) Preview(ctx context.Context) ApiPreviewRequest {
	return ApiPreviewRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return RestMarkup
func (a *MarkupAPIService) PreviewExecute(r ApiPreviewRequest) (*RestMarkup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RestMarkup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MarkupAPIService.Preview")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/latest/markup/preview"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.htmlEscape != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "htmlEscape", r.htmlEscape, "form", "")
	}
	if r.urlMode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "urlMode", r.urlMode, "form", "")
	}
	if r.includeHeadingId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeHeadingId", r.includeHeadingId, "form", "")
	}
	if r.hardwrap != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hardwrap", r.hardwrap, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v GetAllAccessTokens401Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v GetAllAccessTokens401Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
