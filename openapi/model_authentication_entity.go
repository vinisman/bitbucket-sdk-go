/*
Bitbucket Data Center

This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).

API version: 9.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the AuthenticationEntity type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuthenticationEntity{}

// AuthenticationEntity struct for AuthenticationEntity
type AuthenticationEntity struct {
	CaptchaChallenge *string `json:"captchaChallenge,omitempty"`
	CaptchaId *string `json:"captchaId,omitempty"`
	Password *string `json:"password,omitempty"`
	RememberMe *bool `json:"rememberMe,omitempty"`
	TargetUrl *string `json:"targetUrl,omitempty"`
	Username *string `json:"username,omitempty"`
}

// NewAuthenticationEntity instantiates a new AuthenticationEntity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthenticationEntity() *AuthenticationEntity {
	this := AuthenticationEntity{}
	return &this
}

// NewAuthenticationEntityWithDefaults instantiates a new AuthenticationEntity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthenticationEntityWithDefaults() *AuthenticationEntity {
	this := AuthenticationEntity{}
	return &this
}

// GetCaptchaChallenge returns the CaptchaChallenge field value if set, zero value otherwise.
func (o *AuthenticationEntity) GetCaptchaChallenge() string {
	if o == nil || IsNil(o.CaptchaChallenge) {
		var ret string
		return ret
	}
	return *o.CaptchaChallenge
}

// GetCaptchaChallengeOk returns a tuple with the CaptchaChallenge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthenticationEntity) GetCaptchaChallengeOk() (*string, bool) {
	if o == nil || IsNil(o.CaptchaChallenge) {
		return nil, false
	}
	return o.CaptchaChallenge, true
}

// HasCaptchaChallenge returns a boolean if a field has been set.
func (o *AuthenticationEntity) HasCaptchaChallenge() bool {
	if o != nil && !IsNil(o.CaptchaChallenge) {
		return true
	}

	return false
}

// SetCaptchaChallenge gets a reference to the given string and assigns it to the CaptchaChallenge field.
func (o *AuthenticationEntity) SetCaptchaChallenge(v string) {
	o.CaptchaChallenge = &v
}

// GetCaptchaId returns the CaptchaId field value if set, zero value otherwise.
func (o *AuthenticationEntity) GetCaptchaId() string {
	if o == nil || IsNil(o.CaptchaId) {
		var ret string
		return ret
	}
	return *o.CaptchaId
}

// GetCaptchaIdOk returns a tuple with the CaptchaId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthenticationEntity) GetCaptchaIdOk() (*string, bool) {
	if o == nil || IsNil(o.CaptchaId) {
		return nil, false
	}
	return o.CaptchaId, true
}

// HasCaptchaId returns a boolean if a field has been set.
func (o *AuthenticationEntity) HasCaptchaId() bool {
	if o != nil && !IsNil(o.CaptchaId) {
		return true
	}

	return false
}

// SetCaptchaId gets a reference to the given string and assigns it to the CaptchaId field.
func (o *AuthenticationEntity) SetCaptchaId(v string) {
	o.CaptchaId = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *AuthenticationEntity) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthenticationEntity) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *AuthenticationEntity) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *AuthenticationEntity) SetPassword(v string) {
	o.Password = &v
}

// GetRememberMe returns the RememberMe field value if set, zero value otherwise.
func (o *AuthenticationEntity) GetRememberMe() bool {
	if o == nil || IsNil(o.RememberMe) {
		var ret bool
		return ret
	}
	return *o.RememberMe
}

// GetRememberMeOk returns a tuple with the RememberMe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthenticationEntity) GetRememberMeOk() (*bool, bool) {
	if o == nil || IsNil(o.RememberMe) {
		return nil, false
	}
	return o.RememberMe, true
}

// HasRememberMe returns a boolean if a field has been set.
func (o *AuthenticationEntity) HasRememberMe() bool {
	if o != nil && !IsNil(o.RememberMe) {
		return true
	}

	return false
}

// SetRememberMe gets a reference to the given bool and assigns it to the RememberMe field.
func (o *AuthenticationEntity) SetRememberMe(v bool) {
	o.RememberMe = &v
}

// GetTargetUrl returns the TargetUrl field value if set, zero value otherwise.
func (o *AuthenticationEntity) GetTargetUrl() string {
	if o == nil || IsNil(o.TargetUrl) {
		var ret string
		return ret
	}
	return *o.TargetUrl
}

// GetTargetUrlOk returns a tuple with the TargetUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthenticationEntity) GetTargetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.TargetUrl) {
		return nil, false
	}
	return o.TargetUrl, true
}

// HasTargetUrl returns a boolean if a field has been set.
func (o *AuthenticationEntity) HasTargetUrl() bool {
	if o != nil && !IsNil(o.TargetUrl) {
		return true
	}

	return false
}

// SetTargetUrl gets a reference to the given string and assigns it to the TargetUrl field.
func (o *AuthenticationEntity) SetTargetUrl(v string) {
	o.TargetUrl = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *AuthenticationEntity) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthenticationEntity) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *AuthenticationEntity) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *AuthenticationEntity) SetUsername(v string) {
	o.Username = &v
}

func (o AuthenticationEntity) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuthenticationEntity) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CaptchaChallenge) {
		toSerialize["captchaChallenge"] = o.CaptchaChallenge
	}
	if !IsNil(o.CaptchaId) {
		toSerialize["captchaId"] = o.CaptchaId
	}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	if !IsNil(o.RememberMe) {
		toSerialize["rememberMe"] = o.RememberMe
	}
	if !IsNil(o.TargetUrl) {
		toSerialize["targetUrl"] = o.TargetUrl
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	return toSerialize, nil
}

type NullableAuthenticationEntity struct {
	value *AuthenticationEntity
	isSet bool
}

func (v NullableAuthenticationEntity) Get() *AuthenticationEntity {
	return v.value
}

func (v *NullableAuthenticationEntity) Set(val *AuthenticationEntity) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthenticationEntity) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthenticationEntity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthenticationEntity(val *AuthenticationEntity) *NullableAuthenticationEntity {
	return &NullableAuthenticationEntity{value: val, isSet: true}
}

func (v NullableAuthenticationEntity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthenticationEntity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


