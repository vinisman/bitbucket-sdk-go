/*
Bitbucket Data Center

This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).

API version: 9.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the Comment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Comment{}

// Comment struct for Comment
type Comment struct {
	Anchor *CommentThreadDiffAnchor `json:"anchor,omitempty"`
	Author *ApplicationUser `json:"author,omitempty"`
	Comments []Comment `json:"comments,omitempty"`
	CreatedDate *time.Time `json:"createdDate,omitempty"`
	Id *int64 `json:"id,omitempty"`
	PermittedOperations *CommentOperations `json:"permittedOperations,omitempty"`
	Properties map[string]interface{} `json:"properties,omitempty"`
	ResolvedDate *time.Time `json:"resolvedDate,omitempty"`
	Resolver *ApplicationUser `json:"resolver,omitempty"`
	Severity *string `json:"severity,omitempty"`
	State *string `json:"state,omitempty"`
	Text *string `json:"text,omitempty"`
	Thread *CommentThread `json:"thread,omitempty"`
	UpdatedDate *time.Time `json:"updatedDate,omitempty"`
	Version *int32 `json:"version,omitempty"`
}

// NewComment instantiates a new Comment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComment() *Comment {
	this := Comment{}
	return &this
}

// NewCommentWithDefaults instantiates a new Comment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommentWithDefaults() *Comment {
	this := Comment{}
	return &this
}

// GetAnchor returns the Anchor field value if set, zero value otherwise.
func (o *Comment) GetAnchor() CommentThreadDiffAnchor {
	if o == nil || IsNil(o.Anchor) {
		var ret CommentThreadDiffAnchor
		return ret
	}
	return *o.Anchor
}

// GetAnchorOk returns a tuple with the Anchor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Comment) GetAnchorOk() (*CommentThreadDiffAnchor, bool) {
	if o == nil || IsNil(o.Anchor) {
		return nil, false
	}
	return o.Anchor, true
}

// HasAnchor returns a boolean if a field has been set.
func (o *Comment) HasAnchor() bool {
	if o != nil && !IsNil(o.Anchor) {
		return true
	}

	return false
}

// SetAnchor gets a reference to the given CommentThreadDiffAnchor and assigns it to the Anchor field.
func (o *Comment) SetAnchor(v CommentThreadDiffAnchor) {
	o.Anchor = &v
}

// GetAuthor returns the Author field value if set, zero value otherwise.
func (o *Comment) GetAuthor() ApplicationUser {
	if o == nil || IsNil(o.Author) {
		var ret ApplicationUser
		return ret
	}
	return *o.Author
}

// GetAuthorOk returns a tuple with the Author field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Comment) GetAuthorOk() (*ApplicationUser, bool) {
	if o == nil || IsNil(o.Author) {
		return nil, false
	}
	return o.Author, true
}

// HasAuthor returns a boolean if a field has been set.
func (o *Comment) HasAuthor() bool {
	if o != nil && !IsNil(o.Author) {
		return true
	}

	return false
}

// SetAuthor gets a reference to the given ApplicationUser and assigns it to the Author field.
func (o *Comment) SetAuthor(v ApplicationUser) {
	o.Author = &v
}

// GetComments returns the Comments field value if set, zero value otherwise.
func (o *Comment) GetComments() []Comment {
	if o == nil || IsNil(o.Comments) {
		var ret []Comment
		return ret
	}
	return o.Comments
}

// GetCommentsOk returns a tuple with the Comments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Comment) GetCommentsOk() ([]Comment, bool) {
	if o == nil || IsNil(o.Comments) {
		return nil, false
	}
	return o.Comments, true
}

// HasComments returns a boolean if a field has been set.
func (o *Comment) HasComments() bool {
	if o != nil && !IsNil(o.Comments) {
		return true
	}

	return false
}

// SetComments gets a reference to the given []Comment and assigns it to the Comments field.
func (o *Comment) SetComments(v []Comment) {
	o.Comments = v
}

// GetCreatedDate returns the CreatedDate field value if set, zero value otherwise.
func (o *Comment) GetCreatedDate() time.Time {
	if o == nil || IsNil(o.CreatedDate) {
		var ret time.Time
		return ret
	}
	return *o.CreatedDate
}

// GetCreatedDateOk returns a tuple with the CreatedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Comment) GetCreatedDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedDate) {
		return nil, false
	}
	return o.CreatedDate, true
}

// HasCreatedDate returns a boolean if a field has been set.
func (o *Comment) HasCreatedDate() bool {
	if o != nil && !IsNil(o.CreatedDate) {
		return true
	}

	return false
}

// SetCreatedDate gets a reference to the given time.Time and assigns it to the CreatedDate field.
func (o *Comment) SetCreatedDate(v time.Time) {
	o.CreatedDate = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Comment) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Comment) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Comment) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *Comment) SetId(v int64) {
	o.Id = &v
}

// GetPermittedOperations returns the PermittedOperations field value if set, zero value otherwise.
func (o *Comment) GetPermittedOperations() CommentOperations {
	if o == nil || IsNil(o.PermittedOperations) {
		var ret CommentOperations
		return ret
	}
	return *o.PermittedOperations
}

// GetPermittedOperationsOk returns a tuple with the PermittedOperations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Comment) GetPermittedOperationsOk() (*CommentOperations, bool) {
	if o == nil || IsNil(o.PermittedOperations) {
		return nil, false
	}
	return o.PermittedOperations, true
}

// HasPermittedOperations returns a boolean if a field has been set.
func (o *Comment) HasPermittedOperations() bool {
	if o != nil && !IsNil(o.PermittedOperations) {
		return true
	}

	return false
}

// SetPermittedOperations gets a reference to the given CommentOperations and assigns it to the PermittedOperations field.
func (o *Comment) SetPermittedOperations(v CommentOperations) {
	o.PermittedOperations = &v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *Comment) GetProperties() map[string]interface{} {
	if o == nil || IsNil(o.Properties) {
		var ret map[string]interface{}
		return ret
	}
	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Comment) GetPropertiesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Properties) {
		return map[string]interface{}{}, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *Comment) HasProperties() bool {
	if o != nil && !IsNil(o.Properties) {
		return true
	}

	return false
}

// SetProperties gets a reference to the given map[string]interface{} and assigns it to the Properties field.
func (o *Comment) SetProperties(v map[string]interface{}) {
	o.Properties = v
}

// GetResolvedDate returns the ResolvedDate field value if set, zero value otherwise.
func (o *Comment) GetResolvedDate() time.Time {
	if o == nil || IsNil(o.ResolvedDate) {
		var ret time.Time
		return ret
	}
	return *o.ResolvedDate
}

// GetResolvedDateOk returns a tuple with the ResolvedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Comment) GetResolvedDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ResolvedDate) {
		return nil, false
	}
	return o.ResolvedDate, true
}

// HasResolvedDate returns a boolean if a field has been set.
func (o *Comment) HasResolvedDate() bool {
	if o != nil && !IsNil(o.ResolvedDate) {
		return true
	}

	return false
}

// SetResolvedDate gets a reference to the given time.Time and assigns it to the ResolvedDate field.
func (o *Comment) SetResolvedDate(v time.Time) {
	o.ResolvedDate = &v
}

// GetResolver returns the Resolver field value if set, zero value otherwise.
func (o *Comment) GetResolver() ApplicationUser {
	if o == nil || IsNil(o.Resolver) {
		var ret ApplicationUser
		return ret
	}
	return *o.Resolver
}

// GetResolverOk returns a tuple with the Resolver field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Comment) GetResolverOk() (*ApplicationUser, bool) {
	if o == nil || IsNil(o.Resolver) {
		return nil, false
	}
	return o.Resolver, true
}

// HasResolver returns a boolean if a field has been set.
func (o *Comment) HasResolver() bool {
	if o != nil && !IsNil(o.Resolver) {
		return true
	}

	return false
}

// SetResolver gets a reference to the given ApplicationUser and assigns it to the Resolver field.
func (o *Comment) SetResolver(v ApplicationUser) {
	o.Resolver = &v
}

// GetSeverity returns the Severity field value if set, zero value otherwise.
func (o *Comment) GetSeverity() string {
	if o == nil || IsNil(o.Severity) {
		var ret string
		return ret
	}
	return *o.Severity
}

// GetSeverityOk returns a tuple with the Severity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Comment) GetSeverityOk() (*string, bool) {
	if o == nil || IsNil(o.Severity) {
		return nil, false
	}
	return o.Severity, true
}

// HasSeverity returns a boolean if a field has been set.
func (o *Comment) HasSeverity() bool {
	if o != nil && !IsNil(o.Severity) {
		return true
	}

	return false
}

// SetSeverity gets a reference to the given string and assigns it to the Severity field.
func (o *Comment) SetSeverity(v string) {
	o.Severity = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *Comment) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Comment) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *Comment) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *Comment) SetState(v string) {
	o.State = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *Comment) GetText() string {
	if o == nil || IsNil(o.Text) {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Comment) GetTextOk() (*string, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *Comment) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *Comment) SetText(v string) {
	o.Text = &v
}

// GetThread returns the Thread field value if set, zero value otherwise.
func (o *Comment) GetThread() CommentThread {
	if o == nil || IsNil(o.Thread) {
		var ret CommentThread
		return ret
	}
	return *o.Thread
}

// GetThreadOk returns a tuple with the Thread field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Comment) GetThreadOk() (*CommentThread, bool) {
	if o == nil || IsNil(o.Thread) {
		return nil, false
	}
	return o.Thread, true
}

// HasThread returns a boolean if a field has been set.
func (o *Comment) HasThread() bool {
	if o != nil && !IsNil(o.Thread) {
		return true
	}

	return false
}

// SetThread gets a reference to the given CommentThread and assigns it to the Thread field.
func (o *Comment) SetThread(v CommentThread) {
	o.Thread = &v
}

// GetUpdatedDate returns the UpdatedDate field value if set, zero value otherwise.
func (o *Comment) GetUpdatedDate() time.Time {
	if o == nil || IsNil(o.UpdatedDate) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedDate
}

// GetUpdatedDateOk returns a tuple with the UpdatedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Comment) GetUpdatedDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedDate) {
		return nil, false
	}
	return o.UpdatedDate, true
}

// HasUpdatedDate returns a boolean if a field has been set.
func (o *Comment) HasUpdatedDate() bool {
	if o != nil && !IsNil(o.UpdatedDate) {
		return true
	}

	return false
}

// SetUpdatedDate gets a reference to the given time.Time and assigns it to the UpdatedDate field.
func (o *Comment) SetUpdatedDate(v time.Time) {
	o.UpdatedDate = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *Comment) GetVersion() int32 {
	if o == nil || IsNil(o.Version) {
		var ret int32
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Comment) GetVersionOk() (*int32, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *Comment) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int32 and assigns it to the Version field.
func (o *Comment) SetVersion(v int32) {
	o.Version = &v
}

func (o Comment) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Comment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Anchor) {
		toSerialize["anchor"] = o.Anchor
	}
	if !IsNil(o.Author) {
		toSerialize["author"] = o.Author
	}
	if !IsNil(o.Comments) {
		toSerialize["comments"] = o.Comments
	}
	if !IsNil(o.CreatedDate) {
		toSerialize["createdDate"] = o.CreatedDate
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.PermittedOperations) {
		toSerialize["permittedOperations"] = o.PermittedOperations
	}
	if !IsNil(o.Properties) {
		toSerialize["properties"] = o.Properties
	}
	if !IsNil(o.ResolvedDate) {
		toSerialize["resolvedDate"] = o.ResolvedDate
	}
	if !IsNil(o.Resolver) {
		toSerialize["resolver"] = o.Resolver
	}
	if !IsNil(o.Severity) {
		toSerialize["severity"] = o.Severity
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !IsNil(o.Thread) {
		toSerialize["thread"] = o.Thread
	}
	if !IsNil(o.UpdatedDate) {
		toSerialize["updatedDate"] = o.UpdatedDate
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

type NullableComment struct {
	value *Comment
	isSet bool
}

func (v NullableComment) Get() *Comment {
	return v.value
}

func (v *NullableComment) Set(val *Comment) {
	v.value = val
	v.isSet = true
}

func (v NullableComment) IsSet() bool {
	return v.isSet
}

func (v *NullableComment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComment(val *Comment) *NullableComment {
	return &NullableComment{value: val, isSet: true}
}

func (v NullableComment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


