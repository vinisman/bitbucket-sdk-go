/*
Bitbucket Data Center

This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).

API version: 9.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CommentOperations type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommentOperations{}

// CommentOperations struct for CommentOperations
type CommentOperations struct {
	Deletable *bool `json:"deletable,omitempty"`
	Editable *bool `json:"editable,omitempty"`
	Transitionable *bool `json:"transitionable,omitempty"`
}

// NewCommentOperations instantiates a new CommentOperations object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommentOperations() *CommentOperations {
	this := CommentOperations{}
	return &this
}

// NewCommentOperationsWithDefaults instantiates a new CommentOperations object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommentOperationsWithDefaults() *CommentOperations {
	this := CommentOperations{}
	return &this
}

// GetDeletable returns the Deletable field value if set, zero value otherwise.
func (o *CommentOperations) GetDeletable() bool {
	if o == nil || IsNil(o.Deletable) {
		var ret bool
		return ret
	}
	return *o.Deletable
}

// GetDeletableOk returns a tuple with the Deletable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommentOperations) GetDeletableOk() (*bool, bool) {
	if o == nil || IsNil(o.Deletable) {
		return nil, false
	}
	return o.Deletable, true
}

// HasDeletable returns a boolean if a field has been set.
func (o *CommentOperations) HasDeletable() bool {
	if o != nil && !IsNil(o.Deletable) {
		return true
	}

	return false
}

// SetDeletable gets a reference to the given bool and assigns it to the Deletable field.
func (o *CommentOperations) SetDeletable(v bool) {
	o.Deletable = &v
}

// GetEditable returns the Editable field value if set, zero value otherwise.
func (o *CommentOperations) GetEditable() bool {
	if o == nil || IsNil(o.Editable) {
		var ret bool
		return ret
	}
	return *o.Editable
}

// GetEditableOk returns a tuple with the Editable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommentOperations) GetEditableOk() (*bool, bool) {
	if o == nil || IsNil(o.Editable) {
		return nil, false
	}
	return o.Editable, true
}

// HasEditable returns a boolean if a field has been set.
func (o *CommentOperations) HasEditable() bool {
	if o != nil && !IsNil(o.Editable) {
		return true
	}

	return false
}

// SetEditable gets a reference to the given bool and assigns it to the Editable field.
func (o *CommentOperations) SetEditable(v bool) {
	o.Editable = &v
}

// GetTransitionable returns the Transitionable field value if set, zero value otherwise.
func (o *CommentOperations) GetTransitionable() bool {
	if o == nil || IsNil(o.Transitionable) {
		var ret bool
		return ret
	}
	return *o.Transitionable
}

// GetTransitionableOk returns a tuple with the Transitionable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommentOperations) GetTransitionableOk() (*bool, bool) {
	if o == nil || IsNil(o.Transitionable) {
		return nil, false
	}
	return o.Transitionable, true
}

// HasTransitionable returns a boolean if a field has been set.
func (o *CommentOperations) HasTransitionable() bool {
	if o != nil && !IsNil(o.Transitionable) {
		return true
	}

	return false
}

// SetTransitionable gets a reference to the given bool and assigns it to the Transitionable field.
func (o *CommentOperations) SetTransitionable(v bool) {
	o.Transitionable = &v
}

func (o CommentOperations) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommentOperations) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Deletable) {
		toSerialize["deletable"] = o.Deletable
	}
	if !IsNil(o.Editable) {
		toSerialize["editable"] = o.Editable
	}
	if !IsNil(o.Transitionable) {
		toSerialize["transitionable"] = o.Transitionable
	}
	return toSerialize, nil
}

type NullableCommentOperations struct {
	value *CommentOperations
	isSet bool
}

func (v NullableCommentOperations) Get() *CommentOperations {
	return v.value
}

func (v *NullableCommentOperations) Set(val *CommentOperations) {
	v.value = val
	v.isSet = true
}

func (v NullableCommentOperations) IsSet() bool {
	return v.isSet
}

func (v *NullableCommentOperations) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommentOperations(val *CommentOperations) *NullableCommentOperations {
	return &NullableCommentOperations{value: val, isSet: true}
}

func (v NullableCommentOperations) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommentOperations) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


