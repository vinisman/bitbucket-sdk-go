/*
Bitbucket Data Center

This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).

API version: 9.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the CommentThread type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommentThread{}

// CommentThread struct for CommentThread
type CommentThread struct {
	Anchor *CommentThreadDiffAnchor `json:"anchor,omitempty"`
	Anchored *bool `json:"anchored,omitempty"`
	Commentable map[string]interface{} `json:"commentable,omitempty"`
	CreatedDate *time.Time `json:"createdDate,omitempty"`
	Id *int64 `json:"id,omitempty"`
	Resolved *bool `json:"resolved,omitempty"`
	ResolvedDate *time.Time `json:"resolvedDate,omitempty"`
	Resolver *ApplicationUser `json:"resolver,omitempty"`
	RootComment *Comment `json:"rootComment,omitempty"`
	UpdatedDate *time.Time `json:"updatedDate,omitempty"`
}

// NewCommentThread instantiates a new CommentThread object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommentThread() *CommentThread {
	this := CommentThread{}
	return &this
}

// NewCommentThreadWithDefaults instantiates a new CommentThread object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommentThreadWithDefaults() *CommentThread {
	this := CommentThread{}
	return &this
}

// GetAnchor returns the Anchor field value if set, zero value otherwise.
func (o *CommentThread) GetAnchor() CommentThreadDiffAnchor {
	if o == nil || IsNil(o.Anchor) {
		var ret CommentThreadDiffAnchor
		return ret
	}
	return *o.Anchor
}

// GetAnchorOk returns a tuple with the Anchor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommentThread) GetAnchorOk() (*CommentThreadDiffAnchor, bool) {
	if o == nil || IsNil(o.Anchor) {
		return nil, false
	}
	return o.Anchor, true
}

// HasAnchor returns a boolean if a field has been set.
func (o *CommentThread) HasAnchor() bool {
	if o != nil && !IsNil(o.Anchor) {
		return true
	}

	return false
}

// SetAnchor gets a reference to the given CommentThreadDiffAnchor and assigns it to the Anchor field.
func (o *CommentThread) SetAnchor(v CommentThreadDiffAnchor) {
	o.Anchor = &v
}

// GetAnchored returns the Anchored field value if set, zero value otherwise.
func (o *CommentThread) GetAnchored() bool {
	if o == nil || IsNil(o.Anchored) {
		var ret bool
		return ret
	}
	return *o.Anchored
}

// GetAnchoredOk returns a tuple with the Anchored field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommentThread) GetAnchoredOk() (*bool, bool) {
	if o == nil || IsNil(o.Anchored) {
		return nil, false
	}
	return o.Anchored, true
}

// HasAnchored returns a boolean if a field has been set.
func (o *CommentThread) HasAnchored() bool {
	if o != nil && !IsNil(o.Anchored) {
		return true
	}

	return false
}

// SetAnchored gets a reference to the given bool and assigns it to the Anchored field.
func (o *CommentThread) SetAnchored(v bool) {
	o.Anchored = &v
}

// GetCommentable returns the Commentable field value if set, zero value otherwise.
func (o *CommentThread) GetCommentable() map[string]interface{} {
	if o == nil || IsNil(o.Commentable) {
		var ret map[string]interface{}
		return ret
	}
	return o.Commentable
}

// GetCommentableOk returns a tuple with the Commentable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommentThread) GetCommentableOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Commentable) {
		return map[string]interface{}{}, false
	}
	return o.Commentable, true
}

// HasCommentable returns a boolean if a field has been set.
func (o *CommentThread) HasCommentable() bool {
	if o != nil && !IsNil(o.Commentable) {
		return true
	}

	return false
}

// SetCommentable gets a reference to the given map[string]interface{} and assigns it to the Commentable field.
func (o *CommentThread) SetCommentable(v map[string]interface{}) {
	o.Commentable = v
}

// GetCreatedDate returns the CreatedDate field value if set, zero value otherwise.
func (o *CommentThread) GetCreatedDate() time.Time {
	if o == nil || IsNil(o.CreatedDate) {
		var ret time.Time
		return ret
	}
	return *o.CreatedDate
}

// GetCreatedDateOk returns a tuple with the CreatedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommentThread) GetCreatedDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedDate) {
		return nil, false
	}
	return o.CreatedDate, true
}

// HasCreatedDate returns a boolean if a field has been set.
func (o *CommentThread) HasCreatedDate() bool {
	if o != nil && !IsNil(o.CreatedDate) {
		return true
	}

	return false
}

// SetCreatedDate gets a reference to the given time.Time and assigns it to the CreatedDate field.
func (o *CommentThread) SetCreatedDate(v time.Time) {
	o.CreatedDate = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CommentThread) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommentThread) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CommentThread) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *CommentThread) SetId(v int64) {
	o.Id = &v
}

// GetResolved returns the Resolved field value if set, zero value otherwise.
func (o *CommentThread) GetResolved() bool {
	if o == nil || IsNil(o.Resolved) {
		var ret bool
		return ret
	}
	return *o.Resolved
}

// GetResolvedOk returns a tuple with the Resolved field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommentThread) GetResolvedOk() (*bool, bool) {
	if o == nil || IsNil(o.Resolved) {
		return nil, false
	}
	return o.Resolved, true
}

// HasResolved returns a boolean if a field has been set.
func (o *CommentThread) HasResolved() bool {
	if o != nil && !IsNil(o.Resolved) {
		return true
	}

	return false
}

// SetResolved gets a reference to the given bool and assigns it to the Resolved field.
func (o *CommentThread) SetResolved(v bool) {
	o.Resolved = &v
}

// GetResolvedDate returns the ResolvedDate field value if set, zero value otherwise.
func (o *CommentThread) GetResolvedDate() time.Time {
	if o == nil || IsNil(o.ResolvedDate) {
		var ret time.Time
		return ret
	}
	return *o.ResolvedDate
}

// GetResolvedDateOk returns a tuple with the ResolvedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommentThread) GetResolvedDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ResolvedDate) {
		return nil, false
	}
	return o.ResolvedDate, true
}

// HasResolvedDate returns a boolean if a field has been set.
func (o *CommentThread) HasResolvedDate() bool {
	if o != nil && !IsNil(o.ResolvedDate) {
		return true
	}

	return false
}

// SetResolvedDate gets a reference to the given time.Time and assigns it to the ResolvedDate field.
func (o *CommentThread) SetResolvedDate(v time.Time) {
	o.ResolvedDate = &v
}

// GetResolver returns the Resolver field value if set, zero value otherwise.
func (o *CommentThread) GetResolver() ApplicationUser {
	if o == nil || IsNil(o.Resolver) {
		var ret ApplicationUser
		return ret
	}
	return *o.Resolver
}

// GetResolverOk returns a tuple with the Resolver field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommentThread) GetResolverOk() (*ApplicationUser, bool) {
	if o == nil || IsNil(o.Resolver) {
		return nil, false
	}
	return o.Resolver, true
}

// HasResolver returns a boolean if a field has been set.
func (o *CommentThread) HasResolver() bool {
	if o != nil && !IsNil(o.Resolver) {
		return true
	}

	return false
}

// SetResolver gets a reference to the given ApplicationUser and assigns it to the Resolver field.
func (o *CommentThread) SetResolver(v ApplicationUser) {
	o.Resolver = &v
}

// GetRootComment returns the RootComment field value if set, zero value otherwise.
func (o *CommentThread) GetRootComment() Comment {
	if o == nil || IsNil(o.RootComment) {
		var ret Comment
		return ret
	}
	return *o.RootComment
}

// GetRootCommentOk returns a tuple with the RootComment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommentThread) GetRootCommentOk() (*Comment, bool) {
	if o == nil || IsNil(o.RootComment) {
		return nil, false
	}
	return o.RootComment, true
}

// HasRootComment returns a boolean if a field has been set.
func (o *CommentThread) HasRootComment() bool {
	if o != nil && !IsNil(o.RootComment) {
		return true
	}

	return false
}

// SetRootComment gets a reference to the given Comment and assigns it to the RootComment field.
func (o *CommentThread) SetRootComment(v Comment) {
	o.RootComment = &v
}

// GetUpdatedDate returns the UpdatedDate field value if set, zero value otherwise.
func (o *CommentThread) GetUpdatedDate() time.Time {
	if o == nil || IsNil(o.UpdatedDate) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedDate
}

// GetUpdatedDateOk returns a tuple with the UpdatedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommentThread) GetUpdatedDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedDate) {
		return nil, false
	}
	return o.UpdatedDate, true
}

// HasUpdatedDate returns a boolean if a field has been set.
func (o *CommentThread) HasUpdatedDate() bool {
	if o != nil && !IsNil(o.UpdatedDate) {
		return true
	}

	return false
}

// SetUpdatedDate gets a reference to the given time.Time and assigns it to the UpdatedDate field.
func (o *CommentThread) SetUpdatedDate(v time.Time) {
	o.UpdatedDate = &v
}

func (o CommentThread) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommentThread) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Anchor) {
		toSerialize["anchor"] = o.Anchor
	}
	if !IsNil(o.Anchored) {
		toSerialize["anchored"] = o.Anchored
	}
	if !IsNil(o.Commentable) {
		toSerialize["commentable"] = o.Commentable
	}
	if !IsNil(o.CreatedDate) {
		toSerialize["createdDate"] = o.CreatedDate
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Resolved) {
		toSerialize["resolved"] = o.Resolved
	}
	if !IsNil(o.ResolvedDate) {
		toSerialize["resolvedDate"] = o.ResolvedDate
	}
	if !IsNil(o.Resolver) {
		toSerialize["resolver"] = o.Resolver
	}
	if !IsNil(o.RootComment) {
		toSerialize["rootComment"] = o.RootComment
	}
	if !IsNil(o.UpdatedDate) {
		toSerialize["updatedDate"] = o.UpdatedDate
	}
	return toSerialize, nil
}

type NullableCommentThread struct {
	value *CommentThread
	isSet bool
}

func (v NullableCommentThread) Get() *CommentThread {
	return v.value
}

func (v *NullableCommentThread) Set(val *CommentThread) {
	v.value = val
	v.isSet = true
}

func (v NullableCommentThread) IsSet() bool {
	return v.isSet
}

func (v *NullableCommentThread) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommentThread(val *CommentThread) *NullableCommentThread {
	return &NullableCommentThread{value: val, isSet: true}
}

func (v NullableCommentThread) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommentThread) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


