/*
Bitbucket Data Center

This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).

API version: 9.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CommentThreadDiffAnchor type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommentThreadDiffAnchor{}

// CommentThreadDiffAnchor struct for CommentThreadDiffAnchor
type CommentThreadDiffAnchor struct {
	DiffType *string `json:"diffType,omitempty"`
	FileAnchor *bool `json:"fileAnchor,omitempty"`
	FileType *string `json:"fileType,omitempty"`
	FromHash *string `json:"fromHash,omitempty"`
	Line *int32 `json:"line,omitempty"`
	LineAnchor *bool `json:"lineAnchor,omitempty"`
	LineType *string `json:"lineType,omitempty"`
	MultilineAnchor *bool `json:"multilineAnchor,omitempty"`
	MultilineDestinationRange *LineNumberRange `json:"multilineDestinationRange,omitempty"`
	MultilineSourceRange *LineNumberRange `json:"multilineSourceRange,omitempty"`
	MultilineStartLine *int32 `json:"multilineStartLine,omitempty"`
	MultilineStartLineType *string `json:"multilineStartLineType,omitempty"`
	Orphaned *bool `json:"orphaned,omitempty"`
	Path *string `json:"path,omitempty"`
	SrcPath *string `json:"srcPath,omitempty"`
	ToHash *string `json:"toHash,omitempty"`
}

// NewCommentThreadDiffAnchor instantiates a new CommentThreadDiffAnchor object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommentThreadDiffAnchor() *CommentThreadDiffAnchor {
	this := CommentThreadDiffAnchor{}
	return &this
}

// NewCommentThreadDiffAnchorWithDefaults instantiates a new CommentThreadDiffAnchor object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommentThreadDiffAnchorWithDefaults() *CommentThreadDiffAnchor {
	this := CommentThreadDiffAnchor{}
	return &this
}

// GetDiffType returns the DiffType field value if set, zero value otherwise.
func (o *CommentThreadDiffAnchor) GetDiffType() string {
	if o == nil || IsNil(o.DiffType) {
		var ret string
		return ret
	}
	return *o.DiffType
}

// GetDiffTypeOk returns a tuple with the DiffType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommentThreadDiffAnchor) GetDiffTypeOk() (*string, bool) {
	if o == nil || IsNil(o.DiffType) {
		return nil, false
	}
	return o.DiffType, true
}

// HasDiffType returns a boolean if a field has been set.
func (o *CommentThreadDiffAnchor) HasDiffType() bool {
	if o != nil && !IsNil(o.DiffType) {
		return true
	}

	return false
}

// SetDiffType gets a reference to the given string and assigns it to the DiffType field.
func (o *CommentThreadDiffAnchor) SetDiffType(v string) {
	o.DiffType = &v
}

// GetFileAnchor returns the FileAnchor field value if set, zero value otherwise.
func (o *CommentThreadDiffAnchor) GetFileAnchor() bool {
	if o == nil || IsNil(o.FileAnchor) {
		var ret bool
		return ret
	}
	return *o.FileAnchor
}

// GetFileAnchorOk returns a tuple with the FileAnchor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommentThreadDiffAnchor) GetFileAnchorOk() (*bool, bool) {
	if o == nil || IsNil(o.FileAnchor) {
		return nil, false
	}
	return o.FileAnchor, true
}

// HasFileAnchor returns a boolean if a field has been set.
func (o *CommentThreadDiffAnchor) HasFileAnchor() bool {
	if o != nil && !IsNil(o.FileAnchor) {
		return true
	}

	return false
}

// SetFileAnchor gets a reference to the given bool and assigns it to the FileAnchor field.
func (o *CommentThreadDiffAnchor) SetFileAnchor(v bool) {
	o.FileAnchor = &v
}

// GetFileType returns the FileType field value if set, zero value otherwise.
func (o *CommentThreadDiffAnchor) GetFileType() string {
	if o == nil || IsNil(o.FileType) {
		var ret string
		return ret
	}
	return *o.FileType
}

// GetFileTypeOk returns a tuple with the FileType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommentThreadDiffAnchor) GetFileTypeOk() (*string, bool) {
	if o == nil || IsNil(o.FileType) {
		return nil, false
	}
	return o.FileType, true
}

// HasFileType returns a boolean if a field has been set.
func (o *CommentThreadDiffAnchor) HasFileType() bool {
	if o != nil && !IsNil(o.FileType) {
		return true
	}

	return false
}

// SetFileType gets a reference to the given string and assigns it to the FileType field.
func (o *CommentThreadDiffAnchor) SetFileType(v string) {
	o.FileType = &v
}

// GetFromHash returns the FromHash field value if set, zero value otherwise.
func (o *CommentThreadDiffAnchor) GetFromHash() string {
	if o == nil || IsNil(o.FromHash) {
		var ret string
		return ret
	}
	return *o.FromHash
}

// GetFromHashOk returns a tuple with the FromHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommentThreadDiffAnchor) GetFromHashOk() (*string, bool) {
	if o == nil || IsNil(o.FromHash) {
		return nil, false
	}
	return o.FromHash, true
}

// HasFromHash returns a boolean if a field has been set.
func (o *CommentThreadDiffAnchor) HasFromHash() bool {
	if o != nil && !IsNil(o.FromHash) {
		return true
	}

	return false
}

// SetFromHash gets a reference to the given string and assigns it to the FromHash field.
func (o *CommentThreadDiffAnchor) SetFromHash(v string) {
	o.FromHash = &v
}

// GetLine returns the Line field value if set, zero value otherwise.
func (o *CommentThreadDiffAnchor) GetLine() int32 {
	if o == nil || IsNil(o.Line) {
		var ret int32
		return ret
	}
	return *o.Line
}

// GetLineOk returns a tuple with the Line field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommentThreadDiffAnchor) GetLineOk() (*int32, bool) {
	if o == nil || IsNil(o.Line) {
		return nil, false
	}
	return o.Line, true
}

// HasLine returns a boolean if a field has been set.
func (o *CommentThreadDiffAnchor) HasLine() bool {
	if o != nil && !IsNil(o.Line) {
		return true
	}

	return false
}

// SetLine gets a reference to the given int32 and assigns it to the Line field.
func (o *CommentThreadDiffAnchor) SetLine(v int32) {
	o.Line = &v
}

// GetLineAnchor returns the LineAnchor field value if set, zero value otherwise.
func (o *CommentThreadDiffAnchor) GetLineAnchor() bool {
	if o == nil || IsNil(o.LineAnchor) {
		var ret bool
		return ret
	}
	return *o.LineAnchor
}

// GetLineAnchorOk returns a tuple with the LineAnchor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommentThreadDiffAnchor) GetLineAnchorOk() (*bool, bool) {
	if o == nil || IsNil(o.LineAnchor) {
		return nil, false
	}
	return o.LineAnchor, true
}

// HasLineAnchor returns a boolean if a field has been set.
func (o *CommentThreadDiffAnchor) HasLineAnchor() bool {
	if o != nil && !IsNil(o.LineAnchor) {
		return true
	}

	return false
}

// SetLineAnchor gets a reference to the given bool and assigns it to the LineAnchor field.
func (o *CommentThreadDiffAnchor) SetLineAnchor(v bool) {
	o.LineAnchor = &v
}

// GetLineType returns the LineType field value if set, zero value otherwise.
func (o *CommentThreadDiffAnchor) GetLineType() string {
	if o == nil || IsNil(o.LineType) {
		var ret string
		return ret
	}
	return *o.LineType
}

// GetLineTypeOk returns a tuple with the LineType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommentThreadDiffAnchor) GetLineTypeOk() (*string, bool) {
	if o == nil || IsNil(o.LineType) {
		return nil, false
	}
	return o.LineType, true
}

// HasLineType returns a boolean if a field has been set.
func (o *CommentThreadDiffAnchor) HasLineType() bool {
	if o != nil && !IsNil(o.LineType) {
		return true
	}

	return false
}

// SetLineType gets a reference to the given string and assigns it to the LineType field.
func (o *CommentThreadDiffAnchor) SetLineType(v string) {
	o.LineType = &v
}

// GetMultilineAnchor returns the MultilineAnchor field value if set, zero value otherwise.
func (o *CommentThreadDiffAnchor) GetMultilineAnchor() bool {
	if o == nil || IsNil(o.MultilineAnchor) {
		var ret bool
		return ret
	}
	return *o.MultilineAnchor
}

// GetMultilineAnchorOk returns a tuple with the MultilineAnchor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommentThreadDiffAnchor) GetMultilineAnchorOk() (*bool, bool) {
	if o == nil || IsNil(o.MultilineAnchor) {
		return nil, false
	}
	return o.MultilineAnchor, true
}

// HasMultilineAnchor returns a boolean if a field has been set.
func (o *CommentThreadDiffAnchor) HasMultilineAnchor() bool {
	if o != nil && !IsNil(o.MultilineAnchor) {
		return true
	}

	return false
}

// SetMultilineAnchor gets a reference to the given bool and assigns it to the MultilineAnchor field.
func (o *CommentThreadDiffAnchor) SetMultilineAnchor(v bool) {
	o.MultilineAnchor = &v
}

// GetMultilineDestinationRange returns the MultilineDestinationRange field value if set, zero value otherwise.
func (o *CommentThreadDiffAnchor) GetMultilineDestinationRange() LineNumberRange {
	if o == nil || IsNil(o.MultilineDestinationRange) {
		var ret LineNumberRange
		return ret
	}
	return *o.MultilineDestinationRange
}

// GetMultilineDestinationRangeOk returns a tuple with the MultilineDestinationRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommentThreadDiffAnchor) GetMultilineDestinationRangeOk() (*LineNumberRange, bool) {
	if o == nil || IsNil(o.MultilineDestinationRange) {
		return nil, false
	}
	return o.MultilineDestinationRange, true
}

// HasMultilineDestinationRange returns a boolean if a field has been set.
func (o *CommentThreadDiffAnchor) HasMultilineDestinationRange() bool {
	if o != nil && !IsNil(o.MultilineDestinationRange) {
		return true
	}

	return false
}

// SetMultilineDestinationRange gets a reference to the given LineNumberRange and assigns it to the MultilineDestinationRange field.
func (o *CommentThreadDiffAnchor) SetMultilineDestinationRange(v LineNumberRange) {
	o.MultilineDestinationRange = &v
}

// GetMultilineSourceRange returns the MultilineSourceRange field value if set, zero value otherwise.
func (o *CommentThreadDiffAnchor) GetMultilineSourceRange() LineNumberRange {
	if o == nil || IsNil(o.MultilineSourceRange) {
		var ret LineNumberRange
		return ret
	}
	return *o.MultilineSourceRange
}

// GetMultilineSourceRangeOk returns a tuple with the MultilineSourceRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommentThreadDiffAnchor) GetMultilineSourceRangeOk() (*LineNumberRange, bool) {
	if o == nil || IsNil(o.MultilineSourceRange) {
		return nil, false
	}
	return o.MultilineSourceRange, true
}

// HasMultilineSourceRange returns a boolean if a field has been set.
func (o *CommentThreadDiffAnchor) HasMultilineSourceRange() bool {
	if o != nil && !IsNil(o.MultilineSourceRange) {
		return true
	}

	return false
}

// SetMultilineSourceRange gets a reference to the given LineNumberRange and assigns it to the MultilineSourceRange field.
func (o *CommentThreadDiffAnchor) SetMultilineSourceRange(v LineNumberRange) {
	o.MultilineSourceRange = &v
}

// GetMultilineStartLine returns the MultilineStartLine field value if set, zero value otherwise.
func (o *CommentThreadDiffAnchor) GetMultilineStartLine() int32 {
	if o == nil || IsNil(o.MultilineStartLine) {
		var ret int32
		return ret
	}
	return *o.MultilineStartLine
}

// GetMultilineStartLineOk returns a tuple with the MultilineStartLine field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommentThreadDiffAnchor) GetMultilineStartLineOk() (*int32, bool) {
	if o == nil || IsNil(o.MultilineStartLine) {
		return nil, false
	}
	return o.MultilineStartLine, true
}

// HasMultilineStartLine returns a boolean if a field has been set.
func (o *CommentThreadDiffAnchor) HasMultilineStartLine() bool {
	if o != nil && !IsNil(o.MultilineStartLine) {
		return true
	}

	return false
}

// SetMultilineStartLine gets a reference to the given int32 and assigns it to the MultilineStartLine field.
func (o *CommentThreadDiffAnchor) SetMultilineStartLine(v int32) {
	o.MultilineStartLine = &v
}

// GetMultilineStartLineType returns the MultilineStartLineType field value if set, zero value otherwise.
func (o *CommentThreadDiffAnchor) GetMultilineStartLineType() string {
	if o == nil || IsNil(o.MultilineStartLineType) {
		var ret string
		return ret
	}
	return *o.MultilineStartLineType
}

// GetMultilineStartLineTypeOk returns a tuple with the MultilineStartLineType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommentThreadDiffAnchor) GetMultilineStartLineTypeOk() (*string, bool) {
	if o == nil || IsNil(o.MultilineStartLineType) {
		return nil, false
	}
	return o.MultilineStartLineType, true
}

// HasMultilineStartLineType returns a boolean if a field has been set.
func (o *CommentThreadDiffAnchor) HasMultilineStartLineType() bool {
	if o != nil && !IsNil(o.MultilineStartLineType) {
		return true
	}

	return false
}

// SetMultilineStartLineType gets a reference to the given string and assigns it to the MultilineStartLineType field.
func (o *CommentThreadDiffAnchor) SetMultilineStartLineType(v string) {
	o.MultilineStartLineType = &v
}

// GetOrphaned returns the Orphaned field value if set, zero value otherwise.
func (o *CommentThreadDiffAnchor) GetOrphaned() bool {
	if o == nil || IsNil(o.Orphaned) {
		var ret bool
		return ret
	}
	return *o.Orphaned
}

// GetOrphanedOk returns a tuple with the Orphaned field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommentThreadDiffAnchor) GetOrphanedOk() (*bool, bool) {
	if o == nil || IsNil(o.Orphaned) {
		return nil, false
	}
	return o.Orphaned, true
}

// HasOrphaned returns a boolean if a field has been set.
func (o *CommentThreadDiffAnchor) HasOrphaned() bool {
	if o != nil && !IsNil(o.Orphaned) {
		return true
	}

	return false
}

// SetOrphaned gets a reference to the given bool and assigns it to the Orphaned field.
func (o *CommentThreadDiffAnchor) SetOrphaned(v bool) {
	o.Orphaned = &v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *CommentThreadDiffAnchor) GetPath() string {
	if o == nil || IsNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommentThreadDiffAnchor) GetPathOk() (*string, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *CommentThreadDiffAnchor) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *CommentThreadDiffAnchor) SetPath(v string) {
	o.Path = &v
}

// GetSrcPath returns the SrcPath field value if set, zero value otherwise.
func (o *CommentThreadDiffAnchor) GetSrcPath() string {
	if o == nil || IsNil(o.SrcPath) {
		var ret string
		return ret
	}
	return *o.SrcPath
}

// GetSrcPathOk returns a tuple with the SrcPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommentThreadDiffAnchor) GetSrcPathOk() (*string, bool) {
	if o == nil || IsNil(o.SrcPath) {
		return nil, false
	}
	return o.SrcPath, true
}

// HasSrcPath returns a boolean if a field has been set.
func (o *CommentThreadDiffAnchor) HasSrcPath() bool {
	if o != nil && !IsNil(o.SrcPath) {
		return true
	}

	return false
}

// SetSrcPath gets a reference to the given string and assigns it to the SrcPath field.
func (o *CommentThreadDiffAnchor) SetSrcPath(v string) {
	o.SrcPath = &v
}

// GetToHash returns the ToHash field value if set, zero value otherwise.
func (o *CommentThreadDiffAnchor) GetToHash() string {
	if o == nil || IsNil(o.ToHash) {
		var ret string
		return ret
	}
	return *o.ToHash
}

// GetToHashOk returns a tuple with the ToHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommentThreadDiffAnchor) GetToHashOk() (*string, bool) {
	if o == nil || IsNil(o.ToHash) {
		return nil, false
	}
	return o.ToHash, true
}

// HasToHash returns a boolean if a field has been set.
func (o *CommentThreadDiffAnchor) HasToHash() bool {
	if o != nil && !IsNil(o.ToHash) {
		return true
	}

	return false
}

// SetToHash gets a reference to the given string and assigns it to the ToHash field.
func (o *CommentThreadDiffAnchor) SetToHash(v string) {
	o.ToHash = &v
}

func (o CommentThreadDiffAnchor) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommentThreadDiffAnchor) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DiffType) {
		toSerialize["diffType"] = o.DiffType
	}
	if !IsNil(o.FileAnchor) {
		toSerialize["fileAnchor"] = o.FileAnchor
	}
	if !IsNil(o.FileType) {
		toSerialize["fileType"] = o.FileType
	}
	if !IsNil(o.FromHash) {
		toSerialize["fromHash"] = o.FromHash
	}
	if !IsNil(o.Line) {
		toSerialize["line"] = o.Line
	}
	if !IsNil(o.LineAnchor) {
		toSerialize["lineAnchor"] = o.LineAnchor
	}
	if !IsNil(o.LineType) {
		toSerialize["lineType"] = o.LineType
	}
	if !IsNil(o.MultilineAnchor) {
		toSerialize["multilineAnchor"] = o.MultilineAnchor
	}
	if !IsNil(o.MultilineDestinationRange) {
		toSerialize["multilineDestinationRange"] = o.MultilineDestinationRange
	}
	if !IsNil(o.MultilineSourceRange) {
		toSerialize["multilineSourceRange"] = o.MultilineSourceRange
	}
	if !IsNil(o.MultilineStartLine) {
		toSerialize["multilineStartLine"] = o.MultilineStartLine
	}
	if !IsNil(o.MultilineStartLineType) {
		toSerialize["multilineStartLineType"] = o.MultilineStartLineType
	}
	if !IsNil(o.Orphaned) {
		toSerialize["orphaned"] = o.Orphaned
	}
	if !IsNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	if !IsNil(o.SrcPath) {
		toSerialize["srcPath"] = o.SrcPath
	}
	if !IsNil(o.ToHash) {
		toSerialize["toHash"] = o.ToHash
	}
	return toSerialize, nil
}

type NullableCommentThreadDiffAnchor struct {
	value *CommentThreadDiffAnchor
	isSet bool
}

func (v NullableCommentThreadDiffAnchor) Get() *CommentThreadDiffAnchor {
	return v.value
}

func (v *NullableCommentThreadDiffAnchor) Set(val *CommentThreadDiffAnchor) {
	v.value = val
	v.isSet = true
}

func (v NullableCommentThreadDiffAnchor) IsSet() bool {
	return v.isSet
}

func (v *NullableCommentThreadDiffAnchor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommentThreadDiffAnchor(val *CommentThreadDiffAnchor) *NullableCommentThreadDiffAnchor {
	return &NullableCommentThreadDiffAnchor{value: val, isSet: true}
}

func (v NullableCommentThreadDiffAnchor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommentThreadDiffAnchor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


