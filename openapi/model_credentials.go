/*
Bitbucket Data Center

This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).

API version: 9.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// Credentials - struct for Credentials
type Credentials struct {
	RestBearerTokenCredentials *RestBearerTokenCredentials
	RestSshCredentials *RestSshCredentials
	RestUsernamePasswordCredentials *RestUsernamePasswordCredentials
}

// RestBearerTokenCredentialsAsCredentials is a convenience function that returns RestBearerTokenCredentials wrapped in Credentials
func RestBearerTokenCredentialsAsCredentials(v *RestBearerTokenCredentials) Credentials {
	return Credentials{
		RestBearerTokenCredentials: v,
	}
}

// RestSshCredentialsAsCredentials is a convenience function that returns RestSshCredentials wrapped in Credentials
func RestSshCredentialsAsCredentials(v *RestSshCredentials) Credentials {
	return Credentials{
		RestSshCredentials: v,
	}
}

// RestUsernamePasswordCredentialsAsCredentials is a convenience function that returns RestUsernamePasswordCredentials wrapped in Credentials
func RestUsernamePasswordCredentialsAsCredentials(v *RestUsernamePasswordCredentials) Credentials {
	return Credentials{
		RestUsernamePasswordCredentials: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *Credentials) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into RestBearerTokenCredentials
	err = newStrictDecoder(data).Decode(&dst.RestBearerTokenCredentials)
	if err == nil {
		jsonRestBearerTokenCredentials, _ := json.Marshal(dst.RestBearerTokenCredentials)
		if string(jsonRestBearerTokenCredentials) == "{}" { // empty struct
			dst.RestBearerTokenCredentials = nil
		} else {
			if err = validator.Validate(dst.RestBearerTokenCredentials); err != nil {
				dst.RestBearerTokenCredentials = nil
			} else {
				match++
			}
		}
	} else {
		dst.RestBearerTokenCredentials = nil
	}

	// try to unmarshal data into RestSshCredentials
	err = newStrictDecoder(data).Decode(&dst.RestSshCredentials)
	if err == nil {
		jsonRestSshCredentials, _ := json.Marshal(dst.RestSshCredentials)
		if string(jsonRestSshCredentials) == "{}" { // empty struct
			dst.RestSshCredentials = nil
		} else {
			if err = validator.Validate(dst.RestSshCredentials); err != nil {
				dst.RestSshCredentials = nil
			} else {
				match++
			}
		}
	} else {
		dst.RestSshCredentials = nil
	}

	// try to unmarshal data into RestUsernamePasswordCredentials
	err = newStrictDecoder(data).Decode(&dst.RestUsernamePasswordCredentials)
	if err == nil {
		jsonRestUsernamePasswordCredentials, _ := json.Marshal(dst.RestUsernamePasswordCredentials)
		if string(jsonRestUsernamePasswordCredentials) == "{}" { // empty struct
			dst.RestUsernamePasswordCredentials = nil
		} else {
			if err = validator.Validate(dst.RestUsernamePasswordCredentials); err != nil {
				dst.RestUsernamePasswordCredentials = nil
			} else {
				match++
			}
		}
	} else {
		dst.RestUsernamePasswordCredentials = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.RestBearerTokenCredentials = nil
		dst.RestSshCredentials = nil
		dst.RestUsernamePasswordCredentials = nil

		return fmt.Errorf("data matches more than one schema in oneOf(Credentials)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(Credentials)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Credentials) MarshalJSON() ([]byte, error) {
	if src.RestBearerTokenCredentials != nil {
		return json.Marshal(&src.RestBearerTokenCredentials)
	}

	if src.RestSshCredentials != nil {
		return json.Marshal(&src.RestSshCredentials)
	}

	if src.RestUsernamePasswordCredentials != nil {
		return json.Marshal(&src.RestUsernamePasswordCredentials)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *Credentials) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.RestBearerTokenCredentials != nil {
		return obj.RestBearerTokenCredentials
	}

	if obj.RestSshCredentials != nil {
		return obj.RestSshCredentials
	}

	if obj.RestUsernamePasswordCredentials != nil {
		return obj.RestUsernamePasswordCredentials
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj Credentials) GetActualInstanceValue() (interface{}) {
	if obj.RestBearerTokenCredentials != nil {
		return *obj.RestBearerTokenCredentials
	}

	if obj.RestSshCredentials != nil {
		return *obj.RestSshCredentials
	}

	if obj.RestUsernamePasswordCredentials != nil {
		return *obj.RestUsernamePasswordCredentials
	}

	// all schemas are nil
	return nil
}

type NullableCredentials struct {
	value *Credentials
	isSet bool
}

func (v NullableCredentials) Get() *Credentials {
	return v.value
}

func (v *NullableCredentials) Set(val *Credentials) {
	v.value = val
	v.isSet = true
}

func (v NullableCredentials) IsSet() bool {
	return v.isSet
}

func (v *NullableCredentials) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCredentials(val *Credentials) *NullableCredentials {
	return &NullableCredentials{value: val, isSet: true}
}

func (v NullableCredentials) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCredentials) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


