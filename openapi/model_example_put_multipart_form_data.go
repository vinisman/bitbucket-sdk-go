/*
Bitbucket Data Center

This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).

API version: 9.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ExamplePutMultipartFormData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExamplePutMultipartFormData{}

// ExamplePutMultipartFormData struct for ExamplePutMultipartFormData
type ExamplePutMultipartFormData struct {
	// The hook script contents.
	Content *string `json:"content,omitempty"`
	// A description of the hook script (useful when querying registered hook scripts).
	Description *string `json:"description,omitempty"`
	// The name of the hook script (useful when querying registered hook scripts).
	Name *string `json:"name,omitempty"`
}

// NewExamplePutMultipartFormData instantiates a new ExamplePutMultipartFormData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExamplePutMultipartFormData() *ExamplePutMultipartFormData {
	this := ExamplePutMultipartFormData{}
	return &this
}

// NewExamplePutMultipartFormDataWithDefaults instantiates a new ExamplePutMultipartFormData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExamplePutMultipartFormDataWithDefaults() *ExamplePutMultipartFormData {
	this := ExamplePutMultipartFormData{}
	return &this
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *ExamplePutMultipartFormData) GetContent() string {
	if o == nil || IsNil(o.Content) {
		var ret string
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExamplePutMultipartFormData) GetContentOk() (*string, bool) {
	if o == nil || IsNil(o.Content) {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *ExamplePutMultipartFormData) HasContent() bool {
	if o != nil && !IsNil(o.Content) {
		return true
	}

	return false
}

// SetContent gets a reference to the given string and assigns it to the Content field.
func (o *ExamplePutMultipartFormData) SetContent(v string) {
	o.Content = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ExamplePutMultipartFormData) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExamplePutMultipartFormData) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ExamplePutMultipartFormData) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ExamplePutMultipartFormData) SetDescription(v string) {
	o.Description = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ExamplePutMultipartFormData) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExamplePutMultipartFormData) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ExamplePutMultipartFormData) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ExamplePutMultipartFormData) SetName(v string) {
	o.Name = &v
}

func (o ExamplePutMultipartFormData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExamplePutMultipartFormData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Content) {
		toSerialize["content"] = o.Content
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return toSerialize, nil
}

type NullableExamplePutMultipartFormData struct {
	value *ExamplePutMultipartFormData
	isSet bool
}

func (v NullableExamplePutMultipartFormData) Get() *ExamplePutMultipartFormData {
	return v.value
}

func (v *NullableExamplePutMultipartFormData) Set(val *ExamplePutMultipartFormData) {
	v.value = val
	v.isSet = true
}

func (v NullableExamplePutMultipartFormData) IsSet() bool {
	return v.isSet
}

func (v *NullableExamplePutMultipartFormData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExamplePutMultipartFormData(val *ExamplePutMultipartFormData) *NullableExamplePutMultipartFormData {
	return &NullableExamplePutMultipartFormData{value: val, isSet: true}
}

func (v NullableExamplePutMultipartFormData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExamplePutMultipartFormData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


