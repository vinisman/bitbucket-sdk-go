/*
Bitbucket Data Center

This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).

API version: 9.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the FilePart type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FilePart{}

// FilePart struct for FilePart
type FilePart struct {
	ContentType *string `json:"contentType,omitempty"`
	FormField *bool `json:"formField,omitempty"`
	InputStream map[string]interface{} `json:"inputStream,omitempty"`
	Name *string `json:"name,omitempty"`
	Size *int64 `json:"size,omitempty"`
	Value *string `json:"value,omitempty"`
}

// NewFilePart instantiates a new FilePart object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFilePart() *FilePart {
	this := FilePart{}
	return &this
}

// NewFilePartWithDefaults instantiates a new FilePart object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFilePartWithDefaults() *FilePart {
	this := FilePart{}
	return &this
}

// GetContentType returns the ContentType field value if set, zero value otherwise.
func (o *FilePart) GetContentType() string {
	if o == nil || IsNil(o.ContentType) {
		var ret string
		return ret
	}
	return *o.ContentType
}

// GetContentTypeOk returns a tuple with the ContentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilePart) GetContentTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ContentType) {
		return nil, false
	}
	return o.ContentType, true
}

// HasContentType returns a boolean if a field has been set.
func (o *FilePart) HasContentType() bool {
	if o != nil && !IsNil(o.ContentType) {
		return true
	}

	return false
}

// SetContentType gets a reference to the given string and assigns it to the ContentType field.
func (o *FilePart) SetContentType(v string) {
	o.ContentType = &v
}

// GetFormField returns the FormField field value if set, zero value otherwise.
func (o *FilePart) GetFormField() bool {
	if o == nil || IsNil(o.FormField) {
		var ret bool
		return ret
	}
	return *o.FormField
}

// GetFormFieldOk returns a tuple with the FormField field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilePart) GetFormFieldOk() (*bool, bool) {
	if o == nil || IsNil(o.FormField) {
		return nil, false
	}
	return o.FormField, true
}

// HasFormField returns a boolean if a field has been set.
func (o *FilePart) HasFormField() bool {
	if o != nil && !IsNil(o.FormField) {
		return true
	}

	return false
}

// SetFormField gets a reference to the given bool and assigns it to the FormField field.
func (o *FilePart) SetFormField(v bool) {
	o.FormField = &v
}

// GetInputStream returns the InputStream field value if set, zero value otherwise.
func (o *FilePart) GetInputStream() map[string]interface{} {
	if o == nil || IsNil(o.InputStream) {
		var ret map[string]interface{}
		return ret
	}
	return o.InputStream
}

// GetInputStreamOk returns a tuple with the InputStream field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilePart) GetInputStreamOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.InputStream) {
		return map[string]interface{}{}, false
	}
	return o.InputStream, true
}

// HasInputStream returns a boolean if a field has been set.
func (o *FilePart) HasInputStream() bool {
	if o != nil && !IsNil(o.InputStream) {
		return true
	}

	return false
}

// SetInputStream gets a reference to the given map[string]interface{} and assigns it to the InputStream field.
func (o *FilePart) SetInputStream(v map[string]interface{}) {
	o.InputStream = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *FilePart) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilePart) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *FilePart) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *FilePart) SetName(v string) {
	o.Name = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *FilePart) GetSize() int64 {
	if o == nil || IsNil(o.Size) {
		var ret int64
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilePart) GetSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *FilePart) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given int64 and assigns it to the Size field.
func (o *FilePart) SetSize(v int64) {
	o.Size = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *FilePart) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilePart) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *FilePart) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *FilePart) SetValue(v string) {
	o.Value = &v
}

func (o FilePart) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FilePart) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ContentType) {
		toSerialize["contentType"] = o.ContentType
	}
	if !IsNil(o.FormField) {
		toSerialize["formField"] = o.FormField
	}
	if !IsNil(o.InputStream) {
		toSerialize["inputStream"] = o.InputStream
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableFilePart struct {
	value *FilePart
	isSet bool
}

func (v NullableFilePart) Get() *FilePart {
	return v.value
}

func (v *NullableFilePart) Set(val *FilePart) {
	v.value = val
	v.isSet = true
}

func (v NullableFilePart) IsSet() bool {
	return v.isSet
}

func (v *NullableFilePart) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilePart(val *FilePart) *NullableFilePart {
	return &NullableFilePart{value: val, isSet: true}
}

func (v NullableFilePart) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilePart) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


