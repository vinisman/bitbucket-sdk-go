/*
Bitbucket Data Center

This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).

API version: 9.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the JitConfigEntity type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JitConfigEntity{}

// JitConfigEntity struct for JitConfigEntity
type JitConfigEntity struct {
	AdditionalOpenidScopes []string `json:"additional-openid-scopes,omitempty"`
	MappingDisplayName *string `json:"mapping-display-name,omitempty"`
	MappingEmail *string `json:"mapping-email,omitempty"`
	MappingGroups *string `json:"mapping-groups,omitempty"`
	UserProvisioningEnabled *bool `json:"user-provisioning-enabled,omitempty"`
}

// NewJitConfigEntity instantiates a new JitConfigEntity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJitConfigEntity() *JitConfigEntity {
	this := JitConfigEntity{}
	return &this
}

// NewJitConfigEntityWithDefaults instantiates a new JitConfigEntity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJitConfigEntityWithDefaults() *JitConfigEntity {
	this := JitConfigEntity{}
	return &this
}

// GetAdditionalOpenidScopes returns the AdditionalOpenidScopes field value if set, zero value otherwise.
func (o *JitConfigEntity) GetAdditionalOpenidScopes() []string {
	if o == nil || IsNil(o.AdditionalOpenidScopes) {
		var ret []string
		return ret
	}
	return o.AdditionalOpenidScopes
}

// GetAdditionalOpenidScopesOk returns a tuple with the AdditionalOpenidScopes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JitConfigEntity) GetAdditionalOpenidScopesOk() ([]string, bool) {
	if o == nil || IsNil(o.AdditionalOpenidScopes) {
		return nil, false
	}
	return o.AdditionalOpenidScopes, true
}

// HasAdditionalOpenidScopes returns a boolean if a field has been set.
func (o *JitConfigEntity) HasAdditionalOpenidScopes() bool {
	if o != nil && !IsNil(o.AdditionalOpenidScopes) {
		return true
	}

	return false
}

// SetAdditionalOpenidScopes gets a reference to the given []string and assigns it to the AdditionalOpenidScopes field.
func (o *JitConfigEntity) SetAdditionalOpenidScopes(v []string) {
	o.AdditionalOpenidScopes = v
}

// GetMappingDisplayName returns the MappingDisplayName field value if set, zero value otherwise.
func (o *JitConfigEntity) GetMappingDisplayName() string {
	if o == nil || IsNil(o.MappingDisplayName) {
		var ret string
		return ret
	}
	return *o.MappingDisplayName
}

// GetMappingDisplayNameOk returns a tuple with the MappingDisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JitConfigEntity) GetMappingDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.MappingDisplayName) {
		return nil, false
	}
	return o.MappingDisplayName, true
}

// HasMappingDisplayName returns a boolean if a field has been set.
func (o *JitConfigEntity) HasMappingDisplayName() bool {
	if o != nil && !IsNil(o.MappingDisplayName) {
		return true
	}

	return false
}

// SetMappingDisplayName gets a reference to the given string and assigns it to the MappingDisplayName field.
func (o *JitConfigEntity) SetMappingDisplayName(v string) {
	o.MappingDisplayName = &v
}

// GetMappingEmail returns the MappingEmail field value if set, zero value otherwise.
func (o *JitConfigEntity) GetMappingEmail() string {
	if o == nil || IsNil(o.MappingEmail) {
		var ret string
		return ret
	}
	return *o.MappingEmail
}

// GetMappingEmailOk returns a tuple with the MappingEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JitConfigEntity) GetMappingEmailOk() (*string, bool) {
	if o == nil || IsNil(o.MappingEmail) {
		return nil, false
	}
	return o.MappingEmail, true
}

// HasMappingEmail returns a boolean if a field has been set.
func (o *JitConfigEntity) HasMappingEmail() bool {
	if o != nil && !IsNil(o.MappingEmail) {
		return true
	}

	return false
}

// SetMappingEmail gets a reference to the given string and assigns it to the MappingEmail field.
func (o *JitConfigEntity) SetMappingEmail(v string) {
	o.MappingEmail = &v
}

// GetMappingGroups returns the MappingGroups field value if set, zero value otherwise.
func (o *JitConfigEntity) GetMappingGroups() string {
	if o == nil || IsNil(o.MappingGroups) {
		var ret string
		return ret
	}
	return *o.MappingGroups
}

// GetMappingGroupsOk returns a tuple with the MappingGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JitConfigEntity) GetMappingGroupsOk() (*string, bool) {
	if o == nil || IsNil(o.MappingGroups) {
		return nil, false
	}
	return o.MappingGroups, true
}

// HasMappingGroups returns a boolean if a field has been set.
func (o *JitConfigEntity) HasMappingGroups() bool {
	if o != nil && !IsNil(o.MappingGroups) {
		return true
	}

	return false
}

// SetMappingGroups gets a reference to the given string and assigns it to the MappingGroups field.
func (o *JitConfigEntity) SetMappingGroups(v string) {
	o.MappingGroups = &v
}

// GetUserProvisioningEnabled returns the UserProvisioningEnabled field value if set, zero value otherwise.
func (o *JitConfigEntity) GetUserProvisioningEnabled() bool {
	if o == nil || IsNil(o.UserProvisioningEnabled) {
		var ret bool
		return ret
	}
	return *o.UserProvisioningEnabled
}

// GetUserProvisioningEnabledOk returns a tuple with the UserProvisioningEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JitConfigEntity) GetUserProvisioningEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.UserProvisioningEnabled) {
		return nil, false
	}
	return o.UserProvisioningEnabled, true
}

// HasUserProvisioningEnabled returns a boolean if a field has been set.
func (o *JitConfigEntity) HasUserProvisioningEnabled() bool {
	if o != nil && !IsNil(o.UserProvisioningEnabled) {
		return true
	}

	return false
}

// SetUserProvisioningEnabled gets a reference to the given bool and assigns it to the UserProvisioningEnabled field.
func (o *JitConfigEntity) SetUserProvisioningEnabled(v bool) {
	o.UserProvisioningEnabled = &v
}

func (o JitConfigEntity) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JitConfigEntity) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AdditionalOpenidScopes) {
		toSerialize["additional-openid-scopes"] = o.AdditionalOpenidScopes
	}
	if !IsNil(o.MappingDisplayName) {
		toSerialize["mapping-display-name"] = o.MappingDisplayName
	}
	if !IsNil(o.MappingEmail) {
		toSerialize["mapping-email"] = o.MappingEmail
	}
	if !IsNil(o.MappingGroups) {
		toSerialize["mapping-groups"] = o.MappingGroups
	}
	if !IsNil(o.UserProvisioningEnabled) {
		toSerialize["user-provisioning-enabled"] = o.UserProvisioningEnabled
	}
	return toSerialize, nil
}

type NullableJitConfigEntity struct {
	value *JitConfigEntity
	isSet bool
}

func (v NullableJitConfigEntity) Get() *JitConfigEntity {
	return v.value
}

func (v *NullableJitConfigEntity) Set(val *JitConfigEntity) {
	v.value = val
	v.isSet = true
}

func (v NullableJitConfigEntity) IsSet() bool {
	return v.isSet
}

func (v *NullableJitConfigEntity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJitConfigEntity(val *JitConfigEntity) *NullableJitConfigEntity {
	return &NullableJitConfigEntity{value: val, isSet: true}
}

func (v NullableJitConfigEntity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJitConfigEntity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


