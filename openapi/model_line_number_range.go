/*
Bitbucket Data Center

This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).

API version: 9.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the LineNumberRange type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LineNumberRange{}

// LineNumberRange struct for LineNumberRange
type LineNumberRange struct {
	Maximum *int32 `json:"maximum,omitempty"`
	Minimum *int32 `json:"minimum,omitempty"`
	SingleLine *bool `json:"singleLine,omitempty"`
}

// NewLineNumberRange instantiates a new LineNumberRange object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLineNumberRange() *LineNumberRange {
	this := LineNumberRange{}
	return &this
}

// NewLineNumberRangeWithDefaults instantiates a new LineNumberRange object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLineNumberRangeWithDefaults() *LineNumberRange {
	this := LineNumberRange{}
	return &this
}

// GetMaximum returns the Maximum field value if set, zero value otherwise.
func (o *LineNumberRange) GetMaximum() int32 {
	if o == nil || IsNil(o.Maximum) {
		var ret int32
		return ret
	}
	return *o.Maximum
}

// GetMaximumOk returns a tuple with the Maximum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LineNumberRange) GetMaximumOk() (*int32, bool) {
	if o == nil || IsNil(o.Maximum) {
		return nil, false
	}
	return o.Maximum, true
}

// HasMaximum returns a boolean if a field has been set.
func (o *LineNumberRange) HasMaximum() bool {
	if o != nil && !IsNil(o.Maximum) {
		return true
	}

	return false
}

// SetMaximum gets a reference to the given int32 and assigns it to the Maximum field.
func (o *LineNumberRange) SetMaximum(v int32) {
	o.Maximum = &v
}

// GetMinimum returns the Minimum field value if set, zero value otherwise.
func (o *LineNumberRange) GetMinimum() int32 {
	if o == nil || IsNil(o.Minimum) {
		var ret int32
		return ret
	}
	return *o.Minimum
}

// GetMinimumOk returns a tuple with the Minimum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LineNumberRange) GetMinimumOk() (*int32, bool) {
	if o == nil || IsNil(o.Minimum) {
		return nil, false
	}
	return o.Minimum, true
}

// HasMinimum returns a boolean if a field has been set.
func (o *LineNumberRange) HasMinimum() bool {
	if o != nil && !IsNil(o.Minimum) {
		return true
	}

	return false
}

// SetMinimum gets a reference to the given int32 and assigns it to the Minimum field.
func (o *LineNumberRange) SetMinimum(v int32) {
	o.Minimum = &v
}

// GetSingleLine returns the SingleLine field value if set, zero value otherwise.
func (o *LineNumberRange) GetSingleLine() bool {
	if o == nil || IsNil(o.SingleLine) {
		var ret bool
		return ret
	}
	return *o.SingleLine
}

// GetSingleLineOk returns a tuple with the SingleLine field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LineNumberRange) GetSingleLineOk() (*bool, bool) {
	if o == nil || IsNil(o.SingleLine) {
		return nil, false
	}
	return o.SingleLine, true
}

// HasSingleLine returns a boolean if a field has been set.
func (o *LineNumberRange) HasSingleLine() bool {
	if o != nil && !IsNil(o.SingleLine) {
		return true
	}

	return false
}

// SetSingleLine gets a reference to the given bool and assigns it to the SingleLine field.
func (o *LineNumberRange) SetSingleLine(v bool) {
	o.SingleLine = &v
}

func (o LineNumberRange) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LineNumberRange) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Maximum) {
		toSerialize["maximum"] = o.Maximum
	}
	if !IsNil(o.Minimum) {
		toSerialize["minimum"] = o.Minimum
	}
	if !IsNil(o.SingleLine) {
		toSerialize["singleLine"] = o.SingleLine
	}
	return toSerialize, nil
}

type NullableLineNumberRange struct {
	value *LineNumberRange
	isSet bool
}

func (v NullableLineNumberRange) Get() *LineNumberRange {
	return v.value
}

func (v *NullableLineNumberRange) Set(val *LineNumberRange) {
	v.value = val
	v.isSet = true
}

func (v NullableLineNumberRange) IsSet() bool {
	return v.isSet
}

func (v *NullableLineNumberRange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLineNumberRange(val *LineNumberRange) *NullableLineNumberRange {
	return &NullableLineNumberRange{value: val, isSet: true}
}

func (v NullableLineNumberRange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLineNumberRange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


