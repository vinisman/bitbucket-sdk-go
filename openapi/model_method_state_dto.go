/*
Bitbucket Data Center

This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).

API version: 9.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the MethodStateDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MethodStateDTO{}

// MethodStateDTO struct for MethodStateDTO
type MethodStateDTO struct {
	Enabled *bool `json:"enabled,omitempty"`
	EnabledAt *time.Time `json:"enabledAt,omitempty"`
	Enforced *bool `json:"enforced,omitempty"`
	Type *string `json:"type,omitempty"`
}

// NewMethodStateDTO instantiates a new MethodStateDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMethodStateDTO() *MethodStateDTO {
	this := MethodStateDTO{}
	return &this
}

// NewMethodStateDTOWithDefaults instantiates a new MethodStateDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMethodStateDTOWithDefaults() *MethodStateDTO {
	this := MethodStateDTO{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *MethodStateDTO) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MethodStateDTO) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *MethodStateDTO) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *MethodStateDTO) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetEnabledAt returns the EnabledAt field value if set, zero value otherwise.
func (o *MethodStateDTO) GetEnabledAt() time.Time {
	if o == nil || IsNil(o.EnabledAt) {
		var ret time.Time
		return ret
	}
	return *o.EnabledAt
}

// GetEnabledAtOk returns a tuple with the EnabledAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MethodStateDTO) GetEnabledAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EnabledAt) {
		return nil, false
	}
	return o.EnabledAt, true
}

// HasEnabledAt returns a boolean if a field has been set.
func (o *MethodStateDTO) HasEnabledAt() bool {
	if o != nil && !IsNil(o.EnabledAt) {
		return true
	}

	return false
}

// SetEnabledAt gets a reference to the given time.Time and assigns it to the EnabledAt field.
func (o *MethodStateDTO) SetEnabledAt(v time.Time) {
	o.EnabledAt = &v
}

// GetEnforced returns the Enforced field value if set, zero value otherwise.
func (o *MethodStateDTO) GetEnforced() bool {
	if o == nil || IsNil(o.Enforced) {
		var ret bool
		return ret
	}
	return *o.Enforced
}

// GetEnforcedOk returns a tuple with the Enforced field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MethodStateDTO) GetEnforcedOk() (*bool, bool) {
	if o == nil || IsNil(o.Enforced) {
		return nil, false
	}
	return o.Enforced, true
}

// HasEnforced returns a boolean if a field has been set.
func (o *MethodStateDTO) HasEnforced() bool {
	if o != nil && !IsNil(o.Enforced) {
		return true
	}

	return false
}

// SetEnforced gets a reference to the given bool and assigns it to the Enforced field.
func (o *MethodStateDTO) SetEnforced(v bool) {
	o.Enforced = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *MethodStateDTO) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MethodStateDTO) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *MethodStateDTO) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *MethodStateDTO) SetType(v string) {
	o.Type = &v
}

func (o MethodStateDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MethodStateDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.EnabledAt) {
		toSerialize["enabledAt"] = o.EnabledAt
	}
	if !IsNil(o.Enforced) {
		toSerialize["enforced"] = o.Enforced
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableMethodStateDTO struct {
	value *MethodStateDTO
	isSet bool
}

func (v NullableMethodStateDTO) Get() *MethodStateDTO {
	return v.value
}

func (v *NullableMethodStateDTO) Set(val *MethodStateDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableMethodStateDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableMethodStateDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMethodStateDTO(val *MethodStateDTO) *NullableMethodStateDTO {
	return &NullableMethodStateDTO{value: val, isSet: true}
}

func (v NullableMethodStateDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMethodStateDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


