/*
Bitbucket Data Center

This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).

API version: 9.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the PullRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PullRequest{}

// PullRequest struct for PullRequest
type PullRequest struct {
	Author *PullRequestParticipant `json:"author,omitempty"`
	Closed *bool `json:"closed,omitempty"`
	ClosedDate *time.Time `json:"closedDate,omitempty"`
	CreatedDate *time.Time `json:"createdDate,omitempty"`
	CrossRepository *bool `json:"crossRepository,omitempty"`
	Description *string `json:"description,omitempty"`
	Draft *bool `json:"draft,omitempty"`
	FromRef *PullRequestRef `json:"fromRef,omitempty"`
	Id *int64 `json:"id,omitempty"`
	Locked *bool `json:"locked,omitempty"`
	Open *bool `json:"open,omitempty"`
	Participants []PullRequestParticipant `json:"participants,omitempty"`
	Properties map[string]interface{} `json:"properties,omitempty"`
	Reviewers []PullRequestParticipant `json:"reviewers,omitempty"`
	State *string `json:"state,omitempty"`
	Title *string `json:"title,omitempty"`
	ToRef *PullRequestRef `json:"toRef,omitempty"`
	UpdatedDate *time.Time `json:"updatedDate,omitempty"`
	Version *int32 `json:"version,omitempty"`
}

// NewPullRequest instantiates a new PullRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPullRequest() *PullRequest {
	this := PullRequest{}
	return &this
}

// NewPullRequestWithDefaults instantiates a new PullRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPullRequestWithDefaults() *PullRequest {
	this := PullRequest{}
	return &this
}

// GetAuthor returns the Author field value if set, zero value otherwise.
func (o *PullRequest) GetAuthor() PullRequestParticipant {
	if o == nil || IsNil(o.Author) {
		var ret PullRequestParticipant
		return ret
	}
	return *o.Author
}

// GetAuthorOk returns a tuple with the Author field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PullRequest) GetAuthorOk() (*PullRequestParticipant, bool) {
	if o == nil || IsNil(o.Author) {
		return nil, false
	}
	return o.Author, true
}

// HasAuthor returns a boolean if a field has been set.
func (o *PullRequest) HasAuthor() bool {
	if o != nil && !IsNil(o.Author) {
		return true
	}

	return false
}

// SetAuthor gets a reference to the given PullRequestParticipant and assigns it to the Author field.
func (o *PullRequest) SetAuthor(v PullRequestParticipant) {
	o.Author = &v
}

// GetClosed returns the Closed field value if set, zero value otherwise.
func (o *PullRequest) GetClosed() bool {
	if o == nil || IsNil(o.Closed) {
		var ret bool
		return ret
	}
	return *o.Closed
}

// GetClosedOk returns a tuple with the Closed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PullRequest) GetClosedOk() (*bool, bool) {
	if o == nil || IsNil(o.Closed) {
		return nil, false
	}
	return o.Closed, true
}

// HasClosed returns a boolean if a field has been set.
func (o *PullRequest) HasClosed() bool {
	if o != nil && !IsNil(o.Closed) {
		return true
	}

	return false
}

// SetClosed gets a reference to the given bool and assigns it to the Closed field.
func (o *PullRequest) SetClosed(v bool) {
	o.Closed = &v
}

// GetClosedDate returns the ClosedDate field value if set, zero value otherwise.
func (o *PullRequest) GetClosedDate() time.Time {
	if o == nil || IsNil(o.ClosedDate) {
		var ret time.Time
		return ret
	}
	return *o.ClosedDate
}

// GetClosedDateOk returns a tuple with the ClosedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PullRequest) GetClosedDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ClosedDate) {
		return nil, false
	}
	return o.ClosedDate, true
}

// HasClosedDate returns a boolean if a field has been set.
func (o *PullRequest) HasClosedDate() bool {
	if o != nil && !IsNil(o.ClosedDate) {
		return true
	}

	return false
}

// SetClosedDate gets a reference to the given time.Time and assigns it to the ClosedDate field.
func (o *PullRequest) SetClosedDate(v time.Time) {
	o.ClosedDate = &v
}

// GetCreatedDate returns the CreatedDate field value if set, zero value otherwise.
func (o *PullRequest) GetCreatedDate() time.Time {
	if o == nil || IsNil(o.CreatedDate) {
		var ret time.Time
		return ret
	}
	return *o.CreatedDate
}

// GetCreatedDateOk returns a tuple with the CreatedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PullRequest) GetCreatedDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedDate) {
		return nil, false
	}
	return o.CreatedDate, true
}

// HasCreatedDate returns a boolean if a field has been set.
func (o *PullRequest) HasCreatedDate() bool {
	if o != nil && !IsNil(o.CreatedDate) {
		return true
	}

	return false
}

// SetCreatedDate gets a reference to the given time.Time and assigns it to the CreatedDate field.
func (o *PullRequest) SetCreatedDate(v time.Time) {
	o.CreatedDate = &v
}

// GetCrossRepository returns the CrossRepository field value if set, zero value otherwise.
func (o *PullRequest) GetCrossRepository() bool {
	if o == nil || IsNil(o.CrossRepository) {
		var ret bool
		return ret
	}
	return *o.CrossRepository
}

// GetCrossRepositoryOk returns a tuple with the CrossRepository field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PullRequest) GetCrossRepositoryOk() (*bool, bool) {
	if o == nil || IsNil(o.CrossRepository) {
		return nil, false
	}
	return o.CrossRepository, true
}

// HasCrossRepository returns a boolean if a field has been set.
func (o *PullRequest) HasCrossRepository() bool {
	if o != nil && !IsNil(o.CrossRepository) {
		return true
	}

	return false
}

// SetCrossRepository gets a reference to the given bool and assigns it to the CrossRepository field.
func (o *PullRequest) SetCrossRepository(v bool) {
	o.CrossRepository = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *PullRequest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PullRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *PullRequest) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *PullRequest) SetDescription(v string) {
	o.Description = &v
}

// GetDraft returns the Draft field value if set, zero value otherwise.
func (o *PullRequest) GetDraft() bool {
	if o == nil || IsNil(o.Draft) {
		var ret bool
		return ret
	}
	return *o.Draft
}

// GetDraftOk returns a tuple with the Draft field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PullRequest) GetDraftOk() (*bool, bool) {
	if o == nil || IsNil(o.Draft) {
		return nil, false
	}
	return o.Draft, true
}

// HasDraft returns a boolean if a field has been set.
func (o *PullRequest) HasDraft() bool {
	if o != nil && !IsNil(o.Draft) {
		return true
	}

	return false
}

// SetDraft gets a reference to the given bool and assigns it to the Draft field.
func (o *PullRequest) SetDraft(v bool) {
	o.Draft = &v
}

// GetFromRef returns the FromRef field value if set, zero value otherwise.
func (o *PullRequest) GetFromRef() PullRequestRef {
	if o == nil || IsNil(o.FromRef) {
		var ret PullRequestRef
		return ret
	}
	return *o.FromRef
}

// GetFromRefOk returns a tuple with the FromRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PullRequest) GetFromRefOk() (*PullRequestRef, bool) {
	if o == nil || IsNil(o.FromRef) {
		return nil, false
	}
	return o.FromRef, true
}

// HasFromRef returns a boolean if a field has been set.
func (o *PullRequest) HasFromRef() bool {
	if o != nil && !IsNil(o.FromRef) {
		return true
	}

	return false
}

// SetFromRef gets a reference to the given PullRequestRef and assigns it to the FromRef field.
func (o *PullRequest) SetFromRef(v PullRequestRef) {
	o.FromRef = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PullRequest) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PullRequest) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PullRequest) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *PullRequest) SetId(v int64) {
	o.Id = &v
}

// GetLocked returns the Locked field value if set, zero value otherwise.
func (o *PullRequest) GetLocked() bool {
	if o == nil || IsNil(o.Locked) {
		var ret bool
		return ret
	}
	return *o.Locked
}

// GetLockedOk returns a tuple with the Locked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PullRequest) GetLockedOk() (*bool, bool) {
	if o == nil || IsNil(o.Locked) {
		return nil, false
	}
	return o.Locked, true
}

// HasLocked returns a boolean if a field has been set.
func (o *PullRequest) HasLocked() bool {
	if o != nil && !IsNil(o.Locked) {
		return true
	}

	return false
}

// SetLocked gets a reference to the given bool and assigns it to the Locked field.
func (o *PullRequest) SetLocked(v bool) {
	o.Locked = &v
}

// GetOpen returns the Open field value if set, zero value otherwise.
func (o *PullRequest) GetOpen() bool {
	if o == nil || IsNil(o.Open) {
		var ret bool
		return ret
	}
	return *o.Open
}

// GetOpenOk returns a tuple with the Open field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PullRequest) GetOpenOk() (*bool, bool) {
	if o == nil || IsNil(o.Open) {
		return nil, false
	}
	return o.Open, true
}

// HasOpen returns a boolean if a field has been set.
func (o *PullRequest) HasOpen() bool {
	if o != nil && !IsNil(o.Open) {
		return true
	}

	return false
}

// SetOpen gets a reference to the given bool and assigns it to the Open field.
func (o *PullRequest) SetOpen(v bool) {
	o.Open = &v
}

// GetParticipants returns the Participants field value if set, zero value otherwise.
func (o *PullRequest) GetParticipants() []PullRequestParticipant {
	if o == nil || IsNil(o.Participants) {
		var ret []PullRequestParticipant
		return ret
	}
	return o.Participants
}

// GetParticipantsOk returns a tuple with the Participants field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PullRequest) GetParticipantsOk() ([]PullRequestParticipant, bool) {
	if o == nil || IsNil(o.Participants) {
		return nil, false
	}
	return o.Participants, true
}

// HasParticipants returns a boolean if a field has been set.
func (o *PullRequest) HasParticipants() bool {
	if o != nil && !IsNil(o.Participants) {
		return true
	}

	return false
}

// SetParticipants gets a reference to the given []PullRequestParticipant and assigns it to the Participants field.
func (o *PullRequest) SetParticipants(v []PullRequestParticipant) {
	o.Participants = v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *PullRequest) GetProperties() map[string]interface{} {
	if o == nil || IsNil(o.Properties) {
		var ret map[string]interface{}
		return ret
	}
	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PullRequest) GetPropertiesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Properties) {
		return map[string]interface{}{}, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *PullRequest) HasProperties() bool {
	if o != nil && !IsNil(o.Properties) {
		return true
	}

	return false
}

// SetProperties gets a reference to the given map[string]interface{} and assigns it to the Properties field.
func (o *PullRequest) SetProperties(v map[string]interface{}) {
	o.Properties = v
}

// GetReviewers returns the Reviewers field value if set, zero value otherwise.
func (o *PullRequest) GetReviewers() []PullRequestParticipant {
	if o == nil || IsNil(o.Reviewers) {
		var ret []PullRequestParticipant
		return ret
	}
	return o.Reviewers
}

// GetReviewersOk returns a tuple with the Reviewers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PullRequest) GetReviewersOk() ([]PullRequestParticipant, bool) {
	if o == nil || IsNil(o.Reviewers) {
		return nil, false
	}
	return o.Reviewers, true
}

// HasReviewers returns a boolean if a field has been set.
func (o *PullRequest) HasReviewers() bool {
	if o != nil && !IsNil(o.Reviewers) {
		return true
	}

	return false
}

// SetReviewers gets a reference to the given []PullRequestParticipant and assigns it to the Reviewers field.
func (o *PullRequest) SetReviewers(v []PullRequestParticipant) {
	o.Reviewers = v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *PullRequest) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PullRequest) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *PullRequest) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *PullRequest) SetState(v string) {
	o.State = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *PullRequest) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PullRequest) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *PullRequest) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *PullRequest) SetTitle(v string) {
	o.Title = &v
}

// GetToRef returns the ToRef field value if set, zero value otherwise.
func (o *PullRequest) GetToRef() PullRequestRef {
	if o == nil || IsNil(o.ToRef) {
		var ret PullRequestRef
		return ret
	}
	return *o.ToRef
}

// GetToRefOk returns a tuple with the ToRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PullRequest) GetToRefOk() (*PullRequestRef, bool) {
	if o == nil || IsNil(o.ToRef) {
		return nil, false
	}
	return o.ToRef, true
}

// HasToRef returns a boolean if a field has been set.
func (o *PullRequest) HasToRef() bool {
	if o != nil && !IsNil(o.ToRef) {
		return true
	}

	return false
}

// SetToRef gets a reference to the given PullRequestRef and assigns it to the ToRef field.
func (o *PullRequest) SetToRef(v PullRequestRef) {
	o.ToRef = &v
}

// GetUpdatedDate returns the UpdatedDate field value if set, zero value otherwise.
func (o *PullRequest) GetUpdatedDate() time.Time {
	if o == nil || IsNil(o.UpdatedDate) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedDate
}

// GetUpdatedDateOk returns a tuple with the UpdatedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PullRequest) GetUpdatedDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedDate) {
		return nil, false
	}
	return o.UpdatedDate, true
}

// HasUpdatedDate returns a boolean if a field has been set.
func (o *PullRequest) HasUpdatedDate() bool {
	if o != nil && !IsNil(o.UpdatedDate) {
		return true
	}

	return false
}

// SetUpdatedDate gets a reference to the given time.Time and assigns it to the UpdatedDate field.
func (o *PullRequest) SetUpdatedDate(v time.Time) {
	o.UpdatedDate = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *PullRequest) GetVersion() int32 {
	if o == nil || IsNil(o.Version) {
		var ret int32
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PullRequest) GetVersionOk() (*int32, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *PullRequest) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int32 and assigns it to the Version field.
func (o *PullRequest) SetVersion(v int32) {
	o.Version = &v
}

func (o PullRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PullRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Author) {
		toSerialize["author"] = o.Author
	}
	if !IsNil(o.Closed) {
		toSerialize["closed"] = o.Closed
	}
	if !IsNil(o.ClosedDate) {
		toSerialize["closedDate"] = o.ClosedDate
	}
	if !IsNil(o.CreatedDate) {
		toSerialize["createdDate"] = o.CreatedDate
	}
	if !IsNil(o.CrossRepository) {
		toSerialize["crossRepository"] = o.CrossRepository
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Draft) {
		toSerialize["draft"] = o.Draft
	}
	if !IsNil(o.FromRef) {
		toSerialize["fromRef"] = o.FromRef
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Locked) {
		toSerialize["locked"] = o.Locked
	}
	if !IsNil(o.Open) {
		toSerialize["open"] = o.Open
	}
	if !IsNil(o.Participants) {
		toSerialize["participants"] = o.Participants
	}
	if !IsNil(o.Properties) {
		toSerialize["properties"] = o.Properties
	}
	if !IsNil(o.Reviewers) {
		toSerialize["reviewers"] = o.Reviewers
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.ToRef) {
		toSerialize["toRef"] = o.ToRef
	}
	if !IsNil(o.UpdatedDate) {
		toSerialize["updatedDate"] = o.UpdatedDate
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

type NullablePullRequest struct {
	value *PullRequest
	isSet bool
}

func (v NullablePullRequest) Get() *PullRequest {
	return v.value
}

func (v *NullablePullRequest) Set(val *PullRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePullRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePullRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePullRequest(val *PullRequest) *NullablePullRequest {
	return &NullablePullRequest{value: val, isSet: true}
}

func (v NullablePullRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePullRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


