/*
Bitbucket Data Center

This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).

API version: 9.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RestAnnouncementBanner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestAnnouncementBanner{}

// RestAnnouncementBanner struct for RestAnnouncementBanner
type RestAnnouncementBanner struct {
	Audience *string `json:"audience,omitempty"`
	Enabled *bool `json:"enabled,omitempty"`
	Message *string `json:"message,omitempty"`
}

// NewRestAnnouncementBanner instantiates a new RestAnnouncementBanner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestAnnouncementBanner() *RestAnnouncementBanner {
	this := RestAnnouncementBanner{}
	return &this
}

// NewRestAnnouncementBannerWithDefaults instantiates a new RestAnnouncementBanner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestAnnouncementBannerWithDefaults() *RestAnnouncementBanner {
	this := RestAnnouncementBanner{}
	return &this
}

// GetAudience returns the Audience field value if set, zero value otherwise.
func (o *RestAnnouncementBanner) GetAudience() string {
	if o == nil || IsNil(o.Audience) {
		var ret string
		return ret
	}
	return *o.Audience
}

// GetAudienceOk returns a tuple with the Audience field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestAnnouncementBanner) GetAudienceOk() (*string, bool) {
	if o == nil || IsNil(o.Audience) {
		return nil, false
	}
	return o.Audience, true
}

// HasAudience returns a boolean if a field has been set.
func (o *RestAnnouncementBanner) HasAudience() bool {
	if o != nil && !IsNil(o.Audience) {
		return true
	}

	return false
}

// SetAudience gets a reference to the given string and assigns it to the Audience field.
func (o *RestAnnouncementBanner) SetAudience(v string) {
	o.Audience = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *RestAnnouncementBanner) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestAnnouncementBanner) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *RestAnnouncementBanner) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *RestAnnouncementBanner) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *RestAnnouncementBanner) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestAnnouncementBanner) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *RestAnnouncementBanner) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *RestAnnouncementBanner) SetMessage(v string) {
	o.Message = &v
}

func (o RestAnnouncementBanner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestAnnouncementBanner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Audience) {
		toSerialize["audience"] = o.Audience
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	return toSerialize, nil
}

type NullableRestAnnouncementBanner struct {
	value *RestAnnouncementBanner
	isSet bool
}

func (v NullableRestAnnouncementBanner) Get() *RestAnnouncementBanner {
	return v.value
}

func (v *NullableRestAnnouncementBanner) Set(val *RestAnnouncementBanner) {
	v.value = val
	v.isSet = true
}

func (v NullableRestAnnouncementBanner) IsSet() bool {
	return v.isSet
}

func (v *NullableRestAnnouncementBanner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestAnnouncementBanner(val *RestAnnouncementBanner) *NullableRestAnnouncementBanner {
	return &NullableRestAnnouncementBanner{value: val, isSet: true}
}

func (v NullableRestAnnouncementBanner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestAnnouncementBanner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


