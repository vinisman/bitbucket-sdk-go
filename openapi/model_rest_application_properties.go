/*
Bitbucket Data Center

This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).

API version: 9.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RestApplicationProperties type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestApplicationProperties{}

// RestApplicationProperties struct for RestApplicationProperties
type RestApplicationProperties struct {
	BuildDate *string `json:"buildDate,omitempty"`
	BuildNumber *string `json:"buildNumber,omitempty"`
	DisplayName *string `json:"displayName,omitempty"`
	Version *string `json:"version,omitempty"`
}

// NewRestApplicationProperties instantiates a new RestApplicationProperties object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestApplicationProperties() *RestApplicationProperties {
	this := RestApplicationProperties{}
	return &this
}

// NewRestApplicationPropertiesWithDefaults instantiates a new RestApplicationProperties object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestApplicationPropertiesWithDefaults() *RestApplicationProperties {
	this := RestApplicationProperties{}
	return &this
}

// GetBuildDate returns the BuildDate field value if set, zero value otherwise.
func (o *RestApplicationProperties) GetBuildDate() string {
	if o == nil || IsNil(o.BuildDate) {
		var ret string
		return ret
	}
	return *o.BuildDate
}

// GetBuildDateOk returns a tuple with the BuildDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestApplicationProperties) GetBuildDateOk() (*string, bool) {
	if o == nil || IsNil(o.BuildDate) {
		return nil, false
	}
	return o.BuildDate, true
}

// HasBuildDate returns a boolean if a field has been set.
func (o *RestApplicationProperties) HasBuildDate() bool {
	if o != nil && !IsNil(o.BuildDate) {
		return true
	}

	return false
}

// SetBuildDate gets a reference to the given string and assigns it to the BuildDate field.
func (o *RestApplicationProperties) SetBuildDate(v string) {
	o.BuildDate = &v
}

// GetBuildNumber returns the BuildNumber field value if set, zero value otherwise.
func (o *RestApplicationProperties) GetBuildNumber() string {
	if o == nil || IsNil(o.BuildNumber) {
		var ret string
		return ret
	}
	return *o.BuildNumber
}

// GetBuildNumberOk returns a tuple with the BuildNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestApplicationProperties) GetBuildNumberOk() (*string, bool) {
	if o == nil || IsNil(o.BuildNumber) {
		return nil, false
	}
	return o.BuildNumber, true
}

// HasBuildNumber returns a boolean if a field has been set.
func (o *RestApplicationProperties) HasBuildNumber() bool {
	if o != nil && !IsNil(o.BuildNumber) {
		return true
	}

	return false
}

// SetBuildNumber gets a reference to the given string and assigns it to the BuildNumber field.
func (o *RestApplicationProperties) SetBuildNumber(v string) {
	o.BuildNumber = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *RestApplicationProperties) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestApplicationProperties) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *RestApplicationProperties) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *RestApplicationProperties) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *RestApplicationProperties) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestApplicationProperties) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *RestApplicationProperties) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *RestApplicationProperties) SetVersion(v string) {
	o.Version = &v
}

func (o RestApplicationProperties) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestApplicationProperties) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BuildDate) {
		toSerialize["buildDate"] = o.BuildDate
	}
	if !IsNil(o.BuildNumber) {
		toSerialize["buildNumber"] = o.BuildNumber
	}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

type NullableRestApplicationProperties struct {
	value *RestApplicationProperties
	isSet bool
}

func (v NullableRestApplicationProperties) Get() *RestApplicationProperties {
	return v.value
}

func (v *NullableRestApplicationProperties) Set(val *RestApplicationProperties) {
	v.value = val
	v.isSet = true
}

func (v NullableRestApplicationProperties) IsSet() bool {
	return v.isSet
}

func (v *NullableRestApplicationProperties) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestApplicationProperties(val *RestApplicationProperties) *NullableRestApplicationProperties {
	return &NullableRestApplicationProperties{value: val, isSet: true}
}

func (v NullableRestApplicationProperties) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestApplicationProperties) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


