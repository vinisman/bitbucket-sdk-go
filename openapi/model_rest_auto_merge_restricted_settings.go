/*
Bitbucket Data Center

This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).

API version: 9.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RestAutoMergeRestrictedSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestAutoMergeRestrictedSettings{}

// RestAutoMergeRestrictedSettings struct for RestAutoMergeRestrictedSettings
type RestAutoMergeRestrictedSettings struct {
	Enabled *bool `json:"enabled,omitempty"`
	// The restriction state of this scope's project.
	RestrictionState *string `json:"restrictionState,omitempty"`
	Scope *RestAutoMergeRestrictedSettingsScope `json:"scope,omitempty"`
}

// NewRestAutoMergeRestrictedSettings instantiates a new RestAutoMergeRestrictedSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestAutoMergeRestrictedSettings() *RestAutoMergeRestrictedSettings {
	this := RestAutoMergeRestrictedSettings{}
	return &this
}

// NewRestAutoMergeRestrictedSettingsWithDefaults instantiates a new RestAutoMergeRestrictedSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestAutoMergeRestrictedSettingsWithDefaults() *RestAutoMergeRestrictedSettings {
	this := RestAutoMergeRestrictedSettings{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *RestAutoMergeRestrictedSettings) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestAutoMergeRestrictedSettings) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *RestAutoMergeRestrictedSettings) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *RestAutoMergeRestrictedSettings) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetRestrictionState returns the RestrictionState field value if set, zero value otherwise.
func (o *RestAutoMergeRestrictedSettings) GetRestrictionState() string {
	if o == nil || IsNil(o.RestrictionState) {
		var ret string
		return ret
	}
	return *o.RestrictionState
}

// GetRestrictionStateOk returns a tuple with the RestrictionState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestAutoMergeRestrictedSettings) GetRestrictionStateOk() (*string, bool) {
	if o == nil || IsNil(o.RestrictionState) {
		return nil, false
	}
	return o.RestrictionState, true
}

// HasRestrictionState returns a boolean if a field has been set.
func (o *RestAutoMergeRestrictedSettings) HasRestrictionState() bool {
	if o != nil && !IsNil(o.RestrictionState) {
		return true
	}

	return false
}

// SetRestrictionState gets a reference to the given string and assigns it to the RestrictionState field.
func (o *RestAutoMergeRestrictedSettings) SetRestrictionState(v string) {
	o.RestrictionState = &v
}

// GetScope returns the Scope field value if set, zero value otherwise.
func (o *RestAutoMergeRestrictedSettings) GetScope() RestAutoMergeRestrictedSettingsScope {
	if o == nil || IsNil(o.Scope) {
		var ret RestAutoMergeRestrictedSettingsScope
		return ret
	}
	return *o.Scope
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestAutoMergeRestrictedSettings) GetScopeOk() (*RestAutoMergeRestrictedSettingsScope, bool) {
	if o == nil || IsNil(o.Scope) {
		return nil, false
	}
	return o.Scope, true
}

// HasScope returns a boolean if a field has been set.
func (o *RestAutoMergeRestrictedSettings) HasScope() bool {
	if o != nil && !IsNil(o.Scope) {
		return true
	}

	return false
}

// SetScope gets a reference to the given RestAutoMergeRestrictedSettingsScope and assigns it to the Scope field.
func (o *RestAutoMergeRestrictedSettings) SetScope(v RestAutoMergeRestrictedSettingsScope) {
	o.Scope = &v
}

func (o RestAutoMergeRestrictedSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestAutoMergeRestrictedSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.RestrictionState) {
		toSerialize["restrictionState"] = o.RestrictionState
	}
	if !IsNil(o.Scope) {
		toSerialize["scope"] = o.Scope
	}
	return toSerialize, nil
}

type NullableRestAutoMergeRestrictedSettings struct {
	value *RestAutoMergeRestrictedSettings
	isSet bool
}

func (v NullableRestAutoMergeRestrictedSettings) Get() *RestAutoMergeRestrictedSettings {
	return v.value
}

func (v *NullableRestAutoMergeRestrictedSettings) Set(val *RestAutoMergeRestrictedSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableRestAutoMergeRestrictedSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableRestAutoMergeRestrictedSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestAutoMergeRestrictedSettings(val *RestAutoMergeRestrictedSettings) *NullableRestAutoMergeRestrictedSettings {
	return &NullableRestAutoMergeRestrictedSettings{value: val, isSet: true}
}

func (v NullableRestAutoMergeRestrictedSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestAutoMergeRestrictedSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


