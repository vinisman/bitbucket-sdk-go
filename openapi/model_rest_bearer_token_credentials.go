/*
Bitbucket Data Center

This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).

API version: 9.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RestBearerTokenCredentials type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestBearerTokenCredentials{}

// RestBearerTokenCredentials struct for RestBearerTokenCredentials
type RestBearerTokenCredentials struct {
	Token string `json:"token"`
}

type _RestBearerTokenCredentials RestBearerTokenCredentials

// NewRestBearerTokenCredentials instantiates a new RestBearerTokenCredentials object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestBearerTokenCredentials(token string) *RestBearerTokenCredentials {
	this := RestBearerTokenCredentials{}
	this.Token = token
	return &this
}

// NewRestBearerTokenCredentialsWithDefaults instantiates a new RestBearerTokenCredentials object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestBearerTokenCredentialsWithDefaults() *RestBearerTokenCredentials {
	this := RestBearerTokenCredentials{}
	return &this
}

// GetToken returns the Token field value
func (o *RestBearerTokenCredentials) GetToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Token
}

// GetTokenOk returns a tuple with the Token field value
// and a boolean to check if the value has been set.
func (o *RestBearerTokenCredentials) GetTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Token, true
}

// SetToken sets field value
func (o *RestBearerTokenCredentials) SetToken(v string) {
	o.Token = v
}

func (o RestBearerTokenCredentials) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestBearerTokenCredentials) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["token"] = o.Token
	return toSerialize, nil
}

func (o *RestBearerTokenCredentials) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"token",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRestBearerTokenCredentials := _RestBearerTokenCredentials{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRestBearerTokenCredentials)

	if err != nil {
		return err
	}

	*o = RestBearerTokenCredentials(varRestBearerTokenCredentials)

	return err
}

type NullableRestBearerTokenCredentials struct {
	value *RestBearerTokenCredentials
	isSet bool
}

func (v NullableRestBearerTokenCredentials) Get() *RestBearerTokenCredentials {
	return v.value
}

func (v *NullableRestBearerTokenCredentials) Set(val *RestBearerTokenCredentials) {
	v.value = val
	v.isSet = true
}

func (v NullableRestBearerTokenCredentials) IsSet() bool {
	return v.isSet
}

func (v *NullableRestBearerTokenCredentials) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestBearerTokenCredentials(val *RestBearerTokenCredentials) *NullableRestBearerTokenCredentials {
	return &NullableRestBearerTokenCredentials{value: val, isSet: true}
}

func (v NullableRestBearerTokenCredentials) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestBearerTokenCredentials) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


