/*
Bitbucket Data Center

This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).

API version: 9.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RestBitbucketLicense type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestBitbucketLicense{}

// RestBitbucketLicense struct for RestBitbucketLicense
type RestBitbucketLicense struct {
	CreationDate *int64 `json:"creationDate,omitempty"`
	DaysBeforeExpiry *int32 `json:"daysBeforeExpiry,omitempty"`
	ExpiryDate *int64 `json:"expiryDate,omitempty"`
	GracePeriodEndDate *int64 `json:"gracePeriodEndDate,omitempty"`
	License *string `json:"license,omitempty"`
	MaintenanceExpiryDate *int64 `json:"maintenanceExpiryDate,omitempty"`
	MaximumNumberOfUsers *int32 `json:"maximumNumberOfUsers,omitempty"`
	NumberOfDaysBeforeExpiry *int32 `json:"numberOfDaysBeforeExpiry,omitempty"`
	NumberOfDaysBeforeGracePeriodExpiry *int32 `json:"numberOfDaysBeforeGracePeriodExpiry,omitempty"`
	NumberOfDaysBeforeMaintenanceExpiry *int32 `json:"numberOfDaysBeforeMaintenanceExpiry,omitempty"`
	PurchaseDate *int64 `json:"purchaseDate,omitempty"`
	ServerId *string `json:"serverId,omitempty"`
	Status *RestBitbucketLicenseStatus `json:"status,omitempty"`
	SupportEntitlementNumber *string `json:"supportEntitlementNumber,omitempty"`
	UnlimitedNumberOfUsers *bool `json:"unlimitedNumberOfUsers,omitempty"`
}

// NewRestBitbucketLicense instantiates a new RestBitbucketLicense object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestBitbucketLicense() *RestBitbucketLicense {
	this := RestBitbucketLicense{}
	return &this
}

// NewRestBitbucketLicenseWithDefaults instantiates a new RestBitbucketLicense object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestBitbucketLicenseWithDefaults() *RestBitbucketLicense {
	this := RestBitbucketLicense{}
	return &this
}

// GetCreationDate returns the CreationDate field value if set, zero value otherwise.
func (o *RestBitbucketLicense) GetCreationDate() int64 {
	if o == nil || IsNil(o.CreationDate) {
		var ret int64
		return ret
	}
	return *o.CreationDate
}

// GetCreationDateOk returns a tuple with the CreationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestBitbucketLicense) GetCreationDateOk() (*int64, bool) {
	if o == nil || IsNil(o.CreationDate) {
		return nil, false
	}
	return o.CreationDate, true
}

// HasCreationDate returns a boolean if a field has been set.
func (o *RestBitbucketLicense) HasCreationDate() bool {
	if o != nil && !IsNil(o.CreationDate) {
		return true
	}

	return false
}

// SetCreationDate gets a reference to the given int64 and assigns it to the CreationDate field.
func (o *RestBitbucketLicense) SetCreationDate(v int64) {
	o.CreationDate = &v
}

// GetDaysBeforeExpiry returns the DaysBeforeExpiry field value if set, zero value otherwise.
func (o *RestBitbucketLicense) GetDaysBeforeExpiry() int32 {
	if o == nil || IsNil(o.DaysBeforeExpiry) {
		var ret int32
		return ret
	}
	return *o.DaysBeforeExpiry
}

// GetDaysBeforeExpiryOk returns a tuple with the DaysBeforeExpiry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestBitbucketLicense) GetDaysBeforeExpiryOk() (*int32, bool) {
	if o == nil || IsNil(o.DaysBeforeExpiry) {
		return nil, false
	}
	return o.DaysBeforeExpiry, true
}

// HasDaysBeforeExpiry returns a boolean if a field has been set.
func (o *RestBitbucketLicense) HasDaysBeforeExpiry() bool {
	if o != nil && !IsNil(o.DaysBeforeExpiry) {
		return true
	}

	return false
}

// SetDaysBeforeExpiry gets a reference to the given int32 and assigns it to the DaysBeforeExpiry field.
func (o *RestBitbucketLicense) SetDaysBeforeExpiry(v int32) {
	o.DaysBeforeExpiry = &v
}

// GetExpiryDate returns the ExpiryDate field value if set, zero value otherwise.
func (o *RestBitbucketLicense) GetExpiryDate() int64 {
	if o == nil || IsNil(o.ExpiryDate) {
		var ret int64
		return ret
	}
	return *o.ExpiryDate
}

// GetExpiryDateOk returns a tuple with the ExpiryDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestBitbucketLicense) GetExpiryDateOk() (*int64, bool) {
	if o == nil || IsNil(o.ExpiryDate) {
		return nil, false
	}
	return o.ExpiryDate, true
}

// HasExpiryDate returns a boolean if a field has been set.
func (o *RestBitbucketLicense) HasExpiryDate() bool {
	if o != nil && !IsNil(o.ExpiryDate) {
		return true
	}

	return false
}

// SetExpiryDate gets a reference to the given int64 and assigns it to the ExpiryDate field.
func (o *RestBitbucketLicense) SetExpiryDate(v int64) {
	o.ExpiryDate = &v
}

// GetGracePeriodEndDate returns the GracePeriodEndDate field value if set, zero value otherwise.
func (o *RestBitbucketLicense) GetGracePeriodEndDate() int64 {
	if o == nil || IsNil(o.GracePeriodEndDate) {
		var ret int64
		return ret
	}
	return *o.GracePeriodEndDate
}

// GetGracePeriodEndDateOk returns a tuple with the GracePeriodEndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestBitbucketLicense) GetGracePeriodEndDateOk() (*int64, bool) {
	if o == nil || IsNil(o.GracePeriodEndDate) {
		return nil, false
	}
	return o.GracePeriodEndDate, true
}

// HasGracePeriodEndDate returns a boolean if a field has been set.
func (o *RestBitbucketLicense) HasGracePeriodEndDate() bool {
	if o != nil && !IsNil(o.GracePeriodEndDate) {
		return true
	}

	return false
}

// SetGracePeriodEndDate gets a reference to the given int64 and assigns it to the GracePeriodEndDate field.
func (o *RestBitbucketLicense) SetGracePeriodEndDate(v int64) {
	o.GracePeriodEndDate = &v
}

// GetLicense returns the License field value if set, zero value otherwise.
func (o *RestBitbucketLicense) GetLicense() string {
	if o == nil || IsNil(o.License) {
		var ret string
		return ret
	}
	return *o.License
}

// GetLicenseOk returns a tuple with the License field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestBitbucketLicense) GetLicenseOk() (*string, bool) {
	if o == nil || IsNil(o.License) {
		return nil, false
	}
	return o.License, true
}

// HasLicense returns a boolean if a field has been set.
func (o *RestBitbucketLicense) HasLicense() bool {
	if o != nil && !IsNil(o.License) {
		return true
	}

	return false
}

// SetLicense gets a reference to the given string and assigns it to the License field.
func (o *RestBitbucketLicense) SetLicense(v string) {
	o.License = &v
}

// GetMaintenanceExpiryDate returns the MaintenanceExpiryDate field value if set, zero value otherwise.
func (o *RestBitbucketLicense) GetMaintenanceExpiryDate() int64 {
	if o == nil || IsNil(o.MaintenanceExpiryDate) {
		var ret int64
		return ret
	}
	return *o.MaintenanceExpiryDate
}

// GetMaintenanceExpiryDateOk returns a tuple with the MaintenanceExpiryDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestBitbucketLicense) GetMaintenanceExpiryDateOk() (*int64, bool) {
	if o == nil || IsNil(o.MaintenanceExpiryDate) {
		return nil, false
	}
	return o.MaintenanceExpiryDate, true
}

// HasMaintenanceExpiryDate returns a boolean if a field has been set.
func (o *RestBitbucketLicense) HasMaintenanceExpiryDate() bool {
	if o != nil && !IsNil(o.MaintenanceExpiryDate) {
		return true
	}

	return false
}

// SetMaintenanceExpiryDate gets a reference to the given int64 and assigns it to the MaintenanceExpiryDate field.
func (o *RestBitbucketLicense) SetMaintenanceExpiryDate(v int64) {
	o.MaintenanceExpiryDate = &v
}

// GetMaximumNumberOfUsers returns the MaximumNumberOfUsers field value if set, zero value otherwise.
func (o *RestBitbucketLicense) GetMaximumNumberOfUsers() int32 {
	if o == nil || IsNil(o.MaximumNumberOfUsers) {
		var ret int32
		return ret
	}
	return *o.MaximumNumberOfUsers
}

// GetMaximumNumberOfUsersOk returns a tuple with the MaximumNumberOfUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestBitbucketLicense) GetMaximumNumberOfUsersOk() (*int32, bool) {
	if o == nil || IsNil(o.MaximumNumberOfUsers) {
		return nil, false
	}
	return o.MaximumNumberOfUsers, true
}

// HasMaximumNumberOfUsers returns a boolean if a field has been set.
func (o *RestBitbucketLicense) HasMaximumNumberOfUsers() bool {
	if o != nil && !IsNil(o.MaximumNumberOfUsers) {
		return true
	}

	return false
}

// SetMaximumNumberOfUsers gets a reference to the given int32 and assigns it to the MaximumNumberOfUsers field.
func (o *RestBitbucketLicense) SetMaximumNumberOfUsers(v int32) {
	o.MaximumNumberOfUsers = &v
}

// GetNumberOfDaysBeforeExpiry returns the NumberOfDaysBeforeExpiry field value if set, zero value otherwise.
func (o *RestBitbucketLicense) GetNumberOfDaysBeforeExpiry() int32 {
	if o == nil || IsNil(o.NumberOfDaysBeforeExpiry) {
		var ret int32
		return ret
	}
	return *o.NumberOfDaysBeforeExpiry
}

// GetNumberOfDaysBeforeExpiryOk returns a tuple with the NumberOfDaysBeforeExpiry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestBitbucketLicense) GetNumberOfDaysBeforeExpiryOk() (*int32, bool) {
	if o == nil || IsNil(o.NumberOfDaysBeforeExpiry) {
		return nil, false
	}
	return o.NumberOfDaysBeforeExpiry, true
}

// HasNumberOfDaysBeforeExpiry returns a boolean if a field has been set.
func (o *RestBitbucketLicense) HasNumberOfDaysBeforeExpiry() bool {
	if o != nil && !IsNil(o.NumberOfDaysBeforeExpiry) {
		return true
	}

	return false
}

// SetNumberOfDaysBeforeExpiry gets a reference to the given int32 and assigns it to the NumberOfDaysBeforeExpiry field.
func (o *RestBitbucketLicense) SetNumberOfDaysBeforeExpiry(v int32) {
	o.NumberOfDaysBeforeExpiry = &v
}

// GetNumberOfDaysBeforeGracePeriodExpiry returns the NumberOfDaysBeforeGracePeriodExpiry field value if set, zero value otherwise.
func (o *RestBitbucketLicense) GetNumberOfDaysBeforeGracePeriodExpiry() int32 {
	if o == nil || IsNil(o.NumberOfDaysBeforeGracePeriodExpiry) {
		var ret int32
		return ret
	}
	return *o.NumberOfDaysBeforeGracePeriodExpiry
}

// GetNumberOfDaysBeforeGracePeriodExpiryOk returns a tuple with the NumberOfDaysBeforeGracePeriodExpiry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestBitbucketLicense) GetNumberOfDaysBeforeGracePeriodExpiryOk() (*int32, bool) {
	if o == nil || IsNil(o.NumberOfDaysBeforeGracePeriodExpiry) {
		return nil, false
	}
	return o.NumberOfDaysBeforeGracePeriodExpiry, true
}

// HasNumberOfDaysBeforeGracePeriodExpiry returns a boolean if a field has been set.
func (o *RestBitbucketLicense) HasNumberOfDaysBeforeGracePeriodExpiry() bool {
	if o != nil && !IsNil(o.NumberOfDaysBeforeGracePeriodExpiry) {
		return true
	}

	return false
}

// SetNumberOfDaysBeforeGracePeriodExpiry gets a reference to the given int32 and assigns it to the NumberOfDaysBeforeGracePeriodExpiry field.
func (o *RestBitbucketLicense) SetNumberOfDaysBeforeGracePeriodExpiry(v int32) {
	o.NumberOfDaysBeforeGracePeriodExpiry = &v
}

// GetNumberOfDaysBeforeMaintenanceExpiry returns the NumberOfDaysBeforeMaintenanceExpiry field value if set, zero value otherwise.
func (o *RestBitbucketLicense) GetNumberOfDaysBeforeMaintenanceExpiry() int32 {
	if o == nil || IsNil(o.NumberOfDaysBeforeMaintenanceExpiry) {
		var ret int32
		return ret
	}
	return *o.NumberOfDaysBeforeMaintenanceExpiry
}

// GetNumberOfDaysBeforeMaintenanceExpiryOk returns a tuple with the NumberOfDaysBeforeMaintenanceExpiry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestBitbucketLicense) GetNumberOfDaysBeforeMaintenanceExpiryOk() (*int32, bool) {
	if o == nil || IsNil(o.NumberOfDaysBeforeMaintenanceExpiry) {
		return nil, false
	}
	return o.NumberOfDaysBeforeMaintenanceExpiry, true
}

// HasNumberOfDaysBeforeMaintenanceExpiry returns a boolean if a field has been set.
func (o *RestBitbucketLicense) HasNumberOfDaysBeforeMaintenanceExpiry() bool {
	if o != nil && !IsNil(o.NumberOfDaysBeforeMaintenanceExpiry) {
		return true
	}

	return false
}

// SetNumberOfDaysBeforeMaintenanceExpiry gets a reference to the given int32 and assigns it to the NumberOfDaysBeforeMaintenanceExpiry field.
func (o *RestBitbucketLicense) SetNumberOfDaysBeforeMaintenanceExpiry(v int32) {
	o.NumberOfDaysBeforeMaintenanceExpiry = &v
}

// GetPurchaseDate returns the PurchaseDate field value if set, zero value otherwise.
func (o *RestBitbucketLicense) GetPurchaseDate() int64 {
	if o == nil || IsNil(o.PurchaseDate) {
		var ret int64
		return ret
	}
	return *o.PurchaseDate
}

// GetPurchaseDateOk returns a tuple with the PurchaseDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestBitbucketLicense) GetPurchaseDateOk() (*int64, bool) {
	if o == nil || IsNil(o.PurchaseDate) {
		return nil, false
	}
	return o.PurchaseDate, true
}

// HasPurchaseDate returns a boolean if a field has been set.
func (o *RestBitbucketLicense) HasPurchaseDate() bool {
	if o != nil && !IsNil(o.PurchaseDate) {
		return true
	}

	return false
}

// SetPurchaseDate gets a reference to the given int64 and assigns it to the PurchaseDate field.
func (o *RestBitbucketLicense) SetPurchaseDate(v int64) {
	o.PurchaseDate = &v
}

// GetServerId returns the ServerId field value if set, zero value otherwise.
func (o *RestBitbucketLicense) GetServerId() string {
	if o == nil || IsNil(o.ServerId) {
		var ret string
		return ret
	}
	return *o.ServerId
}

// GetServerIdOk returns a tuple with the ServerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestBitbucketLicense) GetServerIdOk() (*string, bool) {
	if o == nil || IsNil(o.ServerId) {
		return nil, false
	}
	return o.ServerId, true
}

// HasServerId returns a boolean if a field has been set.
func (o *RestBitbucketLicense) HasServerId() bool {
	if o != nil && !IsNil(o.ServerId) {
		return true
	}

	return false
}

// SetServerId gets a reference to the given string and assigns it to the ServerId field.
func (o *RestBitbucketLicense) SetServerId(v string) {
	o.ServerId = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *RestBitbucketLicense) GetStatus() RestBitbucketLicenseStatus {
	if o == nil || IsNil(o.Status) {
		var ret RestBitbucketLicenseStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestBitbucketLicense) GetStatusOk() (*RestBitbucketLicenseStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *RestBitbucketLicense) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given RestBitbucketLicenseStatus and assigns it to the Status field.
func (o *RestBitbucketLicense) SetStatus(v RestBitbucketLicenseStatus) {
	o.Status = &v
}

// GetSupportEntitlementNumber returns the SupportEntitlementNumber field value if set, zero value otherwise.
func (o *RestBitbucketLicense) GetSupportEntitlementNumber() string {
	if o == nil || IsNil(o.SupportEntitlementNumber) {
		var ret string
		return ret
	}
	return *o.SupportEntitlementNumber
}

// GetSupportEntitlementNumberOk returns a tuple with the SupportEntitlementNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestBitbucketLicense) GetSupportEntitlementNumberOk() (*string, bool) {
	if o == nil || IsNil(o.SupportEntitlementNumber) {
		return nil, false
	}
	return o.SupportEntitlementNumber, true
}

// HasSupportEntitlementNumber returns a boolean if a field has been set.
func (o *RestBitbucketLicense) HasSupportEntitlementNumber() bool {
	if o != nil && !IsNil(o.SupportEntitlementNumber) {
		return true
	}

	return false
}

// SetSupportEntitlementNumber gets a reference to the given string and assigns it to the SupportEntitlementNumber field.
func (o *RestBitbucketLicense) SetSupportEntitlementNumber(v string) {
	o.SupportEntitlementNumber = &v
}

// GetUnlimitedNumberOfUsers returns the UnlimitedNumberOfUsers field value if set, zero value otherwise.
func (o *RestBitbucketLicense) GetUnlimitedNumberOfUsers() bool {
	if o == nil || IsNil(o.UnlimitedNumberOfUsers) {
		var ret bool
		return ret
	}
	return *o.UnlimitedNumberOfUsers
}

// GetUnlimitedNumberOfUsersOk returns a tuple with the UnlimitedNumberOfUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestBitbucketLicense) GetUnlimitedNumberOfUsersOk() (*bool, bool) {
	if o == nil || IsNil(o.UnlimitedNumberOfUsers) {
		return nil, false
	}
	return o.UnlimitedNumberOfUsers, true
}

// HasUnlimitedNumberOfUsers returns a boolean if a field has been set.
func (o *RestBitbucketLicense) HasUnlimitedNumberOfUsers() bool {
	if o != nil && !IsNil(o.UnlimitedNumberOfUsers) {
		return true
	}

	return false
}

// SetUnlimitedNumberOfUsers gets a reference to the given bool and assigns it to the UnlimitedNumberOfUsers field.
func (o *RestBitbucketLicense) SetUnlimitedNumberOfUsers(v bool) {
	o.UnlimitedNumberOfUsers = &v
}

func (o RestBitbucketLicense) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestBitbucketLicense) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CreationDate) {
		toSerialize["creationDate"] = o.CreationDate
	}
	if !IsNil(o.DaysBeforeExpiry) {
		toSerialize["daysBeforeExpiry"] = o.DaysBeforeExpiry
	}
	if !IsNil(o.ExpiryDate) {
		toSerialize["expiryDate"] = o.ExpiryDate
	}
	if !IsNil(o.GracePeriodEndDate) {
		toSerialize["gracePeriodEndDate"] = o.GracePeriodEndDate
	}
	if !IsNil(o.License) {
		toSerialize["license"] = o.License
	}
	if !IsNil(o.MaintenanceExpiryDate) {
		toSerialize["maintenanceExpiryDate"] = o.MaintenanceExpiryDate
	}
	if !IsNil(o.MaximumNumberOfUsers) {
		toSerialize["maximumNumberOfUsers"] = o.MaximumNumberOfUsers
	}
	if !IsNil(o.NumberOfDaysBeforeExpiry) {
		toSerialize["numberOfDaysBeforeExpiry"] = o.NumberOfDaysBeforeExpiry
	}
	if !IsNil(o.NumberOfDaysBeforeGracePeriodExpiry) {
		toSerialize["numberOfDaysBeforeGracePeriodExpiry"] = o.NumberOfDaysBeforeGracePeriodExpiry
	}
	if !IsNil(o.NumberOfDaysBeforeMaintenanceExpiry) {
		toSerialize["numberOfDaysBeforeMaintenanceExpiry"] = o.NumberOfDaysBeforeMaintenanceExpiry
	}
	if !IsNil(o.PurchaseDate) {
		toSerialize["purchaseDate"] = o.PurchaseDate
	}
	if !IsNil(o.ServerId) {
		toSerialize["serverId"] = o.ServerId
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.SupportEntitlementNumber) {
		toSerialize["supportEntitlementNumber"] = o.SupportEntitlementNumber
	}
	if !IsNil(o.UnlimitedNumberOfUsers) {
		toSerialize["unlimitedNumberOfUsers"] = o.UnlimitedNumberOfUsers
	}
	return toSerialize, nil
}

type NullableRestBitbucketLicense struct {
	value *RestBitbucketLicense
	isSet bool
}

func (v NullableRestBitbucketLicense) Get() *RestBitbucketLicense {
	return v.value
}

func (v *NullableRestBitbucketLicense) Set(val *RestBitbucketLicense) {
	v.value = val
	v.isSet = true
}

func (v NullableRestBitbucketLicense) IsSet() bool {
	return v.isSet
}

func (v *NullableRestBitbucketLicense) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestBitbucketLicense(val *RestBitbucketLicense) *NullableRestBitbucketLicense {
	return &NullableRestBitbucketLicense{value: val, isSet: true}
}

func (v NullableRestBitbucketLicense) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestBitbucketLicense) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


