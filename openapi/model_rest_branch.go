/*
Bitbucket Data Center

This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).

API version: 9.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RestBranch type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestBranch{}

// RestBranch struct for RestBranch
type RestBranch struct {
	Default *bool `json:"default,omitempty"`
	DisplayId *string `json:"displayId,omitempty"`
	Id *string `json:"id,omitempty"`
	LatestChangeset *string `json:"latestChangeset,omitempty"`
	LatestCommit *string `json:"latestCommit,omitempty"`
	Type interface{} `json:"type,omitempty"`
}

// NewRestBranch instantiates a new RestBranch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestBranch() *RestBranch {
	this := RestBranch{}
	return &this
}

// NewRestBranchWithDefaults instantiates a new RestBranch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestBranchWithDefaults() *RestBranch {
	this := RestBranch{}
	return &this
}

// GetDefault returns the Default field value if set, zero value otherwise.
func (o *RestBranch) GetDefault() bool {
	if o == nil || IsNil(o.Default) {
		var ret bool
		return ret
	}
	return *o.Default
}

// GetDefaultOk returns a tuple with the Default field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestBranch) GetDefaultOk() (*bool, bool) {
	if o == nil || IsNil(o.Default) {
		return nil, false
	}
	return o.Default, true
}

// HasDefault returns a boolean if a field has been set.
func (o *RestBranch) HasDefault() bool {
	if o != nil && !IsNil(o.Default) {
		return true
	}

	return false
}

// SetDefault gets a reference to the given bool and assigns it to the Default field.
func (o *RestBranch) SetDefault(v bool) {
	o.Default = &v
}

// GetDisplayId returns the DisplayId field value if set, zero value otherwise.
func (o *RestBranch) GetDisplayId() string {
	if o == nil || IsNil(o.DisplayId) {
		var ret string
		return ret
	}
	return *o.DisplayId
}

// GetDisplayIdOk returns a tuple with the DisplayId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestBranch) GetDisplayIdOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayId) {
		return nil, false
	}
	return o.DisplayId, true
}

// HasDisplayId returns a boolean if a field has been set.
func (o *RestBranch) HasDisplayId() bool {
	if o != nil && !IsNil(o.DisplayId) {
		return true
	}

	return false
}

// SetDisplayId gets a reference to the given string and assigns it to the DisplayId field.
func (o *RestBranch) SetDisplayId(v string) {
	o.DisplayId = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RestBranch) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestBranch) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RestBranch) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *RestBranch) SetId(v string) {
	o.Id = &v
}

// GetLatestChangeset returns the LatestChangeset field value if set, zero value otherwise.
func (o *RestBranch) GetLatestChangeset() string {
	if o == nil || IsNil(o.LatestChangeset) {
		var ret string
		return ret
	}
	return *o.LatestChangeset
}

// GetLatestChangesetOk returns a tuple with the LatestChangeset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestBranch) GetLatestChangesetOk() (*string, bool) {
	if o == nil || IsNil(o.LatestChangeset) {
		return nil, false
	}
	return o.LatestChangeset, true
}

// HasLatestChangeset returns a boolean if a field has been set.
func (o *RestBranch) HasLatestChangeset() bool {
	if o != nil && !IsNil(o.LatestChangeset) {
		return true
	}

	return false
}

// SetLatestChangeset gets a reference to the given string and assigns it to the LatestChangeset field.
func (o *RestBranch) SetLatestChangeset(v string) {
	o.LatestChangeset = &v
}

// GetLatestCommit returns the LatestCommit field value if set, zero value otherwise.
func (o *RestBranch) GetLatestCommit() string {
	if o == nil || IsNil(o.LatestCommit) {
		var ret string
		return ret
	}
	return *o.LatestCommit
}

// GetLatestCommitOk returns a tuple with the LatestCommit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestBranch) GetLatestCommitOk() (*string, bool) {
	if o == nil || IsNil(o.LatestCommit) {
		return nil, false
	}
	return o.LatestCommit, true
}

// HasLatestCommit returns a boolean if a field has been set.
func (o *RestBranch) HasLatestCommit() bool {
	if o != nil && !IsNil(o.LatestCommit) {
		return true
	}

	return false
}

// SetLatestCommit gets a reference to the given string and assigns it to the LatestCommit field.
func (o *RestBranch) SetLatestCommit(v string) {
	o.LatestCommit = &v
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestBranch) GetType() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestBranch) GetTypeOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return &o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *RestBranch) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given interface{} and assigns it to the Type field.
func (o *RestBranch) SetType(v interface{}) {
	o.Type = v
}

func (o RestBranch) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestBranch) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Default) {
		toSerialize["default"] = o.Default
	}
	if !IsNil(o.DisplayId) {
		toSerialize["displayId"] = o.DisplayId
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.LatestChangeset) {
		toSerialize["latestChangeset"] = o.LatestChangeset
	}
	if !IsNil(o.LatestCommit) {
		toSerialize["latestCommit"] = o.LatestCommit
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableRestBranch struct {
	value *RestBranch
	isSet bool
}

func (v NullableRestBranch) Get() *RestBranch {
	return v.value
}

func (v *NullableRestBranch) Set(val *RestBranch) {
	v.value = val
	v.isSet = true
}

func (v NullableRestBranch) IsSet() bool {
	return v.isSet
}

func (v *NullableRestBranch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestBranch(val *RestBranch) *NullableRestBranch {
	return &NullableRestBranch{value: val, isSet: true}
}

func (v NullableRestBranch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestBranch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


