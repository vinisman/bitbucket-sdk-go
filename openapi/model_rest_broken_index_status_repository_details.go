/*
Bitbucket Data Center

This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).

API version: 9.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RestBrokenIndexStatusRepositoryDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestBrokenIndexStatusRepositoryDetails{}

// RestBrokenIndexStatusRepositoryDetails Details about the last index attempt for the given repository
type RestBrokenIndexStatusRepositoryDetails struct {
	// Additional detail about the <b>BROKEN</b> status if available, meant for informational purposes only. This nullable, free-form text field should not be used for automation; rely on status instead.
	IndexingError *string `json:"indexingError,omitempty"`
	// The commit hash of the last indexed commit in the repository.
	LastIndexedCommitId *string `json:"lastIndexedCommitId,omitempty"`
	// The timestamp in epoch milliseconds of the last time the repository successfully was indexed
	LastIndexedTimestamp *int64 `json:"lastIndexedTimestamp,omitempty"`
	// The project key that the repository belongs to
	ProjectKey string `json:"projectKey"`
	// The repository slug
	RepositorySlug string `json:"repositorySlug"`
	// The current indexing status of the repository.
	Status string `json:"status"`
}

type _RestBrokenIndexStatusRepositoryDetails RestBrokenIndexStatusRepositoryDetails

// NewRestBrokenIndexStatusRepositoryDetails instantiates a new RestBrokenIndexStatusRepositoryDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestBrokenIndexStatusRepositoryDetails(projectKey string, repositorySlug string, status string) *RestBrokenIndexStatusRepositoryDetails {
	this := RestBrokenIndexStatusRepositoryDetails{}
	this.ProjectKey = projectKey
	this.RepositorySlug = repositorySlug
	this.Status = status
	return &this
}

// NewRestBrokenIndexStatusRepositoryDetailsWithDefaults instantiates a new RestBrokenIndexStatusRepositoryDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestBrokenIndexStatusRepositoryDetailsWithDefaults() *RestBrokenIndexStatusRepositoryDetails {
	this := RestBrokenIndexStatusRepositoryDetails{}
	return &this
}

// GetIndexingError returns the IndexingError field value if set, zero value otherwise.
func (o *RestBrokenIndexStatusRepositoryDetails) GetIndexingError() string {
	if o == nil || IsNil(o.IndexingError) {
		var ret string
		return ret
	}
	return *o.IndexingError
}

// GetIndexingErrorOk returns a tuple with the IndexingError field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestBrokenIndexStatusRepositoryDetails) GetIndexingErrorOk() (*string, bool) {
	if o == nil || IsNil(o.IndexingError) {
		return nil, false
	}
	return o.IndexingError, true
}

// HasIndexingError returns a boolean if a field has been set.
func (o *RestBrokenIndexStatusRepositoryDetails) HasIndexingError() bool {
	if o != nil && !IsNil(o.IndexingError) {
		return true
	}

	return false
}

// SetIndexingError gets a reference to the given string and assigns it to the IndexingError field.
func (o *RestBrokenIndexStatusRepositoryDetails) SetIndexingError(v string) {
	o.IndexingError = &v
}

// GetLastIndexedCommitId returns the LastIndexedCommitId field value if set, zero value otherwise.
func (o *RestBrokenIndexStatusRepositoryDetails) GetLastIndexedCommitId() string {
	if o == nil || IsNil(o.LastIndexedCommitId) {
		var ret string
		return ret
	}
	return *o.LastIndexedCommitId
}

// GetLastIndexedCommitIdOk returns a tuple with the LastIndexedCommitId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestBrokenIndexStatusRepositoryDetails) GetLastIndexedCommitIdOk() (*string, bool) {
	if o == nil || IsNil(o.LastIndexedCommitId) {
		return nil, false
	}
	return o.LastIndexedCommitId, true
}

// HasLastIndexedCommitId returns a boolean if a field has been set.
func (o *RestBrokenIndexStatusRepositoryDetails) HasLastIndexedCommitId() bool {
	if o != nil && !IsNil(o.LastIndexedCommitId) {
		return true
	}

	return false
}

// SetLastIndexedCommitId gets a reference to the given string and assigns it to the LastIndexedCommitId field.
func (o *RestBrokenIndexStatusRepositoryDetails) SetLastIndexedCommitId(v string) {
	o.LastIndexedCommitId = &v
}

// GetLastIndexedTimestamp returns the LastIndexedTimestamp field value if set, zero value otherwise.
func (o *RestBrokenIndexStatusRepositoryDetails) GetLastIndexedTimestamp() int64 {
	if o == nil || IsNil(o.LastIndexedTimestamp) {
		var ret int64
		return ret
	}
	return *o.LastIndexedTimestamp
}

// GetLastIndexedTimestampOk returns a tuple with the LastIndexedTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestBrokenIndexStatusRepositoryDetails) GetLastIndexedTimestampOk() (*int64, bool) {
	if o == nil || IsNil(o.LastIndexedTimestamp) {
		return nil, false
	}
	return o.LastIndexedTimestamp, true
}

// HasLastIndexedTimestamp returns a boolean if a field has been set.
func (o *RestBrokenIndexStatusRepositoryDetails) HasLastIndexedTimestamp() bool {
	if o != nil && !IsNil(o.LastIndexedTimestamp) {
		return true
	}

	return false
}

// SetLastIndexedTimestamp gets a reference to the given int64 and assigns it to the LastIndexedTimestamp field.
func (o *RestBrokenIndexStatusRepositoryDetails) SetLastIndexedTimestamp(v int64) {
	o.LastIndexedTimestamp = &v
}

// GetProjectKey returns the ProjectKey field value
func (o *RestBrokenIndexStatusRepositoryDetails) GetProjectKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProjectKey
}

// GetProjectKeyOk returns a tuple with the ProjectKey field value
// and a boolean to check if the value has been set.
func (o *RestBrokenIndexStatusRepositoryDetails) GetProjectKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProjectKey, true
}

// SetProjectKey sets field value
func (o *RestBrokenIndexStatusRepositoryDetails) SetProjectKey(v string) {
	o.ProjectKey = v
}

// GetRepositorySlug returns the RepositorySlug field value
func (o *RestBrokenIndexStatusRepositoryDetails) GetRepositorySlug() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RepositorySlug
}

// GetRepositorySlugOk returns a tuple with the RepositorySlug field value
// and a boolean to check if the value has been set.
func (o *RestBrokenIndexStatusRepositoryDetails) GetRepositorySlugOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RepositorySlug, true
}

// SetRepositorySlug sets field value
func (o *RestBrokenIndexStatusRepositoryDetails) SetRepositorySlug(v string) {
	o.RepositorySlug = v
}

// GetStatus returns the Status field value
func (o *RestBrokenIndexStatusRepositoryDetails) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *RestBrokenIndexStatusRepositoryDetails) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *RestBrokenIndexStatusRepositoryDetails) SetStatus(v string) {
	o.Status = v
}

func (o RestBrokenIndexStatusRepositoryDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestBrokenIndexStatusRepositoryDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IndexingError) {
		toSerialize["indexingError"] = o.IndexingError
	}
	if !IsNil(o.LastIndexedCommitId) {
		toSerialize["lastIndexedCommitId"] = o.LastIndexedCommitId
	}
	if !IsNil(o.LastIndexedTimestamp) {
		toSerialize["lastIndexedTimestamp"] = o.LastIndexedTimestamp
	}
	toSerialize["projectKey"] = o.ProjectKey
	toSerialize["repositorySlug"] = o.RepositorySlug
	toSerialize["status"] = o.Status
	return toSerialize, nil
}

func (o *RestBrokenIndexStatusRepositoryDetails) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"projectKey",
		"repositorySlug",
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRestBrokenIndexStatusRepositoryDetails := _RestBrokenIndexStatusRepositoryDetails{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRestBrokenIndexStatusRepositoryDetails)

	if err != nil {
		return err
	}

	*o = RestBrokenIndexStatusRepositoryDetails(varRestBrokenIndexStatusRepositoryDetails)

	return err
}

type NullableRestBrokenIndexStatusRepositoryDetails struct {
	value *RestBrokenIndexStatusRepositoryDetails
	isSet bool
}

func (v NullableRestBrokenIndexStatusRepositoryDetails) Get() *RestBrokenIndexStatusRepositoryDetails {
	return v.value
}

func (v *NullableRestBrokenIndexStatusRepositoryDetails) Set(val *RestBrokenIndexStatusRepositoryDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableRestBrokenIndexStatusRepositoryDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableRestBrokenIndexStatusRepositoryDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestBrokenIndexStatusRepositoryDetails(val *RestBrokenIndexStatusRepositoryDetails) *NullableRestBrokenIndexStatusRepositoryDetails {
	return &NullableRestBrokenIndexStatusRepositoryDetails{value: val, isSet: true}
}

func (v NullableRestBrokenIndexStatusRepositoryDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestBrokenIndexStatusRepositoryDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


