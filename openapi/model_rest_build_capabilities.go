/*
Bitbucket Data Center

This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).

API version: 9.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RestBuildCapabilities type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestBuildCapabilities{}

// RestBuildCapabilities struct for RestBuildCapabilities
type RestBuildCapabilities struct {
	BuildStatus []string `json:"buildStatus,omitempty"`
}

// NewRestBuildCapabilities instantiates a new RestBuildCapabilities object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestBuildCapabilities() *RestBuildCapabilities {
	this := RestBuildCapabilities{}
	return &this
}

// NewRestBuildCapabilitiesWithDefaults instantiates a new RestBuildCapabilities object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestBuildCapabilitiesWithDefaults() *RestBuildCapabilities {
	this := RestBuildCapabilities{}
	return &this
}

// GetBuildStatus returns the BuildStatus field value if set, zero value otherwise.
func (o *RestBuildCapabilities) GetBuildStatus() []string {
	if o == nil || IsNil(o.BuildStatus) {
		var ret []string
		return ret
	}
	return o.BuildStatus
}

// GetBuildStatusOk returns a tuple with the BuildStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestBuildCapabilities) GetBuildStatusOk() ([]string, bool) {
	if o == nil || IsNil(o.BuildStatus) {
		return nil, false
	}
	return o.BuildStatus, true
}

// HasBuildStatus returns a boolean if a field has been set.
func (o *RestBuildCapabilities) HasBuildStatus() bool {
	if o != nil && !IsNil(o.BuildStatus) {
		return true
	}

	return false
}

// SetBuildStatus gets a reference to the given []string and assigns it to the BuildStatus field.
func (o *RestBuildCapabilities) SetBuildStatus(v []string) {
	o.BuildStatus = v
}

func (o RestBuildCapabilities) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestBuildCapabilities) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BuildStatus) {
		toSerialize["buildStatus"] = o.BuildStatus
	}
	return toSerialize, nil
}

type NullableRestBuildCapabilities struct {
	value *RestBuildCapabilities
	isSet bool
}

func (v NullableRestBuildCapabilities) Get() *RestBuildCapabilities {
	return v.value
}

func (v *NullableRestBuildCapabilities) Set(val *RestBuildCapabilities) {
	v.value = val
	v.isSet = true
}

func (v NullableRestBuildCapabilities) IsSet() bool {
	return v.isSet
}

func (v *NullableRestBuildCapabilities) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestBuildCapabilities(val *RestBuildCapabilities) *NullableRestBuildCapabilities {
	return &NullableRestBuildCapabilities{value: val, isSet: true}
}

func (v NullableRestBuildCapabilities) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestBuildCapabilities) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


