/*
Bitbucket Data Center

This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).

API version: 9.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RestBuildStats type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestBuildStats{}

// RestBuildStats struct for RestBuildStats
type RestBuildStats struct {
	Cancelled *int32 `json:"cancelled,omitempty"`
	Failed *int32 `json:"failed,omitempty"`
	InProgress *int32 `json:"inProgress,omitempty"`
	Successful *int32 `json:"successful,omitempty"`
	Unknown *int32 `json:"unknown,omitempty"`
}

// NewRestBuildStats instantiates a new RestBuildStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestBuildStats() *RestBuildStats {
	this := RestBuildStats{}
	return &this
}

// NewRestBuildStatsWithDefaults instantiates a new RestBuildStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestBuildStatsWithDefaults() *RestBuildStats {
	this := RestBuildStats{}
	return &this
}

// GetCancelled returns the Cancelled field value if set, zero value otherwise.
func (o *RestBuildStats) GetCancelled() int32 {
	if o == nil || IsNil(o.Cancelled) {
		var ret int32
		return ret
	}
	return *o.Cancelled
}

// GetCancelledOk returns a tuple with the Cancelled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestBuildStats) GetCancelledOk() (*int32, bool) {
	if o == nil || IsNil(o.Cancelled) {
		return nil, false
	}
	return o.Cancelled, true
}

// HasCancelled returns a boolean if a field has been set.
func (o *RestBuildStats) HasCancelled() bool {
	if o != nil && !IsNil(o.Cancelled) {
		return true
	}

	return false
}

// SetCancelled gets a reference to the given int32 and assigns it to the Cancelled field.
func (o *RestBuildStats) SetCancelled(v int32) {
	o.Cancelled = &v
}

// GetFailed returns the Failed field value if set, zero value otherwise.
func (o *RestBuildStats) GetFailed() int32 {
	if o == nil || IsNil(o.Failed) {
		var ret int32
		return ret
	}
	return *o.Failed
}

// GetFailedOk returns a tuple with the Failed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestBuildStats) GetFailedOk() (*int32, bool) {
	if o == nil || IsNil(o.Failed) {
		return nil, false
	}
	return o.Failed, true
}

// HasFailed returns a boolean if a field has been set.
func (o *RestBuildStats) HasFailed() bool {
	if o != nil && !IsNil(o.Failed) {
		return true
	}

	return false
}

// SetFailed gets a reference to the given int32 and assigns it to the Failed field.
func (o *RestBuildStats) SetFailed(v int32) {
	o.Failed = &v
}

// GetInProgress returns the InProgress field value if set, zero value otherwise.
func (o *RestBuildStats) GetInProgress() int32 {
	if o == nil || IsNil(o.InProgress) {
		var ret int32
		return ret
	}
	return *o.InProgress
}

// GetInProgressOk returns a tuple with the InProgress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestBuildStats) GetInProgressOk() (*int32, bool) {
	if o == nil || IsNil(o.InProgress) {
		return nil, false
	}
	return o.InProgress, true
}

// HasInProgress returns a boolean if a field has been set.
func (o *RestBuildStats) HasInProgress() bool {
	if o != nil && !IsNil(o.InProgress) {
		return true
	}

	return false
}

// SetInProgress gets a reference to the given int32 and assigns it to the InProgress field.
func (o *RestBuildStats) SetInProgress(v int32) {
	o.InProgress = &v
}

// GetSuccessful returns the Successful field value if set, zero value otherwise.
func (o *RestBuildStats) GetSuccessful() int32 {
	if o == nil || IsNil(o.Successful) {
		var ret int32
		return ret
	}
	return *o.Successful
}

// GetSuccessfulOk returns a tuple with the Successful field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestBuildStats) GetSuccessfulOk() (*int32, bool) {
	if o == nil || IsNil(o.Successful) {
		return nil, false
	}
	return o.Successful, true
}

// HasSuccessful returns a boolean if a field has been set.
func (o *RestBuildStats) HasSuccessful() bool {
	if o != nil && !IsNil(o.Successful) {
		return true
	}

	return false
}

// SetSuccessful gets a reference to the given int32 and assigns it to the Successful field.
func (o *RestBuildStats) SetSuccessful(v int32) {
	o.Successful = &v
}

// GetUnknown returns the Unknown field value if set, zero value otherwise.
func (o *RestBuildStats) GetUnknown() int32 {
	if o == nil || IsNil(o.Unknown) {
		var ret int32
		return ret
	}
	return *o.Unknown
}

// GetUnknownOk returns a tuple with the Unknown field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestBuildStats) GetUnknownOk() (*int32, bool) {
	if o == nil || IsNil(o.Unknown) {
		return nil, false
	}
	return o.Unknown, true
}

// HasUnknown returns a boolean if a field has been set.
func (o *RestBuildStats) HasUnknown() bool {
	if o != nil && !IsNil(o.Unknown) {
		return true
	}

	return false
}

// SetUnknown gets a reference to the given int32 and assigns it to the Unknown field.
func (o *RestBuildStats) SetUnknown(v int32) {
	o.Unknown = &v
}

func (o RestBuildStats) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestBuildStats) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Cancelled) {
		toSerialize["cancelled"] = o.Cancelled
	}
	if !IsNil(o.Failed) {
		toSerialize["failed"] = o.Failed
	}
	if !IsNil(o.InProgress) {
		toSerialize["inProgress"] = o.InProgress
	}
	if !IsNil(o.Successful) {
		toSerialize["successful"] = o.Successful
	}
	if !IsNil(o.Unknown) {
		toSerialize["unknown"] = o.Unknown
	}
	return toSerialize, nil
}

type NullableRestBuildStats struct {
	value *RestBuildStats
	isSet bool
}

func (v NullableRestBuildStats) Get() *RestBuildStats {
	return v.value
}

func (v *NullableRestBuildStats) Set(val *RestBuildStats) {
	v.value = val
	v.isSet = true
}

func (v NullableRestBuildStats) IsSet() bool {
	return v.isSet
}

func (v *NullableRestBuildStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestBuildStats(val *RestBuildStats) *NullableRestBuildStats {
	return &NullableRestBuildStats{value: val, isSet: true}
}

func (v NullableRestBuildStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestBuildStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


