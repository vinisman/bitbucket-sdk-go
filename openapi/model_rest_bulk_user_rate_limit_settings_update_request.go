/*
Bitbucket Data Center

This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).

API version: 9.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RestBulkUserRateLimitSettingsUpdateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestBulkUserRateLimitSettingsUpdateRequest{}

// RestBulkUserRateLimitSettingsUpdateRequest struct for RestBulkUserRateLimitSettingsUpdateRequest
type RestBulkUserRateLimitSettingsUpdateRequest struct {
	Settings *RestBulkUserRateLimitSettingsUpdateRequestSettings `json:"settings,omitempty"`
	Usernames []string `json:"usernames,omitempty"`
	Whitelisted *bool `json:"whitelisted,omitempty"`
}

// NewRestBulkUserRateLimitSettingsUpdateRequest instantiates a new RestBulkUserRateLimitSettingsUpdateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestBulkUserRateLimitSettingsUpdateRequest() *RestBulkUserRateLimitSettingsUpdateRequest {
	this := RestBulkUserRateLimitSettingsUpdateRequest{}
	return &this
}

// NewRestBulkUserRateLimitSettingsUpdateRequestWithDefaults instantiates a new RestBulkUserRateLimitSettingsUpdateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestBulkUserRateLimitSettingsUpdateRequestWithDefaults() *RestBulkUserRateLimitSettingsUpdateRequest {
	this := RestBulkUserRateLimitSettingsUpdateRequest{}
	return &this
}

// GetSettings returns the Settings field value if set, zero value otherwise.
func (o *RestBulkUserRateLimitSettingsUpdateRequest) GetSettings() RestBulkUserRateLimitSettingsUpdateRequestSettings {
	if o == nil || IsNil(o.Settings) {
		var ret RestBulkUserRateLimitSettingsUpdateRequestSettings
		return ret
	}
	return *o.Settings
}

// GetSettingsOk returns a tuple with the Settings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestBulkUserRateLimitSettingsUpdateRequest) GetSettingsOk() (*RestBulkUserRateLimitSettingsUpdateRequestSettings, bool) {
	if o == nil || IsNil(o.Settings) {
		return nil, false
	}
	return o.Settings, true
}

// HasSettings returns a boolean if a field has been set.
func (o *RestBulkUserRateLimitSettingsUpdateRequest) HasSettings() bool {
	if o != nil && !IsNil(o.Settings) {
		return true
	}

	return false
}

// SetSettings gets a reference to the given RestBulkUserRateLimitSettingsUpdateRequestSettings and assigns it to the Settings field.
func (o *RestBulkUserRateLimitSettingsUpdateRequest) SetSettings(v RestBulkUserRateLimitSettingsUpdateRequestSettings) {
	o.Settings = &v
}

// GetUsernames returns the Usernames field value if set, zero value otherwise.
func (o *RestBulkUserRateLimitSettingsUpdateRequest) GetUsernames() []string {
	if o == nil || IsNil(o.Usernames) {
		var ret []string
		return ret
	}
	return o.Usernames
}

// GetUsernamesOk returns a tuple with the Usernames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestBulkUserRateLimitSettingsUpdateRequest) GetUsernamesOk() ([]string, bool) {
	if o == nil || IsNil(o.Usernames) {
		return nil, false
	}
	return o.Usernames, true
}

// HasUsernames returns a boolean if a field has been set.
func (o *RestBulkUserRateLimitSettingsUpdateRequest) HasUsernames() bool {
	if o != nil && !IsNil(o.Usernames) {
		return true
	}

	return false
}

// SetUsernames gets a reference to the given []string and assigns it to the Usernames field.
func (o *RestBulkUserRateLimitSettingsUpdateRequest) SetUsernames(v []string) {
	o.Usernames = v
}

// GetWhitelisted returns the Whitelisted field value if set, zero value otherwise.
func (o *RestBulkUserRateLimitSettingsUpdateRequest) GetWhitelisted() bool {
	if o == nil || IsNil(o.Whitelisted) {
		var ret bool
		return ret
	}
	return *o.Whitelisted
}

// GetWhitelistedOk returns a tuple with the Whitelisted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestBulkUserRateLimitSettingsUpdateRequest) GetWhitelistedOk() (*bool, bool) {
	if o == nil || IsNil(o.Whitelisted) {
		return nil, false
	}
	return o.Whitelisted, true
}

// HasWhitelisted returns a boolean if a field has been set.
func (o *RestBulkUserRateLimitSettingsUpdateRequest) HasWhitelisted() bool {
	if o != nil && !IsNil(o.Whitelisted) {
		return true
	}

	return false
}

// SetWhitelisted gets a reference to the given bool and assigns it to the Whitelisted field.
func (o *RestBulkUserRateLimitSettingsUpdateRequest) SetWhitelisted(v bool) {
	o.Whitelisted = &v
}

func (o RestBulkUserRateLimitSettingsUpdateRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestBulkUserRateLimitSettingsUpdateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Settings) {
		toSerialize["settings"] = o.Settings
	}
	if !IsNil(o.Usernames) {
		toSerialize["usernames"] = o.Usernames
	}
	if !IsNil(o.Whitelisted) {
		toSerialize["whitelisted"] = o.Whitelisted
	}
	return toSerialize, nil
}

type NullableRestBulkUserRateLimitSettingsUpdateRequest struct {
	value *RestBulkUserRateLimitSettingsUpdateRequest
	isSet bool
}

func (v NullableRestBulkUserRateLimitSettingsUpdateRequest) Get() *RestBulkUserRateLimitSettingsUpdateRequest {
	return v.value
}

func (v *NullableRestBulkUserRateLimitSettingsUpdateRequest) Set(val *RestBulkUserRateLimitSettingsUpdateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableRestBulkUserRateLimitSettingsUpdateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRestBulkUserRateLimitSettingsUpdateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestBulkUserRateLimitSettingsUpdateRequest(val *RestBulkUserRateLimitSettingsUpdateRequest) *NullableRestBulkUserRateLimitSettingsUpdateRequest {
	return &NullableRestBulkUserRateLimitSettingsUpdateRequest{value: val, isSet: true}
}

func (v NullableRestBulkUserRateLimitSettingsUpdateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestBulkUserRateLimitSettingsUpdateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


