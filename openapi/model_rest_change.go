/*
Bitbucket Data Center

This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).

API version: 9.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RestChange type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestChange{}

// RestChange struct for RestChange
type RestChange struct {
	Conflict *RestChangeConflict `json:"conflict,omitempty"`
	ContentId *string `json:"contentId,omitempty"`
	Executable *bool `json:"executable,omitempty"`
	FromContentId *string `json:"fromContentId,omitempty"`
	Links map[string]interface{} `json:"links,omitempty"`
	NodeType *string `json:"nodeType,omitempty"`
	Path *RestCommentAnchorPath `json:"path,omitempty"`
	PercentUnchanged *int32 `json:"percentUnchanged,omitempty"`
	SrcExecutable *bool `json:"srcExecutable,omitempty"`
	SrcPath *RestCommentAnchorPath `json:"srcPath,omitempty"`
	Type *string `json:"type,omitempty"`
}

// NewRestChange instantiates a new RestChange object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestChange() *RestChange {
	this := RestChange{}
	return &this
}

// NewRestChangeWithDefaults instantiates a new RestChange object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestChangeWithDefaults() *RestChange {
	this := RestChange{}
	return &this
}

// GetConflict returns the Conflict field value if set, zero value otherwise.
func (o *RestChange) GetConflict() RestChangeConflict {
	if o == nil || IsNil(o.Conflict) {
		var ret RestChangeConflict
		return ret
	}
	return *o.Conflict
}

// GetConflictOk returns a tuple with the Conflict field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestChange) GetConflictOk() (*RestChangeConflict, bool) {
	if o == nil || IsNil(o.Conflict) {
		return nil, false
	}
	return o.Conflict, true
}

// HasConflict returns a boolean if a field has been set.
func (o *RestChange) HasConflict() bool {
	if o != nil && !IsNil(o.Conflict) {
		return true
	}

	return false
}

// SetConflict gets a reference to the given RestChangeConflict and assigns it to the Conflict field.
func (o *RestChange) SetConflict(v RestChangeConflict) {
	o.Conflict = &v
}

// GetContentId returns the ContentId field value if set, zero value otherwise.
func (o *RestChange) GetContentId() string {
	if o == nil || IsNil(o.ContentId) {
		var ret string
		return ret
	}
	return *o.ContentId
}

// GetContentIdOk returns a tuple with the ContentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestChange) GetContentIdOk() (*string, bool) {
	if o == nil || IsNil(o.ContentId) {
		return nil, false
	}
	return o.ContentId, true
}

// HasContentId returns a boolean if a field has been set.
func (o *RestChange) HasContentId() bool {
	if o != nil && !IsNil(o.ContentId) {
		return true
	}

	return false
}

// SetContentId gets a reference to the given string and assigns it to the ContentId field.
func (o *RestChange) SetContentId(v string) {
	o.ContentId = &v
}

// GetExecutable returns the Executable field value if set, zero value otherwise.
func (o *RestChange) GetExecutable() bool {
	if o == nil || IsNil(o.Executable) {
		var ret bool
		return ret
	}
	return *o.Executable
}

// GetExecutableOk returns a tuple with the Executable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestChange) GetExecutableOk() (*bool, bool) {
	if o == nil || IsNil(o.Executable) {
		return nil, false
	}
	return o.Executable, true
}

// HasExecutable returns a boolean if a field has been set.
func (o *RestChange) HasExecutable() bool {
	if o != nil && !IsNil(o.Executable) {
		return true
	}

	return false
}

// SetExecutable gets a reference to the given bool and assigns it to the Executable field.
func (o *RestChange) SetExecutable(v bool) {
	o.Executable = &v
}

// GetFromContentId returns the FromContentId field value if set, zero value otherwise.
func (o *RestChange) GetFromContentId() string {
	if o == nil || IsNil(o.FromContentId) {
		var ret string
		return ret
	}
	return *o.FromContentId
}

// GetFromContentIdOk returns a tuple with the FromContentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestChange) GetFromContentIdOk() (*string, bool) {
	if o == nil || IsNil(o.FromContentId) {
		return nil, false
	}
	return o.FromContentId, true
}

// HasFromContentId returns a boolean if a field has been set.
func (o *RestChange) HasFromContentId() bool {
	if o != nil && !IsNil(o.FromContentId) {
		return true
	}

	return false
}

// SetFromContentId gets a reference to the given string and assigns it to the FromContentId field.
func (o *RestChange) SetFromContentId(v string) {
	o.FromContentId = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *RestChange) GetLinks() map[string]interface{} {
	if o == nil || IsNil(o.Links) {
		var ret map[string]interface{}
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestChange) GetLinksOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Links) {
		return map[string]interface{}{}, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *RestChange) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given map[string]interface{} and assigns it to the Links field.
func (o *RestChange) SetLinks(v map[string]interface{}) {
	o.Links = v
}

// GetNodeType returns the NodeType field value if set, zero value otherwise.
func (o *RestChange) GetNodeType() string {
	if o == nil || IsNil(o.NodeType) {
		var ret string
		return ret
	}
	return *o.NodeType
}

// GetNodeTypeOk returns a tuple with the NodeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestChange) GetNodeTypeOk() (*string, bool) {
	if o == nil || IsNil(o.NodeType) {
		return nil, false
	}
	return o.NodeType, true
}

// HasNodeType returns a boolean if a field has been set.
func (o *RestChange) HasNodeType() bool {
	if o != nil && !IsNil(o.NodeType) {
		return true
	}

	return false
}

// SetNodeType gets a reference to the given string and assigns it to the NodeType field.
func (o *RestChange) SetNodeType(v string) {
	o.NodeType = &v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *RestChange) GetPath() RestCommentAnchorPath {
	if o == nil || IsNil(o.Path) {
		var ret RestCommentAnchorPath
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestChange) GetPathOk() (*RestCommentAnchorPath, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *RestChange) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given RestCommentAnchorPath and assigns it to the Path field.
func (o *RestChange) SetPath(v RestCommentAnchorPath) {
	o.Path = &v
}

// GetPercentUnchanged returns the PercentUnchanged field value if set, zero value otherwise.
func (o *RestChange) GetPercentUnchanged() int32 {
	if o == nil || IsNil(o.PercentUnchanged) {
		var ret int32
		return ret
	}
	return *o.PercentUnchanged
}

// GetPercentUnchangedOk returns a tuple with the PercentUnchanged field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestChange) GetPercentUnchangedOk() (*int32, bool) {
	if o == nil || IsNil(o.PercentUnchanged) {
		return nil, false
	}
	return o.PercentUnchanged, true
}

// HasPercentUnchanged returns a boolean if a field has been set.
func (o *RestChange) HasPercentUnchanged() bool {
	if o != nil && !IsNil(o.PercentUnchanged) {
		return true
	}

	return false
}

// SetPercentUnchanged gets a reference to the given int32 and assigns it to the PercentUnchanged field.
func (o *RestChange) SetPercentUnchanged(v int32) {
	o.PercentUnchanged = &v
}

// GetSrcExecutable returns the SrcExecutable field value if set, zero value otherwise.
func (o *RestChange) GetSrcExecutable() bool {
	if o == nil || IsNil(o.SrcExecutable) {
		var ret bool
		return ret
	}
	return *o.SrcExecutable
}

// GetSrcExecutableOk returns a tuple with the SrcExecutable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestChange) GetSrcExecutableOk() (*bool, bool) {
	if o == nil || IsNil(o.SrcExecutable) {
		return nil, false
	}
	return o.SrcExecutable, true
}

// HasSrcExecutable returns a boolean if a field has been set.
func (o *RestChange) HasSrcExecutable() bool {
	if o != nil && !IsNil(o.SrcExecutable) {
		return true
	}

	return false
}

// SetSrcExecutable gets a reference to the given bool and assigns it to the SrcExecutable field.
func (o *RestChange) SetSrcExecutable(v bool) {
	o.SrcExecutable = &v
}

// GetSrcPath returns the SrcPath field value if set, zero value otherwise.
func (o *RestChange) GetSrcPath() RestCommentAnchorPath {
	if o == nil || IsNil(o.SrcPath) {
		var ret RestCommentAnchorPath
		return ret
	}
	return *o.SrcPath
}

// GetSrcPathOk returns a tuple with the SrcPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestChange) GetSrcPathOk() (*RestCommentAnchorPath, bool) {
	if o == nil || IsNil(o.SrcPath) {
		return nil, false
	}
	return o.SrcPath, true
}

// HasSrcPath returns a boolean if a field has been set.
func (o *RestChange) HasSrcPath() bool {
	if o != nil && !IsNil(o.SrcPath) {
		return true
	}

	return false
}

// SetSrcPath gets a reference to the given RestCommentAnchorPath and assigns it to the SrcPath field.
func (o *RestChange) SetSrcPath(v RestCommentAnchorPath) {
	o.SrcPath = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *RestChange) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestChange) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *RestChange) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *RestChange) SetType(v string) {
	o.Type = &v
}

func (o RestChange) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestChange) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Conflict) {
		toSerialize["conflict"] = o.Conflict
	}
	if !IsNil(o.ContentId) {
		toSerialize["contentId"] = o.ContentId
	}
	if !IsNil(o.Executable) {
		toSerialize["executable"] = o.Executable
	}
	if !IsNil(o.FromContentId) {
		toSerialize["fromContentId"] = o.FromContentId
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !IsNil(o.NodeType) {
		toSerialize["nodeType"] = o.NodeType
	}
	if !IsNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	if !IsNil(o.PercentUnchanged) {
		toSerialize["percentUnchanged"] = o.PercentUnchanged
	}
	if !IsNil(o.SrcExecutable) {
		toSerialize["srcExecutable"] = o.SrcExecutable
	}
	if !IsNil(o.SrcPath) {
		toSerialize["srcPath"] = o.SrcPath
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableRestChange struct {
	value *RestChange
	isSet bool
}

func (v NullableRestChange) Get() *RestChange {
	return v.value
}

func (v *NullableRestChange) Set(val *RestChange) {
	v.value = val
	v.isSet = true
}

func (v NullableRestChange) IsSet() bool {
	return v.isSet
}

func (v *NullableRestChange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestChange(val *RestChange) *NullableRestChange {
	return &NullableRestChange{value: val, isSet: true}
}

func (v NullableRestChange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestChange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


