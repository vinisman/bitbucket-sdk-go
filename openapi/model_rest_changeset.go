/*
Bitbucket Data Center

This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).

API version: 9.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RestChangeset type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestChangeset{}

// RestChangeset struct for RestChangeset
type RestChangeset struct {
	Changes *RestChangesetChanges `json:"changes,omitempty"`
	FromCommit *RestChangesetFromCommit `json:"fromCommit,omitempty"`
	Links map[string]interface{} `json:"links,omitempty"`
	Repository *RestChangesetRepository `json:"repository,omitempty"`
	ToCommit *RestChangesetToCommit `json:"toCommit,omitempty"`
}

// NewRestChangeset instantiates a new RestChangeset object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestChangeset() *RestChangeset {
	this := RestChangeset{}
	return &this
}

// NewRestChangesetWithDefaults instantiates a new RestChangeset object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestChangesetWithDefaults() *RestChangeset {
	this := RestChangeset{}
	return &this
}

// GetChanges returns the Changes field value if set, zero value otherwise.
func (o *RestChangeset) GetChanges() RestChangesetChanges {
	if o == nil || IsNil(o.Changes) {
		var ret RestChangesetChanges
		return ret
	}
	return *o.Changes
}

// GetChangesOk returns a tuple with the Changes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestChangeset) GetChangesOk() (*RestChangesetChanges, bool) {
	if o == nil || IsNil(o.Changes) {
		return nil, false
	}
	return o.Changes, true
}

// HasChanges returns a boolean if a field has been set.
func (o *RestChangeset) HasChanges() bool {
	if o != nil && !IsNil(o.Changes) {
		return true
	}

	return false
}

// SetChanges gets a reference to the given RestChangesetChanges and assigns it to the Changes field.
func (o *RestChangeset) SetChanges(v RestChangesetChanges) {
	o.Changes = &v
}

// GetFromCommit returns the FromCommit field value if set, zero value otherwise.
func (o *RestChangeset) GetFromCommit() RestChangesetFromCommit {
	if o == nil || IsNil(o.FromCommit) {
		var ret RestChangesetFromCommit
		return ret
	}
	return *o.FromCommit
}

// GetFromCommitOk returns a tuple with the FromCommit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestChangeset) GetFromCommitOk() (*RestChangesetFromCommit, bool) {
	if o == nil || IsNil(o.FromCommit) {
		return nil, false
	}
	return o.FromCommit, true
}

// HasFromCommit returns a boolean if a field has been set.
func (o *RestChangeset) HasFromCommit() bool {
	if o != nil && !IsNil(o.FromCommit) {
		return true
	}

	return false
}

// SetFromCommit gets a reference to the given RestChangesetFromCommit and assigns it to the FromCommit field.
func (o *RestChangeset) SetFromCommit(v RestChangesetFromCommit) {
	o.FromCommit = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *RestChangeset) GetLinks() map[string]interface{} {
	if o == nil || IsNil(o.Links) {
		var ret map[string]interface{}
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestChangeset) GetLinksOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Links) {
		return map[string]interface{}{}, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *RestChangeset) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given map[string]interface{} and assigns it to the Links field.
func (o *RestChangeset) SetLinks(v map[string]interface{}) {
	o.Links = v
}

// GetRepository returns the Repository field value if set, zero value otherwise.
func (o *RestChangeset) GetRepository() RestChangesetRepository {
	if o == nil || IsNil(o.Repository) {
		var ret RestChangesetRepository
		return ret
	}
	return *o.Repository
}

// GetRepositoryOk returns a tuple with the Repository field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestChangeset) GetRepositoryOk() (*RestChangesetRepository, bool) {
	if o == nil || IsNil(o.Repository) {
		return nil, false
	}
	return o.Repository, true
}

// HasRepository returns a boolean if a field has been set.
func (o *RestChangeset) HasRepository() bool {
	if o != nil && !IsNil(o.Repository) {
		return true
	}

	return false
}

// SetRepository gets a reference to the given RestChangesetRepository and assigns it to the Repository field.
func (o *RestChangeset) SetRepository(v RestChangesetRepository) {
	o.Repository = &v
}

// GetToCommit returns the ToCommit field value if set, zero value otherwise.
func (o *RestChangeset) GetToCommit() RestChangesetToCommit {
	if o == nil || IsNil(o.ToCommit) {
		var ret RestChangesetToCommit
		return ret
	}
	return *o.ToCommit
}

// GetToCommitOk returns a tuple with the ToCommit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestChangeset) GetToCommitOk() (*RestChangesetToCommit, bool) {
	if o == nil || IsNil(o.ToCommit) {
		return nil, false
	}
	return o.ToCommit, true
}

// HasToCommit returns a boolean if a field has been set.
func (o *RestChangeset) HasToCommit() bool {
	if o != nil && !IsNil(o.ToCommit) {
		return true
	}

	return false
}

// SetToCommit gets a reference to the given RestChangesetToCommit and assigns it to the ToCommit field.
func (o *RestChangeset) SetToCommit(v RestChangesetToCommit) {
	o.ToCommit = &v
}

func (o RestChangeset) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestChangeset) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Changes) {
		toSerialize["changes"] = o.Changes
	}
	if !IsNil(o.FromCommit) {
		toSerialize["fromCommit"] = o.FromCommit
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !IsNil(o.Repository) {
		toSerialize["repository"] = o.Repository
	}
	if !IsNil(o.ToCommit) {
		toSerialize["toCommit"] = o.ToCommit
	}
	return toSerialize, nil
}

type NullableRestChangeset struct {
	value *RestChangeset
	isSet bool
}

func (v NullableRestChangeset) Get() *RestChangeset {
	return v.value
}

func (v *NullableRestChangeset) Set(val *RestChangeset) {
	v.value = val
	v.isSet = true
}

func (v NullableRestChangeset) IsSet() bool {
	return v.isSet
}

func (v *NullableRestChangeset) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestChangeset(val *RestChangeset) *NullableRestChangeset {
	return &NullableRestChangeset{value: val, isSet: true}
}

func (v NullableRestChangeset) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestChangeset) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


