/*
Bitbucket Data Center

This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).

API version: 9.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RestChangesetRepositoryOriginProject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestChangesetRepositoryOriginProject{}

// RestChangesetRepositoryOriginProject struct for RestChangesetRepositoryOriginProject
type RestChangesetRepositoryOriginProject struct {
	Avatar *string `json:"avatar,omitempty"`
	AvatarUrl *string `json:"avatarUrl,omitempty"`
	Description *string `json:"description,omitempty"`
	Id *int32 `json:"id,omitempty"`
	Key string `json:"key"`
	Links map[string]interface{} `json:"links,omitempty"`
	Name *string `json:"name,omitempty" validate:"regexp=^[^~].*"`
	Public *bool `json:"public,omitempty"`
	Scope *string `json:"scope,omitempty"`
	Type *string `json:"type,omitempty"`
}

type _RestChangesetRepositoryOriginProject RestChangesetRepositoryOriginProject

// NewRestChangesetRepositoryOriginProject instantiates a new RestChangesetRepositoryOriginProject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestChangesetRepositoryOriginProject(key string) *RestChangesetRepositoryOriginProject {
	this := RestChangesetRepositoryOriginProject{}
	this.Key = key
	return &this
}

// NewRestChangesetRepositoryOriginProjectWithDefaults instantiates a new RestChangesetRepositoryOriginProject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestChangesetRepositoryOriginProjectWithDefaults() *RestChangesetRepositoryOriginProject {
	this := RestChangesetRepositoryOriginProject{}
	return &this
}

// GetAvatar returns the Avatar field value if set, zero value otherwise.
func (o *RestChangesetRepositoryOriginProject) GetAvatar() string {
	if o == nil || IsNil(o.Avatar) {
		var ret string
		return ret
	}
	return *o.Avatar
}

// GetAvatarOk returns a tuple with the Avatar field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestChangesetRepositoryOriginProject) GetAvatarOk() (*string, bool) {
	if o == nil || IsNil(o.Avatar) {
		return nil, false
	}
	return o.Avatar, true
}

// HasAvatar returns a boolean if a field has been set.
func (o *RestChangesetRepositoryOriginProject) HasAvatar() bool {
	if o != nil && !IsNil(o.Avatar) {
		return true
	}

	return false
}

// SetAvatar gets a reference to the given string and assigns it to the Avatar field.
func (o *RestChangesetRepositoryOriginProject) SetAvatar(v string) {
	o.Avatar = &v
}

// GetAvatarUrl returns the AvatarUrl field value if set, zero value otherwise.
func (o *RestChangesetRepositoryOriginProject) GetAvatarUrl() string {
	if o == nil || IsNil(o.AvatarUrl) {
		var ret string
		return ret
	}
	return *o.AvatarUrl
}

// GetAvatarUrlOk returns a tuple with the AvatarUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestChangesetRepositoryOriginProject) GetAvatarUrlOk() (*string, bool) {
	if o == nil || IsNil(o.AvatarUrl) {
		return nil, false
	}
	return o.AvatarUrl, true
}

// HasAvatarUrl returns a boolean if a field has been set.
func (o *RestChangesetRepositoryOriginProject) HasAvatarUrl() bool {
	if o != nil && !IsNil(o.AvatarUrl) {
		return true
	}

	return false
}

// SetAvatarUrl gets a reference to the given string and assigns it to the AvatarUrl field.
func (o *RestChangesetRepositoryOriginProject) SetAvatarUrl(v string) {
	o.AvatarUrl = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *RestChangesetRepositoryOriginProject) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestChangesetRepositoryOriginProject) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *RestChangesetRepositoryOriginProject) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *RestChangesetRepositoryOriginProject) SetDescription(v string) {
	o.Description = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RestChangesetRepositoryOriginProject) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestChangesetRepositoryOriginProject) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RestChangesetRepositoryOriginProject) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *RestChangesetRepositoryOriginProject) SetId(v int32) {
	o.Id = &v
}

// GetKey returns the Key field value
func (o *RestChangesetRepositoryOriginProject) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *RestChangesetRepositoryOriginProject) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *RestChangesetRepositoryOriginProject) SetKey(v string) {
	o.Key = v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *RestChangesetRepositoryOriginProject) GetLinks() map[string]interface{} {
	if o == nil || IsNil(o.Links) {
		var ret map[string]interface{}
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestChangesetRepositoryOriginProject) GetLinksOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Links) {
		return map[string]interface{}{}, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *RestChangesetRepositoryOriginProject) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given map[string]interface{} and assigns it to the Links field.
func (o *RestChangesetRepositoryOriginProject) SetLinks(v map[string]interface{}) {
	o.Links = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RestChangesetRepositoryOriginProject) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestChangesetRepositoryOriginProject) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RestChangesetRepositoryOriginProject) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RestChangesetRepositoryOriginProject) SetName(v string) {
	o.Name = &v
}

// GetPublic returns the Public field value if set, zero value otherwise.
func (o *RestChangesetRepositoryOriginProject) GetPublic() bool {
	if o == nil || IsNil(o.Public) {
		var ret bool
		return ret
	}
	return *o.Public
}

// GetPublicOk returns a tuple with the Public field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestChangesetRepositoryOriginProject) GetPublicOk() (*bool, bool) {
	if o == nil || IsNil(o.Public) {
		return nil, false
	}
	return o.Public, true
}

// HasPublic returns a boolean if a field has been set.
func (o *RestChangesetRepositoryOriginProject) HasPublic() bool {
	if o != nil && !IsNil(o.Public) {
		return true
	}

	return false
}

// SetPublic gets a reference to the given bool and assigns it to the Public field.
func (o *RestChangesetRepositoryOriginProject) SetPublic(v bool) {
	o.Public = &v
}

// GetScope returns the Scope field value if set, zero value otherwise.
func (o *RestChangesetRepositoryOriginProject) GetScope() string {
	if o == nil || IsNil(o.Scope) {
		var ret string
		return ret
	}
	return *o.Scope
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestChangesetRepositoryOriginProject) GetScopeOk() (*string, bool) {
	if o == nil || IsNil(o.Scope) {
		return nil, false
	}
	return o.Scope, true
}

// HasScope returns a boolean if a field has been set.
func (o *RestChangesetRepositoryOriginProject) HasScope() bool {
	if o != nil && !IsNil(o.Scope) {
		return true
	}

	return false
}

// SetScope gets a reference to the given string and assigns it to the Scope field.
func (o *RestChangesetRepositoryOriginProject) SetScope(v string) {
	o.Scope = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *RestChangesetRepositoryOriginProject) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestChangesetRepositoryOriginProject) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *RestChangesetRepositoryOriginProject) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *RestChangesetRepositoryOriginProject) SetType(v string) {
	o.Type = &v
}

func (o RestChangesetRepositoryOriginProject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestChangesetRepositoryOriginProject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Avatar) {
		toSerialize["avatar"] = o.Avatar
	}
	if !IsNil(o.AvatarUrl) {
		toSerialize["avatarUrl"] = o.AvatarUrl
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["key"] = o.Key
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Public) {
		toSerialize["public"] = o.Public
	}
	if !IsNil(o.Scope) {
		toSerialize["scope"] = o.Scope
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

func (o *RestChangesetRepositoryOriginProject) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"key",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRestChangesetRepositoryOriginProject := _RestChangesetRepositoryOriginProject{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRestChangesetRepositoryOriginProject)

	if err != nil {
		return err
	}

	*o = RestChangesetRepositoryOriginProject(varRestChangesetRepositoryOriginProject)

	return err
}

type NullableRestChangesetRepositoryOriginProject struct {
	value *RestChangesetRepositoryOriginProject
	isSet bool
}

func (v NullableRestChangesetRepositoryOriginProject) Get() *RestChangesetRepositoryOriginProject {
	return v.value
}

func (v *NullableRestChangesetRepositoryOriginProject) Set(val *RestChangesetRepositoryOriginProject) {
	v.value = val
	v.isSet = true
}

func (v NullableRestChangesetRepositoryOriginProject) IsSet() bool {
	return v.isSet
}

func (v *NullableRestChangesetRepositoryOriginProject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestChangesetRepositoryOriginProject(val *RestChangesetRepositoryOriginProject) *NullableRestChangesetRepositoryOriginProject {
	return &NullableRestChangesetRepositoryOriginProject{value: val, isSet: true}
}

func (v NullableRestChangesetRepositoryOriginProject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestChangesetRepositoryOriginProject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


