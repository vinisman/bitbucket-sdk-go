/*
Bitbucket Data Center

This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).

API version: 9.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RestClusterInformation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestClusterInformation{}

// RestClusterInformation struct for RestClusterInformation
type RestClusterInformation struct {
	LocalNode *RestClusterInformationLocalNode `json:"localNode,omitempty"`
	Nodes []RestClusterNode `json:"nodes,omitempty"`
	Running *bool `json:"running,omitempty"`
}

// NewRestClusterInformation instantiates a new RestClusterInformation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestClusterInformation() *RestClusterInformation {
	this := RestClusterInformation{}
	return &this
}

// NewRestClusterInformationWithDefaults instantiates a new RestClusterInformation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestClusterInformationWithDefaults() *RestClusterInformation {
	this := RestClusterInformation{}
	return &this
}

// GetLocalNode returns the LocalNode field value if set, zero value otherwise.
func (o *RestClusterInformation) GetLocalNode() RestClusterInformationLocalNode {
	if o == nil || IsNil(o.LocalNode) {
		var ret RestClusterInformationLocalNode
		return ret
	}
	return *o.LocalNode
}

// GetLocalNodeOk returns a tuple with the LocalNode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestClusterInformation) GetLocalNodeOk() (*RestClusterInformationLocalNode, bool) {
	if o == nil || IsNil(o.LocalNode) {
		return nil, false
	}
	return o.LocalNode, true
}

// HasLocalNode returns a boolean if a field has been set.
func (o *RestClusterInformation) HasLocalNode() bool {
	if o != nil && !IsNil(o.LocalNode) {
		return true
	}

	return false
}

// SetLocalNode gets a reference to the given RestClusterInformationLocalNode and assigns it to the LocalNode field.
func (o *RestClusterInformation) SetLocalNode(v RestClusterInformationLocalNode) {
	o.LocalNode = &v
}

// GetNodes returns the Nodes field value if set, zero value otherwise.
func (o *RestClusterInformation) GetNodes() []RestClusterNode {
	if o == nil || IsNil(o.Nodes) {
		var ret []RestClusterNode
		return ret
	}
	return o.Nodes
}

// GetNodesOk returns a tuple with the Nodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestClusterInformation) GetNodesOk() ([]RestClusterNode, bool) {
	if o == nil || IsNil(o.Nodes) {
		return nil, false
	}
	return o.Nodes, true
}

// HasNodes returns a boolean if a field has been set.
func (o *RestClusterInformation) HasNodes() bool {
	if o != nil && !IsNil(o.Nodes) {
		return true
	}

	return false
}

// SetNodes gets a reference to the given []RestClusterNode and assigns it to the Nodes field.
func (o *RestClusterInformation) SetNodes(v []RestClusterNode) {
	o.Nodes = v
}

// GetRunning returns the Running field value if set, zero value otherwise.
func (o *RestClusterInformation) GetRunning() bool {
	if o == nil || IsNil(o.Running) {
		var ret bool
		return ret
	}
	return *o.Running
}

// GetRunningOk returns a tuple with the Running field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestClusterInformation) GetRunningOk() (*bool, bool) {
	if o == nil || IsNil(o.Running) {
		return nil, false
	}
	return o.Running, true
}

// HasRunning returns a boolean if a field has been set.
func (o *RestClusterInformation) HasRunning() bool {
	if o != nil && !IsNil(o.Running) {
		return true
	}

	return false
}

// SetRunning gets a reference to the given bool and assigns it to the Running field.
func (o *RestClusterInformation) SetRunning(v bool) {
	o.Running = &v
}

func (o RestClusterInformation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestClusterInformation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LocalNode) {
		toSerialize["localNode"] = o.LocalNode
	}
	if !IsNil(o.Nodes) {
		toSerialize["nodes"] = o.Nodes
	}
	if !IsNil(o.Running) {
		toSerialize["running"] = o.Running
	}
	return toSerialize, nil
}

type NullableRestClusterInformation struct {
	value *RestClusterInformation
	isSet bool
}

func (v NullableRestClusterInformation) Get() *RestClusterInformation {
	return v.value
}

func (v *NullableRestClusterInformation) Set(val *RestClusterInformation) {
	v.value = val
	v.isSet = true
}

func (v NullableRestClusterInformation) IsSet() bool {
	return v.isSet
}

func (v *NullableRestClusterInformation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestClusterInformation(val *RestClusterInformation) *NullableRestClusterInformation {
	return &NullableRestClusterInformation{value: val, isSet: true}
}

func (v NullableRestClusterInformation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestClusterInformation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


