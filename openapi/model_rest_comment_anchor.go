/*
Bitbucket Data Center

This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).

API version: 9.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RestCommentAnchor type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestCommentAnchor{}

// RestCommentAnchor struct for RestCommentAnchor
type RestCommentAnchor struct {
	DiffType *string `json:"diffType,omitempty"`
	FileType *string `json:"fileType,omitempty"`
	FromHash *string `json:"fromHash,omitempty"`
	Line *int32 `json:"line,omitempty"`
	LineType *string `json:"lineType,omitempty"`
	MultilineMarker *RestCommentAnchorMultilineMarker `json:"multilineMarker,omitempty"`
	MultilineSpan *RestCommentAnchorMultilineSpan `json:"multilineSpan,omitempty"`
	Path *RestCommentAnchorPath `json:"path,omitempty"`
	PullRequest *RestCommentAnchorPullRequest `json:"pullRequest,omitempty"`
	SrcPath *RestCommentAnchorPath `json:"srcPath,omitempty"`
	ToHash *string `json:"toHash,omitempty"`
}

// NewRestCommentAnchor instantiates a new RestCommentAnchor object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestCommentAnchor() *RestCommentAnchor {
	this := RestCommentAnchor{}
	return &this
}

// NewRestCommentAnchorWithDefaults instantiates a new RestCommentAnchor object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestCommentAnchorWithDefaults() *RestCommentAnchor {
	this := RestCommentAnchor{}
	return &this
}

// GetDiffType returns the DiffType field value if set, zero value otherwise.
func (o *RestCommentAnchor) GetDiffType() string {
	if o == nil || IsNil(o.DiffType) {
		var ret string
		return ret
	}
	return *o.DiffType
}

// GetDiffTypeOk returns a tuple with the DiffType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestCommentAnchor) GetDiffTypeOk() (*string, bool) {
	if o == nil || IsNil(o.DiffType) {
		return nil, false
	}
	return o.DiffType, true
}

// HasDiffType returns a boolean if a field has been set.
func (o *RestCommentAnchor) HasDiffType() bool {
	if o != nil && !IsNil(o.DiffType) {
		return true
	}

	return false
}

// SetDiffType gets a reference to the given string and assigns it to the DiffType field.
func (o *RestCommentAnchor) SetDiffType(v string) {
	o.DiffType = &v
}

// GetFileType returns the FileType field value if set, zero value otherwise.
func (o *RestCommentAnchor) GetFileType() string {
	if o == nil || IsNil(o.FileType) {
		var ret string
		return ret
	}
	return *o.FileType
}

// GetFileTypeOk returns a tuple with the FileType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestCommentAnchor) GetFileTypeOk() (*string, bool) {
	if o == nil || IsNil(o.FileType) {
		return nil, false
	}
	return o.FileType, true
}

// HasFileType returns a boolean if a field has been set.
func (o *RestCommentAnchor) HasFileType() bool {
	if o != nil && !IsNil(o.FileType) {
		return true
	}

	return false
}

// SetFileType gets a reference to the given string and assigns it to the FileType field.
func (o *RestCommentAnchor) SetFileType(v string) {
	o.FileType = &v
}

// GetFromHash returns the FromHash field value if set, zero value otherwise.
func (o *RestCommentAnchor) GetFromHash() string {
	if o == nil || IsNil(o.FromHash) {
		var ret string
		return ret
	}
	return *o.FromHash
}

// GetFromHashOk returns a tuple with the FromHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestCommentAnchor) GetFromHashOk() (*string, bool) {
	if o == nil || IsNil(o.FromHash) {
		return nil, false
	}
	return o.FromHash, true
}

// HasFromHash returns a boolean if a field has been set.
func (o *RestCommentAnchor) HasFromHash() bool {
	if o != nil && !IsNil(o.FromHash) {
		return true
	}

	return false
}

// SetFromHash gets a reference to the given string and assigns it to the FromHash field.
func (o *RestCommentAnchor) SetFromHash(v string) {
	o.FromHash = &v
}

// GetLine returns the Line field value if set, zero value otherwise.
func (o *RestCommentAnchor) GetLine() int32 {
	if o == nil || IsNil(o.Line) {
		var ret int32
		return ret
	}
	return *o.Line
}

// GetLineOk returns a tuple with the Line field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestCommentAnchor) GetLineOk() (*int32, bool) {
	if o == nil || IsNil(o.Line) {
		return nil, false
	}
	return o.Line, true
}

// HasLine returns a boolean if a field has been set.
func (o *RestCommentAnchor) HasLine() bool {
	if o != nil && !IsNil(o.Line) {
		return true
	}

	return false
}

// SetLine gets a reference to the given int32 and assigns it to the Line field.
func (o *RestCommentAnchor) SetLine(v int32) {
	o.Line = &v
}

// GetLineType returns the LineType field value if set, zero value otherwise.
func (o *RestCommentAnchor) GetLineType() string {
	if o == nil || IsNil(o.LineType) {
		var ret string
		return ret
	}
	return *o.LineType
}

// GetLineTypeOk returns a tuple with the LineType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestCommentAnchor) GetLineTypeOk() (*string, bool) {
	if o == nil || IsNil(o.LineType) {
		return nil, false
	}
	return o.LineType, true
}

// HasLineType returns a boolean if a field has been set.
func (o *RestCommentAnchor) HasLineType() bool {
	if o != nil && !IsNil(o.LineType) {
		return true
	}

	return false
}

// SetLineType gets a reference to the given string and assigns it to the LineType field.
func (o *RestCommentAnchor) SetLineType(v string) {
	o.LineType = &v
}

// GetMultilineMarker returns the MultilineMarker field value if set, zero value otherwise.
func (o *RestCommentAnchor) GetMultilineMarker() RestCommentAnchorMultilineMarker {
	if o == nil || IsNil(o.MultilineMarker) {
		var ret RestCommentAnchorMultilineMarker
		return ret
	}
	return *o.MultilineMarker
}

// GetMultilineMarkerOk returns a tuple with the MultilineMarker field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestCommentAnchor) GetMultilineMarkerOk() (*RestCommentAnchorMultilineMarker, bool) {
	if o == nil || IsNil(o.MultilineMarker) {
		return nil, false
	}
	return o.MultilineMarker, true
}

// HasMultilineMarker returns a boolean if a field has been set.
func (o *RestCommentAnchor) HasMultilineMarker() bool {
	if o != nil && !IsNil(o.MultilineMarker) {
		return true
	}

	return false
}

// SetMultilineMarker gets a reference to the given RestCommentAnchorMultilineMarker and assigns it to the MultilineMarker field.
func (o *RestCommentAnchor) SetMultilineMarker(v RestCommentAnchorMultilineMarker) {
	o.MultilineMarker = &v
}

// GetMultilineSpan returns the MultilineSpan field value if set, zero value otherwise.
func (o *RestCommentAnchor) GetMultilineSpan() RestCommentAnchorMultilineSpan {
	if o == nil || IsNil(o.MultilineSpan) {
		var ret RestCommentAnchorMultilineSpan
		return ret
	}
	return *o.MultilineSpan
}

// GetMultilineSpanOk returns a tuple with the MultilineSpan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestCommentAnchor) GetMultilineSpanOk() (*RestCommentAnchorMultilineSpan, bool) {
	if o == nil || IsNil(o.MultilineSpan) {
		return nil, false
	}
	return o.MultilineSpan, true
}

// HasMultilineSpan returns a boolean if a field has been set.
func (o *RestCommentAnchor) HasMultilineSpan() bool {
	if o != nil && !IsNil(o.MultilineSpan) {
		return true
	}

	return false
}

// SetMultilineSpan gets a reference to the given RestCommentAnchorMultilineSpan and assigns it to the MultilineSpan field.
func (o *RestCommentAnchor) SetMultilineSpan(v RestCommentAnchorMultilineSpan) {
	o.MultilineSpan = &v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *RestCommentAnchor) GetPath() RestCommentAnchorPath {
	if o == nil || IsNil(o.Path) {
		var ret RestCommentAnchorPath
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestCommentAnchor) GetPathOk() (*RestCommentAnchorPath, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *RestCommentAnchor) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given RestCommentAnchorPath and assigns it to the Path field.
func (o *RestCommentAnchor) SetPath(v RestCommentAnchorPath) {
	o.Path = &v
}

// GetPullRequest returns the PullRequest field value if set, zero value otherwise.
func (o *RestCommentAnchor) GetPullRequest() RestCommentAnchorPullRequest {
	if o == nil || IsNil(o.PullRequest) {
		var ret RestCommentAnchorPullRequest
		return ret
	}
	return *o.PullRequest
}

// GetPullRequestOk returns a tuple with the PullRequest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestCommentAnchor) GetPullRequestOk() (*RestCommentAnchorPullRequest, bool) {
	if o == nil || IsNil(o.PullRequest) {
		return nil, false
	}
	return o.PullRequest, true
}

// HasPullRequest returns a boolean if a field has been set.
func (o *RestCommentAnchor) HasPullRequest() bool {
	if o != nil && !IsNil(o.PullRequest) {
		return true
	}

	return false
}

// SetPullRequest gets a reference to the given RestCommentAnchorPullRequest and assigns it to the PullRequest field.
func (o *RestCommentAnchor) SetPullRequest(v RestCommentAnchorPullRequest) {
	o.PullRequest = &v
}

// GetSrcPath returns the SrcPath field value if set, zero value otherwise.
func (o *RestCommentAnchor) GetSrcPath() RestCommentAnchorPath {
	if o == nil || IsNil(o.SrcPath) {
		var ret RestCommentAnchorPath
		return ret
	}
	return *o.SrcPath
}

// GetSrcPathOk returns a tuple with the SrcPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestCommentAnchor) GetSrcPathOk() (*RestCommentAnchorPath, bool) {
	if o == nil || IsNil(o.SrcPath) {
		return nil, false
	}
	return o.SrcPath, true
}

// HasSrcPath returns a boolean if a field has been set.
func (o *RestCommentAnchor) HasSrcPath() bool {
	if o != nil && !IsNil(o.SrcPath) {
		return true
	}

	return false
}

// SetSrcPath gets a reference to the given RestCommentAnchorPath and assigns it to the SrcPath field.
func (o *RestCommentAnchor) SetSrcPath(v RestCommentAnchorPath) {
	o.SrcPath = &v
}

// GetToHash returns the ToHash field value if set, zero value otherwise.
func (o *RestCommentAnchor) GetToHash() string {
	if o == nil || IsNil(o.ToHash) {
		var ret string
		return ret
	}
	return *o.ToHash
}

// GetToHashOk returns a tuple with the ToHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestCommentAnchor) GetToHashOk() (*string, bool) {
	if o == nil || IsNil(o.ToHash) {
		return nil, false
	}
	return o.ToHash, true
}

// HasToHash returns a boolean if a field has been set.
func (o *RestCommentAnchor) HasToHash() bool {
	if o != nil && !IsNil(o.ToHash) {
		return true
	}

	return false
}

// SetToHash gets a reference to the given string and assigns it to the ToHash field.
func (o *RestCommentAnchor) SetToHash(v string) {
	o.ToHash = &v
}

func (o RestCommentAnchor) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestCommentAnchor) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DiffType) {
		toSerialize["diffType"] = o.DiffType
	}
	if !IsNil(o.FileType) {
		toSerialize["fileType"] = o.FileType
	}
	if !IsNil(o.FromHash) {
		toSerialize["fromHash"] = o.FromHash
	}
	if !IsNil(o.Line) {
		toSerialize["line"] = o.Line
	}
	if !IsNil(o.LineType) {
		toSerialize["lineType"] = o.LineType
	}
	if !IsNil(o.MultilineMarker) {
		toSerialize["multilineMarker"] = o.MultilineMarker
	}
	if !IsNil(o.MultilineSpan) {
		toSerialize["multilineSpan"] = o.MultilineSpan
	}
	if !IsNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	if !IsNil(o.PullRequest) {
		toSerialize["pullRequest"] = o.PullRequest
	}
	if !IsNil(o.SrcPath) {
		toSerialize["srcPath"] = o.SrcPath
	}
	if !IsNil(o.ToHash) {
		toSerialize["toHash"] = o.ToHash
	}
	return toSerialize, nil
}

type NullableRestCommentAnchor struct {
	value *RestCommentAnchor
	isSet bool
}

func (v NullableRestCommentAnchor) Get() *RestCommentAnchor {
	return v.value
}

func (v *NullableRestCommentAnchor) Set(val *RestCommentAnchor) {
	v.value = val
	v.isSet = true
}

func (v NullableRestCommentAnchor) IsSet() bool {
	return v.isSet
}

func (v *NullableRestCommentAnchor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestCommentAnchor(val *RestCommentAnchor) *NullableRestCommentAnchor {
	return &NullableRestCommentAnchor{value: val, isSet: true}
}

func (v NullableRestCommentAnchor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestCommentAnchor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


