/*
Bitbucket Data Center

This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).

API version: 9.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RestCommentAnchorMultilineMarker type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestCommentAnchorMultilineMarker{}

// RestCommentAnchorMultilineMarker struct for RestCommentAnchorMultilineMarker
type RestCommentAnchorMultilineMarker struct {
	// The line number where the multiline comment will begin
	StartLine *int32 `json:"startLine,omitempty"`
	// The segment type of the start line of the multiline comment
	StartLineType string `json:"startLineType"`
}

type _RestCommentAnchorMultilineMarker RestCommentAnchorMultilineMarker

// NewRestCommentAnchorMultilineMarker instantiates a new RestCommentAnchorMultilineMarker object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestCommentAnchorMultilineMarker(startLineType string) *RestCommentAnchorMultilineMarker {
	this := RestCommentAnchorMultilineMarker{}
	this.StartLineType = startLineType
	return &this
}

// NewRestCommentAnchorMultilineMarkerWithDefaults instantiates a new RestCommentAnchorMultilineMarker object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestCommentAnchorMultilineMarkerWithDefaults() *RestCommentAnchorMultilineMarker {
	this := RestCommentAnchorMultilineMarker{}
	return &this
}

// GetStartLine returns the StartLine field value if set, zero value otherwise.
func (o *RestCommentAnchorMultilineMarker) GetStartLine() int32 {
	if o == nil || IsNil(o.StartLine) {
		var ret int32
		return ret
	}
	return *o.StartLine
}

// GetStartLineOk returns a tuple with the StartLine field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestCommentAnchorMultilineMarker) GetStartLineOk() (*int32, bool) {
	if o == nil || IsNil(o.StartLine) {
		return nil, false
	}
	return o.StartLine, true
}

// HasStartLine returns a boolean if a field has been set.
func (o *RestCommentAnchorMultilineMarker) HasStartLine() bool {
	if o != nil && !IsNil(o.StartLine) {
		return true
	}

	return false
}

// SetStartLine gets a reference to the given int32 and assigns it to the StartLine field.
func (o *RestCommentAnchorMultilineMarker) SetStartLine(v int32) {
	o.StartLine = &v
}

// GetStartLineType returns the StartLineType field value
func (o *RestCommentAnchorMultilineMarker) GetStartLineType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StartLineType
}

// GetStartLineTypeOk returns a tuple with the StartLineType field value
// and a boolean to check if the value has been set.
func (o *RestCommentAnchorMultilineMarker) GetStartLineTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartLineType, true
}

// SetStartLineType sets field value
func (o *RestCommentAnchorMultilineMarker) SetStartLineType(v string) {
	o.StartLineType = v
}

func (o RestCommentAnchorMultilineMarker) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestCommentAnchorMultilineMarker) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.StartLine) {
		toSerialize["startLine"] = o.StartLine
	}
	toSerialize["startLineType"] = o.StartLineType
	return toSerialize, nil
}

func (o *RestCommentAnchorMultilineMarker) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"startLineType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRestCommentAnchorMultilineMarker := _RestCommentAnchorMultilineMarker{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRestCommentAnchorMultilineMarker)

	if err != nil {
		return err
	}

	*o = RestCommentAnchorMultilineMarker(varRestCommentAnchorMultilineMarker)

	return err
}

type NullableRestCommentAnchorMultilineMarker struct {
	value *RestCommentAnchorMultilineMarker
	isSet bool
}

func (v NullableRestCommentAnchorMultilineMarker) Get() *RestCommentAnchorMultilineMarker {
	return v.value
}

func (v *NullableRestCommentAnchorMultilineMarker) Set(val *RestCommentAnchorMultilineMarker) {
	v.value = val
	v.isSet = true
}

func (v NullableRestCommentAnchorMultilineMarker) IsSet() bool {
	return v.isSet
}

func (v *NullableRestCommentAnchorMultilineMarker) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestCommentAnchorMultilineMarker(val *RestCommentAnchorMultilineMarker) *NullableRestCommentAnchorMultilineMarker {
	return &NullableRestCommentAnchorMultilineMarker{value: val, isSet: true}
}

func (v NullableRestCommentAnchorMultilineMarker) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestCommentAnchorMultilineMarker) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


