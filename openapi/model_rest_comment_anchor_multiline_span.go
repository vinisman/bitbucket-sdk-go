/*
Bitbucket Data Center

This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).

API version: 9.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RestCommentAnchorMultilineSpan type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestCommentAnchorMultilineSpan{}

// RestCommentAnchorMultilineSpan struct for RestCommentAnchorMultilineSpan
type RestCommentAnchorMultilineSpan struct {
	// The line number of the last line on the right-hand side of the diff that the comment spans
	DstSpanEnd *int32 `json:"dstSpanEnd,omitempty"`
	// The line number of the first line on the right-hand side of the diff that the comment spans
	DstSpanStart *int32 `json:"dstSpanStart,omitempty"`
	// The line number of the last line on the left-hand side of the diff that the comment spans
	SrcSpanEnd *int32 `json:"srcSpanEnd,omitempty"`
	// The line number of the first line on the left-hand side of the diff that the comment spans
	SrcSpanStart *int32 `json:"srcSpanStart,omitempty"`
}

// NewRestCommentAnchorMultilineSpan instantiates a new RestCommentAnchorMultilineSpan object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestCommentAnchorMultilineSpan() *RestCommentAnchorMultilineSpan {
	this := RestCommentAnchorMultilineSpan{}
	return &this
}

// NewRestCommentAnchorMultilineSpanWithDefaults instantiates a new RestCommentAnchorMultilineSpan object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestCommentAnchorMultilineSpanWithDefaults() *RestCommentAnchorMultilineSpan {
	this := RestCommentAnchorMultilineSpan{}
	return &this
}

// GetDstSpanEnd returns the DstSpanEnd field value if set, zero value otherwise.
func (o *RestCommentAnchorMultilineSpan) GetDstSpanEnd() int32 {
	if o == nil || IsNil(o.DstSpanEnd) {
		var ret int32
		return ret
	}
	return *o.DstSpanEnd
}

// GetDstSpanEndOk returns a tuple with the DstSpanEnd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestCommentAnchorMultilineSpan) GetDstSpanEndOk() (*int32, bool) {
	if o == nil || IsNil(o.DstSpanEnd) {
		return nil, false
	}
	return o.DstSpanEnd, true
}

// HasDstSpanEnd returns a boolean if a field has been set.
func (o *RestCommentAnchorMultilineSpan) HasDstSpanEnd() bool {
	if o != nil && !IsNil(o.DstSpanEnd) {
		return true
	}

	return false
}

// SetDstSpanEnd gets a reference to the given int32 and assigns it to the DstSpanEnd field.
func (o *RestCommentAnchorMultilineSpan) SetDstSpanEnd(v int32) {
	o.DstSpanEnd = &v
}

// GetDstSpanStart returns the DstSpanStart field value if set, zero value otherwise.
func (o *RestCommentAnchorMultilineSpan) GetDstSpanStart() int32 {
	if o == nil || IsNil(o.DstSpanStart) {
		var ret int32
		return ret
	}
	return *o.DstSpanStart
}

// GetDstSpanStartOk returns a tuple with the DstSpanStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestCommentAnchorMultilineSpan) GetDstSpanStartOk() (*int32, bool) {
	if o == nil || IsNil(o.DstSpanStart) {
		return nil, false
	}
	return o.DstSpanStart, true
}

// HasDstSpanStart returns a boolean if a field has been set.
func (o *RestCommentAnchorMultilineSpan) HasDstSpanStart() bool {
	if o != nil && !IsNil(o.DstSpanStart) {
		return true
	}

	return false
}

// SetDstSpanStart gets a reference to the given int32 and assigns it to the DstSpanStart field.
func (o *RestCommentAnchorMultilineSpan) SetDstSpanStart(v int32) {
	o.DstSpanStart = &v
}

// GetSrcSpanEnd returns the SrcSpanEnd field value if set, zero value otherwise.
func (o *RestCommentAnchorMultilineSpan) GetSrcSpanEnd() int32 {
	if o == nil || IsNil(o.SrcSpanEnd) {
		var ret int32
		return ret
	}
	return *o.SrcSpanEnd
}

// GetSrcSpanEndOk returns a tuple with the SrcSpanEnd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestCommentAnchorMultilineSpan) GetSrcSpanEndOk() (*int32, bool) {
	if o == nil || IsNil(o.SrcSpanEnd) {
		return nil, false
	}
	return o.SrcSpanEnd, true
}

// HasSrcSpanEnd returns a boolean if a field has been set.
func (o *RestCommentAnchorMultilineSpan) HasSrcSpanEnd() bool {
	if o != nil && !IsNil(o.SrcSpanEnd) {
		return true
	}

	return false
}

// SetSrcSpanEnd gets a reference to the given int32 and assigns it to the SrcSpanEnd field.
func (o *RestCommentAnchorMultilineSpan) SetSrcSpanEnd(v int32) {
	o.SrcSpanEnd = &v
}

// GetSrcSpanStart returns the SrcSpanStart field value if set, zero value otherwise.
func (o *RestCommentAnchorMultilineSpan) GetSrcSpanStart() int32 {
	if o == nil || IsNil(o.SrcSpanStart) {
		var ret int32
		return ret
	}
	return *o.SrcSpanStart
}

// GetSrcSpanStartOk returns a tuple with the SrcSpanStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestCommentAnchorMultilineSpan) GetSrcSpanStartOk() (*int32, bool) {
	if o == nil || IsNil(o.SrcSpanStart) {
		return nil, false
	}
	return o.SrcSpanStart, true
}

// HasSrcSpanStart returns a boolean if a field has been set.
func (o *RestCommentAnchorMultilineSpan) HasSrcSpanStart() bool {
	if o != nil && !IsNil(o.SrcSpanStart) {
		return true
	}

	return false
}

// SetSrcSpanStart gets a reference to the given int32 and assigns it to the SrcSpanStart field.
func (o *RestCommentAnchorMultilineSpan) SetSrcSpanStart(v int32) {
	o.SrcSpanStart = &v
}

func (o RestCommentAnchorMultilineSpan) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestCommentAnchorMultilineSpan) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DstSpanEnd) {
		toSerialize["dstSpanEnd"] = o.DstSpanEnd
	}
	if !IsNil(o.DstSpanStart) {
		toSerialize["dstSpanStart"] = o.DstSpanStart
	}
	if !IsNil(o.SrcSpanEnd) {
		toSerialize["srcSpanEnd"] = o.SrcSpanEnd
	}
	if !IsNil(o.SrcSpanStart) {
		toSerialize["srcSpanStart"] = o.SrcSpanStart
	}
	return toSerialize, nil
}

type NullableRestCommentAnchorMultilineSpan struct {
	value *RestCommentAnchorMultilineSpan
	isSet bool
}

func (v NullableRestCommentAnchorMultilineSpan) Get() *RestCommentAnchorMultilineSpan {
	return v.value
}

func (v *NullableRestCommentAnchorMultilineSpan) Set(val *RestCommentAnchorMultilineSpan) {
	v.value = val
	v.isSet = true
}

func (v NullableRestCommentAnchorMultilineSpan) IsSet() bool {
	return v.isSet
}

func (v *NullableRestCommentAnchorMultilineSpan) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestCommentAnchorMultilineSpan(val *RestCommentAnchorMultilineSpan) *NullableRestCommentAnchorMultilineSpan {
	return &NullableRestCommentAnchorMultilineSpan{value: val, isSet: true}
}

func (v NullableRestCommentAnchorMultilineSpan) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestCommentAnchorMultilineSpan) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


