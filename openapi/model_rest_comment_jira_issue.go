/*
Bitbucket Data Center

This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).

API version: 9.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RestCommentJiraIssue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestCommentJiraIssue{}

// RestCommentJiraIssue struct for RestCommentJiraIssue
type RestCommentJiraIssue struct {
	CommentId *int64 `json:"commentId,omitempty"`
	IssueKey *string `json:"issueKey,omitempty"`
}

// NewRestCommentJiraIssue instantiates a new RestCommentJiraIssue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestCommentJiraIssue() *RestCommentJiraIssue {
	this := RestCommentJiraIssue{}
	return &this
}

// NewRestCommentJiraIssueWithDefaults instantiates a new RestCommentJiraIssue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestCommentJiraIssueWithDefaults() *RestCommentJiraIssue {
	this := RestCommentJiraIssue{}
	return &this
}

// GetCommentId returns the CommentId field value if set, zero value otherwise.
func (o *RestCommentJiraIssue) GetCommentId() int64 {
	if o == nil || IsNil(o.CommentId) {
		var ret int64
		return ret
	}
	return *o.CommentId
}

// GetCommentIdOk returns a tuple with the CommentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestCommentJiraIssue) GetCommentIdOk() (*int64, bool) {
	if o == nil || IsNil(o.CommentId) {
		return nil, false
	}
	return o.CommentId, true
}

// HasCommentId returns a boolean if a field has been set.
func (o *RestCommentJiraIssue) HasCommentId() bool {
	if o != nil && !IsNil(o.CommentId) {
		return true
	}

	return false
}

// SetCommentId gets a reference to the given int64 and assigns it to the CommentId field.
func (o *RestCommentJiraIssue) SetCommentId(v int64) {
	o.CommentId = &v
}

// GetIssueKey returns the IssueKey field value if set, zero value otherwise.
func (o *RestCommentJiraIssue) GetIssueKey() string {
	if o == nil || IsNil(o.IssueKey) {
		var ret string
		return ret
	}
	return *o.IssueKey
}

// GetIssueKeyOk returns a tuple with the IssueKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestCommentJiraIssue) GetIssueKeyOk() (*string, bool) {
	if o == nil || IsNil(o.IssueKey) {
		return nil, false
	}
	return o.IssueKey, true
}

// HasIssueKey returns a boolean if a field has been set.
func (o *RestCommentJiraIssue) HasIssueKey() bool {
	if o != nil && !IsNil(o.IssueKey) {
		return true
	}

	return false
}

// SetIssueKey gets a reference to the given string and assigns it to the IssueKey field.
func (o *RestCommentJiraIssue) SetIssueKey(v string) {
	o.IssueKey = &v
}

func (o RestCommentJiraIssue) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestCommentJiraIssue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CommentId) {
		toSerialize["commentId"] = o.CommentId
	}
	if !IsNil(o.IssueKey) {
		toSerialize["issueKey"] = o.IssueKey
	}
	return toSerialize, nil
}

type NullableRestCommentJiraIssue struct {
	value *RestCommentJiraIssue
	isSet bool
}

func (v NullableRestCommentJiraIssue) Get() *RestCommentJiraIssue {
	return v.value
}

func (v *NullableRestCommentJiraIssue) Set(val *RestCommentJiraIssue) {
	v.value = val
	v.isSet = true
}

func (v NullableRestCommentJiraIssue) IsSet() bool {
	return v.isSet
}

func (v *NullableRestCommentJiraIssue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestCommentJiraIssue(val *RestCommentJiraIssue) *NullableRestCommentJiraIssue {
	return &NullableRestCommentJiraIssue{value: val, isSet: true}
}

func (v NullableRestCommentJiraIssue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestCommentJiraIssue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


