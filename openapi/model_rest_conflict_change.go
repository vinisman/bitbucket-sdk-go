/*
Bitbucket Data Center

This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).

API version: 9.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RestConflictChange type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestConflictChange{}

// RestConflictChange struct for RestConflictChange
type RestConflictChange struct {
	Path *RestCommentAnchorPath `json:"path,omitempty"`
	SrcPath *RestCommentAnchorPath `json:"srcPath,omitempty"`
	Type *string `json:"type,omitempty"`
}

// NewRestConflictChange instantiates a new RestConflictChange object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestConflictChange() *RestConflictChange {
	this := RestConflictChange{}
	return &this
}

// NewRestConflictChangeWithDefaults instantiates a new RestConflictChange object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestConflictChangeWithDefaults() *RestConflictChange {
	this := RestConflictChange{}
	return &this
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *RestConflictChange) GetPath() RestCommentAnchorPath {
	if o == nil || IsNil(o.Path) {
		var ret RestCommentAnchorPath
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestConflictChange) GetPathOk() (*RestCommentAnchorPath, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *RestConflictChange) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given RestCommentAnchorPath and assigns it to the Path field.
func (o *RestConflictChange) SetPath(v RestCommentAnchorPath) {
	o.Path = &v
}

// GetSrcPath returns the SrcPath field value if set, zero value otherwise.
func (o *RestConflictChange) GetSrcPath() RestCommentAnchorPath {
	if o == nil || IsNil(o.SrcPath) {
		var ret RestCommentAnchorPath
		return ret
	}
	return *o.SrcPath
}

// GetSrcPathOk returns a tuple with the SrcPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestConflictChange) GetSrcPathOk() (*RestCommentAnchorPath, bool) {
	if o == nil || IsNil(o.SrcPath) {
		return nil, false
	}
	return o.SrcPath, true
}

// HasSrcPath returns a boolean if a field has been set.
func (o *RestConflictChange) HasSrcPath() bool {
	if o != nil && !IsNil(o.SrcPath) {
		return true
	}

	return false
}

// SetSrcPath gets a reference to the given RestCommentAnchorPath and assigns it to the SrcPath field.
func (o *RestConflictChange) SetSrcPath(v RestCommentAnchorPath) {
	o.SrcPath = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *RestConflictChange) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestConflictChange) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *RestConflictChange) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *RestConflictChange) SetType(v string) {
	o.Type = &v
}

func (o RestConflictChange) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestConflictChange) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	if !IsNil(o.SrcPath) {
		toSerialize["srcPath"] = o.SrcPath
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableRestConflictChange struct {
	value *RestConflictChange
	isSet bool
}

func (v NullableRestConflictChange) Get() *RestConflictChange {
	return v.value
}

func (v *NullableRestConflictChange) Set(val *RestConflictChange) {
	v.value = val
	v.isSet = true
}

func (v NullableRestConflictChange) IsSet() bool {
	return v.isSet
}

func (v *NullableRestConflictChange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestConflictChange(val *RestConflictChange) *NullableRestConflictChange {
	return &NullableRestConflictChange{value: val, isSet: true}
}

func (v NullableRestConflictChange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestConflictChange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


