/*
Bitbucket Data Center

This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).

API version: 9.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RestDefaultTask type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestDefaultTask{}

// RestDefaultTask struct for RestDefaultTask
type RestDefaultTask struct {
	Description *string `json:"description,omitempty"`
	Html *string `json:"html,omitempty"`
	Id *int64 `json:"id,omitempty"`
}

// NewRestDefaultTask instantiates a new RestDefaultTask object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestDefaultTask() *RestDefaultTask {
	this := RestDefaultTask{}
	return &this
}

// NewRestDefaultTaskWithDefaults instantiates a new RestDefaultTask object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestDefaultTaskWithDefaults() *RestDefaultTask {
	this := RestDefaultTask{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *RestDefaultTask) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestDefaultTask) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *RestDefaultTask) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *RestDefaultTask) SetDescription(v string) {
	o.Description = &v
}

// GetHtml returns the Html field value if set, zero value otherwise.
func (o *RestDefaultTask) GetHtml() string {
	if o == nil || IsNil(o.Html) {
		var ret string
		return ret
	}
	return *o.Html
}

// GetHtmlOk returns a tuple with the Html field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestDefaultTask) GetHtmlOk() (*string, bool) {
	if o == nil || IsNil(o.Html) {
		return nil, false
	}
	return o.Html, true
}

// HasHtml returns a boolean if a field has been set.
func (o *RestDefaultTask) HasHtml() bool {
	if o != nil && !IsNil(o.Html) {
		return true
	}

	return false
}

// SetHtml gets a reference to the given string and assigns it to the Html field.
func (o *RestDefaultTask) SetHtml(v string) {
	o.Html = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RestDefaultTask) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestDefaultTask) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RestDefaultTask) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *RestDefaultTask) SetId(v int64) {
	o.Id = &v
}

func (o RestDefaultTask) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestDefaultTask) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Html) {
		toSerialize["html"] = o.Html
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	return toSerialize, nil
}

type NullableRestDefaultTask struct {
	value *RestDefaultTask
	isSet bool
}

func (v NullableRestDefaultTask) Get() *RestDefaultTask {
	return v.value
}

func (v *NullableRestDefaultTask) Set(val *RestDefaultTask) {
	v.value = val
	v.isSet = true
}

func (v NullableRestDefaultTask) IsSet() bool {
	return v.isSet
}

func (v *NullableRestDefaultTask) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestDefaultTask(val *RestDefaultTask) *NullableRestDefaultTask {
	return &NullableRestDefaultTask{value: val, isSet: true}
}

func (v NullableRestDefaultTask) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestDefaultTask) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


