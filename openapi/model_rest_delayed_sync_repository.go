/*
Bitbucket Data Center

This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).

API version: 9.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RestDelayedSyncRepository type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestDelayedSyncRepository{}

// RestDelayedSyncRepository struct for RestDelayedSyncRepository
type RestDelayedSyncRepository struct {
	ProjectKey *string `json:"projectKey,omitempty"`
	RepositoryId *string `json:"repositoryId,omitempty"`
	RepositorySlug *string `json:"repositorySlug,omitempty"`
}

// NewRestDelayedSyncRepository instantiates a new RestDelayedSyncRepository object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestDelayedSyncRepository() *RestDelayedSyncRepository {
	this := RestDelayedSyncRepository{}
	return &this
}

// NewRestDelayedSyncRepositoryWithDefaults instantiates a new RestDelayedSyncRepository object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestDelayedSyncRepositoryWithDefaults() *RestDelayedSyncRepository {
	this := RestDelayedSyncRepository{}
	return &this
}

// GetProjectKey returns the ProjectKey field value if set, zero value otherwise.
func (o *RestDelayedSyncRepository) GetProjectKey() string {
	if o == nil || IsNil(o.ProjectKey) {
		var ret string
		return ret
	}
	return *o.ProjectKey
}

// GetProjectKeyOk returns a tuple with the ProjectKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestDelayedSyncRepository) GetProjectKeyOk() (*string, bool) {
	if o == nil || IsNil(o.ProjectKey) {
		return nil, false
	}
	return o.ProjectKey, true
}

// HasProjectKey returns a boolean if a field has been set.
func (o *RestDelayedSyncRepository) HasProjectKey() bool {
	if o != nil && !IsNil(o.ProjectKey) {
		return true
	}

	return false
}

// SetProjectKey gets a reference to the given string and assigns it to the ProjectKey field.
func (o *RestDelayedSyncRepository) SetProjectKey(v string) {
	o.ProjectKey = &v
}

// GetRepositoryId returns the RepositoryId field value if set, zero value otherwise.
func (o *RestDelayedSyncRepository) GetRepositoryId() string {
	if o == nil || IsNil(o.RepositoryId) {
		var ret string
		return ret
	}
	return *o.RepositoryId
}

// GetRepositoryIdOk returns a tuple with the RepositoryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestDelayedSyncRepository) GetRepositoryIdOk() (*string, bool) {
	if o == nil || IsNil(o.RepositoryId) {
		return nil, false
	}
	return o.RepositoryId, true
}

// HasRepositoryId returns a boolean if a field has been set.
func (o *RestDelayedSyncRepository) HasRepositoryId() bool {
	if o != nil && !IsNil(o.RepositoryId) {
		return true
	}

	return false
}

// SetRepositoryId gets a reference to the given string and assigns it to the RepositoryId field.
func (o *RestDelayedSyncRepository) SetRepositoryId(v string) {
	o.RepositoryId = &v
}

// GetRepositorySlug returns the RepositorySlug field value if set, zero value otherwise.
func (o *RestDelayedSyncRepository) GetRepositorySlug() string {
	if o == nil || IsNil(o.RepositorySlug) {
		var ret string
		return ret
	}
	return *o.RepositorySlug
}

// GetRepositorySlugOk returns a tuple with the RepositorySlug field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestDelayedSyncRepository) GetRepositorySlugOk() (*string, bool) {
	if o == nil || IsNil(o.RepositorySlug) {
		return nil, false
	}
	return o.RepositorySlug, true
}

// HasRepositorySlug returns a boolean if a field has been set.
func (o *RestDelayedSyncRepository) HasRepositorySlug() bool {
	if o != nil && !IsNil(o.RepositorySlug) {
		return true
	}

	return false
}

// SetRepositorySlug gets a reference to the given string and assigns it to the RepositorySlug field.
func (o *RestDelayedSyncRepository) SetRepositorySlug(v string) {
	o.RepositorySlug = &v
}

func (o RestDelayedSyncRepository) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestDelayedSyncRepository) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ProjectKey) {
		toSerialize["projectKey"] = o.ProjectKey
	}
	if !IsNil(o.RepositoryId) {
		toSerialize["repositoryId"] = o.RepositoryId
	}
	if !IsNil(o.RepositorySlug) {
		toSerialize["repositorySlug"] = o.RepositorySlug
	}
	return toSerialize, nil
}

type NullableRestDelayedSyncRepository struct {
	value *RestDelayedSyncRepository
	isSet bool
}

func (v NullableRestDelayedSyncRepository) Get() *RestDelayedSyncRepository {
	return v.value
}

func (v *NullableRestDelayedSyncRepository) Set(val *RestDelayedSyncRepository) {
	v.value = val
	v.isSet = true
}

func (v NullableRestDelayedSyncRepository) IsSet() bool {
	return v.isSet
}

func (v *NullableRestDelayedSyncRepository) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestDelayedSyncRepository(val *RestDelayedSyncRepository) *NullableRestDelayedSyncRepository {
	return &NullableRestDelayedSyncRepository{value: val, isSet: true}
}

func (v NullableRestDelayedSyncRepository) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestDelayedSyncRepository) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


