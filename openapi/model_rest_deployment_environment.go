/*
Bitbucket Data Center

This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).

API version: 9.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RestDeploymentEnvironment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestDeploymentEnvironment{}

// RestDeploymentEnvironment struct for RestDeploymentEnvironment
type RestDeploymentEnvironment struct {
	DisplayName string `json:"displayName"`
	Key string `json:"key"`
	Type *string `json:"type,omitempty" validate:"regexp=DEVELOPMENT|TESTING|STAGING|PRODUCTION"`
	Url *string `json:"url,omitempty"`
}

type _RestDeploymentEnvironment RestDeploymentEnvironment

// NewRestDeploymentEnvironment instantiates a new RestDeploymentEnvironment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestDeploymentEnvironment(displayName string, key string) *RestDeploymentEnvironment {
	this := RestDeploymentEnvironment{}
	this.DisplayName = displayName
	this.Key = key
	return &this
}

// NewRestDeploymentEnvironmentWithDefaults instantiates a new RestDeploymentEnvironment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestDeploymentEnvironmentWithDefaults() *RestDeploymentEnvironment {
	this := RestDeploymentEnvironment{}
	return &this
}

// GetDisplayName returns the DisplayName field value
func (o *RestDeploymentEnvironment) GetDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
func (o *RestDeploymentEnvironment) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayName, true
}

// SetDisplayName sets field value
func (o *RestDeploymentEnvironment) SetDisplayName(v string) {
	o.DisplayName = v
}

// GetKey returns the Key field value
func (o *RestDeploymentEnvironment) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *RestDeploymentEnvironment) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *RestDeploymentEnvironment) SetKey(v string) {
	o.Key = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *RestDeploymentEnvironment) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestDeploymentEnvironment) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *RestDeploymentEnvironment) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *RestDeploymentEnvironment) SetType(v string) {
	o.Type = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *RestDeploymentEnvironment) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestDeploymentEnvironment) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *RestDeploymentEnvironment) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *RestDeploymentEnvironment) SetUrl(v string) {
	o.Url = &v
}

func (o RestDeploymentEnvironment) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestDeploymentEnvironment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["displayName"] = o.DisplayName
	toSerialize["key"] = o.Key
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	return toSerialize, nil
}

func (o *RestDeploymentEnvironment) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"displayName",
		"key",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRestDeploymentEnvironment := _RestDeploymentEnvironment{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRestDeploymentEnvironment)

	if err != nil {
		return err
	}

	*o = RestDeploymentEnvironment(varRestDeploymentEnvironment)

	return err
}

type NullableRestDeploymentEnvironment struct {
	value *RestDeploymentEnvironment
	isSet bool
}

func (v NullableRestDeploymentEnvironment) Get() *RestDeploymentEnvironment {
	return v.value
}

func (v *NullableRestDeploymentEnvironment) Set(val *RestDeploymentEnvironment) {
	v.value = val
	v.isSet = true
}

func (v NullableRestDeploymentEnvironment) IsSet() bool {
	return v.isSet
}

func (v *NullableRestDeploymentEnvironment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestDeploymentEnvironment(val *RestDeploymentEnvironment) *NullableRestDeploymentEnvironment {
	return &NullableRestDeploymentEnvironment{value: val, isSet: true}
}

func (v NullableRestDeploymentEnvironment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestDeploymentEnvironment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


