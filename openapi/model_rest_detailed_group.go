/*
Bitbucket Data Center

This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).

API version: 9.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RestDetailedGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestDetailedGroup{}

// RestDetailedGroup struct for RestDetailedGroup
type RestDetailedGroup struct {
	Deletable *bool `json:"deletable,omitempty"`
	Name *string `json:"name,omitempty"`
}

// NewRestDetailedGroup instantiates a new RestDetailedGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestDetailedGroup() *RestDetailedGroup {
	this := RestDetailedGroup{}
	return &this
}

// NewRestDetailedGroupWithDefaults instantiates a new RestDetailedGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestDetailedGroupWithDefaults() *RestDetailedGroup {
	this := RestDetailedGroup{}
	return &this
}

// GetDeletable returns the Deletable field value if set, zero value otherwise.
func (o *RestDetailedGroup) GetDeletable() bool {
	if o == nil || IsNil(o.Deletable) {
		var ret bool
		return ret
	}
	return *o.Deletable
}

// GetDeletableOk returns a tuple with the Deletable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestDetailedGroup) GetDeletableOk() (*bool, bool) {
	if o == nil || IsNil(o.Deletable) {
		return nil, false
	}
	return o.Deletable, true
}

// HasDeletable returns a boolean if a field has been set.
func (o *RestDetailedGroup) HasDeletable() bool {
	if o != nil && !IsNil(o.Deletable) {
		return true
	}

	return false
}

// SetDeletable gets a reference to the given bool and assigns it to the Deletable field.
func (o *RestDetailedGroup) SetDeletable(v bool) {
	o.Deletable = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RestDetailedGroup) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestDetailedGroup) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RestDetailedGroup) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RestDetailedGroup) SetName(v string) {
	o.Name = &v
}

func (o RestDetailedGroup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestDetailedGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Deletable) {
		toSerialize["deletable"] = o.Deletable
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return toSerialize, nil
}

type NullableRestDetailedGroup struct {
	value *RestDetailedGroup
	isSet bool
}

func (v NullableRestDetailedGroup) Get() *RestDetailedGroup {
	return v.value
}

func (v *NullableRestDetailedGroup) Set(val *RestDetailedGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableRestDetailedGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableRestDetailedGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestDetailedGroup(val *RestDetailedGroup) *NullableRestDetailedGroup {
	return &NullableRestDetailedGroup{value: val, isSet: true}
}

func (v NullableRestDetailedGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestDetailedGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


