/*
Bitbucket Data Center

This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).

API version: 9.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RestDetailedUser type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestDetailedUser{}

// RestDetailedUser struct for RestDetailedUser
type RestDetailedUser struct {
	Active *bool `json:"active,omitempty"`
	AvatarUrl *string `json:"avatarUrl,omitempty"`
	CreatedTimestamp *float32 `json:"createdTimestamp,omitempty"`
	Deletable *bool `json:"deletable,omitempty"`
	DirectoryName *string `json:"directoryName,omitempty"`
	DisplayName *string `json:"displayName,omitempty"`
	EmailAddress *string `json:"emailAddress,omitempty"`
	Id *int32 `json:"id,omitempty"`
	LastAuthenticationTimestamp *float32 `json:"lastAuthenticationTimestamp,omitempty"`
	Links map[string]interface{} `json:"links,omitempty"`
	MutableDetails *bool `json:"mutableDetails,omitempty"`
	MutableGroups *bool `json:"mutableGroups,omitempty"`
	Name *string `json:"name,omitempty"`
	Slug *string `json:"slug,omitempty"`
	Type *string `json:"type,omitempty"`
}

// NewRestDetailedUser instantiates a new RestDetailedUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestDetailedUser() *RestDetailedUser {
	this := RestDetailedUser{}
	return &this
}

// NewRestDetailedUserWithDefaults instantiates a new RestDetailedUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestDetailedUserWithDefaults() *RestDetailedUser {
	this := RestDetailedUser{}
	return &this
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *RestDetailedUser) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestDetailedUser) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *RestDetailedUser) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *RestDetailedUser) SetActive(v bool) {
	o.Active = &v
}

// GetAvatarUrl returns the AvatarUrl field value if set, zero value otherwise.
func (o *RestDetailedUser) GetAvatarUrl() string {
	if o == nil || IsNil(o.AvatarUrl) {
		var ret string
		return ret
	}
	return *o.AvatarUrl
}

// GetAvatarUrlOk returns a tuple with the AvatarUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestDetailedUser) GetAvatarUrlOk() (*string, bool) {
	if o == nil || IsNil(o.AvatarUrl) {
		return nil, false
	}
	return o.AvatarUrl, true
}

// HasAvatarUrl returns a boolean if a field has been set.
func (o *RestDetailedUser) HasAvatarUrl() bool {
	if o != nil && !IsNil(o.AvatarUrl) {
		return true
	}

	return false
}

// SetAvatarUrl gets a reference to the given string and assigns it to the AvatarUrl field.
func (o *RestDetailedUser) SetAvatarUrl(v string) {
	o.AvatarUrl = &v
}

// GetCreatedTimestamp returns the CreatedTimestamp field value if set, zero value otherwise.
func (o *RestDetailedUser) GetCreatedTimestamp() float32 {
	if o == nil || IsNil(o.CreatedTimestamp) {
		var ret float32
		return ret
	}
	return *o.CreatedTimestamp
}

// GetCreatedTimestampOk returns a tuple with the CreatedTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestDetailedUser) GetCreatedTimestampOk() (*float32, bool) {
	if o == nil || IsNil(o.CreatedTimestamp) {
		return nil, false
	}
	return o.CreatedTimestamp, true
}

// HasCreatedTimestamp returns a boolean if a field has been set.
func (o *RestDetailedUser) HasCreatedTimestamp() bool {
	if o != nil && !IsNil(o.CreatedTimestamp) {
		return true
	}

	return false
}

// SetCreatedTimestamp gets a reference to the given float32 and assigns it to the CreatedTimestamp field.
func (o *RestDetailedUser) SetCreatedTimestamp(v float32) {
	o.CreatedTimestamp = &v
}

// GetDeletable returns the Deletable field value if set, zero value otherwise.
func (o *RestDetailedUser) GetDeletable() bool {
	if o == nil || IsNil(o.Deletable) {
		var ret bool
		return ret
	}
	return *o.Deletable
}

// GetDeletableOk returns a tuple with the Deletable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestDetailedUser) GetDeletableOk() (*bool, bool) {
	if o == nil || IsNil(o.Deletable) {
		return nil, false
	}
	return o.Deletable, true
}

// HasDeletable returns a boolean if a field has been set.
func (o *RestDetailedUser) HasDeletable() bool {
	if o != nil && !IsNil(o.Deletable) {
		return true
	}

	return false
}

// SetDeletable gets a reference to the given bool and assigns it to the Deletable field.
func (o *RestDetailedUser) SetDeletable(v bool) {
	o.Deletable = &v
}

// GetDirectoryName returns the DirectoryName field value if set, zero value otherwise.
func (o *RestDetailedUser) GetDirectoryName() string {
	if o == nil || IsNil(o.DirectoryName) {
		var ret string
		return ret
	}
	return *o.DirectoryName
}

// GetDirectoryNameOk returns a tuple with the DirectoryName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestDetailedUser) GetDirectoryNameOk() (*string, bool) {
	if o == nil || IsNil(o.DirectoryName) {
		return nil, false
	}
	return o.DirectoryName, true
}

// HasDirectoryName returns a boolean if a field has been set.
func (o *RestDetailedUser) HasDirectoryName() bool {
	if o != nil && !IsNil(o.DirectoryName) {
		return true
	}

	return false
}

// SetDirectoryName gets a reference to the given string and assigns it to the DirectoryName field.
func (o *RestDetailedUser) SetDirectoryName(v string) {
	o.DirectoryName = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *RestDetailedUser) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestDetailedUser) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *RestDetailedUser) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *RestDetailedUser) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetEmailAddress returns the EmailAddress field value if set, zero value otherwise.
func (o *RestDetailedUser) GetEmailAddress() string {
	if o == nil || IsNil(o.EmailAddress) {
		var ret string
		return ret
	}
	return *o.EmailAddress
}

// GetEmailAddressOk returns a tuple with the EmailAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestDetailedUser) GetEmailAddressOk() (*string, bool) {
	if o == nil || IsNil(o.EmailAddress) {
		return nil, false
	}
	return o.EmailAddress, true
}

// HasEmailAddress returns a boolean if a field has been set.
func (o *RestDetailedUser) HasEmailAddress() bool {
	if o != nil && !IsNil(o.EmailAddress) {
		return true
	}

	return false
}

// SetEmailAddress gets a reference to the given string and assigns it to the EmailAddress field.
func (o *RestDetailedUser) SetEmailAddress(v string) {
	o.EmailAddress = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RestDetailedUser) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestDetailedUser) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RestDetailedUser) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *RestDetailedUser) SetId(v int32) {
	o.Id = &v
}

// GetLastAuthenticationTimestamp returns the LastAuthenticationTimestamp field value if set, zero value otherwise.
func (o *RestDetailedUser) GetLastAuthenticationTimestamp() float32 {
	if o == nil || IsNil(o.LastAuthenticationTimestamp) {
		var ret float32
		return ret
	}
	return *o.LastAuthenticationTimestamp
}

// GetLastAuthenticationTimestampOk returns a tuple with the LastAuthenticationTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestDetailedUser) GetLastAuthenticationTimestampOk() (*float32, bool) {
	if o == nil || IsNil(o.LastAuthenticationTimestamp) {
		return nil, false
	}
	return o.LastAuthenticationTimestamp, true
}

// HasLastAuthenticationTimestamp returns a boolean if a field has been set.
func (o *RestDetailedUser) HasLastAuthenticationTimestamp() bool {
	if o != nil && !IsNil(o.LastAuthenticationTimestamp) {
		return true
	}

	return false
}

// SetLastAuthenticationTimestamp gets a reference to the given float32 and assigns it to the LastAuthenticationTimestamp field.
func (o *RestDetailedUser) SetLastAuthenticationTimestamp(v float32) {
	o.LastAuthenticationTimestamp = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *RestDetailedUser) GetLinks() map[string]interface{} {
	if o == nil || IsNil(o.Links) {
		var ret map[string]interface{}
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestDetailedUser) GetLinksOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Links) {
		return map[string]interface{}{}, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *RestDetailedUser) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given map[string]interface{} and assigns it to the Links field.
func (o *RestDetailedUser) SetLinks(v map[string]interface{}) {
	o.Links = v
}

// GetMutableDetails returns the MutableDetails field value if set, zero value otherwise.
func (o *RestDetailedUser) GetMutableDetails() bool {
	if o == nil || IsNil(o.MutableDetails) {
		var ret bool
		return ret
	}
	return *o.MutableDetails
}

// GetMutableDetailsOk returns a tuple with the MutableDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestDetailedUser) GetMutableDetailsOk() (*bool, bool) {
	if o == nil || IsNil(o.MutableDetails) {
		return nil, false
	}
	return o.MutableDetails, true
}

// HasMutableDetails returns a boolean if a field has been set.
func (o *RestDetailedUser) HasMutableDetails() bool {
	if o != nil && !IsNil(o.MutableDetails) {
		return true
	}

	return false
}

// SetMutableDetails gets a reference to the given bool and assigns it to the MutableDetails field.
func (o *RestDetailedUser) SetMutableDetails(v bool) {
	o.MutableDetails = &v
}

// GetMutableGroups returns the MutableGroups field value if set, zero value otherwise.
func (o *RestDetailedUser) GetMutableGroups() bool {
	if o == nil || IsNil(o.MutableGroups) {
		var ret bool
		return ret
	}
	return *o.MutableGroups
}

// GetMutableGroupsOk returns a tuple with the MutableGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestDetailedUser) GetMutableGroupsOk() (*bool, bool) {
	if o == nil || IsNil(o.MutableGroups) {
		return nil, false
	}
	return o.MutableGroups, true
}

// HasMutableGroups returns a boolean if a field has been set.
func (o *RestDetailedUser) HasMutableGroups() bool {
	if o != nil && !IsNil(o.MutableGroups) {
		return true
	}

	return false
}

// SetMutableGroups gets a reference to the given bool and assigns it to the MutableGroups field.
func (o *RestDetailedUser) SetMutableGroups(v bool) {
	o.MutableGroups = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RestDetailedUser) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestDetailedUser) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RestDetailedUser) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RestDetailedUser) SetName(v string) {
	o.Name = &v
}

// GetSlug returns the Slug field value if set, zero value otherwise.
func (o *RestDetailedUser) GetSlug() string {
	if o == nil || IsNil(o.Slug) {
		var ret string
		return ret
	}
	return *o.Slug
}

// GetSlugOk returns a tuple with the Slug field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestDetailedUser) GetSlugOk() (*string, bool) {
	if o == nil || IsNil(o.Slug) {
		return nil, false
	}
	return o.Slug, true
}

// HasSlug returns a boolean if a field has been set.
func (o *RestDetailedUser) HasSlug() bool {
	if o != nil && !IsNil(o.Slug) {
		return true
	}

	return false
}

// SetSlug gets a reference to the given string and assigns it to the Slug field.
func (o *RestDetailedUser) SetSlug(v string) {
	o.Slug = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *RestDetailedUser) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestDetailedUser) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *RestDetailedUser) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *RestDetailedUser) SetType(v string) {
	o.Type = &v
}

func (o RestDetailedUser) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestDetailedUser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.AvatarUrl) {
		toSerialize["avatarUrl"] = o.AvatarUrl
	}
	if !IsNil(o.CreatedTimestamp) {
		toSerialize["createdTimestamp"] = o.CreatedTimestamp
	}
	if !IsNil(o.Deletable) {
		toSerialize["deletable"] = o.Deletable
	}
	if !IsNil(o.DirectoryName) {
		toSerialize["directoryName"] = o.DirectoryName
	}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.EmailAddress) {
		toSerialize["emailAddress"] = o.EmailAddress
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.LastAuthenticationTimestamp) {
		toSerialize["lastAuthenticationTimestamp"] = o.LastAuthenticationTimestamp
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !IsNil(o.MutableDetails) {
		toSerialize["mutableDetails"] = o.MutableDetails
	}
	if !IsNil(o.MutableGroups) {
		toSerialize["mutableGroups"] = o.MutableGroups
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Slug) {
		toSerialize["slug"] = o.Slug
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableRestDetailedUser struct {
	value *RestDetailedUser
	isSet bool
}

func (v NullableRestDetailedUser) Get() *RestDetailedUser {
	return v.value
}

func (v *NullableRestDetailedUser) Set(val *RestDetailedUser) {
	v.value = val
	v.isSet = true
}

func (v NullableRestDetailedUser) IsSet() bool {
	return v.isSet
}

func (v *NullableRestDetailedUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestDetailedUser(val *RestDetailedUser) *NullableRestDetailedUser {
	return &NullableRestDetailedUser{value: val, isSet: true}
}

func (v NullableRestDetailedUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestDetailedUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


