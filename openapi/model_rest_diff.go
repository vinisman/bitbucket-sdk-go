/*
Bitbucket Data Center

This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).

API version: 9.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RestDiff type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestDiff{}

// RestDiff struct for RestDiff
type RestDiff struct {
	Binary *bool `json:"binary,omitempty"`
	Destination *RestCommentAnchorPath `json:"destination,omitempty"`
	Hunks []RestDiffHunk `json:"hunks,omitempty"`
	LineComments []RestComment `json:"lineComments,omitempty"`
	Properties map[string]interface{} `json:"properties,omitempty"`
	Source *RestCommentAnchorPath `json:"source,omitempty"`
	Truncated *bool `json:"truncated,omitempty"`
}

// NewRestDiff instantiates a new RestDiff object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestDiff() *RestDiff {
	this := RestDiff{}
	return &this
}

// NewRestDiffWithDefaults instantiates a new RestDiff object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestDiffWithDefaults() *RestDiff {
	this := RestDiff{}
	return &this
}

// GetBinary returns the Binary field value if set, zero value otherwise.
func (o *RestDiff) GetBinary() bool {
	if o == nil || IsNil(o.Binary) {
		var ret bool
		return ret
	}
	return *o.Binary
}

// GetBinaryOk returns a tuple with the Binary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestDiff) GetBinaryOk() (*bool, bool) {
	if o == nil || IsNil(o.Binary) {
		return nil, false
	}
	return o.Binary, true
}

// HasBinary returns a boolean if a field has been set.
func (o *RestDiff) HasBinary() bool {
	if o != nil && !IsNil(o.Binary) {
		return true
	}

	return false
}

// SetBinary gets a reference to the given bool and assigns it to the Binary field.
func (o *RestDiff) SetBinary(v bool) {
	o.Binary = &v
}

// GetDestination returns the Destination field value if set, zero value otherwise.
func (o *RestDiff) GetDestination() RestCommentAnchorPath {
	if o == nil || IsNil(o.Destination) {
		var ret RestCommentAnchorPath
		return ret
	}
	return *o.Destination
}

// GetDestinationOk returns a tuple with the Destination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestDiff) GetDestinationOk() (*RestCommentAnchorPath, bool) {
	if o == nil || IsNil(o.Destination) {
		return nil, false
	}
	return o.Destination, true
}

// HasDestination returns a boolean if a field has been set.
func (o *RestDiff) HasDestination() bool {
	if o != nil && !IsNil(o.Destination) {
		return true
	}

	return false
}

// SetDestination gets a reference to the given RestCommentAnchorPath and assigns it to the Destination field.
func (o *RestDiff) SetDestination(v RestCommentAnchorPath) {
	o.Destination = &v
}

// GetHunks returns the Hunks field value if set, zero value otherwise.
func (o *RestDiff) GetHunks() []RestDiffHunk {
	if o == nil || IsNil(o.Hunks) {
		var ret []RestDiffHunk
		return ret
	}
	return o.Hunks
}

// GetHunksOk returns a tuple with the Hunks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestDiff) GetHunksOk() ([]RestDiffHunk, bool) {
	if o == nil || IsNil(o.Hunks) {
		return nil, false
	}
	return o.Hunks, true
}

// HasHunks returns a boolean if a field has been set.
func (o *RestDiff) HasHunks() bool {
	if o != nil && !IsNil(o.Hunks) {
		return true
	}

	return false
}

// SetHunks gets a reference to the given []RestDiffHunk and assigns it to the Hunks field.
func (o *RestDiff) SetHunks(v []RestDiffHunk) {
	o.Hunks = v
}

// GetLineComments returns the LineComments field value if set, zero value otherwise.
func (o *RestDiff) GetLineComments() []RestComment {
	if o == nil || IsNil(o.LineComments) {
		var ret []RestComment
		return ret
	}
	return o.LineComments
}

// GetLineCommentsOk returns a tuple with the LineComments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestDiff) GetLineCommentsOk() ([]RestComment, bool) {
	if o == nil || IsNil(o.LineComments) {
		return nil, false
	}
	return o.LineComments, true
}

// HasLineComments returns a boolean if a field has been set.
func (o *RestDiff) HasLineComments() bool {
	if o != nil && !IsNil(o.LineComments) {
		return true
	}

	return false
}

// SetLineComments gets a reference to the given []RestComment and assigns it to the LineComments field.
func (o *RestDiff) SetLineComments(v []RestComment) {
	o.LineComments = v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *RestDiff) GetProperties() map[string]interface{} {
	if o == nil || IsNil(o.Properties) {
		var ret map[string]interface{}
		return ret
	}
	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestDiff) GetPropertiesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Properties) {
		return map[string]interface{}{}, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *RestDiff) HasProperties() bool {
	if o != nil && !IsNil(o.Properties) {
		return true
	}

	return false
}

// SetProperties gets a reference to the given map[string]interface{} and assigns it to the Properties field.
func (o *RestDiff) SetProperties(v map[string]interface{}) {
	o.Properties = v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *RestDiff) GetSource() RestCommentAnchorPath {
	if o == nil || IsNil(o.Source) {
		var ret RestCommentAnchorPath
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestDiff) GetSourceOk() (*RestCommentAnchorPath, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *RestDiff) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given RestCommentAnchorPath and assigns it to the Source field.
func (o *RestDiff) SetSource(v RestCommentAnchorPath) {
	o.Source = &v
}

// GetTruncated returns the Truncated field value if set, zero value otherwise.
func (o *RestDiff) GetTruncated() bool {
	if o == nil || IsNil(o.Truncated) {
		var ret bool
		return ret
	}
	return *o.Truncated
}

// GetTruncatedOk returns a tuple with the Truncated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestDiff) GetTruncatedOk() (*bool, bool) {
	if o == nil || IsNil(o.Truncated) {
		return nil, false
	}
	return o.Truncated, true
}

// HasTruncated returns a boolean if a field has been set.
func (o *RestDiff) HasTruncated() bool {
	if o != nil && !IsNil(o.Truncated) {
		return true
	}

	return false
}

// SetTruncated gets a reference to the given bool and assigns it to the Truncated field.
func (o *RestDiff) SetTruncated(v bool) {
	o.Truncated = &v
}

func (o RestDiff) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestDiff) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Binary) {
		toSerialize["binary"] = o.Binary
	}
	if !IsNil(o.Destination) {
		toSerialize["destination"] = o.Destination
	}
	if !IsNil(o.Hunks) {
		toSerialize["hunks"] = o.Hunks
	}
	if !IsNil(o.LineComments) {
		toSerialize["lineComments"] = o.LineComments
	}
	if !IsNil(o.Properties) {
		toSerialize["properties"] = o.Properties
	}
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	if !IsNil(o.Truncated) {
		toSerialize["truncated"] = o.Truncated
	}
	return toSerialize, nil
}

type NullableRestDiff struct {
	value *RestDiff
	isSet bool
}

func (v NullableRestDiff) Get() *RestDiff {
	return v.value
}

func (v *NullableRestDiff) Set(val *RestDiff) {
	v.value = val
	v.isSet = true
}

func (v NullableRestDiff) IsSet() bool {
	return v.isSet
}

func (v *NullableRestDiff) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestDiff(val *RestDiff) *NullableRestDiff {
	return &NullableRestDiff{value: val, isSet: true}
}

func (v NullableRestDiff) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestDiff) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


