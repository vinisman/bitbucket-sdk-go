/*
Bitbucket Data Center

This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).

API version: 9.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RestDiffLine type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestDiffLine{}

// RestDiffLine struct for RestDiffLine
type RestDiffLine struct {
	CommentIds []int64 `json:"commentIds,omitempty"`
	ConflictMarker *string `json:"conflictMarker,omitempty"`
	Destination *int32 `json:"destination,omitempty"`
	Line *string `json:"line,omitempty"`
	Source *int32 `json:"source,omitempty"`
	Truncated *bool `json:"truncated,omitempty"`
}

// NewRestDiffLine instantiates a new RestDiffLine object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestDiffLine() *RestDiffLine {
	this := RestDiffLine{}
	return &this
}

// NewRestDiffLineWithDefaults instantiates a new RestDiffLine object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestDiffLineWithDefaults() *RestDiffLine {
	this := RestDiffLine{}
	return &this
}

// GetCommentIds returns the CommentIds field value if set, zero value otherwise.
func (o *RestDiffLine) GetCommentIds() []int64 {
	if o == nil || IsNil(o.CommentIds) {
		var ret []int64
		return ret
	}
	return o.CommentIds
}

// GetCommentIdsOk returns a tuple with the CommentIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestDiffLine) GetCommentIdsOk() ([]int64, bool) {
	if o == nil || IsNil(o.CommentIds) {
		return nil, false
	}
	return o.CommentIds, true
}

// HasCommentIds returns a boolean if a field has been set.
func (o *RestDiffLine) HasCommentIds() bool {
	if o != nil && !IsNil(o.CommentIds) {
		return true
	}

	return false
}

// SetCommentIds gets a reference to the given []int64 and assigns it to the CommentIds field.
func (o *RestDiffLine) SetCommentIds(v []int64) {
	o.CommentIds = v
}

// GetConflictMarker returns the ConflictMarker field value if set, zero value otherwise.
func (o *RestDiffLine) GetConflictMarker() string {
	if o == nil || IsNil(o.ConflictMarker) {
		var ret string
		return ret
	}
	return *o.ConflictMarker
}

// GetConflictMarkerOk returns a tuple with the ConflictMarker field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestDiffLine) GetConflictMarkerOk() (*string, bool) {
	if o == nil || IsNil(o.ConflictMarker) {
		return nil, false
	}
	return o.ConflictMarker, true
}

// HasConflictMarker returns a boolean if a field has been set.
func (o *RestDiffLine) HasConflictMarker() bool {
	if o != nil && !IsNil(o.ConflictMarker) {
		return true
	}

	return false
}

// SetConflictMarker gets a reference to the given string and assigns it to the ConflictMarker field.
func (o *RestDiffLine) SetConflictMarker(v string) {
	o.ConflictMarker = &v
}

// GetDestination returns the Destination field value if set, zero value otherwise.
func (o *RestDiffLine) GetDestination() int32 {
	if o == nil || IsNil(o.Destination) {
		var ret int32
		return ret
	}
	return *o.Destination
}

// GetDestinationOk returns a tuple with the Destination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestDiffLine) GetDestinationOk() (*int32, bool) {
	if o == nil || IsNil(o.Destination) {
		return nil, false
	}
	return o.Destination, true
}

// HasDestination returns a boolean if a field has been set.
func (o *RestDiffLine) HasDestination() bool {
	if o != nil && !IsNil(o.Destination) {
		return true
	}

	return false
}

// SetDestination gets a reference to the given int32 and assigns it to the Destination field.
func (o *RestDiffLine) SetDestination(v int32) {
	o.Destination = &v
}

// GetLine returns the Line field value if set, zero value otherwise.
func (o *RestDiffLine) GetLine() string {
	if o == nil || IsNil(o.Line) {
		var ret string
		return ret
	}
	return *o.Line
}

// GetLineOk returns a tuple with the Line field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestDiffLine) GetLineOk() (*string, bool) {
	if o == nil || IsNil(o.Line) {
		return nil, false
	}
	return o.Line, true
}

// HasLine returns a boolean if a field has been set.
func (o *RestDiffLine) HasLine() bool {
	if o != nil && !IsNil(o.Line) {
		return true
	}

	return false
}

// SetLine gets a reference to the given string and assigns it to the Line field.
func (o *RestDiffLine) SetLine(v string) {
	o.Line = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *RestDiffLine) GetSource() int32 {
	if o == nil || IsNil(o.Source) {
		var ret int32
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestDiffLine) GetSourceOk() (*int32, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *RestDiffLine) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given int32 and assigns it to the Source field.
func (o *RestDiffLine) SetSource(v int32) {
	o.Source = &v
}

// GetTruncated returns the Truncated field value if set, zero value otherwise.
func (o *RestDiffLine) GetTruncated() bool {
	if o == nil || IsNil(o.Truncated) {
		var ret bool
		return ret
	}
	return *o.Truncated
}

// GetTruncatedOk returns a tuple with the Truncated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestDiffLine) GetTruncatedOk() (*bool, bool) {
	if o == nil || IsNil(o.Truncated) {
		return nil, false
	}
	return o.Truncated, true
}

// HasTruncated returns a boolean if a field has been set.
func (o *RestDiffLine) HasTruncated() bool {
	if o != nil && !IsNil(o.Truncated) {
		return true
	}

	return false
}

// SetTruncated gets a reference to the given bool and assigns it to the Truncated field.
func (o *RestDiffLine) SetTruncated(v bool) {
	o.Truncated = &v
}

func (o RestDiffLine) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestDiffLine) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CommentIds) {
		toSerialize["commentIds"] = o.CommentIds
	}
	if !IsNil(o.ConflictMarker) {
		toSerialize["conflictMarker"] = o.ConflictMarker
	}
	if !IsNil(o.Destination) {
		toSerialize["destination"] = o.Destination
	}
	if !IsNil(o.Line) {
		toSerialize["line"] = o.Line
	}
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	if !IsNil(o.Truncated) {
		toSerialize["truncated"] = o.Truncated
	}
	return toSerialize, nil
}

type NullableRestDiffLine struct {
	value *RestDiffLine
	isSet bool
}

func (v NullableRestDiffLine) Get() *RestDiffLine {
	return v.value
}

func (v *NullableRestDiffLine) Set(val *RestDiffLine) {
	v.value = val
	v.isSet = true
}

func (v NullableRestDiffLine) IsSet() bool {
	return v.isSet
}

func (v *NullableRestDiffLine) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestDiffLine(val *RestDiffLine) *NullableRestDiffLine {
	return &NullableRestDiffLine{value: val, isSet: true}
}

func (v NullableRestDiffLine) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestDiffLine) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


