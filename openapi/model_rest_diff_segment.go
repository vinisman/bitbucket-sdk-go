/*
Bitbucket Data Center

This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).

API version: 9.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RestDiffSegment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestDiffSegment{}

// RestDiffSegment struct for RestDiffSegment
type RestDiffSegment struct {
	Lines []RestDiffLine `json:"lines,omitempty"`
	Truncated *bool `json:"truncated,omitempty"`
	Type *string `json:"type,omitempty"`
}

// NewRestDiffSegment instantiates a new RestDiffSegment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestDiffSegment() *RestDiffSegment {
	this := RestDiffSegment{}
	return &this
}

// NewRestDiffSegmentWithDefaults instantiates a new RestDiffSegment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestDiffSegmentWithDefaults() *RestDiffSegment {
	this := RestDiffSegment{}
	return &this
}

// GetLines returns the Lines field value if set, zero value otherwise.
func (o *RestDiffSegment) GetLines() []RestDiffLine {
	if o == nil || IsNil(o.Lines) {
		var ret []RestDiffLine
		return ret
	}
	return o.Lines
}

// GetLinesOk returns a tuple with the Lines field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestDiffSegment) GetLinesOk() ([]RestDiffLine, bool) {
	if o == nil || IsNil(o.Lines) {
		return nil, false
	}
	return o.Lines, true
}

// HasLines returns a boolean if a field has been set.
func (o *RestDiffSegment) HasLines() bool {
	if o != nil && !IsNil(o.Lines) {
		return true
	}

	return false
}

// SetLines gets a reference to the given []RestDiffLine and assigns it to the Lines field.
func (o *RestDiffSegment) SetLines(v []RestDiffLine) {
	o.Lines = v
}

// GetTruncated returns the Truncated field value if set, zero value otherwise.
func (o *RestDiffSegment) GetTruncated() bool {
	if o == nil || IsNil(o.Truncated) {
		var ret bool
		return ret
	}
	return *o.Truncated
}

// GetTruncatedOk returns a tuple with the Truncated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestDiffSegment) GetTruncatedOk() (*bool, bool) {
	if o == nil || IsNil(o.Truncated) {
		return nil, false
	}
	return o.Truncated, true
}

// HasTruncated returns a boolean if a field has been set.
func (o *RestDiffSegment) HasTruncated() bool {
	if o != nil && !IsNil(o.Truncated) {
		return true
	}

	return false
}

// SetTruncated gets a reference to the given bool and assigns it to the Truncated field.
func (o *RestDiffSegment) SetTruncated(v bool) {
	o.Truncated = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *RestDiffSegment) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestDiffSegment) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *RestDiffSegment) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *RestDiffSegment) SetType(v string) {
	o.Type = &v
}

func (o RestDiffSegment) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestDiffSegment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Lines) {
		toSerialize["lines"] = o.Lines
	}
	if !IsNil(o.Truncated) {
		toSerialize["truncated"] = o.Truncated
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableRestDiffSegment struct {
	value *RestDiffSegment
	isSet bool
}

func (v NullableRestDiffSegment) Get() *RestDiffSegment {
	return v.value
}

func (v *NullableRestDiffSegment) Set(val *RestDiffSegment) {
	v.value = val
	v.isSet = true
}

func (v NullableRestDiffSegment) IsSet() bool {
	return v.isSet
}

func (v *NullableRestDiffSegment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestDiffSegment(val *RestDiffSegment) *NullableRestDiffSegment {
	return &NullableRestDiffSegment{value: val, isSet: true}
}

func (v NullableRestDiffSegment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestDiffSegment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


