/*
Bitbucket Data Center

This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).

API version: 9.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RestErrors type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestErrors{}

// RestErrors struct for RestErrors
type RestErrors struct {
	Errors []RestErrorMessage `json:"errors,omitempty"`
}

// NewRestErrors instantiates a new RestErrors object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestErrors() *RestErrors {
	this := RestErrors{}
	return &this
}

// NewRestErrorsWithDefaults instantiates a new RestErrors object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestErrorsWithDefaults() *RestErrors {
	this := RestErrors{}
	return &this
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *RestErrors) GetErrors() []RestErrorMessage {
	if o == nil || IsNil(o.Errors) {
		var ret []RestErrorMessage
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestErrors) GetErrorsOk() ([]RestErrorMessage, bool) {
	if o == nil || IsNil(o.Errors) {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *RestErrors) HasErrors() bool {
	if o != nil && !IsNil(o.Errors) {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []RestErrorMessage and assigns it to the Errors field.
func (o *RestErrors) SetErrors(v []RestErrorMessage) {
	o.Errors = v
}

func (o RestErrors) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestErrors) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Errors) {
		toSerialize["errors"] = o.Errors
	}
	return toSerialize, nil
}

type NullableRestErrors struct {
	value *RestErrors
	isSet bool
}

func (v NullableRestErrors) Get() *RestErrors {
	return v.value
}

func (v *NullableRestErrors) Set(val *RestErrors) {
	v.value = val
	v.isSet = true
}

func (v NullableRestErrors) IsSet() bool {
	return v.isSet
}

func (v *NullableRestErrors) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestErrors(val *RestErrors) *NullableRestErrors {
	return &NullableRestErrors{value: val, isSet: true}
}

func (v NullableRestErrors) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestErrors) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


