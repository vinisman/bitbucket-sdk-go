/*
Bitbucket Data Center

This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).

API version: 9.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RestExportRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestExportRequest{}

// RestExportRequest struct for RestExportRequest
type RestExportRequest struct {
	ExportLocation *string `json:"exportLocation,omitempty"`
	RepositoriesRequest RestExportRequestRepositoriesRequest `json:"repositoriesRequest"`
}

type _RestExportRequest RestExportRequest

// NewRestExportRequest instantiates a new RestExportRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestExportRequest(repositoriesRequest RestExportRequestRepositoriesRequest) *RestExportRequest {
	this := RestExportRequest{}
	this.RepositoriesRequest = repositoriesRequest
	return &this
}

// NewRestExportRequestWithDefaults instantiates a new RestExportRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestExportRequestWithDefaults() *RestExportRequest {
	this := RestExportRequest{}
	return &this
}

// GetExportLocation returns the ExportLocation field value if set, zero value otherwise.
func (o *RestExportRequest) GetExportLocation() string {
	if o == nil || IsNil(o.ExportLocation) {
		var ret string
		return ret
	}
	return *o.ExportLocation
}

// GetExportLocationOk returns a tuple with the ExportLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestExportRequest) GetExportLocationOk() (*string, bool) {
	if o == nil || IsNil(o.ExportLocation) {
		return nil, false
	}
	return o.ExportLocation, true
}

// HasExportLocation returns a boolean if a field has been set.
func (o *RestExportRequest) HasExportLocation() bool {
	if o != nil && !IsNil(o.ExportLocation) {
		return true
	}

	return false
}

// SetExportLocation gets a reference to the given string and assigns it to the ExportLocation field.
func (o *RestExportRequest) SetExportLocation(v string) {
	o.ExportLocation = &v
}

// GetRepositoriesRequest returns the RepositoriesRequest field value
func (o *RestExportRequest) GetRepositoriesRequest() RestExportRequestRepositoriesRequest {
	if o == nil {
		var ret RestExportRequestRepositoriesRequest
		return ret
	}

	return o.RepositoriesRequest
}

// GetRepositoriesRequestOk returns a tuple with the RepositoriesRequest field value
// and a boolean to check if the value has been set.
func (o *RestExportRequest) GetRepositoriesRequestOk() (*RestExportRequestRepositoriesRequest, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RepositoriesRequest, true
}

// SetRepositoriesRequest sets field value
func (o *RestExportRequest) SetRepositoriesRequest(v RestExportRequestRepositoriesRequest) {
	o.RepositoriesRequest = v
}

func (o RestExportRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestExportRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ExportLocation) {
		toSerialize["exportLocation"] = o.ExportLocation
	}
	toSerialize["repositoriesRequest"] = o.RepositoriesRequest
	return toSerialize, nil
}

func (o *RestExportRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"repositoriesRequest",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRestExportRequest := _RestExportRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRestExportRequest)

	if err != nil {
		return err
	}

	*o = RestExportRequest(varRestExportRequest)

	return err
}

type NullableRestExportRequest struct {
	value *RestExportRequest
	isSet bool
}

func (v NullableRestExportRequest) Get() *RestExportRequest {
	return v.value
}

func (v *NullableRestExportRequest) Set(val *RestExportRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableRestExportRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRestExportRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestExportRequest(val *RestExportRequest) *NullableRestExportRequest {
	return &NullableRestExportRequest{value: val, isSet: true}
}

func (v NullableRestExportRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestExportRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


