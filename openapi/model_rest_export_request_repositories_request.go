/*
Bitbucket Data Center

This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).

API version: 9.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RestExportRequestRepositoriesRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestExportRequestRepositoriesRequest{}

// RestExportRequestRepositoriesRequest struct for RestExportRequestRepositoriesRequest
type RestExportRequestRepositoriesRequest struct {
	Includes []RestRepositorySelector `json:"includes"`
}

type _RestExportRequestRepositoriesRequest RestExportRequestRepositoriesRequest

// NewRestExportRequestRepositoriesRequest instantiates a new RestExportRequestRepositoriesRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestExportRequestRepositoriesRequest(includes []RestRepositorySelector) *RestExportRequestRepositoriesRequest {
	this := RestExportRequestRepositoriesRequest{}
	this.Includes = includes
	return &this
}

// NewRestExportRequestRepositoriesRequestWithDefaults instantiates a new RestExportRequestRepositoriesRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestExportRequestRepositoriesRequestWithDefaults() *RestExportRequestRepositoriesRequest {
	this := RestExportRequestRepositoriesRequest{}
	return &this
}

// GetIncludes returns the Includes field value
func (o *RestExportRequestRepositoriesRequest) GetIncludes() []RestRepositorySelector {
	if o == nil {
		var ret []RestRepositorySelector
		return ret
	}

	return o.Includes
}

// GetIncludesOk returns a tuple with the Includes field value
// and a boolean to check if the value has been set.
func (o *RestExportRequestRepositoriesRequest) GetIncludesOk() ([]RestRepositorySelector, bool) {
	if o == nil {
		return nil, false
	}
	return o.Includes, true
}

// SetIncludes sets field value
func (o *RestExportRequestRepositoriesRequest) SetIncludes(v []RestRepositorySelector) {
	o.Includes = v
}

func (o RestExportRequestRepositoriesRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestExportRequestRepositoriesRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["includes"] = o.Includes
	return toSerialize, nil
}

func (o *RestExportRequestRepositoriesRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"includes",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRestExportRequestRepositoriesRequest := _RestExportRequestRepositoriesRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRestExportRequestRepositoriesRequest)

	if err != nil {
		return err
	}

	*o = RestExportRequestRepositoriesRequest(varRestExportRequestRepositoriesRequest)

	return err
}

type NullableRestExportRequestRepositoriesRequest struct {
	value *RestExportRequestRepositoriesRequest
	isSet bool
}

func (v NullableRestExportRequestRepositoriesRequest) Get() *RestExportRequestRepositoriesRequest {
	return v.value
}

func (v *NullableRestExportRequestRepositoriesRequest) Set(val *RestExportRequestRepositoriesRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableRestExportRequestRepositoriesRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRestExportRequestRepositoriesRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestExportRequestRepositoriesRequest(val *RestExportRequestRepositoriesRequest) *NullableRestExportRequestRepositoriesRequest {
	return &NullableRestExportRequestRepositoriesRequest{value: val, isSet: true}
}

func (v NullableRestExportRequestRepositoriesRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestExportRequestRepositoriesRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


