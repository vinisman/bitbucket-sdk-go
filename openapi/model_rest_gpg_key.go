/*
Bitbucket Data Center

This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).

API version: 9.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RestGpgKey type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestGpgKey{}

// RestGpgKey struct for RestGpgKey
type RestGpgKey struct {
	EmailAddress *string `json:"emailAddress,omitempty"`
	ExpiryDate *int64 `json:"expiryDate,omitempty"`
	Fingerprint *string `json:"fingerprint,omitempty"`
	Id *string `json:"id,omitempty"`
	SubKeys []RestGpgSubKey `json:"subKeys,omitempty"`
	Text *string `json:"text,omitempty"`
}

// NewRestGpgKey instantiates a new RestGpgKey object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestGpgKey() *RestGpgKey {
	this := RestGpgKey{}
	return &this
}

// NewRestGpgKeyWithDefaults instantiates a new RestGpgKey object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestGpgKeyWithDefaults() *RestGpgKey {
	this := RestGpgKey{}
	return &this
}

// GetEmailAddress returns the EmailAddress field value if set, zero value otherwise.
func (o *RestGpgKey) GetEmailAddress() string {
	if o == nil || IsNil(o.EmailAddress) {
		var ret string
		return ret
	}
	return *o.EmailAddress
}

// GetEmailAddressOk returns a tuple with the EmailAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestGpgKey) GetEmailAddressOk() (*string, bool) {
	if o == nil || IsNil(o.EmailAddress) {
		return nil, false
	}
	return o.EmailAddress, true
}

// HasEmailAddress returns a boolean if a field has been set.
func (o *RestGpgKey) HasEmailAddress() bool {
	if o != nil && !IsNil(o.EmailAddress) {
		return true
	}

	return false
}

// SetEmailAddress gets a reference to the given string and assigns it to the EmailAddress field.
func (o *RestGpgKey) SetEmailAddress(v string) {
	o.EmailAddress = &v
}

// GetExpiryDate returns the ExpiryDate field value if set, zero value otherwise.
func (o *RestGpgKey) GetExpiryDate() int64 {
	if o == nil || IsNil(o.ExpiryDate) {
		var ret int64
		return ret
	}
	return *o.ExpiryDate
}

// GetExpiryDateOk returns a tuple with the ExpiryDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestGpgKey) GetExpiryDateOk() (*int64, bool) {
	if o == nil || IsNil(o.ExpiryDate) {
		return nil, false
	}
	return o.ExpiryDate, true
}

// HasExpiryDate returns a boolean if a field has been set.
func (o *RestGpgKey) HasExpiryDate() bool {
	if o != nil && !IsNil(o.ExpiryDate) {
		return true
	}

	return false
}

// SetExpiryDate gets a reference to the given int64 and assigns it to the ExpiryDate field.
func (o *RestGpgKey) SetExpiryDate(v int64) {
	o.ExpiryDate = &v
}

// GetFingerprint returns the Fingerprint field value if set, zero value otherwise.
func (o *RestGpgKey) GetFingerprint() string {
	if o == nil || IsNil(o.Fingerprint) {
		var ret string
		return ret
	}
	return *o.Fingerprint
}

// GetFingerprintOk returns a tuple with the Fingerprint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestGpgKey) GetFingerprintOk() (*string, bool) {
	if o == nil || IsNil(o.Fingerprint) {
		return nil, false
	}
	return o.Fingerprint, true
}

// HasFingerprint returns a boolean if a field has been set.
func (o *RestGpgKey) HasFingerprint() bool {
	if o != nil && !IsNil(o.Fingerprint) {
		return true
	}

	return false
}

// SetFingerprint gets a reference to the given string and assigns it to the Fingerprint field.
func (o *RestGpgKey) SetFingerprint(v string) {
	o.Fingerprint = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RestGpgKey) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestGpgKey) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RestGpgKey) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *RestGpgKey) SetId(v string) {
	o.Id = &v
}

// GetSubKeys returns the SubKeys field value if set, zero value otherwise.
func (o *RestGpgKey) GetSubKeys() []RestGpgSubKey {
	if o == nil || IsNil(o.SubKeys) {
		var ret []RestGpgSubKey
		return ret
	}
	return o.SubKeys
}

// GetSubKeysOk returns a tuple with the SubKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestGpgKey) GetSubKeysOk() ([]RestGpgSubKey, bool) {
	if o == nil || IsNil(o.SubKeys) {
		return nil, false
	}
	return o.SubKeys, true
}

// HasSubKeys returns a boolean if a field has been set.
func (o *RestGpgKey) HasSubKeys() bool {
	if o != nil && !IsNil(o.SubKeys) {
		return true
	}

	return false
}

// SetSubKeys gets a reference to the given []RestGpgSubKey and assigns it to the SubKeys field.
func (o *RestGpgKey) SetSubKeys(v []RestGpgSubKey) {
	o.SubKeys = v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *RestGpgKey) GetText() string {
	if o == nil || IsNil(o.Text) {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestGpgKey) GetTextOk() (*string, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *RestGpgKey) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *RestGpgKey) SetText(v string) {
	o.Text = &v
}

func (o RestGpgKey) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestGpgKey) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EmailAddress) {
		toSerialize["emailAddress"] = o.EmailAddress
	}
	if !IsNil(o.ExpiryDate) {
		toSerialize["expiryDate"] = o.ExpiryDate
	}
	if !IsNil(o.Fingerprint) {
		toSerialize["fingerprint"] = o.Fingerprint
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.SubKeys) {
		toSerialize["subKeys"] = o.SubKeys
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	return toSerialize, nil
}

type NullableRestGpgKey struct {
	value *RestGpgKey
	isSet bool
}

func (v NullableRestGpgKey) Get() *RestGpgKey {
	return v.value
}

func (v *NullableRestGpgKey) Set(val *RestGpgKey) {
	v.value = val
	v.isSet = true
}

func (v NullableRestGpgKey) IsSet() bool {
	return v.isSet
}

func (v *NullableRestGpgKey) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestGpgKey(val *RestGpgKey) *NullableRestGpgKey {
	return &NullableRestGpgKey{value: val, isSet: true}
}

func (v NullableRestGpgKey) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestGpgKey) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


