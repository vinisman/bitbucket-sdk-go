/*
Bitbucket Data Center

This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).

API version: 9.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the RestGpgSubKey type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestGpgSubKey{}

// RestGpgSubKey struct for RestGpgSubKey
type RestGpgSubKey struct {
	ExpiryDate *time.Time `json:"expiryDate,omitempty"`
	Fingerprint *string `json:"fingerprint,omitempty"`
}

// NewRestGpgSubKey instantiates a new RestGpgSubKey object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestGpgSubKey() *RestGpgSubKey {
	this := RestGpgSubKey{}
	return &this
}

// NewRestGpgSubKeyWithDefaults instantiates a new RestGpgSubKey object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestGpgSubKeyWithDefaults() *RestGpgSubKey {
	this := RestGpgSubKey{}
	return &this
}

// GetExpiryDate returns the ExpiryDate field value if set, zero value otherwise.
func (o *RestGpgSubKey) GetExpiryDate() time.Time {
	if o == nil || IsNil(o.ExpiryDate) {
		var ret time.Time
		return ret
	}
	return *o.ExpiryDate
}

// GetExpiryDateOk returns a tuple with the ExpiryDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestGpgSubKey) GetExpiryDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ExpiryDate) {
		return nil, false
	}
	return o.ExpiryDate, true
}

// HasExpiryDate returns a boolean if a field has been set.
func (o *RestGpgSubKey) HasExpiryDate() bool {
	if o != nil && !IsNil(o.ExpiryDate) {
		return true
	}

	return false
}

// SetExpiryDate gets a reference to the given time.Time and assigns it to the ExpiryDate field.
func (o *RestGpgSubKey) SetExpiryDate(v time.Time) {
	o.ExpiryDate = &v
}

// GetFingerprint returns the Fingerprint field value if set, zero value otherwise.
func (o *RestGpgSubKey) GetFingerprint() string {
	if o == nil || IsNil(o.Fingerprint) {
		var ret string
		return ret
	}
	return *o.Fingerprint
}

// GetFingerprintOk returns a tuple with the Fingerprint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestGpgSubKey) GetFingerprintOk() (*string, bool) {
	if o == nil || IsNil(o.Fingerprint) {
		return nil, false
	}
	return o.Fingerprint, true
}

// HasFingerprint returns a boolean if a field has been set.
func (o *RestGpgSubKey) HasFingerprint() bool {
	if o != nil && !IsNil(o.Fingerprint) {
		return true
	}

	return false
}

// SetFingerprint gets a reference to the given string and assigns it to the Fingerprint field.
func (o *RestGpgSubKey) SetFingerprint(v string) {
	o.Fingerprint = &v
}

func (o RestGpgSubKey) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestGpgSubKey) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ExpiryDate) {
		toSerialize["expiryDate"] = o.ExpiryDate
	}
	if !IsNil(o.Fingerprint) {
		toSerialize["fingerprint"] = o.Fingerprint
	}
	return toSerialize, nil
}

type NullableRestGpgSubKey struct {
	value *RestGpgSubKey
	isSet bool
}

func (v NullableRestGpgSubKey) Get() *RestGpgSubKey {
	return v.value
}

func (v *NullableRestGpgSubKey) Set(val *RestGpgSubKey) {
	v.value = val
	v.isSet = true
}

func (v NullableRestGpgSubKey) IsSet() bool {
	return v.isSet
}

func (v *NullableRestGpgSubKey) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestGpgSubKey(val *RestGpgSubKey) *NullableRestGpgSubKey {
	return &NullableRestGpgSubKey{value: val, isSet: true}
}

func (v NullableRestGpgSubKey) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestGpgSubKey) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


