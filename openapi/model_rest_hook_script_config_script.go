/*
Bitbucket Data Center

This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).

API version: 9.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the RestHookScriptConfigScript type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestHookScriptConfigScript{}

// RestHookScriptConfigScript struct for RestHookScriptConfigScript
type RestHookScriptConfigScript struct {
	CreatedDate *time.Time `json:"createdDate,omitempty"`
	Description *string `json:"description,omitempty"`
	Id *int64 `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	PluginKey *string `json:"pluginKey,omitempty"`
	Type *string `json:"type,omitempty"`
	UpdatedDate *time.Time `json:"updatedDate,omitempty"`
	Version *int32 `json:"version,omitempty"`
}

// NewRestHookScriptConfigScript instantiates a new RestHookScriptConfigScript object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestHookScriptConfigScript() *RestHookScriptConfigScript {
	this := RestHookScriptConfigScript{}
	return &this
}

// NewRestHookScriptConfigScriptWithDefaults instantiates a new RestHookScriptConfigScript object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestHookScriptConfigScriptWithDefaults() *RestHookScriptConfigScript {
	this := RestHookScriptConfigScript{}
	return &this
}

// GetCreatedDate returns the CreatedDate field value if set, zero value otherwise.
func (o *RestHookScriptConfigScript) GetCreatedDate() time.Time {
	if o == nil || IsNil(o.CreatedDate) {
		var ret time.Time
		return ret
	}
	return *o.CreatedDate
}

// GetCreatedDateOk returns a tuple with the CreatedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestHookScriptConfigScript) GetCreatedDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedDate) {
		return nil, false
	}
	return o.CreatedDate, true
}

// HasCreatedDate returns a boolean if a field has been set.
func (o *RestHookScriptConfigScript) HasCreatedDate() bool {
	if o != nil && !IsNil(o.CreatedDate) {
		return true
	}

	return false
}

// SetCreatedDate gets a reference to the given time.Time and assigns it to the CreatedDate field.
func (o *RestHookScriptConfigScript) SetCreatedDate(v time.Time) {
	o.CreatedDate = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *RestHookScriptConfigScript) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestHookScriptConfigScript) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *RestHookScriptConfigScript) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *RestHookScriptConfigScript) SetDescription(v string) {
	o.Description = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RestHookScriptConfigScript) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestHookScriptConfigScript) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RestHookScriptConfigScript) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *RestHookScriptConfigScript) SetId(v int64) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RestHookScriptConfigScript) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestHookScriptConfigScript) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RestHookScriptConfigScript) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RestHookScriptConfigScript) SetName(v string) {
	o.Name = &v
}

// GetPluginKey returns the PluginKey field value if set, zero value otherwise.
func (o *RestHookScriptConfigScript) GetPluginKey() string {
	if o == nil || IsNil(o.PluginKey) {
		var ret string
		return ret
	}
	return *o.PluginKey
}

// GetPluginKeyOk returns a tuple with the PluginKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestHookScriptConfigScript) GetPluginKeyOk() (*string, bool) {
	if o == nil || IsNil(o.PluginKey) {
		return nil, false
	}
	return o.PluginKey, true
}

// HasPluginKey returns a boolean if a field has been set.
func (o *RestHookScriptConfigScript) HasPluginKey() bool {
	if o != nil && !IsNil(o.PluginKey) {
		return true
	}

	return false
}

// SetPluginKey gets a reference to the given string and assigns it to the PluginKey field.
func (o *RestHookScriptConfigScript) SetPluginKey(v string) {
	o.PluginKey = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *RestHookScriptConfigScript) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestHookScriptConfigScript) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *RestHookScriptConfigScript) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *RestHookScriptConfigScript) SetType(v string) {
	o.Type = &v
}

// GetUpdatedDate returns the UpdatedDate field value if set, zero value otherwise.
func (o *RestHookScriptConfigScript) GetUpdatedDate() time.Time {
	if o == nil || IsNil(o.UpdatedDate) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedDate
}

// GetUpdatedDateOk returns a tuple with the UpdatedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestHookScriptConfigScript) GetUpdatedDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedDate) {
		return nil, false
	}
	return o.UpdatedDate, true
}

// HasUpdatedDate returns a boolean if a field has been set.
func (o *RestHookScriptConfigScript) HasUpdatedDate() bool {
	if o != nil && !IsNil(o.UpdatedDate) {
		return true
	}

	return false
}

// SetUpdatedDate gets a reference to the given time.Time and assigns it to the UpdatedDate field.
func (o *RestHookScriptConfigScript) SetUpdatedDate(v time.Time) {
	o.UpdatedDate = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *RestHookScriptConfigScript) GetVersion() int32 {
	if o == nil || IsNil(o.Version) {
		var ret int32
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestHookScriptConfigScript) GetVersionOk() (*int32, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *RestHookScriptConfigScript) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int32 and assigns it to the Version field.
func (o *RestHookScriptConfigScript) SetVersion(v int32) {
	o.Version = &v
}

func (o RestHookScriptConfigScript) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestHookScriptConfigScript) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CreatedDate) {
		toSerialize["createdDate"] = o.CreatedDate
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.PluginKey) {
		toSerialize["pluginKey"] = o.PluginKey
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.UpdatedDate) {
		toSerialize["updatedDate"] = o.UpdatedDate
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

type NullableRestHookScriptConfigScript struct {
	value *RestHookScriptConfigScript
	isSet bool
}

func (v NullableRestHookScriptConfigScript) Get() *RestHookScriptConfigScript {
	return v.value
}

func (v *NullableRestHookScriptConfigScript) Set(val *RestHookScriptConfigScript) {
	v.value = val
	v.isSet = true
}

func (v NullableRestHookScriptConfigScript) IsSet() bool {
	return v.isSet
}

func (v *NullableRestHookScriptConfigScript) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestHookScriptConfigScript(val *RestHookScriptConfigScript) *NullableRestHookScriptConfigScript {
	return &NullableRestHookScriptConfigScript{value: val, isSet: true}
}

func (v NullableRestHookScriptConfigScript) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestHookScriptConfigScript) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


