/*
Bitbucket Data Center

This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).

API version: 9.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RestIndexEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestIndexEvent{}

// RestIndexEvent The event that is currently being processed by the indexing worker.
type RestIndexEvent struct {
	// Retrieves the metadata associated with the index event. The content of this metadata is variable and depends on the event type. It may include identifiers such as repository ID, project ID, or user ID, among other relevant details.
	EventMetadata map[string]interface{} `json:"eventMetadata,omitempty"`
	// Retrieves the type of the event, indicating the entity (such as project, repository, or user) that triggered the indexing operation.
	EventType string `json:"eventType"`
	// Retrieves the count of how many times this event has been retried due to previous failures or exceptions.
	Retries int32 `json:"retries"`
}

type _RestIndexEvent RestIndexEvent

// NewRestIndexEvent instantiates a new RestIndexEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestIndexEvent(eventType string, retries int32) *RestIndexEvent {
	this := RestIndexEvent{}
	this.EventType = eventType
	this.Retries = retries
	return &this
}

// NewRestIndexEventWithDefaults instantiates a new RestIndexEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestIndexEventWithDefaults() *RestIndexEvent {
	this := RestIndexEvent{}
	return &this
}

// GetEventMetadata returns the EventMetadata field value if set, zero value otherwise.
func (o *RestIndexEvent) GetEventMetadata() map[string]interface{} {
	if o == nil || IsNil(o.EventMetadata) {
		var ret map[string]interface{}
		return ret
	}
	return o.EventMetadata
}

// GetEventMetadataOk returns a tuple with the EventMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestIndexEvent) GetEventMetadataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.EventMetadata) {
		return map[string]interface{}{}, false
	}
	return o.EventMetadata, true
}

// HasEventMetadata returns a boolean if a field has been set.
func (o *RestIndexEvent) HasEventMetadata() bool {
	if o != nil && !IsNil(o.EventMetadata) {
		return true
	}

	return false
}

// SetEventMetadata gets a reference to the given map[string]interface{} and assigns it to the EventMetadata field.
func (o *RestIndexEvent) SetEventMetadata(v map[string]interface{}) {
	o.EventMetadata = v
}

// GetEventType returns the EventType field value
func (o *RestIndexEvent) GetEventType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value
// and a boolean to check if the value has been set.
func (o *RestIndexEvent) GetEventTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventType, true
}

// SetEventType sets field value
func (o *RestIndexEvent) SetEventType(v string) {
	o.EventType = v
}

// GetRetries returns the Retries field value
func (o *RestIndexEvent) GetRetries() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Retries
}

// GetRetriesOk returns a tuple with the Retries field value
// and a boolean to check if the value has been set.
func (o *RestIndexEvent) GetRetriesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Retries, true
}

// SetRetries sets field value
func (o *RestIndexEvent) SetRetries(v int32) {
	o.Retries = v
}

func (o RestIndexEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestIndexEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EventMetadata) {
		toSerialize["eventMetadata"] = o.EventMetadata
	}
	toSerialize["eventType"] = o.EventType
	toSerialize["retries"] = o.Retries
	return toSerialize, nil
}

func (o *RestIndexEvent) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"eventType",
		"retries",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRestIndexEvent := _RestIndexEvent{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRestIndexEvent)

	if err != nil {
		return err
	}

	*o = RestIndexEvent(varRestIndexEvent)

	return err
}

type NullableRestIndexEvent struct {
	value *RestIndexEvent
	isSet bool
}

func (v NullableRestIndexEvent) Get() *RestIndexEvent {
	return v.value
}

func (v *NullableRestIndexEvent) Set(val *RestIndexEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableRestIndexEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableRestIndexEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestIndexEvent(val *RestIndexEvent) *NullableRestIndexEvent {
	return &NullableRestIndexEvent{value: val, isSet: true}
}

func (v NullableRestIndexEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestIndexEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


