/*
Bitbucket Data Center

This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).

API version: 9.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RestIndexingThreadDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestIndexingThreadDetails{}

// RestIndexingThreadDetails struct for RestIndexingThreadDetails
type RestIndexingThreadDetails struct {
	// Returns the timestamp indicating when the current thread details were captured.
	CapturedAt int64 `json:"capturedAt"`
	CurrentProcess *RestIndexingThreadDetailsCurrentProcess `json:"currentProcess,omitempty"`
	// The number of items in the delayed queue. This queue contains retries that have been scheduled with an exponential backoff delay. The retries are for operations that previously failed in the main queue.
	DelayedQueueSize int32 `json:"delayedQueueSize"`
	// The number of items currently in the main queue.
	QueueSize int32 `json:"queueSize"`
	State RestIndexingThreadDetailsState `json:"state"`
}

type _RestIndexingThreadDetails RestIndexingThreadDetails

// NewRestIndexingThreadDetails instantiates a new RestIndexingThreadDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestIndexingThreadDetails(capturedAt int64, delayedQueueSize int32, queueSize int32, state RestIndexingThreadDetailsState) *RestIndexingThreadDetails {
	this := RestIndexingThreadDetails{}
	this.CapturedAt = capturedAt
	this.DelayedQueueSize = delayedQueueSize
	this.QueueSize = queueSize
	this.State = state
	return &this
}

// NewRestIndexingThreadDetailsWithDefaults instantiates a new RestIndexingThreadDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestIndexingThreadDetailsWithDefaults() *RestIndexingThreadDetails {
	this := RestIndexingThreadDetails{}
	return &this
}

// GetCapturedAt returns the CapturedAt field value
func (o *RestIndexingThreadDetails) GetCapturedAt() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.CapturedAt
}

// GetCapturedAtOk returns a tuple with the CapturedAt field value
// and a boolean to check if the value has been set.
func (o *RestIndexingThreadDetails) GetCapturedAtOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CapturedAt, true
}

// SetCapturedAt sets field value
func (o *RestIndexingThreadDetails) SetCapturedAt(v int64) {
	o.CapturedAt = v
}

// GetCurrentProcess returns the CurrentProcess field value if set, zero value otherwise.
func (o *RestIndexingThreadDetails) GetCurrentProcess() RestIndexingThreadDetailsCurrentProcess {
	if o == nil || IsNil(o.CurrentProcess) {
		var ret RestIndexingThreadDetailsCurrentProcess
		return ret
	}
	return *o.CurrentProcess
}

// GetCurrentProcessOk returns a tuple with the CurrentProcess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestIndexingThreadDetails) GetCurrentProcessOk() (*RestIndexingThreadDetailsCurrentProcess, bool) {
	if o == nil || IsNil(o.CurrentProcess) {
		return nil, false
	}
	return o.CurrentProcess, true
}

// HasCurrentProcess returns a boolean if a field has been set.
func (o *RestIndexingThreadDetails) HasCurrentProcess() bool {
	if o != nil && !IsNil(o.CurrentProcess) {
		return true
	}

	return false
}

// SetCurrentProcess gets a reference to the given RestIndexingThreadDetailsCurrentProcess and assigns it to the CurrentProcess field.
func (o *RestIndexingThreadDetails) SetCurrentProcess(v RestIndexingThreadDetailsCurrentProcess) {
	o.CurrentProcess = &v
}

// GetDelayedQueueSize returns the DelayedQueueSize field value
func (o *RestIndexingThreadDetails) GetDelayedQueueSize() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.DelayedQueueSize
}

// GetDelayedQueueSizeOk returns a tuple with the DelayedQueueSize field value
// and a boolean to check if the value has been set.
func (o *RestIndexingThreadDetails) GetDelayedQueueSizeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DelayedQueueSize, true
}

// SetDelayedQueueSize sets field value
func (o *RestIndexingThreadDetails) SetDelayedQueueSize(v int32) {
	o.DelayedQueueSize = v
}

// GetQueueSize returns the QueueSize field value
func (o *RestIndexingThreadDetails) GetQueueSize() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.QueueSize
}

// GetQueueSizeOk returns a tuple with the QueueSize field value
// and a boolean to check if the value has been set.
func (o *RestIndexingThreadDetails) GetQueueSizeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.QueueSize, true
}

// SetQueueSize sets field value
func (o *RestIndexingThreadDetails) SetQueueSize(v int32) {
	o.QueueSize = v
}

// GetState returns the State field value
func (o *RestIndexingThreadDetails) GetState() RestIndexingThreadDetailsState {
	if o == nil {
		var ret RestIndexingThreadDetailsState
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *RestIndexingThreadDetails) GetStateOk() (*RestIndexingThreadDetailsState, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *RestIndexingThreadDetails) SetState(v RestIndexingThreadDetailsState) {
	o.State = v
}

func (o RestIndexingThreadDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestIndexingThreadDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["capturedAt"] = o.CapturedAt
	if !IsNil(o.CurrentProcess) {
		toSerialize["currentProcess"] = o.CurrentProcess
	}
	toSerialize["delayedQueueSize"] = o.DelayedQueueSize
	toSerialize["queueSize"] = o.QueueSize
	toSerialize["state"] = o.State
	return toSerialize, nil
}

func (o *RestIndexingThreadDetails) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"capturedAt",
		"delayedQueueSize",
		"queueSize",
		"state",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRestIndexingThreadDetails := _RestIndexingThreadDetails{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRestIndexingThreadDetails)

	if err != nil {
		return err
	}

	*o = RestIndexingThreadDetails(varRestIndexingThreadDetails)

	return err
}

type NullableRestIndexingThreadDetails struct {
	value *RestIndexingThreadDetails
	isSet bool
}

func (v NullableRestIndexingThreadDetails) Get() *RestIndexingThreadDetails {
	return v.value
}

func (v *NullableRestIndexingThreadDetails) Set(val *RestIndexingThreadDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableRestIndexingThreadDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableRestIndexingThreadDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestIndexingThreadDetails(val *RestIndexingThreadDetails) *NullableRestIndexingThreadDetails {
	return &NullableRestIndexingThreadDetails{value: val, isSet: true}
}

func (v NullableRestIndexingThreadDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestIndexingThreadDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


