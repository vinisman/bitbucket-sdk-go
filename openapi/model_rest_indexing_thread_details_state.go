/*
Bitbucket Data Center

This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).

API version: 9.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RestIndexingThreadDetailsState type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestIndexingThreadDetailsState{}

// RestIndexingThreadDetailsState Represents the state of an indexing thread.
type RestIndexingThreadDetailsState struct {
	// The current code representing the state of the indexing thread
	Code string `json:"code"`
	// Additional detail about the current state, meant for informational purposes only.
	Description *string `json:"description,omitempty"`
}

type _RestIndexingThreadDetailsState RestIndexingThreadDetailsState

// NewRestIndexingThreadDetailsState instantiates a new RestIndexingThreadDetailsState object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestIndexingThreadDetailsState(code string) *RestIndexingThreadDetailsState {
	this := RestIndexingThreadDetailsState{}
	this.Code = code
	return &this
}

// NewRestIndexingThreadDetailsStateWithDefaults instantiates a new RestIndexingThreadDetailsState object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestIndexingThreadDetailsStateWithDefaults() *RestIndexingThreadDetailsState {
	this := RestIndexingThreadDetailsState{}
	return &this
}

// GetCode returns the Code field value
func (o *RestIndexingThreadDetailsState) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *RestIndexingThreadDetailsState) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *RestIndexingThreadDetailsState) SetCode(v string) {
	o.Code = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *RestIndexingThreadDetailsState) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestIndexingThreadDetailsState) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *RestIndexingThreadDetailsState) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *RestIndexingThreadDetailsState) SetDescription(v string) {
	o.Description = &v
}

func (o RestIndexingThreadDetailsState) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestIndexingThreadDetailsState) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["code"] = o.Code
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	return toSerialize, nil
}

func (o *RestIndexingThreadDetailsState) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"code",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRestIndexingThreadDetailsState := _RestIndexingThreadDetailsState{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRestIndexingThreadDetailsState)

	if err != nil {
		return err
	}

	*o = RestIndexingThreadDetailsState(varRestIndexingThreadDetailsState)

	return err
}

type NullableRestIndexingThreadDetailsState struct {
	value *RestIndexingThreadDetailsState
	isSet bool
}

func (v NullableRestIndexingThreadDetailsState) Get() *RestIndexingThreadDetailsState {
	return v.value
}

func (v *NullableRestIndexingThreadDetailsState) Set(val *RestIndexingThreadDetailsState) {
	v.value = val
	v.isSet = true
}

func (v NullableRestIndexingThreadDetailsState) IsSet() bool {
	return v.isSet
}

func (v *NullableRestIndexingThreadDetailsState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestIndexingThreadDetailsState(val *RestIndexingThreadDetailsState) *NullableRestIndexingThreadDetailsState {
	return &NullableRestIndexingThreadDetailsState{value: val, isSet: true}
}

func (v NullableRestIndexingThreadDetailsState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestIndexingThreadDetailsState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


