/*
Bitbucket Data Center

This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).

API version: 9.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RestIndexingThreadState type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestIndexingThreadState{}

// RestIndexingThreadState Represents the state of an indexing thread.
type RestIndexingThreadState struct {
	// The current code representing the state of the indexing thread
	Code string `json:"code"`
	// Additional detail about the current state, meant for informational purposes only.
	Description *string `json:"description,omitempty"`
}

type _RestIndexingThreadState RestIndexingThreadState

// NewRestIndexingThreadState instantiates a new RestIndexingThreadState object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestIndexingThreadState(code string) *RestIndexingThreadState {
	this := RestIndexingThreadState{}
	this.Code = code
	return &this
}

// NewRestIndexingThreadStateWithDefaults instantiates a new RestIndexingThreadState object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestIndexingThreadStateWithDefaults() *RestIndexingThreadState {
	this := RestIndexingThreadState{}
	return &this
}

// GetCode returns the Code field value
func (o *RestIndexingThreadState) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *RestIndexingThreadState) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *RestIndexingThreadState) SetCode(v string) {
	o.Code = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *RestIndexingThreadState) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestIndexingThreadState) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *RestIndexingThreadState) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *RestIndexingThreadState) SetDescription(v string) {
	o.Description = &v
}

func (o RestIndexingThreadState) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestIndexingThreadState) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["code"] = o.Code
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	return toSerialize, nil
}

func (o *RestIndexingThreadState) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"code",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRestIndexingThreadState := _RestIndexingThreadState{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRestIndexingThreadState)

	if err != nil {
		return err
	}

	*o = RestIndexingThreadState(varRestIndexingThreadState)

	return err
}

type NullableRestIndexingThreadState struct {
	value *RestIndexingThreadState
	isSet bool
}

func (v NullableRestIndexingThreadState) Get() *RestIndexingThreadState {
	return v.value
}

func (v *NullableRestIndexingThreadState) Set(val *RestIndexingThreadState) {
	v.value = val
	v.isSet = true
}

func (v NullableRestIndexingThreadState) IsSet() bool {
	return v.isSet
}

func (v *NullableRestIndexingThreadState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestIndexingThreadState(val *RestIndexingThreadState) *NullableRestIndexingThreadState {
	return &NullableRestIndexingThreadState{value: val, isSet: true}
}

func (v NullableRestIndexingThreadState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestIndexingThreadState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


