/*
Bitbucket Data Center

This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).

API version: 9.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RestIndexingWorkerRestartRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestIndexingWorkerRestartRequest{}

// RestIndexingWorkerRestartRequest struct for RestIndexingWorkerRestartRequest
type RestIndexingWorkerRestartRequest struct {
	// Should the indexing thread terminate immediately
	GracefulShutdown *bool `json:"gracefulShutdown,omitempty"`
	// Should the response wait until the worker has been restarted
	WaitForRestart *bool `json:"waitForRestart,omitempty"`
}

// NewRestIndexingWorkerRestartRequest instantiates a new RestIndexingWorkerRestartRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestIndexingWorkerRestartRequest() *RestIndexingWorkerRestartRequest {
	this := RestIndexingWorkerRestartRequest{}
	var gracefulShutdown bool = false
	this.GracefulShutdown = &gracefulShutdown
	var waitForRestart bool = false
	this.WaitForRestart = &waitForRestart
	return &this
}

// NewRestIndexingWorkerRestartRequestWithDefaults instantiates a new RestIndexingWorkerRestartRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestIndexingWorkerRestartRequestWithDefaults() *RestIndexingWorkerRestartRequest {
	this := RestIndexingWorkerRestartRequest{}
	var gracefulShutdown bool = false
	this.GracefulShutdown = &gracefulShutdown
	var waitForRestart bool = false
	this.WaitForRestart = &waitForRestart
	return &this
}

// GetGracefulShutdown returns the GracefulShutdown field value if set, zero value otherwise.
func (o *RestIndexingWorkerRestartRequest) GetGracefulShutdown() bool {
	if o == nil || IsNil(o.GracefulShutdown) {
		var ret bool
		return ret
	}
	return *o.GracefulShutdown
}

// GetGracefulShutdownOk returns a tuple with the GracefulShutdown field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestIndexingWorkerRestartRequest) GetGracefulShutdownOk() (*bool, bool) {
	if o == nil || IsNil(o.GracefulShutdown) {
		return nil, false
	}
	return o.GracefulShutdown, true
}

// HasGracefulShutdown returns a boolean if a field has been set.
func (o *RestIndexingWorkerRestartRequest) HasGracefulShutdown() bool {
	if o != nil && !IsNil(o.GracefulShutdown) {
		return true
	}

	return false
}

// SetGracefulShutdown gets a reference to the given bool and assigns it to the GracefulShutdown field.
func (o *RestIndexingWorkerRestartRequest) SetGracefulShutdown(v bool) {
	o.GracefulShutdown = &v
}

// GetWaitForRestart returns the WaitForRestart field value if set, zero value otherwise.
func (o *RestIndexingWorkerRestartRequest) GetWaitForRestart() bool {
	if o == nil || IsNil(o.WaitForRestart) {
		var ret bool
		return ret
	}
	return *o.WaitForRestart
}

// GetWaitForRestartOk returns a tuple with the WaitForRestart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestIndexingWorkerRestartRequest) GetWaitForRestartOk() (*bool, bool) {
	if o == nil || IsNil(o.WaitForRestart) {
		return nil, false
	}
	return o.WaitForRestart, true
}

// HasWaitForRestart returns a boolean if a field has been set.
func (o *RestIndexingWorkerRestartRequest) HasWaitForRestart() bool {
	if o != nil && !IsNil(o.WaitForRestart) {
		return true
	}

	return false
}

// SetWaitForRestart gets a reference to the given bool and assigns it to the WaitForRestart field.
func (o *RestIndexingWorkerRestartRequest) SetWaitForRestart(v bool) {
	o.WaitForRestart = &v
}

func (o RestIndexingWorkerRestartRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestIndexingWorkerRestartRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.GracefulShutdown) {
		toSerialize["gracefulShutdown"] = o.GracefulShutdown
	}
	if !IsNil(o.WaitForRestart) {
		toSerialize["waitForRestart"] = o.WaitForRestart
	}
	return toSerialize, nil
}

type NullableRestIndexingWorkerRestartRequest struct {
	value *RestIndexingWorkerRestartRequest
	isSet bool
}

func (v NullableRestIndexingWorkerRestartRequest) Get() *RestIndexingWorkerRestartRequest {
	return v.value
}

func (v *NullableRestIndexingWorkerRestartRequest) Set(val *RestIndexingWorkerRestartRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableRestIndexingWorkerRestartRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRestIndexingWorkerRestartRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestIndexingWorkerRestartRequest(val *RestIndexingWorkerRestartRequest) *NullableRestIndexingWorkerRestartRequest {
	return &NullableRestIndexingWorkerRestartRequest{value: val, isSet: true}
}

func (v NullableRestIndexingWorkerRestartRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestIndexingWorkerRestartRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


