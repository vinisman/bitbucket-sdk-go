/*
Bitbucket Data Center

This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).

API version: 9.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RestInsightAnnotation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestInsightAnnotation{}

// RestInsightAnnotation struct for RestInsightAnnotation
type RestInsightAnnotation struct {
	ExternalId *string `json:"externalId,omitempty"`
	Line *int32 `json:"line,omitempty"`
	Link *string `json:"link,omitempty"`
	Message *string `json:"message,omitempty"`
	Path *string `json:"path,omitempty"`
	ReportKey *string `json:"reportKey,omitempty"`
	Severity *string `json:"severity,omitempty"`
	Type *string `json:"type,omitempty"`
}

// NewRestInsightAnnotation instantiates a new RestInsightAnnotation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestInsightAnnotation() *RestInsightAnnotation {
	this := RestInsightAnnotation{}
	return &this
}

// NewRestInsightAnnotationWithDefaults instantiates a new RestInsightAnnotation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestInsightAnnotationWithDefaults() *RestInsightAnnotation {
	this := RestInsightAnnotation{}
	return &this
}

// GetExternalId returns the ExternalId field value if set, zero value otherwise.
func (o *RestInsightAnnotation) GetExternalId() string {
	if o == nil || IsNil(o.ExternalId) {
		var ret string
		return ret
	}
	return *o.ExternalId
}

// GetExternalIdOk returns a tuple with the ExternalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestInsightAnnotation) GetExternalIdOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalId) {
		return nil, false
	}
	return o.ExternalId, true
}

// HasExternalId returns a boolean if a field has been set.
func (o *RestInsightAnnotation) HasExternalId() bool {
	if o != nil && !IsNil(o.ExternalId) {
		return true
	}

	return false
}

// SetExternalId gets a reference to the given string and assigns it to the ExternalId field.
func (o *RestInsightAnnotation) SetExternalId(v string) {
	o.ExternalId = &v
}

// GetLine returns the Line field value if set, zero value otherwise.
func (o *RestInsightAnnotation) GetLine() int32 {
	if o == nil || IsNil(o.Line) {
		var ret int32
		return ret
	}
	return *o.Line
}

// GetLineOk returns a tuple with the Line field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestInsightAnnotation) GetLineOk() (*int32, bool) {
	if o == nil || IsNil(o.Line) {
		return nil, false
	}
	return o.Line, true
}

// HasLine returns a boolean if a field has been set.
func (o *RestInsightAnnotation) HasLine() bool {
	if o != nil && !IsNil(o.Line) {
		return true
	}

	return false
}

// SetLine gets a reference to the given int32 and assigns it to the Line field.
func (o *RestInsightAnnotation) SetLine(v int32) {
	o.Line = &v
}

// GetLink returns the Link field value if set, zero value otherwise.
func (o *RestInsightAnnotation) GetLink() string {
	if o == nil || IsNil(o.Link) {
		var ret string
		return ret
	}
	return *o.Link
}

// GetLinkOk returns a tuple with the Link field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestInsightAnnotation) GetLinkOk() (*string, bool) {
	if o == nil || IsNil(o.Link) {
		return nil, false
	}
	return o.Link, true
}

// HasLink returns a boolean if a field has been set.
func (o *RestInsightAnnotation) HasLink() bool {
	if o != nil && !IsNil(o.Link) {
		return true
	}

	return false
}

// SetLink gets a reference to the given string and assigns it to the Link field.
func (o *RestInsightAnnotation) SetLink(v string) {
	o.Link = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *RestInsightAnnotation) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestInsightAnnotation) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *RestInsightAnnotation) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *RestInsightAnnotation) SetMessage(v string) {
	o.Message = &v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *RestInsightAnnotation) GetPath() string {
	if o == nil || IsNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestInsightAnnotation) GetPathOk() (*string, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *RestInsightAnnotation) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *RestInsightAnnotation) SetPath(v string) {
	o.Path = &v
}

// GetReportKey returns the ReportKey field value if set, zero value otherwise.
func (o *RestInsightAnnotation) GetReportKey() string {
	if o == nil || IsNil(o.ReportKey) {
		var ret string
		return ret
	}
	return *o.ReportKey
}

// GetReportKeyOk returns a tuple with the ReportKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestInsightAnnotation) GetReportKeyOk() (*string, bool) {
	if o == nil || IsNil(o.ReportKey) {
		return nil, false
	}
	return o.ReportKey, true
}

// HasReportKey returns a boolean if a field has been set.
func (o *RestInsightAnnotation) HasReportKey() bool {
	if o != nil && !IsNil(o.ReportKey) {
		return true
	}

	return false
}

// SetReportKey gets a reference to the given string and assigns it to the ReportKey field.
func (o *RestInsightAnnotation) SetReportKey(v string) {
	o.ReportKey = &v
}

// GetSeverity returns the Severity field value if set, zero value otherwise.
func (o *RestInsightAnnotation) GetSeverity() string {
	if o == nil || IsNil(o.Severity) {
		var ret string
		return ret
	}
	return *o.Severity
}

// GetSeverityOk returns a tuple with the Severity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestInsightAnnotation) GetSeverityOk() (*string, bool) {
	if o == nil || IsNil(o.Severity) {
		return nil, false
	}
	return o.Severity, true
}

// HasSeverity returns a boolean if a field has been set.
func (o *RestInsightAnnotation) HasSeverity() bool {
	if o != nil && !IsNil(o.Severity) {
		return true
	}

	return false
}

// SetSeverity gets a reference to the given string and assigns it to the Severity field.
func (o *RestInsightAnnotation) SetSeverity(v string) {
	o.Severity = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *RestInsightAnnotation) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestInsightAnnotation) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *RestInsightAnnotation) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *RestInsightAnnotation) SetType(v string) {
	o.Type = &v
}

func (o RestInsightAnnotation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestInsightAnnotation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ExternalId) {
		toSerialize["externalId"] = o.ExternalId
	}
	if !IsNil(o.Line) {
		toSerialize["line"] = o.Line
	}
	if !IsNil(o.Link) {
		toSerialize["link"] = o.Link
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	if !IsNil(o.ReportKey) {
		toSerialize["reportKey"] = o.ReportKey
	}
	if !IsNil(o.Severity) {
		toSerialize["severity"] = o.Severity
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableRestInsightAnnotation struct {
	value *RestInsightAnnotation
	isSet bool
}

func (v NullableRestInsightAnnotation) Get() *RestInsightAnnotation {
	return v.value
}

func (v *NullableRestInsightAnnotation) Set(val *RestInsightAnnotation) {
	v.value = val
	v.isSet = true
}

func (v NullableRestInsightAnnotation) IsSet() bool {
	return v.isSet
}

func (v *NullableRestInsightAnnotation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestInsightAnnotation(val *RestInsightAnnotation) *NullableRestInsightAnnotation {
	return &NullableRestInsightAnnotation{value: val, isSet: true}
}

func (v NullableRestInsightAnnotation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestInsightAnnotation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


