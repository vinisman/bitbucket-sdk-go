/*
Bitbucket Data Center

This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).

API version: 9.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RestInsightReportData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestInsightReportData{}

// RestInsightReportData struct for RestInsightReportData
type RestInsightReportData struct {
	Title *string `json:"title,omitempty"`
	Type *string `json:"type,omitempty" validate:"regexp=BOOLEAN|DATE|DURATION|LINK|NUMBER|PERCENTAGE|TEXT"`
	Value map[string]interface{} `json:"value,omitempty"`
}

// NewRestInsightReportData instantiates a new RestInsightReportData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestInsightReportData() *RestInsightReportData {
	this := RestInsightReportData{}
	return &this
}

// NewRestInsightReportDataWithDefaults instantiates a new RestInsightReportData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestInsightReportDataWithDefaults() *RestInsightReportData {
	this := RestInsightReportData{}
	return &this
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *RestInsightReportData) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestInsightReportData) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *RestInsightReportData) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *RestInsightReportData) SetTitle(v string) {
	o.Title = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *RestInsightReportData) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestInsightReportData) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *RestInsightReportData) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *RestInsightReportData) SetType(v string) {
	o.Type = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *RestInsightReportData) GetValue() map[string]interface{} {
	if o == nil || IsNil(o.Value) {
		var ret map[string]interface{}
		return ret
	}
	return o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestInsightReportData) GetValueOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Value) {
		return map[string]interface{}{}, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *RestInsightReportData) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given map[string]interface{} and assigns it to the Value field.
func (o *RestInsightReportData) SetValue(v map[string]interface{}) {
	o.Value = v
}

func (o RestInsightReportData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestInsightReportData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableRestInsightReportData struct {
	value *RestInsightReportData
	isSet bool
}

func (v NullableRestInsightReportData) Get() *RestInsightReportData {
	return v.value
}

func (v *NullableRestInsightReportData) Set(val *RestInsightReportData) {
	v.value = val
	v.isSet = true
}

func (v NullableRestInsightReportData) IsSet() bool {
	return v.isSet
}

func (v *NullableRestInsightReportData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestInsightReportData(val *RestInsightReportData) *NullableRestInsightReportData {
	return &NullableRestInsightReportData{value: val, isSet: true}
}

func (v NullableRestInsightReportData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestInsightReportData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


