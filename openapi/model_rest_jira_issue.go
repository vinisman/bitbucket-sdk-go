/*
Bitbucket Data Center

This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).

API version: 9.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RestJiraIssue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestJiraIssue{}

// RestJiraIssue struct for RestJiraIssue
type RestJiraIssue struct {
	Key *string `json:"key,omitempty"`
	Url *string `json:"url,omitempty"`
}

// NewRestJiraIssue instantiates a new RestJiraIssue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestJiraIssue() *RestJiraIssue {
	this := RestJiraIssue{}
	return &this
}

// NewRestJiraIssueWithDefaults instantiates a new RestJiraIssue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestJiraIssueWithDefaults() *RestJiraIssue {
	this := RestJiraIssue{}
	return &this
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *RestJiraIssue) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestJiraIssue) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *RestJiraIssue) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *RestJiraIssue) SetKey(v string) {
	o.Key = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *RestJiraIssue) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestJiraIssue) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *RestJiraIssue) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *RestJiraIssue) SetUrl(v string) {
	o.Url = &v
}

func (o RestJiraIssue) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestJiraIssue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	return toSerialize, nil
}

type NullableRestJiraIssue struct {
	value *RestJiraIssue
	isSet bool
}

func (v NullableRestJiraIssue) Get() *RestJiraIssue {
	return v.value
}

func (v *NullableRestJiraIssue) Set(val *RestJiraIssue) {
	v.value = val
	v.isSet = true
}

func (v NullableRestJiraIssue) IsSet() bool {
	return v.isSet
}

func (v *NullableRestJiraIssue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestJiraIssue(val *RestJiraIssue) *NullableRestJiraIssue {
	return &NullableRestJiraIssue{value: val, isSet: true}
}

func (v NullableRestJiraIssue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestJiraIssue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


