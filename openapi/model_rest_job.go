/*
Bitbucket Data Center

This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).

API version: 9.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RestJob type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestJob{}

// RestJob struct for RestJob
type RestJob struct {
	EndDate *int64 `json:"endDate,omitempty"`
	Id *int64 `json:"id,omitempty"`
	Initiator *RestCommentAnchorPullRequestAuthorUser `json:"initiator,omitempty"`
	NodeId *string `json:"nodeId,omitempty"`
	Progress *RestJobProgress `json:"progress,omitempty"`
	StartDate *int64 `json:"startDate,omitempty"`
	State *string `json:"state,omitempty"`
	Type *string `json:"type,omitempty"`
	UpdatedDate *int64 `json:"updatedDate,omitempty"`
}

// NewRestJob instantiates a new RestJob object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestJob() *RestJob {
	this := RestJob{}
	return &this
}

// NewRestJobWithDefaults instantiates a new RestJob object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestJobWithDefaults() *RestJob {
	this := RestJob{}
	return &this
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *RestJob) GetEndDate() int64 {
	if o == nil || IsNil(o.EndDate) {
		var ret int64
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestJob) GetEndDateOk() (*int64, bool) {
	if o == nil || IsNil(o.EndDate) {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *RestJob) HasEndDate() bool {
	if o != nil && !IsNil(o.EndDate) {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given int64 and assigns it to the EndDate field.
func (o *RestJob) SetEndDate(v int64) {
	o.EndDate = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RestJob) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestJob) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RestJob) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *RestJob) SetId(v int64) {
	o.Id = &v
}

// GetInitiator returns the Initiator field value if set, zero value otherwise.
func (o *RestJob) GetInitiator() RestCommentAnchorPullRequestAuthorUser {
	if o == nil || IsNil(o.Initiator) {
		var ret RestCommentAnchorPullRequestAuthorUser
		return ret
	}
	return *o.Initiator
}

// GetInitiatorOk returns a tuple with the Initiator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestJob) GetInitiatorOk() (*RestCommentAnchorPullRequestAuthorUser, bool) {
	if o == nil || IsNil(o.Initiator) {
		return nil, false
	}
	return o.Initiator, true
}

// HasInitiator returns a boolean if a field has been set.
func (o *RestJob) HasInitiator() bool {
	if o != nil && !IsNil(o.Initiator) {
		return true
	}

	return false
}

// SetInitiator gets a reference to the given RestCommentAnchorPullRequestAuthorUser and assigns it to the Initiator field.
func (o *RestJob) SetInitiator(v RestCommentAnchorPullRequestAuthorUser) {
	o.Initiator = &v
}

// GetNodeId returns the NodeId field value if set, zero value otherwise.
func (o *RestJob) GetNodeId() string {
	if o == nil || IsNil(o.NodeId) {
		var ret string
		return ret
	}
	return *o.NodeId
}

// GetNodeIdOk returns a tuple with the NodeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestJob) GetNodeIdOk() (*string, bool) {
	if o == nil || IsNil(o.NodeId) {
		return nil, false
	}
	return o.NodeId, true
}

// HasNodeId returns a boolean if a field has been set.
func (o *RestJob) HasNodeId() bool {
	if o != nil && !IsNil(o.NodeId) {
		return true
	}

	return false
}

// SetNodeId gets a reference to the given string and assigns it to the NodeId field.
func (o *RestJob) SetNodeId(v string) {
	o.NodeId = &v
}

// GetProgress returns the Progress field value if set, zero value otherwise.
func (o *RestJob) GetProgress() RestJobProgress {
	if o == nil || IsNil(o.Progress) {
		var ret RestJobProgress
		return ret
	}
	return *o.Progress
}

// GetProgressOk returns a tuple with the Progress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestJob) GetProgressOk() (*RestJobProgress, bool) {
	if o == nil || IsNil(o.Progress) {
		return nil, false
	}
	return o.Progress, true
}

// HasProgress returns a boolean if a field has been set.
func (o *RestJob) HasProgress() bool {
	if o != nil && !IsNil(o.Progress) {
		return true
	}

	return false
}

// SetProgress gets a reference to the given RestJobProgress and assigns it to the Progress field.
func (o *RestJob) SetProgress(v RestJobProgress) {
	o.Progress = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *RestJob) GetStartDate() int64 {
	if o == nil || IsNil(o.StartDate) {
		var ret int64
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestJob) GetStartDateOk() (*int64, bool) {
	if o == nil || IsNil(o.StartDate) {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *RestJob) HasStartDate() bool {
	if o != nil && !IsNil(o.StartDate) {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given int64 and assigns it to the StartDate field.
func (o *RestJob) SetStartDate(v int64) {
	o.StartDate = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *RestJob) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestJob) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *RestJob) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *RestJob) SetState(v string) {
	o.State = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *RestJob) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestJob) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *RestJob) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *RestJob) SetType(v string) {
	o.Type = &v
}

// GetUpdatedDate returns the UpdatedDate field value if set, zero value otherwise.
func (o *RestJob) GetUpdatedDate() int64 {
	if o == nil || IsNil(o.UpdatedDate) {
		var ret int64
		return ret
	}
	return *o.UpdatedDate
}

// GetUpdatedDateOk returns a tuple with the UpdatedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestJob) GetUpdatedDateOk() (*int64, bool) {
	if o == nil || IsNil(o.UpdatedDate) {
		return nil, false
	}
	return o.UpdatedDate, true
}

// HasUpdatedDate returns a boolean if a field has been set.
func (o *RestJob) HasUpdatedDate() bool {
	if o != nil && !IsNil(o.UpdatedDate) {
		return true
	}

	return false
}

// SetUpdatedDate gets a reference to the given int64 and assigns it to the UpdatedDate field.
func (o *RestJob) SetUpdatedDate(v int64) {
	o.UpdatedDate = &v
}

func (o RestJob) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestJob) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EndDate) {
		toSerialize["endDate"] = o.EndDate
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Initiator) {
		toSerialize["initiator"] = o.Initiator
	}
	if !IsNil(o.NodeId) {
		toSerialize["nodeId"] = o.NodeId
	}
	if !IsNil(o.Progress) {
		toSerialize["progress"] = o.Progress
	}
	if !IsNil(o.StartDate) {
		toSerialize["startDate"] = o.StartDate
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.UpdatedDate) {
		toSerialize["updatedDate"] = o.UpdatedDate
	}
	return toSerialize, nil
}

type NullableRestJob struct {
	value *RestJob
	isSet bool
}

func (v NullableRestJob) Get() *RestJob {
	return v.value
}

func (v *NullableRestJob) Set(val *RestJob) {
	v.value = val
	v.isSet = true
}

func (v NullableRestJob) IsSet() bool {
	return v.isSet
}

func (v *NullableRestJob) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestJob(val *RestJob) *NullableRestJob {
	return &NullableRestJob{value: val, isSet: true}
}

func (v NullableRestJob) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestJob) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


