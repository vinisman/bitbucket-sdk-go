/*
Bitbucket Data Center

This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).

API version: 9.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RestJobProgress type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestJobProgress{}

// RestJobProgress struct for RestJobProgress
type RestJobProgress struct {
	Message *string `json:"message,omitempty"`
	Percentage *int32 `json:"percentage,omitempty"`
}

// NewRestJobProgress instantiates a new RestJobProgress object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestJobProgress() *RestJobProgress {
	this := RestJobProgress{}
	return &this
}

// NewRestJobProgressWithDefaults instantiates a new RestJobProgress object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestJobProgressWithDefaults() *RestJobProgress {
	this := RestJobProgress{}
	return &this
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *RestJobProgress) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestJobProgress) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *RestJobProgress) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *RestJobProgress) SetMessage(v string) {
	o.Message = &v
}

// GetPercentage returns the Percentage field value if set, zero value otherwise.
func (o *RestJobProgress) GetPercentage() int32 {
	if o == nil || IsNil(o.Percentage) {
		var ret int32
		return ret
	}
	return *o.Percentage
}

// GetPercentageOk returns a tuple with the Percentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestJobProgress) GetPercentageOk() (*int32, bool) {
	if o == nil || IsNil(o.Percentage) {
		return nil, false
	}
	return o.Percentage, true
}

// HasPercentage returns a boolean if a field has been set.
func (o *RestJobProgress) HasPercentage() bool {
	if o != nil && !IsNil(o.Percentage) {
		return true
	}

	return false
}

// SetPercentage gets a reference to the given int32 and assigns it to the Percentage field.
func (o *RestJobProgress) SetPercentage(v int32) {
	o.Percentage = &v
}

func (o RestJobProgress) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestJobProgress) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.Percentage) {
		toSerialize["percentage"] = o.Percentage
	}
	return toSerialize, nil
}

type NullableRestJobProgress struct {
	value *RestJobProgress
	isSet bool
}

func (v NullableRestJobProgress) Get() *RestJobProgress {
	return v.value
}

func (v *NullableRestJobProgress) Set(val *RestJobProgress) {
	v.value = val
	v.isSet = true
}

func (v NullableRestJobProgress) IsSet() bool {
	return v.isSet
}

func (v *NullableRestJobProgress) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestJobProgress(val *RestJobProgress) *NullableRestJobProgress {
	return &NullableRestJobProgress{value: val, isSet: true}
}

func (v NullableRestJobProgress) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestJobProgress) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


