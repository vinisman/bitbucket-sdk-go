/*
Bitbucket Data Center

This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).

API version: 9.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RestLabel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestLabel{}

// RestLabel struct for RestLabel
type RestLabel struct {
	Name *string `json:"name,omitempty"`
}

// NewRestLabel instantiates a new RestLabel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestLabel() *RestLabel {
	this := RestLabel{}
	return &this
}

// NewRestLabelWithDefaults instantiates a new RestLabel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestLabelWithDefaults() *RestLabel {
	this := RestLabel{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RestLabel) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestLabel) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RestLabel) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RestLabel) SetName(v string) {
	o.Name = &v
}

func (o RestLabel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestLabel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return toSerialize, nil
}

type NullableRestLabel struct {
	value *RestLabel
	isSet bool
}

func (v NullableRestLabel) Get() *RestLabel {
	return v.value
}

func (v *NullableRestLabel) Set(val *RestLabel) {
	v.value = val
	v.isSet = true
}

func (v NullableRestLabel) IsSet() bool {
	return v.isSet
}

func (v *NullableRestLabel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestLabel(val *RestLabel) *NullableRestLabel {
	return &NullableRestLabel{value: val, isSet: true}
}

func (v NullableRestLabel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestLabel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


