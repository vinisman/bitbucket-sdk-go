/*
Bitbucket Data Center

This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).

API version: 9.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RestLoggingSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestLoggingSettings{}

// RestLoggingSettings struct for RestLoggingSettings
type RestLoggingSettings struct {
	DebugLoggingEnabled *bool `json:"debugLoggingEnabled,omitempty"`
	ProfilingEnabled *bool `json:"profilingEnabled,omitempty"`
}

// NewRestLoggingSettings instantiates a new RestLoggingSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestLoggingSettings() *RestLoggingSettings {
	this := RestLoggingSettings{}
	return &this
}

// NewRestLoggingSettingsWithDefaults instantiates a new RestLoggingSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestLoggingSettingsWithDefaults() *RestLoggingSettings {
	this := RestLoggingSettings{}
	return &this
}

// GetDebugLoggingEnabled returns the DebugLoggingEnabled field value if set, zero value otherwise.
func (o *RestLoggingSettings) GetDebugLoggingEnabled() bool {
	if o == nil || IsNil(o.DebugLoggingEnabled) {
		var ret bool
		return ret
	}
	return *o.DebugLoggingEnabled
}

// GetDebugLoggingEnabledOk returns a tuple with the DebugLoggingEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestLoggingSettings) GetDebugLoggingEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.DebugLoggingEnabled) {
		return nil, false
	}
	return o.DebugLoggingEnabled, true
}

// HasDebugLoggingEnabled returns a boolean if a field has been set.
func (o *RestLoggingSettings) HasDebugLoggingEnabled() bool {
	if o != nil && !IsNil(o.DebugLoggingEnabled) {
		return true
	}

	return false
}

// SetDebugLoggingEnabled gets a reference to the given bool and assigns it to the DebugLoggingEnabled field.
func (o *RestLoggingSettings) SetDebugLoggingEnabled(v bool) {
	o.DebugLoggingEnabled = &v
}

// GetProfilingEnabled returns the ProfilingEnabled field value if set, zero value otherwise.
func (o *RestLoggingSettings) GetProfilingEnabled() bool {
	if o == nil || IsNil(o.ProfilingEnabled) {
		var ret bool
		return ret
	}
	return *o.ProfilingEnabled
}

// GetProfilingEnabledOk returns a tuple with the ProfilingEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestLoggingSettings) GetProfilingEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.ProfilingEnabled) {
		return nil, false
	}
	return o.ProfilingEnabled, true
}

// HasProfilingEnabled returns a boolean if a field has been set.
func (o *RestLoggingSettings) HasProfilingEnabled() bool {
	if o != nil && !IsNil(o.ProfilingEnabled) {
		return true
	}

	return false
}

// SetProfilingEnabled gets a reference to the given bool and assigns it to the ProfilingEnabled field.
func (o *RestLoggingSettings) SetProfilingEnabled(v bool) {
	o.ProfilingEnabled = &v
}

func (o RestLoggingSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestLoggingSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DebugLoggingEnabled) {
		toSerialize["debugLoggingEnabled"] = o.DebugLoggingEnabled
	}
	if !IsNil(o.ProfilingEnabled) {
		toSerialize["profilingEnabled"] = o.ProfilingEnabled
	}
	return toSerialize, nil
}

type NullableRestLoggingSettings struct {
	value *RestLoggingSettings
	isSet bool
}

func (v NullableRestLoggingSettings) Get() *RestLoggingSettings {
	return v.value
}

func (v *NullableRestLoggingSettings) Set(val *RestLoggingSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableRestLoggingSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableRestLoggingSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestLoggingSettings(val *RestLoggingSettings) *NullableRestLoggingSettings {
	return &NullableRestLoggingSettings{value: val, isSet: true}
}

func (v NullableRestLoggingSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestLoggingSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


