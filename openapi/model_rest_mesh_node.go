/*
Bitbucket Data Center

This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).

API version: 9.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RestMeshNode type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestMeshNode{}

// RestMeshNode struct for RestMeshNode
type RestMeshNode struct {
	AvailabilityZone *string `json:"availabilityZone,omitempty"`
	Id *string `json:"id,omitempty"`
	LastSeenDate *float32 `json:"lastSeenDate,omitempty"`
	Name *string `json:"name,omitempty"`
	Offline *bool `json:"offline,omitempty"`
	RpcId *string `json:"rpcId,omitempty"`
	RpcUrl *string `json:"rpcUrl,omitempty"`
	State *string `json:"state,omitempty"`
}

// NewRestMeshNode instantiates a new RestMeshNode object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestMeshNode() *RestMeshNode {
	this := RestMeshNode{}
	return &this
}

// NewRestMeshNodeWithDefaults instantiates a new RestMeshNode object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestMeshNodeWithDefaults() *RestMeshNode {
	this := RestMeshNode{}
	return &this
}

// GetAvailabilityZone returns the AvailabilityZone field value if set, zero value otherwise.
func (o *RestMeshNode) GetAvailabilityZone() string {
	if o == nil || IsNil(o.AvailabilityZone) {
		var ret string
		return ret
	}
	return *o.AvailabilityZone
}

// GetAvailabilityZoneOk returns a tuple with the AvailabilityZone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestMeshNode) GetAvailabilityZoneOk() (*string, bool) {
	if o == nil || IsNil(o.AvailabilityZone) {
		return nil, false
	}
	return o.AvailabilityZone, true
}

// HasAvailabilityZone returns a boolean if a field has been set.
func (o *RestMeshNode) HasAvailabilityZone() bool {
	if o != nil && !IsNil(o.AvailabilityZone) {
		return true
	}

	return false
}

// SetAvailabilityZone gets a reference to the given string and assigns it to the AvailabilityZone field.
func (o *RestMeshNode) SetAvailabilityZone(v string) {
	o.AvailabilityZone = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RestMeshNode) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestMeshNode) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RestMeshNode) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *RestMeshNode) SetId(v string) {
	o.Id = &v
}

// GetLastSeenDate returns the LastSeenDate field value if set, zero value otherwise.
func (o *RestMeshNode) GetLastSeenDate() float32 {
	if o == nil || IsNil(o.LastSeenDate) {
		var ret float32
		return ret
	}
	return *o.LastSeenDate
}

// GetLastSeenDateOk returns a tuple with the LastSeenDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestMeshNode) GetLastSeenDateOk() (*float32, bool) {
	if o == nil || IsNil(o.LastSeenDate) {
		return nil, false
	}
	return o.LastSeenDate, true
}

// HasLastSeenDate returns a boolean if a field has been set.
func (o *RestMeshNode) HasLastSeenDate() bool {
	if o != nil && !IsNil(o.LastSeenDate) {
		return true
	}

	return false
}

// SetLastSeenDate gets a reference to the given float32 and assigns it to the LastSeenDate field.
func (o *RestMeshNode) SetLastSeenDate(v float32) {
	o.LastSeenDate = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RestMeshNode) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestMeshNode) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RestMeshNode) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RestMeshNode) SetName(v string) {
	o.Name = &v
}

// GetOffline returns the Offline field value if set, zero value otherwise.
func (o *RestMeshNode) GetOffline() bool {
	if o == nil || IsNil(o.Offline) {
		var ret bool
		return ret
	}
	return *o.Offline
}

// GetOfflineOk returns a tuple with the Offline field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestMeshNode) GetOfflineOk() (*bool, bool) {
	if o == nil || IsNil(o.Offline) {
		return nil, false
	}
	return o.Offline, true
}

// HasOffline returns a boolean if a field has been set.
func (o *RestMeshNode) HasOffline() bool {
	if o != nil && !IsNil(o.Offline) {
		return true
	}

	return false
}

// SetOffline gets a reference to the given bool and assigns it to the Offline field.
func (o *RestMeshNode) SetOffline(v bool) {
	o.Offline = &v
}

// GetRpcId returns the RpcId field value if set, zero value otherwise.
func (o *RestMeshNode) GetRpcId() string {
	if o == nil || IsNil(o.RpcId) {
		var ret string
		return ret
	}
	return *o.RpcId
}

// GetRpcIdOk returns a tuple with the RpcId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestMeshNode) GetRpcIdOk() (*string, bool) {
	if o == nil || IsNil(o.RpcId) {
		return nil, false
	}
	return o.RpcId, true
}

// HasRpcId returns a boolean if a field has been set.
func (o *RestMeshNode) HasRpcId() bool {
	if o != nil && !IsNil(o.RpcId) {
		return true
	}

	return false
}

// SetRpcId gets a reference to the given string and assigns it to the RpcId field.
func (o *RestMeshNode) SetRpcId(v string) {
	o.RpcId = &v
}

// GetRpcUrl returns the RpcUrl field value if set, zero value otherwise.
func (o *RestMeshNode) GetRpcUrl() string {
	if o == nil || IsNil(o.RpcUrl) {
		var ret string
		return ret
	}
	return *o.RpcUrl
}

// GetRpcUrlOk returns a tuple with the RpcUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestMeshNode) GetRpcUrlOk() (*string, bool) {
	if o == nil || IsNil(o.RpcUrl) {
		return nil, false
	}
	return o.RpcUrl, true
}

// HasRpcUrl returns a boolean if a field has been set.
func (o *RestMeshNode) HasRpcUrl() bool {
	if o != nil && !IsNil(o.RpcUrl) {
		return true
	}

	return false
}

// SetRpcUrl gets a reference to the given string and assigns it to the RpcUrl field.
func (o *RestMeshNode) SetRpcUrl(v string) {
	o.RpcUrl = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *RestMeshNode) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestMeshNode) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *RestMeshNode) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *RestMeshNode) SetState(v string) {
	o.State = &v
}

func (o RestMeshNode) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestMeshNode) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AvailabilityZone) {
		toSerialize["availabilityZone"] = o.AvailabilityZone
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.LastSeenDate) {
		toSerialize["lastSeenDate"] = o.LastSeenDate
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Offline) {
		toSerialize["offline"] = o.Offline
	}
	if !IsNil(o.RpcId) {
		toSerialize["rpcId"] = o.RpcId
	}
	if !IsNil(o.RpcUrl) {
		toSerialize["rpcUrl"] = o.RpcUrl
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	return toSerialize, nil
}

type NullableRestMeshNode struct {
	value *RestMeshNode
	isSet bool
}

func (v NullableRestMeshNode) Get() *RestMeshNode {
	return v.value
}

func (v *NullableRestMeshNode) Set(val *RestMeshNode) {
	v.value = val
	v.isSet = true
}

func (v NullableRestMeshNode) IsSet() bool {
	return v.isSet
}

func (v *NullableRestMeshNode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestMeshNode(val *RestMeshNode) *NullableRestMeshNode {
	return &NullableRestMeshNode{value: val, isSet: true}
}

func (v NullableRestMeshNode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestMeshNode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


