/*
Bitbucket Data Center

This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).

API version: 9.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RestMigrationRepository type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestMigrationRepository{}

// RestMigrationRepository struct for RestMigrationRepository
type RestMigrationRepository struct {
	MigrationState *string `json:"migrationState,omitempty"`
	Repository *RestChangesetRepository `json:"repository,omitempty"`
}

// NewRestMigrationRepository instantiates a new RestMigrationRepository object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestMigrationRepository() *RestMigrationRepository {
	this := RestMigrationRepository{}
	return &this
}

// NewRestMigrationRepositoryWithDefaults instantiates a new RestMigrationRepository object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestMigrationRepositoryWithDefaults() *RestMigrationRepository {
	this := RestMigrationRepository{}
	return &this
}

// GetMigrationState returns the MigrationState field value if set, zero value otherwise.
func (o *RestMigrationRepository) GetMigrationState() string {
	if o == nil || IsNil(o.MigrationState) {
		var ret string
		return ret
	}
	return *o.MigrationState
}

// GetMigrationStateOk returns a tuple with the MigrationState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestMigrationRepository) GetMigrationStateOk() (*string, bool) {
	if o == nil || IsNil(o.MigrationState) {
		return nil, false
	}
	return o.MigrationState, true
}

// HasMigrationState returns a boolean if a field has been set.
func (o *RestMigrationRepository) HasMigrationState() bool {
	if o != nil && !IsNil(o.MigrationState) {
		return true
	}

	return false
}

// SetMigrationState gets a reference to the given string and assigns it to the MigrationState field.
func (o *RestMigrationRepository) SetMigrationState(v string) {
	o.MigrationState = &v
}

// GetRepository returns the Repository field value if set, zero value otherwise.
func (o *RestMigrationRepository) GetRepository() RestChangesetRepository {
	if o == nil || IsNil(o.Repository) {
		var ret RestChangesetRepository
		return ret
	}
	return *o.Repository
}

// GetRepositoryOk returns a tuple with the Repository field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestMigrationRepository) GetRepositoryOk() (*RestChangesetRepository, bool) {
	if o == nil || IsNil(o.Repository) {
		return nil, false
	}
	return o.Repository, true
}

// HasRepository returns a boolean if a field has been set.
func (o *RestMigrationRepository) HasRepository() bool {
	if o != nil && !IsNil(o.Repository) {
		return true
	}

	return false
}

// SetRepository gets a reference to the given RestChangesetRepository and assigns it to the Repository field.
func (o *RestMigrationRepository) SetRepository(v RestChangesetRepository) {
	o.Repository = &v
}

func (o RestMigrationRepository) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestMigrationRepository) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MigrationState) {
		toSerialize["migrationState"] = o.MigrationState
	}
	if !IsNil(o.Repository) {
		toSerialize["repository"] = o.Repository
	}
	return toSerialize, nil
}

type NullableRestMigrationRepository struct {
	value *RestMigrationRepository
	isSet bool
}

func (v NullableRestMigrationRepository) Get() *RestMigrationRepository {
	return v.value
}

func (v *NullableRestMigrationRepository) Set(val *RestMigrationRepository) {
	v.value = val
	v.isSet = true
}

func (v NullableRestMigrationRepository) IsSet() bool {
	return v.isSet
}

func (v *NullableRestMigrationRepository) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestMigrationRepository(val *RestMigrationRepository) *NullableRestMigrationRepository {
	return &NullableRestMigrationRepository{value: val, isSet: true}
}

func (v NullableRestMigrationRepository) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestMigrationRepository) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


