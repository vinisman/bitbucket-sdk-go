/*
Bitbucket Data Center

This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).

API version: 9.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RestMirrorHashes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestMirrorHashes{}

// RestMirrorHashes struct for RestMirrorHashes
type RestMirrorHashes struct {
	Content *string `json:"content,omitempty"`
	Metadata *string `json:"metadata,omitempty"`
}

// NewRestMirrorHashes instantiates a new RestMirrorHashes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestMirrorHashes() *RestMirrorHashes {
	this := RestMirrorHashes{}
	return &this
}

// NewRestMirrorHashesWithDefaults instantiates a new RestMirrorHashes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestMirrorHashesWithDefaults() *RestMirrorHashes {
	this := RestMirrorHashes{}
	return &this
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *RestMirrorHashes) GetContent() string {
	if o == nil || IsNil(o.Content) {
		var ret string
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestMirrorHashes) GetContentOk() (*string, bool) {
	if o == nil || IsNil(o.Content) {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *RestMirrorHashes) HasContent() bool {
	if o != nil && !IsNil(o.Content) {
		return true
	}

	return false
}

// SetContent gets a reference to the given string and assigns it to the Content field.
func (o *RestMirrorHashes) SetContent(v string) {
	o.Content = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *RestMirrorHashes) GetMetadata() string {
	if o == nil || IsNil(o.Metadata) {
		var ret string
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestMirrorHashes) GetMetadataOk() (*string, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *RestMirrorHashes) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given string and assigns it to the Metadata field.
func (o *RestMirrorHashes) SetMetadata(v string) {
	o.Metadata = &v
}

func (o RestMirrorHashes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestMirrorHashes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Content) {
		toSerialize["content"] = o.Content
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	return toSerialize, nil
}

type NullableRestMirrorHashes struct {
	value *RestMirrorHashes
	isSet bool
}

func (v NullableRestMirrorHashes) Get() *RestMirrorHashes {
	return v.value
}

func (v *NullableRestMirrorHashes) Set(val *RestMirrorHashes) {
	v.value = val
	v.isSet = true
}

func (v NullableRestMirrorHashes) IsSet() bool {
	return v.isSet
}

func (v *NullableRestMirrorHashes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestMirrorHashes(val *RestMirrorHashes) *NullableRestMirrorHashes {
	return &NullableRestMirrorHashes{value: val, isSet: true}
}

func (v NullableRestMirrorHashes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestMirrorHashes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


