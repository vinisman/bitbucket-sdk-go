/*
Bitbucket Data Center

This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).

API version: 9.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the RestMirrorRepositorySynchronizationStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestMirrorRepositorySynchronizationStatus{}

// RestMirrorRepositorySynchronizationStatus struct for RestMirrorRepositorySynchronizationStatus
type RestMirrorRepositorySynchronizationStatus struct {
	ExternalRepoId *string `json:"externalRepoId,omitempty"`
	FailedSyncCount *int32 `json:"failedSyncCount,omitempty"`
	Hashes *RestMirrorRepositorySynchronizationStatusHashes `json:"hashes,omitempty"`
	InitialSyncDate *time.Time `json:"initialSyncDate,omitempty"`
	LastSyncDate *time.Time `json:"lastSyncDate,omitempty"`
	LocalProjectId *int32 `json:"localProjectId,omitempty"`
	LocalRepoId *int32 `json:"localRepoId,omitempty"`
	UpstreamId *string `json:"upstreamId,omitempty"`
}

// NewRestMirrorRepositorySynchronizationStatus instantiates a new RestMirrorRepositorySynchronizationStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestMirrorRepositorySynchronizationStatus() *RestMirrorRepositorySynchronizationStatus {
	this := RestMirrorRepositorySynchronizationStatus{}
	return &this
}

// NewRestMirrorRepositorySynchronizationStatusWithDefaults instantiates a new RestMirrorRepositorySynchronizationStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestMirrorRepositorySynchronizationStatusWithDefaults() *RestMirrorRepositorySynchronizationStatus {
	this := RestMirrorRepositorySynchronizationStatus{}
	return &this
}

// GetExternalRepoId returns the ExternalRepoId field value if set, zero value otherwise.
func (o *RestMirrorRepositorySynchronizationStatus) GetExternalRepoId() string {
	if o == nil || IsNil(o.ExternalRepoId) {
		var ret string
		return ret
	}
	return *o.ExternalRepoId
}

// GetExternalRepoIdOk returns a tuple with the ExternalRepoId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestMirrorRepositorySynchronizationStatus) GetExternalRepoIdOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalRepoId) {
		return nil, false
	}
	return o.ExternalRepoId, true
}

// HasExternalRepoId returns a boolean if a field has been set.
func (o *RestMirrorRepositorySynchronizationStatus) HasExternalRepoId() bool {
	if o != nil && !IsNil(o.ExternalRepoId) {
		return true
	}

	return false
}

// SetExternalRepoId gets a reference to the given string and assigns it to the ExternalRepoId field.
func (o *RestMirrorRepositorySynchronizationStatus) SetExternalRepoId(v string) {
	o.ExternalRepoId = &v
}

// GetFailedSyncCount returns the FailedSyncCount field value if set, zero value otherwise.
func (o *RestMirrorRepositorySynchronizationStatus) GetFailedSyncCount() int32 {
	if o == nil || IsNil(o.FailedSyncCount) {
		var ret int32
		return ret
	}
	return *o.FailedSyncCount
}

// GetFailedSyncCountOk returns a tuple with the FailedSyncCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestMirrorRepositorySynchronizationStatus) GetFailedSyncCountOk() (*int32, bool) {
	if o == nil || IsNil(o.FailedSyncCount) {
		return nil, false
	}
	return o.FailedSyncCount, true
}

// HasFailedSyncCount returns a boolean if a field has been set.
func (o *RestMirrorRepositorySynchronizationStatus) HasFailedSyncCount() bool {
	if o != nil && !IsNil(o.FailedSyncCount) {
		return true
	}

	return false
}

// SetFailedSyncCount gets a reference to the given int32 and assigns it to the FailedSyncCount field.
func (o *RestMirrorRepositorySynchronizationStatus) SetFailedSyncCount(v int32) {
	o.FailedSyncCount = &v
}

// GetHashes returns the Hashes field value if set, zero value otherwise.
func (o *RestMirrorRepositorySynchronizationStatus) GetHashes() RestMirrorRepositorySynchronizationStatusHashes {
	if o == nil || IsNil(o.Hashes) {
		var ret RestMirrorRepositorySynchronizationStatusHashes
		return ret
	}
	return *o.Hashes
}

// GetHashesOk returns a tuple with the Hashes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestMirrorRepositorySynchronizationStatus) GetHashesOk() (*RestMirrorRepositorySynchronizationStatusHashes, bool) {
	if o == nil || IsNil(o.Hashes) {
		return nil, false
	}
	return o.Hashes, true
}

// HasHashes returns a boolean if a field has been set.
func (o *RestMirrorRepositorySynchronizationStatus) HasHashes() bool {
	if o != nil && !IsNil(o.Hashes) {
		return true
	}

	return false
}

// SetHashes gets a reference to the given RestMirrorRepositorySynchronizationStatusHashes and assigns it to the Hashes field.
func (o *RestMirrorRepositorySynchronizationStatus) SetHashes(v RestMirrorRepositorySynchronizationStatusHashes) {
	o.Hashes = &v
}

// GetInitialSyncDate returns the InitialSyncDate field value if set, zero value otherwise.
func (o *RestMirrorRepositorySynchronizationStatus) GetInitialSyncDate() time.Time {
	if o == nil || IsNil(o.InitialSyncDate) {
		var ret time.Time
		return ret
	}
	return *o.InitialSyncDate
}

// GetInitialSyncDateOk returns a tuple with the InitialSyncDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestMirrorRepositorySynchronizationStatus) GetInitialSyncDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.InitialSyncDate) {
		return nil, false
	}
	return o.InitialSyncDate, true
}

// HasInitialSyncDate returns a boolean if a field has been set.
func (o *RestMirrorRepositorySynchronizationStatus) HasInitialSyncDate() bool {
	if o != nil && !IsNil(o.InitialSyncDate) {
		return true
	}

	return false
}

// SetInitialSyncDate gets a reference to the given time.Time and assigns it to the InitialSyncDate field.
func (o *RestMirrorRepositorySynchronizationStatus) SetInitialSyncDate(v time.Time) {
	o.InitialSyncDate = &v
}

// GetLastSyncDate returns the LastSyncDate field value if set, zero value otherwise.
func (o *RestMirrorRepositorySynchronizationStatus) GetLastSyncDate() time.Time {
	if o == nil || IsNil(o.LastSyncDate) {
		var ret time.Time
		return ret
	}
	return *o.LastSyncDate
}

// GetLastSyncDateOk returns a tuple with the LastSyncDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestMirrorRepositorySynchronizationStatus) GetLastSyncDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastSyncDate) {
		return nil, false
	}
	return o.LastSyncDate, true
}

// HasLastSyncDate returns a boolean if a field has been set.
func (o *RestMirrorRepositorySynchronizationStatus) HasLastSyncDate() bool {
	if o != nil && !IsNil(o.LastSyncDate) {
		return true
	}

	return false
}

// SetLastSyncDate gets a reference to the given time.Time and assigns it to the LastSyncDate field.
func (o *RestMirrorRepositorySynchronizationStatus) SetLastSyncDate(v time.Time) {
	o.LastSyncDate = &v
}

// GetLocalProjectId returns the LocalProjectId field value if set, zero value otherwise.
func (o *RestMirrorRepositorySynchronizationStatus) GetLocalProjectId() int32 {
	if o == nil || IsNil(o.LocalProjectId) {
		var ret int32
		return ret
	}
	return *o.LocalProjectId
}

// GetLocalProjectIdOk returns a tuple with the LocalProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestMirrorRepositorySynchronizationStatus) GetLocalProjectIdOk() (*int32, bool) {
	if o == nil || IsNil(o.LocalProjectId) {
		return nil, false
	}
	return o.LocalProjectId, true
}

// HasLocalProjectId returns a boolean if a field has been set.
func (o *RestMirrorRepositorySynchronizationStatus) HasLocalProjectId() bool {
	if o != nil && !IsNil(o.LocalProjectId) {
		return true
	}

	return false
}

// SetLocalProjectId gets a reference to the given int32 and assigns it to the LocalProjectId field.
func (o *RestMirrorRepositorySynchronizationStatus) SetLocalProjectId(v int32) {
	o.LocalProjectId = &v
}

// GetLocalRepoId returns the LocalRepoId field value if set, zero value otherwise.
func (o *RestMirrorRepositorySynchronizationStatus) GetLocalRepoId() int32 {
	if o == nil || IsNil(o.LocalRepoId) {
		var ret int32
		return ret
	}
	return *o.LocalRepoId
}

// GetLocalRepoIdOk returns a tuple with the LocalRepoId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestMirrorRepositorySynchronizationStatus) GetLocalRepoIdOk() (*int32, bool) {
	if o == nil || IsNil(o.LocalRepoId) {
		return nil, false
	}
	return o.LocalRepoId, true
}

// HasLocalRepoId returns a boolean if a field has been set.
func (o *RestMirrorRepositorySynchronizationStatus) HasLocalRepoId() bool {
	if o != nil && !IsNil(o.LocalRepoId) {
		return true
	}

	return false
}

// SetLocalRepoId gets a reference to the given int32 and assigns it to the LocalRepoId field.
func (o *RestMirrorRepositorySynchronizationStatus) SetLocalRepoId(v int32) {
	o.LocalRepoId = &v
}

// GetUpstreamId returns the UpstreamId field value if set, zero value otherwise.
func (o *RestMirrorRepositorySynchronizationStatus) GetUpstreamId() string {
	if o == nil || IsNil(o.UpstreamId) {
		var ret string
		return ret
	}
	return *o.UpstreamId
}

// GetUpstreamIdOk returns a tuple with the UpstreamId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestMirrorRepositorySynchronizationStatus) GetUpstreamIdOk() (*string, bool) {
	if o == nil || IsNil(o.UpstreamId) {
		return nil, false
	}
	return o.UpstreamId, true
}

// HasUpstreamId returns a boolean if a field has been set.
func (o *RestMirrorRepositorySynchronizationStatus) HasUpstreamId() bool {
	if o != nil && !IsNil(o.UpstreamId) {
		return true
	}

	return false
}

// SetUpstreamId gets a reference to the given string and assigns it to the UpstreamId field.
func (o *RestMirrorRepositorySynchronizationStatus) SetUpstreamId(v string) {
	o.UpstreamId = &v
}

func (o RestMirrorRepositorySynchronizationStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestMirrorRepositorySynchronizationStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ExternalRepoId) {
		toSerialize["externalRepoId"] = o.ExternalRepoId
	}
	if !IsNil(o.FailedSyncCount) {
		toSerialize["failedSyncCount"] = o.FailedSyncCount
	}
	if !IsNil(o.Hashes) {
		toSerialize["hashes"] = o.Hashes
	}
	if !IsNil(o.InitialSyncDate) {
		toSerialize["initialSyncDate"] = o.InitialSyncDate
	}
	if !IsNil(o.LastSyncDate) {
		toSerialize["lastSyncDate"] = o.LastSyncDate
	}
	if !IsNil(o.LocalProjectId) {
		toSerialize["localProjectId"] = o.LocalProjectId
	}
	if !IsNil(o.LocalRepoId) {
		toSerialize["localRepoId"] = o.LocalRepoId
	}
	if !IsNil(o.UpstreamId) {
		toSerialize["upstreamId"] = o.UpstreamId
	}
	return toSerialize, nil
}

type NullableRestMirrorRepositorySynchronizationStatus struct {
	value *RestMirrorRepositorySynchronizationStatus
	isSet bool
}

func (v NullableRestMirrorRepositorySynchronizationStatus) Get() *RestMirrorRepositorySynchronizationStatus {
	return v.value
}

func (v *NullableRestMirrorRepositorySynchronizationStatus) Set(val *RestMirrorRepositorySynchronizationStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableRestMirrorRepositorySynchronizationStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableRestMirrorRepositorySynchronizationStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestMirrorRepositorySynchronizationStatus(val *RestMirrorRepositorySynchronizationStatus) *NullableRestMirrorRepositorySynchronizationStatus {
	return &NullableRestMirrorRepositorySynchronizationStatus{value: val, isSet: true}
}

func (v NullableRestMirrorRepositorySynchronizationStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestMirrorRepositorySynchronizationStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


