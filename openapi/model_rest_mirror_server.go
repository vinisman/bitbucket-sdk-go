/*
Bitbucket Data Center

This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).

API version: 9.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the RestMirrorServer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestMirrorServer{}

// RestMirrorServer struct for RestMirrorServer
type RestMirrorServer struct {
	BaseUrl *string `json:"baseUrl,omitempty"`
	Enabled *bool `json:"enabled,omitempty"`
	Id *string `json:"id,omitempty"`
	LastSeenDate *time.Time `json:"lastSeenDate,omitempty"`
	MirrorType *string `json:"mirrorType,omitempty"`
	Name *string `json:"name,omitempty"`
	ProductVersion *string `json:"productVersion,omitempty"`
}

// NewRestMirrorServer instantiates a new RestMirrorServer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestMirrorServer() *RestMirrorServer {
	this := RestMirrorServer{}
	return &this
}

// NewRestMirrorServerWithDefaults instantiates a new RestMirrorServer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestMirrorServerWithDefaults() *RestMirrorServer {
	this := RestMirrorServer{}
	return &this
}

// GetBaseUrl returns the BaseUrl field value if set, zero value otherwise.
func (o *RestMirrorServer) GetBaseUrl() string {
	if o == nil || IsNil(o.BaseUrl) {
		var ret string
		return ret
	}
	return *o.BaseUrl
}

// GetBaseUrlOk returns a tuple with the BaseUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestMirrorServer) GetBaseUrlOk() (*string, bool) {
	if o == nil || IsNil(o.BaseUrl) {
		return nil, false
	}
	return o.BaseUrl, true
}

// HasBaseUrl returns a boolean if a field has been set.
func (o *RestMirrorServer) HasBaseUrl() bool {
	if o != nil && !IsNil(o.BaseUrl) {
		return true
	}

	return false
}

// SetBaseUrl gets a reference to the given string and assigns it to the BaseUrl field.
func (o *RestMirrorServer) SetBaseUrl(v string) {
	o.BaseUrl = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *RestMirrorServer) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestMirrorServer) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *RestMirrorServer) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *RestMirrorServer) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RestMirrorServer) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestMirrorServer) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RestMirrorServer) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *RestMirrorServer) SetId(v string) {
	o.Id = &v
}

// GetLastSeenDate returns the LastSeenDate field value if set, zero value otherwise.
func (o *RestMirrorServer) GetLastSeenDate() time.Time {
	if o == nil || IsNil(o.LastSeenDate) {
		var ret time.Time
		return ret
	}
	return *o.LastSeenDate
}

// GetLastSeenDateOk returns a tuple with the LastSeenDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestMirrorServer) GetLastSeenDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastSeenDate) {
		return nil, false
	}
	return o.LastSeenDate, true
}

// HasLastSeenDate returns a boolean if a field has been set.
func (o *RestMirrorServer) HasLastSeenDate() bool {
	if o != nil && !IsNil(o.LastSeenDate) {
		return true
	}

	return false
}

// SetLastSeenDate gets a reference to the given time.Time and assigns it to the LastSeenDate field.
func (o *RestMirrorServer) SetLastSeenDate(v time.Time) {
	o.LastSeenDate = &v
}

// GetMirrorType returns the MirrorType field value if set, zero value otherwise.
func (o *RestMirrorServer) GetMirrorType() string {
	if o == nil || IsNil(o.MirrorType) {
		var ret string
		return ret
	}
	return *o.MirrorType
}

// GetMirrorTypeOk returns a tuple with the MirrorType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestMirrorServer) GetMirrorTypeOk() (*string, bool) {
	if o == nil || IsNil(o.MirrorType) {
		return nil, false
	}
	return o.MirrorType, true
}

// HasMirrorType returns a boolean if a field has been set.
func (o *RestMirrorServer) HasMirrorType() bool {
	if o != nil && !IsNil(o.MirrorType) {
		return true
	}

	return false
}

// SetMirrorType gets a reference to the given string and assigns it to the MirrorType field.
func (o *RestMirrorServer) SetMirrorType(v string) {
	o.MirrorType = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RestMirrorServer) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestMirrorServer) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RestMirrorServer) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RestMirrorServer) SetName(v string) {
	o.Name = &v
}

// GetProductVersion returns the ProductVersion field value if set, zero value otherwise.
func (o *RestMirrorServer) GetProductVersion() string {
	if o == nil || IsNil(o.ProductVersion) {
		var ret string
		return ret
	}
	return *o.ProductVersion
}

// GetProductVersionOk returns a tuple with the ProductVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestMirrorServer) GetProductVersionOk() (*string, bool) {
	if o == nil || IsNil(o.ProductVersion) {
		return nil, false
	}
	return o.ProductVersion, true
}

// HasProductVersion returns a boolean if a field has been set.
func (o *RestMirrorServer) HasProductVersion() bool {
	if o != nil && !IsNil(o.ProductVersion) {
		return true
	}

	return false
}

// SetProductVersion gets a reference to the given string and assigns it to the ProductVersion field.
func (o *RestMirrorServer) SetProductVersion(v string) {
	o.ProductVersion = &v
}

func (o RestMirrorServer) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestMirrorServer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BaseUrl) {
		toSerialize["baseUrl"] = o.BaseUrl
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.LastSeenDate) {
		toSerialize["lastSeenDate"] = o.LastSeenDate
	}
	if !IsNil(o.MirrorType) {
		toSerialize["mirrorType"] = o.MirrorType
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.ProductVersion) {
		toSerialize["productVersion"] = o.ProductVersion
	}
	return toSerialize, nil
}

type NullableRestMirrorServer struct {
	value *RestMirrorServer
	isSet bool
}

func (v NullableRestMirrorServer) Get() *RestMirrorServer {
	return v.value
}

func (v *NullableRestMirrorServer) Set(val *RestMirrorServer) {
	v.value = val
	v.isSet = true
}

func (v NullableRestMirrorServer) IsSet() bool {
	return v.isSet
}

func (v *NullableRestMirrorServer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestMirrorServer(val *RestMirrorServer) *NullableRestMirrorServer {
	return &NullableRestMirrorServer{value: val, isSet: true}
}

func (v NullableRestMirrorServer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestMirrorServer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


