/*
Bitbucket Data Center

This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).

API version: 9.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RestMirrorUpgradeRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestMirrorUpgradeRequest{}

// RestMirrorUpgradeRequest struct for RestMirrorUpgradeRequest
type RestMirrorUpgradeRequest struct {
	BaseUrl *string `json:"baseUrl,omitempty"`
	ProductVersion *string `json:"productVersion,omitempty"`
}

// NewRestMirrorUpgradeRequest instantiates a new RestMirrorUpgradeRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestMirrorUpgradeRequest() *RestMirrorUpgradeRequest {
	this := RestMirrorUpgradeRequest{}
	return &this
}

// NewRestMirrorUpgradeRequestWithDefaults instantiates a new RestMirrorUpgradeRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestMirrorUpgradeRequestWithDefaults() *RestMirrorUpgradeRequest {
	this := RestMirrorUpgradeRequest{}
	return &this
}

// GetBaseUrl returns the BaseUrl field value if set, zero value otherwise.
func (o *RestMirrorUpgradeRequest) GetBaseUrl() string {
	if o == nil || IsNil(o.BaseUrl) {
		var ret string
		return ret
	}
	return *o.BaseUrl
}

// GetBaseUrlOk returns a tuple with the BaseUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestMirrorUpgradeRequest) GetBaseUrlOk() (*string, bool) {
	if o == nil || IsNil(o.BaseUrl) {
		return nil, false
	}
	return o.BaseUrl, true
}

// HasBaseUrl returns a boolean if a field has been set.
func (o *RestMirrorUpgradeRequest) HasBaseUrl() bool {
	if o != nil && !IsNil(o.BaseUrl) {
		return true
	}

	return false
}

// SetBaseUrl gets a reference to the given string and assigns it to the BaseUrl field.
func (o *RestMirrorUpgradeRequest) SetBaseUrl(v string) {
	o.BaseUrl = &v
}

// GetProductVersion returns the ProductVersion field value if set, zero value otherwise.
func (o *RestMirrorUpgradeRequest) GetProductVersion() string {
	if o == nil || IsNil(o.ProductVersion) {
		var ret string
		return ret
	}
	return *o.ProductVersion
}

// GetProductVersionOk returns a tuple with the ProductVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestMirrorUpgradeRequest) GetProductVersionOk() (*string, bool) {
	if o == nil || IsNil(o.ProductVersion) {
		return nil, false
	}
	return o.ProductVersion, true
}

// HasProductVersion returns a boolean if a field has been set.
func (o *RestMirrorUpgradeRequest) HasProductVersion() bool {
	if o != nil && !IsNil(o.ProductVersion) {
		return true
	}

	return false
}

// SetProductVersion gets a reference to the given string and assigns it to the ProductVersion field.
func (o *RestMirrorUpgradeRequest) SetProductVersion(v string) {
	o.ProductVersion = &v
}

func (o RestMirrorUpgradeRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestMirrorUpgradeRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BaseUrl) {
		toSerialize["baseUrl"] = o.BaseUrl
	}
	if !IsNil(o.ProductVersion) {
		toSerialize["productVersion"] = o.ProductVersion
	}
	return toSerialize, nil
}

type NullableRestMirrorUpgradeRequest struct {
	value *RestMirrorUpgradeRequest
	isSet bool
}

func (v NullableRestMirrorUpgradeRequest) Get() *RestMirrorUpgradeRequest {
	return v.value
}

func (v *NullableRestMirrorUpgradeRequest) Set(val *RestMirrorUpgradeRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableRestMirrorUpgradeRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRestMirrorUpgradeRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestMirrorUpgradeRequest(val *RestMirrorUpgradeRequest) *NullableRestMirrorUpgradeRequest {
	return &NullableRestMirrorUpgradeRequest{value: val, isSet: true}
}

func (v NullableRestMirrorUpgradeRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestMirrorUpgradeRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


