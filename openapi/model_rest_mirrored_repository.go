/*
Bitbucket Data Center

This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).

API version: 9.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the RestMirroredRepository type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestMirroredRepository{}

// RestMirroredRepository struct for RestMirroredRepository
type RestMirroredRepository struct {
	Available *bool `json:"available,omitempty"`
	CloneUrls []RestNamedLink `json:"cloneUrls,omitempty"`
	LastUpdated *time.Time `json:"lastUpdated,omitempty"`
	MirrorName *string `json:"mirrorName,omitempty"`
	PushUrls []RestNamedLink `json:"pushUrls,omitempty"`
	RepositoryId *string `json:"repositoryId,omitempty"`
	Status *string `json:"status,omitempty"`
}

// NewRestMirroredRepository instantiates a new RestMirroredRepository object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestMirroredRepository() *RestMirroredRepository {
	this := RestMirroredRepository{}
	return &this
}

// NewRestMirroredRepositoryWithDefaults instantiates a new RestMirroredRepository object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestMirroredRepositoryWithDefaults() *RestMirroredRepository {
	this := RestMirroredRepository{}
	return &this
}

// GetAvailable returns the Available field value if set, zero value otherwise.
func (o *RestMirroredRepository) GetAvailable() bool {
	if o == nil || IsNil(o.Available) {
		var ret bool
		return ret
	}
	return *o.Available
}

// GetAvailableOk returns a tuple with the Available field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestMirroredRepository) GetAvailableOk() (*bool, bool) {
	if o == nil || IsNil(o.Available) {
		return nil, false
	}
	return o.Available, true
}

// HasAvailable returns a boolean if a field has been set.
func (o *RestMirroredRepository) HasAvailable() bool {
	if o != nil && !IsNil(o.Available) {
		return true
	}

	return false
}

// SetAvailable gets a reference to the given bool and assigns it to the Available field.
func (o *RestMirroredRepository) SetAvailable(v bool) {
	o.Available = &v
}

// GetCloneUrls returns the CloneUrls field value if set, zero value otherwise.
func (o *RestMirroredRepository) GetCloneUrls() []RestNamedLink {
	if o == nil || IsNil(o.CloneUrls) {
		var ret []RestNamedLink
		return ret
	}
	return o.CloneUrls
}

// GetCloneUrlsOk returns a tuple with the CloneUrls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestMirroredRepository) GetCloneUrlsOk() ([]RestNamedLink, bool) {
	if o == nil || IsNil(o.CloneUrls) {
		return nil, false
	}
	return o.CloneUrls, true
}

// HasCloneUrls returns a boolean if a field has been set.
func (o *RestMirroredRepository) HasCloneUrls() bool {
	if o != nil && !IsNil(o.CloneUrls) {
		return true
	}

	return false
}

// SetCloneUrls gets a reference to the given []RestNamedLink and assigns it to the CloneUrls field.
func (o *RestMirroredRepository) SetCloneUrls(v []RestNamedLink) {
	o.CloneUrls = v
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise.
func (o *RestMirroredRepository) GetLastUpdated() time.Time {
	if o == nil || IsNil(o.LastUpdated) {
		var ret time.Time
		return ret
	}
	return *o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestMirroredRepository) GetLastUpdatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastUpdated) {
		return nil, false
	}
	return o.LastUpdated, true
}

// HasLastUpdated returns a boolean if a field has been set.
func (o *RestMirroredRepository) HasLastUpdated() bool {
	if o != nil && !IsNil(o.LastUpdated) {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given time.Time and assigns it to the LastUpdated field.
func (o *RestMirroredRepository) SetLastUpdated(v time.Time) {
	o.LastUpdated = &v
}

// GetMirrorName returns the MirrorName field value if set, zero value otherwise.
func (o *RestMirroredRepository) GetMirrorName() string {
	if o == nil || IsNil(o.MirrorName) {
		var ret string
		return ret
	}
	return *o.MirrorName
}

// GetMirrorNameOk returns a tuple with the MirrorName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestMirroredRepository) GetMirrorNameOk() (*string, bool) {
	if o == nil || IsNil(o.MirrorName) {
		return nil, false
	}
	return o.MirrorName, true
}

// HasMirrorName returns a boolean if a field has been set.
func (o *RestMirroredRepository) HasMirrorName() bool {
	if o != nil && !IsNil(o.MirrorName) {
		return true
	}

	return false
}

// SetMirrorName gets a reference to the given string and assigns it to the MirrorName field.
func (o *RestMirroredRepository) SetMirrorName(v string) {
	o.MirrorName = &v
}

// GetPushUrls returns the PushUrls field value if set, zero value otherwise.
func (o *RestMirroredRepository) GetPushUrls() []RestNamedLink {
	if o == nil || IsNil(o.PushUrls) {
		var ret []RestNamedLink
		return ret
	}
	return o.PushUrls
}

// GetPushUrlsOk returns a tuple with the PushUrls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestMirroredRepository) GetPushUrlsOk() ([]RestNamedLink, bool) {
	if o == nil || IsNil(o.PushUrls) {
		return nil, false
	}
	return o.PushUrls, true
}

// HasPushUrls returns a boolean if a field has been set.
func (o *RestMirroredRepository) HasPushUrls() bool {
	if o != nil && !IsNil(o.PushUrls) {
		return true
	}

	return false
}

// SetPushUrls gets a reference to the given []RestNamedLink and assigns it to the PushUrls field.
func (o *RestMirroredRepository) SetPushUrls(v []RestNamedLink) {
	o.PushUrls = v
}

// GetRepositoryId returns the RepositoryId field value if set, zero value otherwise.
func (o *RestMirroredRepository) GetRepositoryId() string {
	if o == nil || IsNil(o.RepositoryId) {
		var ret string
		return ret
	}
	return *o.RepositoryId
}

// GetRepositoryIdOk returns a tuple with the RepositoryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestMirroredRepository) GetRepositoryIdOk() (*string, bool) {
	if o == nil || IsNil(o.RepositoryId) {
		return nil, false
	}
	return o.RepositoryId, true
}

// HasRepositoryId returns a boolean if a field has been set.
func (o *RestMirroredRepository) HasRepositoryId() bool {
	if o != nil && !IsNil(o.RepositoryId) {
		return true
	}

	return false
}

// SetRepositoryId gets a reference to the given string and assigns it to the RepositoryId field.
func (o *RestMirroredRepository) SetRepositoryId(v string) {
	o.RepositoryId = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *RestMirroredRepository) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestMirroredRepository) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *RestMirroredRepository) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *RestMirroredRepository) SetStatus(v string) {
	o.Status = &v
}

func (o RestMirroredRepository) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestMirroredRepository) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Available) {
		toSerialize["available"] = o.Available
	}
	if !IsNil(o.CloneUrls) {
		toSerialize["cloneUrls"] = o.CloneUrls
	}
	if !IsNil(o.LastUpdated) {
		toSerialize["lastUpdated"] = o.LastUpdated
	}
	if !IsNil(o.MirrorName) {
		toSerialize["mirrorName"] = o.MirrorName
	}
	if !IsNil(o.PushUrls) {
		toSerialize["pushUrls"] = o.PushUrls
	}
	if !IsNil(o.RepositoryId) {
		toSerialize["repositoryId"] = o.RepositoryId
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

type NullableRestMirroredRepository struct {
	value *RestMirroredRepository
	isSet bool
}

func (v NullableRestMirroredRepository) Get() *RestMirroredRepository {
	return v.value
}

func (v *NullableRestMirroredRepository) Set(val *RestMirroredRepository) {
	v.value = val
	v.isSet = true
}

func (v NullableRestMirroredRepository) IsSet() bool {
	return v.isSet
}

func (v *NullableRestMirroredRepository) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestMirroredRepository(val *RestMirroredRepository) *NullableRestMirroredRepository {
	return &NullableRestMirroredRepository{value: val, isSet: true}
}

func (v NullableRestMirroredRepository) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestMirroredRepository) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


