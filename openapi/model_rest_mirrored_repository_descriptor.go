/*
Bitbucket Data Center

This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).

API version: 9.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RestMirroredRepositoryDescriptor type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestMirroredRepositoryDescriptor{}

// RestMirroredRepositoryDescriptor struct for RestMirroredRepositoryDescriptor
type RestMirroredRepositoryDescriptor struct {
	Links map[string]interface{} `json:"links,omitempty"`
	MirrorServer *RestMirroredRepositoryDescriptorMirrorServer `json:"mirrorServer,omitempty"`
}

// NewRestMirroredRepositoryDescriptor instantiates a new RestMirroredRepositoryDescriptor object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestMirroredRepositoryDescriptor() *RestMirroredRepositoryDescriptor {
	this := RestMirroredRepositoryDescriptor{}
	return &this
}

// NewRestMirroredRepositoryDescriptorWithDefaults instantiates a new RestMirroredRepositoryDescriptor object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestMirroredRepositoryDescriptorWithDefaults() *RestMirroredRepositoryDescriptor {
	this := RestMirroredRepositoryDescriptor{}
	return &this
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *RestMirroredRepositoryDescriptor) GetLinks() map[string]interface{} {
	if o == nil || IsNil(o.Links) {
		var ret map[string]interface{}
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestMirroredRepositoryDescriptor) GetLinksOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Links) {
		return map[string]interface{}{}, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *RestMirroredRepositoryDescriptor) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given map[string]interface{} and assigns it to the Links field.
func (o *RestMirroredRepositoryDescriptor) SetLinks(v map[string]interface{}) {
	o.Links = v
}

// GetMirrorServer returns the MirrorServer field value if set, zero value otherwise.
func (o *RestMirroredRepositoryDescriptor) GetMirrorServer() RestMirroredRepositoryDescriptorMirrorServer {
	if o == nil || IsNil(o.MirrorServer) {
		var ret RestMirroredRepositoryDescriptorMirrorServer
		return ret
	}
	return *o.MirrorServer
}

// GetMirrorServerOk returns a tuple with the MirrorServer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestMirroredRepositoryDescriptor) GetMirrorServerOk() (*RestMirroredRepositoryDescriptorMirrorServer, bool) {
	if o == nil || IsNil(o.MirrorServer) {
		return nil, false
	}
	return o.MirrorServer, true
}

// HasMirrorServer returns a boolean if a field has been set.
func (o *RestMirroredRepositoryDescriptor) HasMirrorServer() bool {
	if o != nil && !IsNil(o.MirrorServer) {
		return true
	}

	return false
}

// SetMirrorServer gets a reference to the given RestMirroredRepositoryDescriptorMirrorServer and assigns it to the MirrorServer field.
func (o *RestMirroredRepositoryDescriptor) SetMirrorServer(v RestMirroredRepositoryDescriptorMirrorServer) {
	o.MirrorServer = &v
}

func (o RestMirroredRepositoryDescriptor) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestMirroredRepositoryDescriptor) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !IsNil(o.MirrorServer) {
		toSerialize["mirrorServer"] = o.MirrorServer
	}
	return toSerialize, nil
}

type NullableRestMirroredRepositoryDescriptor struct {
	value *RestMirroredRepositoryDescriptor
	isSet bool
}

func (v NullableRestMirroredRepositoryDescriptor) Get() *RestMirroredRepositoryDescriptor {
	return v.value
}

func (v *NullableRestMirroredRepositoryDescriptor) Set(val *RestMirroredRepositoryDescriptor) {
	v.value = val
	v.isSet = true
}

func (v NullableRestMirroredRepositoryDescriptor) IsSet() bool {
	return v.isSet
}

func (v *NullableRestMirroredRepositoryDescriptor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestMirroredRepositoryDescriptor(val *RestMirroredRepositoryDescriptor) *NullableRestMirroredRepositoryDescriptor {
	return &NullableRestMirroredRepositoryDescriptor{value: val, isSet: true}
}

func (v NullableRestMirroredRepositoryDescriptor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestMirroredRepositoryDescriptor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


