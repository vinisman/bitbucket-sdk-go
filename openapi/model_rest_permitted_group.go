/*
Bitbucket Data Center

This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).

API version: 9.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RestPermittedGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestPermittedGroup{}

// RestPermittedGroup struct for RestPermittedGroup
type RestPermittedGroup struct {
	Group *RestPermittedGroupGroup `json:"group,omitempty"`
	Permission *string `json:"permission,omitempty"`
}

// NewRestPermittedGroup instantiates a new RestPermittedGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestPermittedGroup() *RestPermittedGroup {
	this := RestPermittedGroup{}
	return &this
}

// NewRestPermittedGroupWithDefaults instantiates a new RestPermittedGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestPermittedGroupWithDefaults() *RestPermittedGroup {
	this := RestPermittedGroup{}
	return &this
}

// GetGroup returns the Group field value if set, zero value otherwise.
func (o *RestPermittedGroup) GetGroup() RestPermittedGroupGroup {
	if o == nil || IsNil(o.Group) {
		var ret RestPermittedGroupGroup
		return ret
	}
	return *o.Group
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestPermittedGroup) GetGroupOk() (*RestPermittedGroupGroup, bool) {
	if o == nil || IsNil(o.Group) {
		return nil, false
	}
	return o.Group, true
}

// HasGroup returns a boolean if a field has been set.
func (o *RestPermittedGroup) HasGroup() bool {
	if o != nil && !IsNil(o.Group) {
		return true
	}

	return false
}

// SetGroup gets a reference to the given RestPermittedGroupGroup and assigns it to the Group field.
func (o *RestPermittedGroup) SetGroup(v RestPermittedGroupGroup) {
	o.Group = &v
}

// GetPermission returns the Permission field value if set, zero value otherwise.
func (o *RestPermittedGroup) GetPermission() string {
	if o == nil || IsNil(o.Permission) {
		var ret string
		return ret
	}
	return *o.Permission
}

// GetPermissionOk returns a tuple with the Permission field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestPermittedGroup) GetPermissionOk() (*string, bool) {
	if o == nil || IsNil(o.Permission) {
		return nil, false
	}
	return o.Permission, true
}

// HasPermission returns a boolean if a field has been set.
func (o *RestPermittedGroup) HasPermission() bool {
	if o != nil && !IsNil(o.Permission) {
		return true
	}

	return false
}

// SetPermission gets a reference to the given string and assigns it to the Permission field.
func (o *RestPermittedGroup) SetPermission(v string) {
	o.Permission = &v
}

func (o RestPermittedGroup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestPermittedGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Group) {
		toSerialize["group"] = o.Group
	}
	if !IsNil(o.Permission) {
		toSerialize["permission"] = o.Permission
	}
	return toSerialize, nil
}

type NullableRestPermittedGroup struct {
	value *RestPermittedGroup
	isSet bool
}

func (v NullableRestPermittedGroup) Get() *RestPermittedGroup {
	return v.value
}

func (v *NullableRestPermittedGroup) Set(val *RestPermittedGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableRestPermittedGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableRestPermittedGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestPermittedGroup(val *RestPermittedGroup) *NullableRestPermittedGroup {
	return &NullableRestPermittedGroup{value: val, isSet: true}
}

func (v NullableRestPermittedGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestPermittedGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


