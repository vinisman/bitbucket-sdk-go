/*
Bitbucket Data Center

This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).

API version: 9.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RestPermittedGroupGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestPermittedGroupGroup{}

// RestPermittedGroupGroup struct for RestPermittedGroupGroup
type RestPermittedGroupGroup struct {
	Name *string `json:"name,omitempty"`
}

// NewRestPermittedGroupGroup instantiates a new RestPermittedGroupGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestPermittedGroupGroup() *RestPermittedGroupGroup {
	this := RestPermittedGroupGroup{}
	return &this
}

// NewRestPermittedGroupGroupWithDefaults instantiates a new RestPermittedGroupGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestPermittedGroupGroupWithDefaults() *RestPermittedGroupGroup {
	this := RestPermittedGroupGroup{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RestPermittedGroupGroup) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestPermittedGroupGroup) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RestPermittedGroupGroup) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RestPermittedGroupGroup) SetName(v string) {
	o.Name = &v
}

func (o RestPermittedGroupGroup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestPermittedGroupGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return toSerialize, nil
}

type NullableRestPermittedGroupGroup struct {
	value *RestPermittedGroupGroup
	isSet bool
}

func (v NullableRestPermittedGroupGroup) Get() *RestPermittedGroupGroup {
	return v.value
}

func (v *NullableRestPermittedGroupGroup) Set(val *RestPermittedGroupGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableRestPermittedGroupGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableRestPermittedGroupGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestPermittedGroupGroup(val *RestPermittedGroupGroup) *NullableRestPermittedGroupGroup {
	return &NullableRestPermittedGroupGroup{value: val, isSet: true}
}

func (v NullableRestPermittedGroupGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestPermittedGroupGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


