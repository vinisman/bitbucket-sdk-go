/*
Bitbucket Data Center

This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).

API version: 9.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RestPermittedUser type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestPermittedUser{}

// RestPermittedUser struct for RestPermittedUser
type RestPermittedUser struct {
	Permission *string `json:"permission,omitempty"`
	User *RestCommentAnchorPullRequestAuthorUser `json:"user,omitempty"`
}

// NewRestPermittedUser instantiates a new RestPermittedUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestPermittedUser() *RestPermittedUser {
	this := RestPermittedUser{}
	return &this
}

// NewRestPermittedUserWithDefaults instantiates a new RestPermittedUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestPermittedUserWithDefaults() *RestPermittedUser {
	this := RestPermittedUser{}
	return &this
}

// GetPermission returns the Permission field value if set, zero value otherwise.
func (o *RestPermittedUser) GetPermission() string {
	if o == nil || IsNil(o.Permission) {
		var ret string
		return ret
	}
	return *o.Permission
}

// GetPermissionOk returns a tuple with the Permission field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestPermittedUser) GetPermissionOk() (*string, bool) {
	if o == nil || IsNil(o.Permission) {
		return nil, false
	}
	return o.Permission, true
}

// HasPermission returns a boolean if a field has been set.
func (o *RestPermittedUser) HasPermission() bool {
	if o != nil && !IsNil(o.Permission) {
		return true
	}

	return false
}

// SetPermission gets a reference to the given string and assigns it to the Permission field.
func (o *RestPermittedUser) SetPermission(v string) {
	o.Permission = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *RestPermittedUser) GetUser() RestCommentAnchorPullRequestAuthorUser {
	if o == nil || IsNil(o.User) {
		var ret RestCommentAnchorPullRequestAuthorUser
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestPermittedUser) GetUserOk() (*RestCommentAnchorPullRequestAuthorUser, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *RestPermittedUser) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given RestCommentAnchorPullRequestAuthorUser and assigns it to the User field.
func (o *RestPermittedUser) SetUser(v RestCommentAnchorPullRequestAuthorUser) {
	o.User = &v
}

func (o RestPermittedUser) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestPermittedUser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Permission) {
		toSerialize["permission"] = o.Permission
	}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	return toSerialize, nil
}

type NullableRestPermittedUser struct {
	value *RestPermittedUser
	isSet bool
}

func (v NullableRestPermittedUser) Get() *RestPermittedUser {
	return v.value
}

func (v *NullableRestPermittedUser) Set(val *RestPermittedUser) {
	v.value = val
	v.isSet = true
}

func (v NullableRestPermittedUser) IsSet() bool {
	return v.isSet
}

func (v *NullableRestPermittedUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestPermittedUser(val *RestPermittedUser) *NullableRestPermittedUser {
	return &NullableRestPermittedUser{value: val, isSet: true}
}

func (v NullableRestPermittedUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestPermittedUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


