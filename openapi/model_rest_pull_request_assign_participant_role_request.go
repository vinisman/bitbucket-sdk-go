/*
Bitbucket Data Center

This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).

API version: 9.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RestPullRequestAssignParticipantRoleRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestPullRequestAssignParticipantRoleRequest{}

// RestPullRequestAssignParticipantRoleRequest struct for RestPullRequestAssignParticipantRoleRequest
type RestPullRequestAssignParticipantRoleRequest struct {
	Role *string `json:"role,omitempty"`
	User *RestCommentAnchorPullRequestAuthorUser `json:"user,omitempty"`
}

// NewRestPullRequestAssignParticipantRoleRequest instantiates a new RestPullRequestAssignParticipantRoleRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestPullRequestAssignParticipantRoleRequest() *RestPullRequestAssignParticipantRoleRequest {
	this := RestPullRequestAssignParticipantRoleRequest{}
	return &this
}

// NewRestPullRequestAssignParticipantRoleRequestWithDefaults instantiates a new RestPullRequestAssignParticipantRoleRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestPullRequestAssignParticipantRoleRequestWithDefaults() *RestPullRequestAssignParticipantRoleRequest {
	this := RestPullRequestAssignParticipantRoleRequest{}
	return &this
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *RestPullRequestAssignParticipantRoleRequest) GetRole() string {
	if o == nil || IsNil(o.Role) {
		var ret string
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestPullRequestAssignParticipantRoleRequest) GetRoleOk() (*string, bool) {
	if o == nil || IsNil(o.Role) {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *RestPullRequestAssignParticipantRoleRequest) HasRole() bool {
	if o != nil && !IsNil(o.Role) {
		return true
	}

	return false
}

// SetRole gets a reference to the given string and assigns it to the Role field.
func (o *RestPullRequestAssignParticipantRoleRequest) SetRole(v string) {
	o.Role = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *RestPullRequestAssignParticipantRoleRequest) GetUser() RestCommentAnchorPullRequestAuthorUser {
	if o == nil || IsNil(o.User) {
		var ret RestCommentAnchorPullRequestAuthorUser
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestPullRequestAssignParticipantRoleRequest) GetUserOk() (*RestCommentAnchorPullRequestAuthorUser, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *RestPullRequestAssignParticipantRoleRequest) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given RestCommentAnchorPullRequestAuthorUser and assigns it to the User field.
func (o *RestPullRequestAssignParticipantRoleRequest) SetUser(v RestCommentAnchorPullRequestAuthorUser) {
	o.User = &v
}

func (o RestPullRequestAssignParticipantRoleRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestPullRequestAssignParticipantRoleRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Role) {
		toSerialize["role"] = o.Role
	}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	return toSerialize, nil
}

type NullableRestPullRequestAssignParticipantRoleRequest struct {
	value *RestPullRequestAssignParticipantRoleRequest
	isSet bool
}

func (v NullableRestPullRequestAssignParticipantRoleRequest) Get() *RestPullRequestAssignParticipantRoleRequest {
	return v.value
}

func (v *NullableRestPullRequestAssignParticipantRoleRequest) Set(val *RestPullRequestAssignParticipantRoleRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableRestPullRequestAssignParticipantRoleRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRestPullRequestAssignParticipantRoleRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestPullRequestAssignParticipantRoleRequest(val *RestPullRequestAssignParticipantRoleRequest) *NullableRestPullRequestAssignParticipantRoleRequest {
	return &NullableRestPullRequestAssignParticipantRoleRequest{value: val, isSet: true}
}

func (v NullableRestPullRequestAssignParticipantRoleRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestPullRequestAssignParticipantRoleRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


