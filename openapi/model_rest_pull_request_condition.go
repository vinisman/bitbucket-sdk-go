/*
Bitbucket Data Center

This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).

API version: 9.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RestPullRequestCondition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestPullRequestCondition{}

// RestPullRequestCondition struct for RestPullRequestCondition
type RestPullRequestCondition struct {
	Id *int32 `json:"id,omitempty"`
	RequiredApprovals *int32 `json:"requiredApprovals,omitempty"`
	ReviewerGroups []RestReviewerGroup `json:"reviewerGroups,omitempty"`
	Reviewers []RestReviewerGroup `json:"reviewers,omitempty"`
	Scope *RestPullRequestConditionScope `json:"scope,omitempty"`
	SourceRefMatcher *UpdatePullRequestCondition1RequestSourceMatcher `json:"sourceRefMatcher,omitempty"`
	TargetRefMatcher *UpdatePullRequestCondition1RequestSourceMatcher `json:"targetRefMatcher,omitempty"`
}

// NewRestPullRequestCondition instantiates a new RestPullRequestCondition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestPullRequestCondition() *RestPullRequestCondition {
	this := RestPullRequestCondition{}
	return &this
}

// NewRestPullRequestConditionWithDefaults instantiates a new RestPullRequestCondition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestPullRequestConditionWithDefaults() *RestPullRequestCondition {
	this := RestPullRequestCondition{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RestPullRequestCondition) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestPullRequestCondition) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RestPullRequestCondition) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *RestPullRequestCondition) SetId(v int32) {
	o.Id = &v
}

// GetRequiredApprovals returns the RequiredApprovals field value if set, zero value otherwise.
func (o *RestPullRequestCondition) GetRequiredApprovals() int32 {
	if o == nil || IsNil(o.RequiredApprovals) {
		var ret int32
		return ret
	}
	return *o.RequiredApprovals
}

// GetRequiredApprovalsOk returns a tuple with the RequiredApprovals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestPullRequestCondition) GetRequiredApprovalsOk() (*int32, bool) {
	if o == nil || IsNil(o.RequiredApprovals) {
		return nil, false
	}
	return o.RequiredApprovals, true
}

// HasRequiredApprovals returns a boolean if a field has been set.
func (o *RestPullRequestCondition) HasRequiredApprovals() bool {
	if o != nil && !IsNil(o.RequiredApprovals) {
		return true
	}

	return false
}

// SetRequiredApprovals gets a reference to the given int32 and assigns it to the RequiredApprovals field.
func (o *RestPullRequestCondition) SetRequiredApprovals(v int32) {
	o.RequiredApprovals = &v
}

// GetReviewerGroups returns the ReviewerGroups field value if set, zero value otherwise.
func (o *RestPullRequestCondition) GetReviewerGroups() []RestReviewerGroup {
	if o == nil || IsNil(o.ReviewerGroups) {
		var ret []RestReviewerGroup
		return ret
	}
	return o.ReviewerGroups
}

// GetReviewerGroupsOk returns a tuple with the ReviewerGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestPullRequestCondition) GetReviewerGroupsOk() ([]RestReviewerGroup, bool) {
	if o == nil || IsNil(o.ReviewerGroups) {
		return nil, false
	}
	return o.ReviewerGroups, true
}

// HasReviewerGroups returns a boolean if a field has been set.
func (o *RestPullRequestCondition) HasReviewerGroups() bool {
	if o != nil && !IsNil(o.ReviewerGroups) {
		return true
	}

	return false
}

// SetReviewerGroups gets a reference to the given []RestReviewerGroup and assigns it to the ReviewerGroups field.
func (o *RestPullRequestCondition) SetReviewerGroups(v []RestReviewerGroup) {
	o.ReviewerGroups = v
}

// GetReviewers returns the Reviewers field value if set, zero value otherwise.
func (o *RestPullRequestCondition) GetReviewers() []RestReviewerGroup {
	if o == nil || IsNil(o.Reviewers) {
		var ret []RestReviewerGroup
		return ret
	}
	return o.Reviewers
}

// GetReviewersOk returns a tuple with the Reviewers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestPullRequestCondition) GetReviewersOk() ([]RestReviewerGroup, bool) {
	if o == nil || IsNil(o.Reviewers) {
		return nil, false
	}
	return o.Reviewers, true
}

// HasReviewers returns a boolean if a field has been set.
func (o *RestPullRequestCondition) HasReviewers() bool {
	if o != nil && !IsNil(o.Reviewers) {
		return true
	}

	return false
}

// SetReviewers gets a reference to the given []RestReviewerGroup and assigns it to the Reviewers field.
func (o *RestPullRequestCondition) SetReviewers(v []RestReviewerGroup) {
	o.Reviewers = v
}

// GetScope returns the Scope field value if set, zero value otherwise.
func (o *RestPullRequestCondition) GetScope() RestPullRequestConditionScope {
	if o == nil || IsNil(o.Scope) {
		var ret RestPullRequestConditionScope
		return ret
	}
	return *o.Scope
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestPullRequestCondition) GetScopeOk() (*RestPullRequestConditionScope, bool) {
	if o == nil || IsNil(o.Scope) {
		return nil, false
	}
	return o.Scope, true
}

// HasScope returns a boolean if a field has been set.
func (o *RestPullRequestCondition) HasScope() bool {
	if o != nil && !IsNil(o.Scope) {
		return true
	}

	return false
}

// SetScope gets a reference to the given RestPullRequestConditionScope and assigns it to the Scope field.
func (o *RestPullRequestCondition) SetScope(v RestPullRequestConditionScope) {
	o.Scope = &v
}

// GetSourceRefMatcher returns the SourceRefMatcher field value if set, zero value otherwise.
func (o *RestPullRequestCondition) GetSourceRefMatcher() UpdatePullRequestCondition1RequestSourceMatcher {
	if o == nil || IsNil(o.SourceRefMatcher) {
		var ret UpdatePullRequestCondition1RequestSourceMatcher
		return ret
	}
	return *o.SourceRefMatcher
}

// GetSourceRefMatcherOk returns a tuple with the SourceRefMatcher field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestPullRequestCondition) GetSourceRefMatcherOk() (*UpdatePullRequestCondition1RequestSourceMatcher, bool) {
	if o == nil || IsNil(o.SourceRefMatcher) {
		return nil, false
	}
	return o.SourceRefMatcher, true
}

// HasSourceRefMatcher returns a boolean if a field has been set.
func (o *RestPullRequestCondition) HasSourceRefMatcher() bool {
	if o != nil && !IsNil(o.SourceRefMatcher) {
		return true
	}

	return false
}

// SetSourceRefMatcher gets a reference to the given UpdatePullRequestCondition1RequestSourceMatcher and assigns it to the SourceRefMatcher field.
func (o *RestPullRequestCondition) SetSourceRefMatcher(v UpdatePullRequestCondition1RequestSourceMatcher) {
	o.SourceRefMatcher = &v
}

// GetTargetRefMatcher returns the TargetRefMatcher field value if set, zero value otherwise.
func (o *RestPullRequestCondition) GetTargetRefMatcher() UpdatePullRequestCondition1RequestSourceMatcher {
	if o == nil || IsNil(o.TargetRefMatcher) {
		var ret UpdatePullRequestCondition1RequestSourceMatcher
		return ret
	}
	return *o.TargetRefMatcher
}

// GetTargetRefMatcherOk returns a tuple with the TargetRefMatcher field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestPullRequestCondition) GetTargetRefMatcherOk() (*UpdatePullRequestCondition1RequestSourceMatcher, bool) {
	if o == nil || IsNil(o.TargetRefMatcher) {
		return nil, false
	}
	return o.TargetRefMatcher, true
}

// HasTargetRefMatcher returns a boolean if a field has been set.
func (o *RestPullRequestCondition) HasTargetRefMatcher() bool {
	if o != nil && !IsNil(o.TargetRefMatcher) {
		return true
	}

	return false
}

// SetTargetRefMatcher gets a reference to the given UpdatePullRequestCondition1RequestSourceMatcher and assigns it to the TargetRefMatcher field.
func (o *RestPullRequestCondition) SetTargetRefMatcher(v UpdatePullRequestCondition1RequestSourceMatcher) {
	o.TargetRefMatcher = &v
}

func (o RestPullRequestCondition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestPullRequestCondition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.RequiredApprovals) {
		toSerialize["requiredApprovals"] = o.RequiredApprovals
	}
	if !IsNil(o.ReviewerGroups) {
		toSerialize["reviewerGroups"] = o.ReviewerGroups
	}
	if !IsNil(o.Reviewers) {
		toSerialize["reviewers"] = o.Reviewers
	}
	if !IsNil(o.Scope) {
		toSerialize["scope"] = o.Scope
	}
	if !IsNil(o.SourceRefMatcher) {
		toSerialize["sourceRefMatcher"] = o.SourceRefMatcher
	}
	if !IsNil(o.TargetRefMatcher) {
		toSerialize["targetRefMatcher"] = o.TargetRefMatcher
	}
	return toSerialize, nil
}

type NullableRestPullRequestCondition struct {
	value *RestPullRequestCondition
	isSet bool
}

func (v NullableRestPullRequestCondition) Get() *RestPullRequestCondition {
	return v.value
}

func (v *NullableRestPullRequestCondition) Set(val *RestPullRequestCondition) {
	v.value = val
	v.isSet = true
}

func (v NullableRestPullRequestCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableRestPullRequestCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestPullRequestCondition(val *RestPullRequestCondition) *NullableRestPullRequestCondition {
	return &NullableRestPullRequestCondition{value: val, isSet: true}
}

func (v NullableRestPullRequestCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestPullRequestCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


