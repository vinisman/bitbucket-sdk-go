/*
Bitbucket Data Center

This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).

API version: 9.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RestPullRequestMergeConfigCommitMessageTemplate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestPullRequestMergeConfigCommitMessageTemplate{}

// RestPullRequestMergeConfigCommitMessageTemplate struct for RestPullRequestMergeConfigCommitMessageTemplate
type RestPullRequestMergeConfigCommitMessageTemplate struct {
	Body *string `json:"body,omitempty"`
	Title *string `json:"title,omitempty"`
}

// NewRestPullRequestMergeConfigCommitMessageTemplate instantiates a new RestPullRequestMergeConfigCommitMessageTemplate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestPullRequestMergeConfigCommitMessageTemplate() *RestPullRequestMergeConfigCommitMessageTemplate {
	this := RestPullRequestMergeConfigCommitMessageTemplate{}
	return &this
}

// NewRestPullRequestMergeConfigCommitMessageTemplateWithDefaults instantiates a new RestPullRequestMergeConfigCommitMessageTemplate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestPullRequestMergeConfigCommitMessageTemplateWithDefaults() *RestPullRequestMergeConfigCommitMessageTemplate {
	this := RestPullRequestMergeConfigCommitMessageTemplate{}
	return &this
}

// GetBody returns the Body field value if set, zero value otherwise.
func (o *RestPullRequestMergeConfigCommitMessageTemplate) GetBody() string {
	if o == nil || IsNil(o.Body) {
		var ret string
		return ret
	}
	return *o.Body
}

// GetBodyOk returns a tuple with the Body field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestPullRequestMergeConfigCommitMessageTemplate) GetBodyOk() (*string, bool) {
	if o == nil || IsNil(o.Body) {
		return nil, false
	}
	return o.Body, true
}

// HasBody returns a boolean if a field has been set.
func (o *RestPullRequestMergeConfigCommitMessageTemplate) HasBody() bool {
	if o != nil && !IsNil(o.Body) {
		return true
	}

	return false
}

// SetBody gets a reference to the given string and assigns it to the Body field.
func (o *RestPullRequestMergeConfigCommitMessageTemplate) SetBody(v string) {
	o.Body = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *RestPullRequestMergeConfigCommitMessageTemplate) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestPullRequestMergeConfigCommitMessageTemplate) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *RestPullRequestMergeConfigCommitMessageTemplate) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *RestPullRequestMergeConfigCommitMessageTemplate) SetTitle(v string) {
	o.Title = &v
}

func (o RestPullRequestMergeConfigCommitMessageTemplate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestPullRequestMergeConfigCommitMessageTemplate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Body) {
		toSerialize["body"] = o.Body
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	return toSerialize, nil
}

type NullableRestPullRequestMergeConfigCommitMessageTemplate struct {
	value *RestPullRequestMergeConfigCommitMessageTemplate
	isSet bool
}

func (v NullableRestPullRequestMergeConfigCommitMessageTemplate) Get() *RestPullRequestMergeConfigCommitMessageTemplate {
	return v.value
}

func (v *NullableRestPullRequestMergeConfigCommitMessageTemplate) Set(val *RestPullRequestMergeConfigCommitMessageTemplate) {
	v.value = val
	v.isSet = true
}

func (v NullableRestPullRequestMergeConfigCommitMessageTemplate) IsSet() bool {
	return v.isSet
}

func (v *NullableRestPullRequestMergeConfigCommitMessageTemplate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestPullRequestMergeConfigCommitMessageTemplate(val *RestPullRequestMergeConfigCommitMessageTemplate) *NullableRestPullRequestMergeConfigCommitMessageTemplate {
	return &NullableRestPullRequestMergeConfigCommitMessageTemplate{value: val, isSet: true}
}

func (v NullableRestPullRequestMergeConfigCommitMessageTemplate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestPullRequestMergeConfigCommitMessageTemplate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


