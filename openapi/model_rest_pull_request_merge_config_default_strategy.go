/*
Bitbucket Data Center

This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).

API version: 9.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RestPullRequestMergeConfigDefaultStrategy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestPullRequestMergeConfigDefaultStrategy{}

// RestPullRequestMergeConfigDefaultStrategy struct for RestPullRequestMergeConfigDefaultStrategy
type RestPullRequestMergeConfigDefaultStrategy struct {
	Description *string `json:"description,omitempty"`
	Enabled *bool `json:"enabled,omitempty"`
	Flag *string `json:"flag,omitempty"`
	Id *string `json:"id,omitempty"`
	Links map[string]interface{} `json:"links,omitempty"`
	Name *string `json:"name,omitempty"`
}

// NewRestPullRequestMergeConfigDefaultStrategy instantiates a new RestPullRequestMergeConfigDefaultStrategy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestPullRequestMergeConfigDefaultStrategy() *RestPullRequestMergeConfigDefaultStrategy {
	this := RestPullRequestMergeConfigDefaultStrategy{}
	return &this
}

// NewRestPullRequestMergeConfigDefaultStrategyWithDefaults instantiates a new RestPullRequestMergeConfigDefaultStrategy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestPullRequestMergeConfigDefaultStrategyWithDefaults() *RestPullRequestMergeConfigDefaultStrategy {
	this := RestPullRequestMergeConfigDefaultStrategy{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *RestPullRequestMergeConfigDefaultStrategy) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestPullRequestMergeConfigDefaultStrategy) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *RestPullRequestMergeConfigDefaultStrategy) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *RestPullRequestMergeConfigDefaultStrategy) SetDescription(v string) {
	o.Description = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *RestPullRequestMergeConfigDefaultStrategy) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestPullRequestMergeConfigDefaultStrategy) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *RestPullRequestMergeConfigDefaultStrategy) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *RestPullRequestMergeConfigDefaultStrategy) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetFlag returns the Flag field value if set, zero value otherwise.
func (o *RestPullRequestMergeConfigDefaultStrategy) GetFlag() string {
	if o == nil || IsNil(o.Flag) {
		var ret string
		return ret
	}
	return *o.Flag
}

// GetFlagOk returns a tuple with the Flag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestPullRequestMergeConfigDefaultStrategy) GetFlagOk() (*string, bool) {
	if o == nil || IsNil(o.Flag) {
		return nil, false
	}
	return o.Flag, true
}

// HasFlag returns a boolean if a field has been set.
func (o *RestPullRequestMergeConfigDefaultStrategy) HasFlag() bool {
	if o != nil && !IsNil(o.Flag) {
		return true
	}

	return false
}

// SetFlag gets a reference to the given string and assigns it to the Flag field.
func (o *RestPullRequestMergeConfigDefaultStrategy) SetFlag(v string) {
	o.Flag = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RestPullRequestMergeConfigDefaultStrategy) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestPullRequestMergeConfigDefaultStrategy) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RestPullRequestMergeConfigDefaultStrategy) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *RestPullRequestMergeConfigDefaultStrategy) SetId(v string) {
	o.Id = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *RestPullRequestMergeConfigDefaultStrategy) GetLinks() map[string]interface{} {
	if o == nil || IsNil(o.Links) {
		var ret map[string]interface{}
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestPullRequestMergeConfigDefaultStrategy) GetLinksOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Links) {
		return map[string]interface{}{}, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *RestPullRequestMergeConfigDefaultStrategy) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given map[string]interface{} and assigns it to the Links field.
func (o *RestPullRequestMergeConfigDefaultStrategy) SetLinks(v map[string]interface{}) {
	o.Links = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RestPullRequestMergeConfigDefaultStrategy) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestPullRequestMergeConfigDefaultStrategy) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RestPullRequestMergeConfigDefaultStrategy) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RestPullRequestMergeConfigDefaultStrategy) SetName(v string) {
	o.Name = &v
}

func (o RestPullRequestMergeConfigDefaultStrategy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestPullRequestMergeConfigDefaultStrategy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Flag) {
		toSerialize["flag"] = o.Flag
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return toSerialize, nil
}

type NullableRestPullRequestMergeConfigDefaultStrategy struct {
	value *RestPullRequestMergeConfigDefaultStrategy
	isSet bool
}

func (v NullableRestPullRequestMergeConfigDefaultStrategy) Get() *RestPullRequestMergeConfigDefaultStrategy {
	return v.value
}

func (v *NullableRestPullRequestMergeConfigDefaultStrategy) Set(val *RestPullRequestMergeConfigDefaultStrategy) {
	v.value = val
	v.isSet = true
}

func (v NullableRestPullRequestMergeConfigDefaultStrategy) IsSet() bool {
	return v.isSet
}

func (v *NullableRestPullRequestMergeConfigDefaultStrategy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestPullRequestMergeConfigDefaultStrategy(val *RestPullRequestMergeConfigDefaultStrategy) *NullableRestPullRequestMergeConfigDefaultStrategy {
	return &NullableRestPullRequestMergeConfigDefaultStrategy{value: val, isSet: true}
}

func (v NullableRestPullRequestMergeConfigDefaultStrategy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestPullRequestMergeConfigDefaultStrategy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


