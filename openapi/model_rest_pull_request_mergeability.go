/*
Bitbucket Data Center

This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).

API version: 9.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RestPullRequestMergeability type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestPullRequestMergeability{}

// RestPullRequestMergeability struct for RestPullRequestMergeability
type RestPullRequestMergeability struct {
	Conflicted *bool `json:"conflicted,omitempty"`
	Outcome *string `json:"outcome,omitempty"`
	Vetoes []RestRepositoryHookVeto `json:"vetoes,omitempty"`
}

// NewRestPullRequestMergeability instantiates a new RestPullRequestMergeability object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestPullRequestMergeability() *RestPullRequestMergeability {
	this := RestPullRequestMergeability{}
	return &this
}

// NewRestPullRequestMergeabilityWithDefaults instantiates a new RestPullRequestMergeability object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestPullRequestMergeabilityWithDefaults() *RestPullRequestMergeability {
	this := RestPullRequestMergeability{}
	return &this
}

// GetConflicted returns the Conflicted field value if set, zero value otherwise.
func (o *RestPullRequestMergeability) GetConflicted() bool {
	if o == nil || IsNil(o.Conflicted) {
		var ret bool
		return ret
	}
	return *o.Conflicted
}

// GetConflictedOk returns a tuple with the Conflicted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestPullRequestMergeability) GetConflictedOk() (*bool, bool) {
	if o == nil || IsNil(o.Conflicted) {
		return nil, false
	}
	return o.Conflicted, true
}

// HasConflicted returns a boolean if a field has been set.
func (o *RestPullRequestMergeability) HasConflicted() bool {
	if o != nil && !IsNil(o.Conflicted) {
		return true
	}

	return false
}

// SetConflicted gets a reference to the given bool and assigns it to the Conflicted field.
func (o *RestPullRequestMergeability) SetConflicted(v bool) {
	o.Conflicted = &v
}

// GetOutcome returns the Outcome field value if set, zero value otherwise.
func (o *RestPullRequestMergeability) GetOutcome() string {
	if o == nil || IsNil(o.Outcome) {
		var ret string
		return ret
	}
	return *o.Outcome
}

// GetOutcomeOk returns a tuple with the Outcome field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestPullRequestMergeability) GetOutcomeOk() (*string, bool) {
	if o == nil || IsNil(o.Outcome) {
		return nil, false
	}
	return o.Outcome, true
}

// HasOutcome returns a boolean if a field has been set.
func (o *RestPullRequestMergeability) HasOutcome() bool {
	if o != nil && !IsNil(o.Outcome) {
		return true
	}

	return false
}

// SetOutcome gets a reference to the given string and assigns it to the Outcome field.
func (o *RestPullRequestMergeability) SetOutcome(v string) {
	o.Outcome = &v
}

// GetVetoes returns the Vetoes field value if set, zero value otherwise.
func (o *RestPullRequestMergeability) GetVetoes() []RestRepositoryHookVeto {
	if o == nil || IsNil(o.Vetoes) {
		var ret []RestRepositoryHookVeto
		return ret
	}
	return o.Vetoes
}

// GetVetoesOk returns a tuple with the Vetoes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestPullRequestMergeability) GetVetoesOk() ([]RestRepositoryHookVeto, bool) {
	if o == nil || IsNil(o.Vetoes) {
		return nil, false
	}
	return o.Vetoes, true
}

// HasVetoes returns a boolean if a field has been set.
func (o *RestPullRequestMergeability) HasVetoes() bool {
	if o != nil && !IsNil(o.Vetoes) {
		return true
	}

	return false
}

// SetVetoes gets a reference to the given []RestRepositoryHookVeto and assigns it to the Vetoes field.
func (o *RestPullRequestMergeability) SetVetoes(v []RestRepositoryHookVeto) {
	o.Vetoes = v
}

func (o RestPullRequestMergeability) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestPullRequestMergeability) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Conflicted) {
		toSerialize["conflicted"] = o.Conflicted
	}
	if !IsNil(o.Outcome) {
		toSerialize["outcome"] = o.Outcome
	}
	if !IsNil(o.Vetoes) {
		toSerialize["vetoes"] = o.Vetoes
	}
	return toSerialize, nil
}

type NullableRestPullRequestMergeability struct {
	value *RestPullRequestMergeability
	isSet bool
}

func (v NullableRestPullRequestMergeability) Get() *RestPullRequestMergeability {
	return v.value
}

func (v *NullableRestPullRequestMergeability) Set(val *RestPullRequestMergeability) {
	v.value = val
	v.isSet = true
}

func (v NullableRestPullRequestMergeability) IsSet() bool {
	return v.isSet
}

func (v *NullableRestPullRequestMergeability) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestPullRequestMergeability(val *RestPullRequestMergeability) *NullableRestPullRequestMergeability {
	return &NullableRestPullRequestMergeability{value: val, isSet: true}
}

func (v NullableRestPullRequestMergeability) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestPullRequestMergeability) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


