/*
Bitbucket Data Center

This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).

API version: 9.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RestPullRequestRebaseability type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestPullRequestRebaseability{}

// RestPullRequestRebaseability struct for RestPullRequestRebaseability
type RestPullRequestRebaseability struct {
	Vetoes []RestRepositoryHookVeto `json:"vetoes,omitempty"`
}

// NewRestPullRequestRebaseability instantiates a new RestPullRequestRebaseability object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestPullRequestRebaseability() *RestPullRequestRebaseability {
	this := RestPullRequestRebaseability{}
	return &this
}

// NewRestPullRequestRebaseabilityWithDefaults instantiates a new RestPullRequestRebaseability object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestPullRequestRebaseabilityWithDefaults() *RestPullRequestRebaseability {
	this := RestPullRequestRebaseability{}
	return &this
}

// GetVetoes returns the Vetoes field value if set, zero value otherwise.
func (o *RestPullRequestRebaseability) GetVetoes() []RestRepositoryHookVeto {
	if o == nil || IsNil(o.Vetoes) {
		var ret []RestRepositoryHookVeto
		return ret
	}
	return o.Vetoes
}

// GetVetoesOk returns a tuple with the Vetoes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestPullRequestRebaseability) GetVetoesOk() ([]RestRepositoryHookVeto, bool) {
	if o == nil || IsNil(o.Vetoes) {
		return nil, false
	}
	return o.Vetoes, true
}

// HasVetoes returns a boolean if a field has been set.
func (o *RestPullRequestRebaseability) HasVetoes() bool {
	if o != nil && !IsNil(o.Vetoes) {
		return true
	}

	return false
}

// SetVetoes gets a reference to the given []RestRepositoryHookVeto and assigns it to the Vetoes field.
func (o *RestPullRequestRebaseability) SetVetoes(v []RestRepositoryHookVeto) {
	o.Vetoes = v
}

func (o RestPullRequestRebaseability) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestPullRequestRebaseability) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Vetoes) {
		toSerialize["vetoes"] = o.Vetoes
	}
	return toSerialize, nil
}

type NullableRestPullRequestRebaseability struct {
	value *RestPullRequestRebaseability
	isSet bool
}

func (v NullableRestPullRequestRebaseability) Get() *RestPullRequestRebaseability {
	return v.value
}

func (v *NullableRestPullRequestRebaseability) Set(val *RestPullRequestRebaseability) {
	v.value = val
	v.isSet = true
}

func (v NullableRestPullRequestRebaseability) IsSet() bool {
	return v.isSet
}

func (v *NullableRestPullRequestRebaseability) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestPullRequestRebaseability(val *RestPullRequestRebaseability) *NullableRestPullRequestRebaseability {
	return &NullableRestPullRequestRebaseability{value: val, isSet: true}
}

func (v NullableRestPullRequestRebaseability) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestPullRequestRebaseability) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


