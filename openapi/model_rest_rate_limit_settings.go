/*
Bitbucket Data Center

This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).

API version: 9.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RestRateLimitSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestRateLimitSettings{}

// RestRateLimitSettings struct for RestRateLimitSettings
type RestRateLimitSettings struct {
	DefaultSettings *RestBulkUserRateLimitSettingsUpdateRequestSettings `json:"defaultSettings,omitempty"`
	Enabled *bool `json:"enabled,omitempty"`
}

// NewRestRateLimitSettings instantiates a new RestRateLimitSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestRateLimitSettings() *RestRateLimitSettings {
	this := RestRateLimitSettings{}
	return &this
}

// NewRestRateLimitSettingsWithDefaults instantiates a new RestRateLimitSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestRateLimitSettingsWithDefaults() *RestRateLimitSettings {
	this := RestRateLimitSettings{}
	return &this
}

// GetDefaultSettings returns the DefaultSettings field value if set, zero value otherwise.
func (o *RestRateLimitSettings) GetDefaultSettings() RestBulkUserRateLimitSettingsUpdateRequestSettings {
	if o == nil || IsNil(o.DefaultSettings) {
		var ret RestBulkUserRateLimitSettingsUpdateRequestSettings
		return ret
	}
	return *o.DefaultSettings
}

// GetDefaultSettingsOk returns a tuple with the DefaultSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRateLimitSettings) GetDefaultSettingsOk() (*RestBulkUserRateLimitSettingsUpdateRequestSettings, bool) {
	if o == nil || IsNil(o.DefaultSettings) {
		return nil, false
	}
	return o.DefaultSettings, true
}

// HasDefaultSettings returns a boolean if a field has been set.
func (o *RestRateLimitSettings) HasDefaultSettings() bool {
	if o != nil && !IsNil(o.DefaultSettings) {
		return true
	}

	return false
}

// SetDefaultSettings gets a reference to the given RestBulkUserRateLimitSettingsUpdateRequestSettings and assigns it to the DefaultSettings field.
func (o *RestRateLimitSettings) SetDefaultSettings(v RestBulkUserRateLimitSettingsUpdateRequestSettings) {
	o.DefaultSettings = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *RestRateLimitSettings) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRateLimitSettings) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *RestRateLimitSettings) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *RestRateLimitSettings) SetEnabled(v bool) {
	o.Enabled = &v
}

func (o RestRateLimitSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestRateLimitSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DefaultSettings) {
		toSerialize["defaultSettings"] = o.DefaultSettings
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	return toSerialize, nil
}

type NullableRestRateLimitSettings struct {
	value *RestRateLimitSettings
	isSet bool
}

func (v NullableRestRateLimitSettings) Get() *RestRateLimitSettings {
	return v.value
}

func (v *NullableRestRateLimitSettings) Set(val *RestRateLimitSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableRestRateLimitSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableRestRateLimitSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestRateLimitSettings(val *RestRateLimitSettings) *NullableRestRateLimitSettings {
	return &NullableRestRateLimitSettings{value: val, isSet: true}
}

func (v NullableRestRateLimitSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestRateLimitSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


