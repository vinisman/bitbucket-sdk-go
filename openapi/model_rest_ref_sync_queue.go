/*
Bitbucket Data Center

This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).

API version: 9.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RestRefSyncQueue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestRefSyncQueue{}

// RestRefSyncQueue struct for RestRefSyncQueue
type RestRefSyncQueue struct {
	Values []RestFarmSynchronizationRequest `json:"values,omitempty"`
}

// NewRestRefSyncQueue instantiates a new RestRefSyncQueue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestRefSyncQueue() *RestRefSyncQueue {
	this := RestRefSyncQueue{}
	return &this
}

// NewRestRefSyncQueueWithDefaults instantiates a new RestRefSyncQueue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestRefSyncQueueWithDefaults() *RestRefSyncQueue {
	this := RestRefSyncQueue{}
	return &this
}

// GetValues returns the Values field value if set, zero value otherwise.
func (o *RestRefSyncQueue) GetValues() []RestFarmSynchronizationRequest {
	if o == nil || IsNil(o.Values) {
		var ret []RestFarmSynchronizationRequest
		return ret
	}
	return o.Values
}

// GetValuesOk returns a tuple with the Values field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRefSyncQueue) GetValuesOk() ([]RestFarmSynchronizationRequest, bool) {
	if o == nil || IsNil(o.Values) {
		return nil, false
	}
	return o.Values, true
}

// HasValues returns a boolean if a field has been set.
func (o *RestRefSyncQueue) HasValues() bool {
	if o != nil && !IsNil(o.Values) {
		return true
	}

	return false
}

// SetValues gets a reference to the given []RestFarmSynchronizationRequest and assigns it to the Values field.
func (o *RestRefSyncQueue) SetValues(v []RestFarmSynchronizationRequest) {
	o.Values = v
}

func (o RestRefSyncQueue) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestRefSyncQueue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Values) {
		toSerialize["values"] = o.Values
	}
	return toSerialize, nil
}

type NullableRestRefSyncQueue struct {
	value *RestRefSyncQueue
	isSet bool
}

func (v NullableRestRefSyncQueue) Get() *RestRefSyncQueue {
	return v.value
}

func (v *NullableRestRefSyncQueue) Set(val *RestRefSyncQueue) {
	v.value = val
	v.isSet = true
}

func (v NullableRestRefSyncQueue) IsSet() bool {
	return v.isSet
}

func (v *NullableRestRefSyncQueue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestRefSyncQueue(val *RestRefSyncQueue) *NullableRestRefSyncQueue {
	return &NullableRestRefSyncQueue{value: val, isSet: true}
}

func (v NullableRestRefSyncQueue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestRefSyncQueue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


