/*
Bitbucket Data Center

This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).

API version: 9.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RestRefSyncRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestRefSyncRequest{}

// RestRefSyncRequest struct for RestRefSyncRequest
type RestRefSyncRequest struct {
	Action *string `json:"action,omitempty"`
	Context *Context `json:"context,omitempty"`
	RefId *string `json:"refId,omitempty"`
}

// NewRestRefSyncRequest instantiates a new RestRefSyncRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestRefSyncRequest() *RestRefSyncRequest {
	this := RestRefSyncRequest{}
	return &this
}

// NewRestRefSyncRequestWithDefaults instantiates a new RestRefSyncRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestRefSyncRequestWithDefaults() *RestRefSyncRequest {
	this := RestRefSyncRequest{}
	return &this
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *RestRefSyncRequest) GetAction() string {
	if o == nil || IsNil(o.Action) {
		var ret string
		return ret
	}
	return *o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRefSyncRequest) GetActionOk() (*string, bool) {
	if o == nil || IsNil(o.Action) {
		return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *RestRefSyncRequest) HasAction() bool {
	if o != nil && !IsNil(o.Action) {
		return true
	}

	return false
}

// SetAction gets a reference to the given string and assigns it to the Action field.
func (o *RestRefSyncRequest) SetAction(v string) {
	o.Action = &v
}

// GetContext returns the Context field value if set, zero value otherwise.
func (o *RestRefSyncRequest) GetContext() Context {
	if o == nil || IsNil(o.Context) {
		var ret Context
		return ret
	}
	return *o.Context
}

// GetContextOk returns a tuple with the Context field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRefSyncRequest) GetContextOk() (*Context, bool) {
	if o == nil || IsNil(o.Context) {
		return nil, false
	}
	return o.Context, true
}

// HasContext returns a boolean if a field has been set.
func (o *RestRefSyncRequest) HasContext() bool {
	if o != nil && !IsNil(o.Context) {
		return true
	}

	return false
}

// SetContext gets a reference to the given Context and assigns it to the Context field.
func (o *RestRefSyncRequest) SetContext(v Context) {
	o.Context = &v
}

// GetRefId returns the RefId field value if set, zero value otherwise.
func (o *RestRefSyncRequest) GetRefId() string {
	if o == nil || IsNil(o.RefId) {
		var ret string
		return ret
	}
	return *o.RefId
}

// GetRefIdOk returns a tuple with the RefId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRefSyncRequest) GetRefIdOk() (*string, bool) {
	if o == nil || IsNil(o.RefId) {
		return nil, false
	}
	return o.RefId, true
}

// HasRefId returns a boolean if a field has been set.
func (o *RestRefSyncRequest) HasRefId() bool {
	if o != nil && !IsNil(o.RefId) {
		return true
	}

	return false
}

// SetRefId gets a reference to the given string and assigns it to the RefId field.
func (o *RestRefSyncRequest) SetRefId(v string) {
	o.RefId = &v
}

func (o RestRefSyncRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestRefSyncRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Action) {
		toSerialize["action"] = o.Action
	}
	if !IsNil(o.Context) {
		toSerialize["context"] = o.Context
	}
	if !IsNil(o.RefId) {
		toSerialize["refId"] = o.RefId
	}
	return toSerialize, nil
}

type NullableRestRefSyncRequest struct {
	value *RestRefSyncRequest
	isSet bool
}

func (v NullableRestRefSyncRequest) Get() *RestRefSyncRequest {
	return v.value
}

func (v *NullableRestRefSyncRequest) Set(val *RestRefSyncRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableRestRefSyncRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRestRefSyncRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestRefSyncRequest(val *RestRefSyncRequest) *NullableRestRefSyncRequest {
	return &NullableRestRefSyncRequest{value: val, isSet: true}
}

func (v NullableRestRefSyncRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestRefSyncRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


