/*
Bitbucket Data Center

This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).

API version: 9.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RestRefSyncStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestRefSyncStatus{}

// RestRefSyncStatus struct for RestRefSyncStatus
type RestRefSyncStatus struct {
	AheadRefs *RestRefSyncStatusAheadRefs `json:"aheadRefs,omitempty"`
	Available *bool `json:"available,omitempty"`
	DivergedRefs *RestRefSyncStatusAheadRefs `json:"divergedRefs,omitempty"`
	Enabled *bool `json:"enabled,omitempty"`
	LastSync *float32 `json:"lastSync,omitempty"`
	OrphanedRefs *RestRefSyncStatusAheadRefs `json:"orphanedRefs,omitempty"`
}

// NewRestRefSyncStatus instantiates a new RestRefSyncStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestRefSyncStatus() *RestRefSyncStatus {
	this := RestRefSyncStatus{}
	return &this
}

// NewRestRefSyncStatusWithDefaults instantiates a new RestRefSyncStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestRefSyncStatusWithDefaults() *RestRefSyncStatus {
	this := RestRefSyncStatus{}
	return &this
}

// GetAheadRefs returns the AheadRefs field value if set, zero value otherwise.
func (o *RestRefSyncStatus) GetAheadRefs() RestRefSyncStatusAheadRefs {
	if o == nil || IsNil(o.AheadRefs) {
		var ret RestRefSyncStatusAheadRefs
		return ret
	}
	return *o.AheadRefs
}

// GetAheadRefsOk returns a tuple with the AheadRefs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRefSyncStatus) GetAheadRefsOk() (*RestRefSyncStatusAheadRefs, bool) {
	if o == nil || IsNil(o.AheadRefs) {
		return nil, false
	}
	return o.AheadRefs, true
}

// HasAheadRefs returns a boolean if a field has been set.
func (o *RestRefSyncStatus) HasAheadRefs() bool {
	if o != nil && !IsNil(o.AheadRefs) {
		return true
	}

	return false
}

// SetAheadRefs gets a reference to the given RestRefSyncStatusAheadRefs and assigns it to the AheadRefs field.
func (o *RestRefSyncStatus) SetAheadRefs(v RestRefSyncStatusAheadRefs) {
	o.AheadRefs = &v
}

// GetAvailable returns the Available field value if set, zero value otherwise.
func (o *RestRefSyncStatus) GetAvailable() bool {
	if o == nil || IsNil(o.Available) {
		var ret bool
		return ret
	}
	return *o.Available
}

// GetAvailableOk returns a tuple with the Available field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRefSyncStatus) GetAvailableOk() (*bool, bool) {
	if o == nil || IsNil(o.Available) {
		return nil, false
	}
	return o.Available, true
}

// HasAvailable returns a boolean if a field has been set.
func (o *RestRefSyncStatus) HasAvailable() bool {
	if o != nil && !IsNil(o.Available) {
		return true
	}

	return false
}

// SetAvailable gets a reference to the given bool and assigns it to the Available field.
func (o *RestRefSyncStatus) SetAvailable(v bool) {
	o.Available = &v
}

// GetDivergedRefs returns the DivergedRefs field value if set, zero value otherwise.
func (o *RestRefSyncStatus) GetDivergedRefs() RestRefSyncStatusAheadRefs {
	if o == nil || IsNil(o.DivergedRefs) {
		var ret RestRefSyncStatusAheadRefs
		return ret
	}
	return *o.DivergedRefs
}

// GetDivergedRefsOk returns a tuple with the DivergedRefs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRefSyncStatus) GetDivergedRefsOk() (*RestRefSyncStatusAheadRefs, bool) {
	if o == nil || IsNil(o.DivergedRefs) {
		return nil, false
	}
	return o.DivergedRefs, true
}

// HasDivergedRefs returns a boolean if a field has been set.
func (o *RestRefSyncStatus) HasDivergedRefs() bool {
	if o != nil && !IsNil(o.DivergedRefs) {
		return true
	}

	return false
}

// SetDivergedRefs gets a reference to the given RestRefSyncStatusAheadRefs and assigns it to the DivergedRefs field.
func (o *RestRefSyncStatus) SetDivergedRefs(v RestRefSyncStatusAheadRefs) {
	o.DivergedRefs = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *RestRefSyncStatus) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRefSyncStatus) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *RestRefSyncStatus) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *RestRefSyncStatus) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetLastSync returns the LastSync field value if set, zero value otherwise.
func (o *RestRefSyncStatus) GetLastSync() float32 {
	if o == nil || IsNil(o.LastSync) {
		var ret float32
		return ret
	}
	return *o.LastSync
}

// GetLastSyncOk returns a tuple with the LastSync field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRefSyncStatus) GetLastSyncOk() (*float32, bool) {
	if o == nil || IsNil(o.LastSync) {
		return nil, false
	}
	return o.LastSync, true
}

// HasLastSync returns a boolean if a field has been set.
func (o *RestRefSyncStatus) HasLastSync() bool {
	if o != nil && !IsNil(o.LastSync) {
		return true
	}

	return false
}

// SetLastSync gets a reference to the given float32 and assigns it to the LastSync field.
func (o *RestRefSyncStatus) SetLastSync(v float32) {
	o.LastSync = &v
}

// GetOrphanedRefs returns the OrphanedRefs field value if set, zero value otherwise.
func (o *RestRefSyncStatus) GetOrphanedRefs() RestRefSyncStatusAheadRefs {
	if o == nil || IsNil(o.OrphanedRefs) {
		var ret RestRefSyncStatusAheadRefs
		return ret
	}
	return *o.OrphanedRefs
}

// GetOrphanedRefsOk returns a tuple with the OrphanedRefs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRefSyncStatus) GetOrphanedRefsOk() (*RestRefSyncStatusAheadRefs, bool) {
	if o == nil || IsNil(o.OrphanedRefs) {
		return nil, false
	}
	return o.OrphanedRefs, true
}

// HasOrphanedRefs returns a boolean if a field has been set.
func (o *RestRefSyncStatus) HasOrphanedRefs() bool {
	if o != nil && !IsNil(o.OrphanedRefs) {
		return true
	}

	return false
}

// SetOrphanedRefs gets a reference to the given RestRefSyncStatusAheadRefs and assigns it to the OrphanedRefs field.
func (o *RestRefSyncStatus) SetOrphanedRefs(v RestRefSyncStatusAheadRefs) {
	o.OrphanedRefs = &v
}

func (o RestRefSyncStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestRefSyncStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AheadRefs) {
		toSerialize["aheadRefs"] = o.AheadRefs
	}
	if !IsNil(o.Available) {
		toSerialize["available"] = o.Available
	}
	if !IsNil(o.DivergedRefs) {
		toSerialize["divergedRefs"] = o.DivergedRefs
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.LastSync) {
		toSerialize["lastSync"] = o.LastSync
	}
	if !IsNil(o.OrphanedRefs) {
		toSerialize["orphanedRefs"] = o.OrphanedRefs
	}
	return toSerialize, nil
}

type NullableRestRefSyncStatus struct {
	value *RestRefSyncStatus
	isSet bool
}

func (v NullableRestRefSyncStatus) Get() *RestRefSyncStatus {
	return v.value
}

func (v *NullableRestRefSyncStatus) Set(val *RestRefSyncStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableRestRefSyncStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableRestRefSyncStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestRefSyncStatus(val *RestRefSyncStatus) *NullableRestRefSyncStatus {
	return &NullableRestRefSyncStatus{value: val, isSet: true}
}

func (v NullableRestRefSyncStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestRefSyncStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


