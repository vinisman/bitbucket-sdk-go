/*
Bitbucket Data Center

This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).

API version: 9.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RestRepositoryHook type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestRepositoryHook{}

// RestRepositoryHook struct for RestRepositoryHook
type RestRepositoryHook struct {
	Configured *bool `json:"configured,omitempty"`
	Details *RepositoryHookDetails `json:"details,omitempty"`
	Enabled *bool `json:"enabled,omitempty"`
	Scope *RestReviewerGroupScope `json:"scope,omitempty"`
}

// NewRestRepositoryHook instantiates a new RestRepositoryHook object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestRepositoryHook() *RestRepositoryHook {
	this := RestRepositoryHook{}
	return &this
}

// NewRestRepositoryHookWithDefaults instantiates a new RestRepositoryHook object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestRepositoryHookWithDefaults() *RestRepositoryHook {
	this := RestRepositoryHook{}
	return &this
}

// GetConfigured returns the Configured field value if set, zero value otherwise.
func (o *RestRepositoryHook) GetConfigured() bool {
	if o == nil || IsNil(o.Configured) {
		var ret bool
		return ret
	}
	return *o.Configured
}

// GetConfiguredOk returns a tuple with the Configured field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRepositoryHook) GetConfiguredOk() (*bool, bool) {
	if o == nil || IsNil(o.Configured) {
		return nil, false
	}
	return o.Configured, true
}

// HasConfigured returns a boolean if a field has been set.
func (o *RestRepositoryHook) HasConfigured() bool {
	if o != nil && !IsNil(o.Configured) {
		return true
	}

	return false
}

// SetConfigured gets a reference to the given bool and assigns it to the Configured field.
func (o *RestRepositoryHook) SetConfigured(v bool) {
	o.Configured = &v
}

// GetDetails returns the Details field value if set, zero value otherwise.
func (o *RestRepositoryHook) GetDetails() RepositoryHookDetails {
	if o == nil || IsNil(o.Details) {
		var ret RepositoryHookDetails
		return ret
	}
	return *o.Details
}

// GetDetailsOk returns a tuple with the Details field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRepositoryHook) GetDetailsOk() (*RepositoryHookDetails, bool) {
	if o == nil || IsNil(o.Details) {
		return nil, false
	}
	return o.Details, true
}

// HasDetails returns a boolean if a field has been set.
func (o *RestRepositoryHook) HasDetails() bool {
	if o != nil && !IsNil(o.Details) {
		return true
	}

	return false
}

// SetDetails gets a reference to the given RepositoryHookDetails and assigns it to the Details field.
func (o *RestRepositoryHook) SetDetails(v RepositoryHookDetails) {
	o.Details = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *RestRepositoryHook) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRepositoryHook) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *RestRepositoryHook) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *RestRepositoryHook) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetScope returns the Scope field value if set, zero value otherwise.
func (o *RestRepositoryHook) GetScope() RestReviewerGroupScope {
	if o == nil || IsNil(o.Scope) {
		var ret RestReviewerGroupScope
		return ret
	}
	return *o.Scope
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRepositoryHook) GetScopeOk() (*RestReviewerGroupScope, bool) {
	if o == nil || IsNil(o.Scope) {
		return nil, false
	}
	return o.Scope, true
}

// HasScope returns a boolean if a field has been set.
func (o *RestRepositoryHook) HasScope() bool {
	if o != nil && !IsNil(o.Scope) {
		return true
	}

	return false
}

// SetScope gets a reference to the given RestReviewerGroupScope and assigns it to the Scope field.
func (o *RestRepositoryHook) SetScope(v RestReviewerGroupScope) {
	o.Scope = &v
}

func (o RestRepositoryHook) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestRepositoryHook) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Configured) {
		toSerialize["configured"] = o.Configured
	}
	if !IsNil(o.Details) {
		toSerialize["details"] = o.Details
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Scope) {
		toSerialize["scope"] = o.Scope
	}
	return toSerialize, nil
}

type NullableRestRepositoryHook struct {
	value *RestRepositoryHook
	isSet bool
}

func (v NullableRestRepositoryHook) Get() *RestRepositoryHook {
	return v.value
}

func (v *NullableRestRepositoryHook) Set(val *RestRepositoryHook) {
	v.value = val
	v.isSet = true
}

func (v NullableRestRepositoryHook) IsSet() bool {
	return v.isSet
}

func (v *NullableRestRepositoryHook) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestRepositoryHook(val *RestRepositoryHook) *NullableRestRepositoryHook {
	return &NullableRestRepositoryHook{value: val, isSet: true}
}

func (v NullableRestRepositoryHook) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestRepositoryHook) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


