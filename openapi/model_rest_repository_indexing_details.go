/*
Bitbucket Data Center

This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).

API version: 9.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RestRepositoryIndexingDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestRepositoryIndexingDetails{}

// RestRepositoryIndexingDetails struct for RestRepositoryIndexingDetails
type RestRepositoryIndexingDetails struct {
	// Additional detail about the <b>BROKEN</b> status if available, meant for informational purposes only. This nullable, free-form text field should not be used for automation; rely on status instead.
	IndexingError *string `json:"indexingError,omitempty"`
	// The commit hash of the last indexed commit in the repository.
	LastIndexedCommitId *string `json:"lastIndexedCommitId,omitempty"`
	// The timestamp in epoch milliseconds of the last time the repository successfully was indexed
	LastIndexedTimestamp *int64 `json:"lastIndexedTimestamp,omitempty"`
	// The project key that the repository belongs to
	ProjectKey *string `json:"projectKey,omitempty"`
	// The repository slug
	RepositorySlug *string `json:"repositorySlug,omitempty"`
	// The current indexing status of the repository.
	Status *string `json:"status,omitempty"`
}

// NewRestRepositoryIndexingDetails instantiates a new RestRepositoryIndexingDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestRepositoryIndexingDetails() *RestRepositoryIndexingDetails {
	this := RestRepositoryIndexingDetails{}
	return &this
}

// NewRestRepositoryIndexingDetailsWithDefaults instantiates a new RestRepositoryIndexingDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestRepositoryIndexingDetailsWithDefaults() *RestRepositoryIndexingDetails {
	this := RestRepositoryIndexingDetails{}
	return &this
}

// GetIndexingError returns the IndexingError field value if set, zero value otherwise.
func (o *RestRepositoryIndexingDetails) GetIndexingError() string {
	if o == nil || IsNil(o.IndexingError) {
		var ret string
		return ret
	}
	return *o.IndexingError
}

// GetIndexingErrorOk returns a tuple with the IndexingError field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRepositoryIndexingDetails) GetIndexingErrorOk() (*string, bool) {
	if o == nil || IsNil(o.IndexingError) {
		return nil, false
	}
	return o.IndexingError, true
}

// HasIndexingError returns a boolean if a field has been set.
func (o *RestRepositoryIndexingDetails) HasIndexingError() bool {
	if o != nil && !IsNil(o.IndexingError) {
		return true
	}

	return false
}

// SetIndexingError gets a reference to the given string and assigns it to the IndexingError field.
func (o *RestRepositoryIndexingDetails) SetIndexingError(v string) {
	o.IndexingError = &v
}

// GetLastIndexedCommitId returns the LastIndexedCommitId field value if set, zero value otherwise.
func (o *RestRepositoryIndexingDetails) GetLastIndexedCommitId() string {
	if o == nil || IsNil(o.LastIndexedCommitId) {
		var ret string
		return ret
	}
	return *o.LastIndexedCommitId
}

// GetLastIndexedCommitIdOk returns a tuple with the LastIndexedCommitId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRepositoryIndexingDetails) GetLastIndexedCommitIdOk() (*string, bool) {
	if o == nil || IsNil(o.LastIndexedCommitId) {
		return nil, false
	}
	return o.LastIndexedCommitId, true
}

// HasLastIndexedCommitId returns a boolean if a field has been set.
func (o *RestRepositoryIndexingDetails) HasLastIndexedCommitId() bool {
	if o != nil && !IsNil(o.LastIndexedCommitId) {
		return true
	}

	return false
}

// SetLastIndexedCommitId gets a reference to the given string and assigns it to the LastIndexedCommitId field.
func (o *RestRepositoryIndexingDetails) SetLastIndexedCommitId(v string) {
	o.LastIndexedCommitId = &v
}

// GetLastIndexedTimestamp returns the LastIndexedTimestamp field value if set, zero value otherwise.
func (o *RestRepositoryIndexingDetails) GetLastIndexedTimestamp() int64 {
	if o == nil || IsNil(o.LastIndexedTimestamp) {
		var ret int64
		return ret
	}
	return *o.LastIndexedTimestamp
}

// GetLastIndexedTimestampOk returns a tuple with the LastIndexedTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRepositoryIndexingDetails) GetLastIndexedTimestampOk() (*int64, bool) {
	if o == nil || IsNil(o.LastIndexedTimestamp) {
		return nil, false
	}
	return o.LastIndexedTimestamp, true
}

// HasLastIndexedTimestamp returns a boolean if a field has been set.
func (o *RestRepositoryIndexingDetails) HasLastIndexedTimestamp() bool {
	if o != nil && !IsNil(o.LastIndexedTimestamp) {
		return true
	}

	return false
}

// SetLastIndexedTimestamp gets a reference to the given int64 and assigns it to the LastIndexedTimestamp field.
func (o *RestRepositoryIndexingDetails) SetLastIndexedTimestamp(v int64) {
	o.LastIndexedTimestamp = &v
}

// GetProjectKey returns the ProjectKey field value if set, zero value otherwise.
func (o *RestRepositoryIndexingDetails) GetProjectKey() string {
	if o == nil || IsNil(o.ProjectKey) {
		var ret string
		return ret
	}
	return *o.ProjectKey
}

// GetProjectKeyOk returns a tuple with the ProjectKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRepositoryIndexingDetails) GetProjectKeyOk() (*string, bool) {
	if o == nil || IsNil(o.ProjectKey) {
		return nil, false
	}
	return o.ProjectKey, true
}

// HasProjectKey returns a boolean if a field has been set.
func (o *RestRepositoryIndexingDetails) HasProjectKey() bool {
	if o != nil && !IsNil(o.ProjectKey) {
		return true
	}

	return false
}

// SetProjectKey gets a reference to the given string and assigns it to the ProjectKey field.
func (o *RestRepositoryIndexingDetails) SetProjectKey(v string) {
	o.ProjectKey = &v
}

// GetRepositorySlug returns the RepositorySlug field value if set, zero value otherwise.
func (o *RestRepositoryIndexingDetails) GetRepositorySlug() string {
	if o == nil || IsNil(o.RepositorySlug) {
		var ret string
		return ret
	}
	return *o.RepositorySlug
}

// GetRepositorySlugOk returns a tuple with the RepositorySlug field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRepositoryIndexingDetails) GetRepositorySlugOk() (*string, bool) {
	if o == nil || IsNil(o.RepositorySlug) {
		return nil, false
	}
	return o.RepositorySlug, true
}

// HasRepositorySlug returns a boolean if a field has been set.
func (o *RestRepositoryIndexingDetails) HasRepositorySlug() bool {
	if o != nil && !IsNil(o.RepositorySlug) {
		return true
	}

	return false
}

// SetRepositorySlug gets a reference to the given string and assigns it to the RepositorySlug field.
func (o *RestRepositoryIndexingDetails) SetRepositorySlug(v string) {
	o.RepositorySlug = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *RestRepositoryIndexingDetails) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRepositoryIndexingDetails) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *RestRepositoryIndexingDetails) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *RestRepositoryIndexingDetails) SetStatus(v string) {
	o.Status = &v
}

func (o RestRepositoryIndexingDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestRepositoryIndexingDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IndexingError) {
		toSerialize["indexingError"] = o.IndexingError
	}
	if !IsNil(o.LastIndexedCommitId) {
		toSerialize["lastIndexedCommitId"] = o.LastIndexedCommitId
	}
	if !IsNil(o.LastIndexedTimestamp) {
		toSerialize["lastIndexedTimestamp"] = o.LastIndexedTimestamp
	}
	if !IsNil(o.ProjectKey) {
		toSerialize["projectKey"] = o.ProjectKey
	}
	if !IsNil(o.RepositorySlug) {
		toSerialize["repositorySlug"] = o.RepositorySlug
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

type NullableRestRepositoryIndexingDetails struct {
	value *RestRepositoryIndexingDetails
	isSet bool
}

func (v NullableRestRepositoryIndexingDetails) Get() *RestRepositoryIndexingDetails {
	return v.value
}

func (v *NullableRestRepositoryIndexingDetails) Set(val *RestRepositoryIndexingDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableRestRepositoryIndexingDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableRestRepositoryIndexingDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestRepositoryIndexingDetails(val *RestRepositoryIndexingDetails) *NullableRestRepositoryIndexingDetails {
	return &NullableRestRepositoryIndexingDetails{value: val, isSet: true}
}

func (v NullableRestRepositoryIndexingDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestRepositoryIndexingDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


