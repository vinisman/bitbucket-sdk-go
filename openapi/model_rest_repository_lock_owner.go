/*
Bitbucket Data Center

This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).

API version: 9.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the RestRepositoryLockOwner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestRepositoryLockOwner{}

// RestRepositoryLockOwner struct for RestRepositoryLockOwner
type RestRepositoryLockOwner struct {
	// The repository ID for which the lock is held
	ExternalRepositoryId *string `json:"externalRepositoryId,omitempty"`
	// The time at which lock was last acquired
	LockAcquireTime *time.Time `json:"lockAcquireTime,omitempty"`
	// The ID of the mirror node on which the lock is being held
	NodeId *string `json:"nodeId,omitempty"`
	// The unique ID of the request for which the lock is being held
	RequestId *string `json:"requestId,omitempty"`
	// Name of the thread that is holding the lock
	ThreadName *string `json:"threadName,omitempty"`
}

// NewRestRepositoryLockOwner instantiates a new RestRepositoryLockOwner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestRepositoryLockOwner() *RestRepositoryLockOwner {
	this := RestRepositoryLockOwner{}
	return &this
}

// NewRestRepositoryLockOwnerWithDefaults instantiates a new RestRepositoryLockOwner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestRepositoryLockOwnerWithDefaults() *RestRepositoryLockOwner {
	this := RestRepositoryLockOwner{}
	return &this
}

// GetExternalRepositoryId returns the ExternalRepositoryId field value if set, zero value otherwise.
func (o *RestRepositoryLockOwner) GetExternalRepositoryId() string {
	if o == nil || IsNil(o.ExternalRepositoryId) {
		var ret string
		return ret
	}
	return *o.ExternalRepositoryId
}

// GetExternalRepositoryIdOk returns a tuple with the ExternalRepositoryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRepositoryLockOwner) GetExternalRepositoryIdOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalRepositoryId) {
		return nil, false
	}
	return o.ExternalRepositoryId, true
}

// HasExternalRepositoryId returns a boolean if a field has been set.
func (o *RestRepositoryLockOwner) HasExternalRepositoryId() bool {
	if o != nil && !IsNil(o.ExternalRepositoryId) {
		return true
	}

	return false
}

// SetExternalRepositoryId gets a reference to the given string and assigns it to the ExternalRepositoryId field.
func (o *RestRepositoryLockOwner) SetExternalRepositoryId(v string) {
	o.ExternalRepositoryId = &v
}

// GetLockAcquireTime returns the LockAcquireTime field value if set, zero value otherwise.
func (o *RestRepositoryLockOwner) GetLockAcquireTime() time.Time {
	if o == nil || IsNil(o.LockAcquireTime) {
		var ret time.Time
		return ret
	}
	return *o.LockAcquireTime
}

// GetLockAcquireTimeOk returns a tuple with the LockAcquireTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRepositoryLockOwner) GetLockAcquireTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LockAcquireTime) {
		return nil, false
	}
	return o.LockAcquireTime, true
}

// HasLockAcquireTime returns a boolean if a field has been set.
func (o *RestRepositoryLockOwner) HasLockAcquireTime() bool {
	if o != nil && !IsNil(o.LockAcquireTime) {
		return true
	}

	return false
}

// SetLockAcquireTime gets a reference to the given time.Time and assigns it to the LockAcquireTime field.
func (o *RestRepositoryLockOwner) SetLockAcquireTime(v time.Time) {
	o.LockAcquireTime = &v
}

// GetNodeId returns the NodeId field value if set, zero value otherwise.
func (o *RestRepositoryLockOwner) GetNodeId() string {
	if o == nil || IsNil(o.NodeId) {
		var ret string
		return ret
	}
	return *o.NodeId
}

// GetNodeIdOk returns a tuple with the NodeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRepositoryLockOwner) GetNodeIdOk() (*string, bool) {
	if o == nil || IsNil(o.NodeId) {
		return nil, false
	}
	return o.NodeId, true
}

// HasNodeId returns a boolean if a field has been set.
func (o *RestRepositoryLockOwner) HasNodeId() bool {
	if o != nil && !IsNil(o.NodeId) {
		return true
	}

	return false
}

// SetNodeId gets a reference to the given string and assigns it to the NodeId field.
func (o *RestRepositoryLockOwner) SetNodeId(v string) {
	o.NodeId = &v
}

// GetRequestId returns the RequestId field value if set, zero value otherwise.
func (o *RestRepositoryLockOwner) GetRequestId() string {
	if o == nil || IsNil(o.RequestId) {
		var ret string
		return ret
	}
	return *o.RequestId
}

// GetRequestIdOk returns a tuple with the RequestId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRepositoryLockOwner) GetRequestIdOk() (*string, bool) {
	if o == nil || IsNil(o.RequestId) {
		return nil, false
	}
	return o.RequestId, true
}

// HasRequestId returns a boolean if a field has been set.
func (o *RestRepositoryLockOwner) HasRequestId() bool {
	if o != nil && !IsNil(o.RequestId) {
		return true
	}

	return false
}

// SetRequestId gets a reference to the given string and assigns it to the RequestId field.
func (o *RestRepositoryLockOwner) SetRequestId(v string) {
	o.RequestId = &v
}

// GetThreadName returns the ThreadName field value if set, zero value otherwise.
func (o *RestRepositoryLockOwner) GetThreadName() string {
	if o == nil || IsNil(o.ThreadName) {
		var ret string
		return ret
	}
	return *o.ThreadName
}

// GetThreadNameOk returns a tuple with the ThreadName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRepositoryLockOwner) GetThreadNameOk() (*string, bool) {
	if o == nil || IsNil(o.ThreadName) {
		return nil, false
	}
	return o.ThreadName, true
}

// HasThreadName returns a boolean if a field has been set.
func (o *RestRepositoryLockOwner) HasThreadName() bool {
	if o != nil && !IsNil(o.ThreadName) {
		return true
	}

	return false
}

// SetThreadName gets a reference to the given string and assigns it to the ThreadName field.
func (o *RestRepositoryLockOwner) SetThreadName(v string) {
	o.ThreadName = &v
}

func (o RestRepositoryLockOwner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestRepositoryLockOwner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ExternalRepositoryId) {
		toSerialize["externalRepositoryId"] = o.ExternalRepositoryId
	}
	if !IsNil(o.LockAcquireTime) {
		toSerialize["lockAcquireTime"] = o.LockAcquireTime
	}
	if !IsNil(o.NodeId) {
		toSerialize["nodeId"] = o.NodeId
	}
	if !IsNil(o.RequestId) {
		toSerialize["requestId"] = o.RequestId
	}
	if !IsNil(o.ThreadName) {
		toSerialize["threadName"] = o.ThreadName
	}
	return toSerialize, nil
}

type NullableRestRepositoryLockOwner struct {
	value *RestRepositoryLockOwner
	isSet bool
}

func (v NullableRestRepositoryLockOwner) Get() *RestRepositoryLockOwner {
	return v.value
}

func (v *NullableRestRepositoryLockOwner) Set(val *RestRepositoryLockOwner) {
	v.value = val
	v.isSet = true
}

func (v NullableRestRepositoryLockOwner) IsSet() bool {
	return v.isSet
}

func (v *NullableRestRepositoryLockOwner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestRepositoryLockOwner(val *RestRepositoryLockOwner) *NullableRestRepositoryLockOwner {
	return &NullableRestRepositoryLockOwner{value: val, isSet: true}
}

func (v NullableRestRepositoryLockOwner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestRepositoryLockOwner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


