/*
Bitbucket Data Center

This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).

API version: 9.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RestRepositoryMirrorEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestRepositoryMirrorEvent{}

// RestRepositoryMirrorEvent struct for RestRepositoryMirrorEvent
type RestRepositoryMirrorEvent struct {
	MirrorRepoId *int32 `json:"mirrorRepoId,omitempty"`
	Type *string `json:"type,omitempty"`
	UpstreamRepoId *string `json:"upstreamRepoId,omitempty"`
}

// NewRestRepositoryMirrorEvent instantiates a new RestRepositoryMirrorEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestRepositoryMirrorEvent() *RestRepositoryMirrorEvent {
	this := RestRepositoryMirrorEvent{}
	return &this
}

// NewRestRepositoryMirrorEventWithDefaults instantiates a new RestRepositoryMirrorEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestRepositoryMirrorEventWithDefaults() *RestRepositoryMirrorEvent {
	this := RestRepositoryMirrorEvent{}
	return &this
}

// GetMirrorRepoId returns the MirrorRepoId field value if set, zero value otherwise.
func (o *RestRepositoryMirrorEvent) GetMirrorRepoId() int32 {
	if o == nil || IsNil(o.MirrorRepoId) {
		var ret int32
		return ret
	}
	return *o.MirrorRepoId
}

// GetMirrorRepoIdOk returns a tuple with the MirrorRepoId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRepositoryMirrorEvent) GetMirrorRepoIdOk() (*int32, bool) {
	if o == nil || IsNil(o.MirrorRepoId) {
		return nil, false
	}
	return o.MirrorRepoId, true
}

// HasMirrorRepoId returns a boolean if a field has been set.
func (o *RestRepositoryMirrorEvent) HasMirrorRepoId() bool {
	if o != nil && !IsNil(o.MirrorRepoId) {
		return true
	}

	return false
}

// SetMirrorRepoId gets a reference to the given int32 and assigns it to the MirrorRepoId field.
func (o *RestRepositoryMirrorEvent) SetMirrorRepoId(v int32) {
	o.MirrorRepoId = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *RestRepositoryMirrorEvent) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRepositoryMirrorEvent) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *RestRepositoryMirrorEvent) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *RestRepositoryMirrorEvent) SetType(v string) {
	o.Type = &v
}

// GetUpstreamRepoId returns the UpstreamRepoId field value if set, zero value otherwise.
func (o *RestRepositoryMirrorEvent) GetUpstreamRepoId() string {
	if o == nil || IsNil(o.UpstreamRepoId) {
		var ret string
		return ret
	}
	return *o.UpstreamRepoId
}

// GetUpstreamRepoIdOk returns a tuple with the UpstreamRepoId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRepositoryMirrorEvent) GetUpstreamRepoIdOk() (*string, bool) {
	if o == nil || IsNil(o.UpstreamRepoId) {
		return nil, false
	}
	return o.UpstreamRepoId, true
}

// HasUpstreamRepoId returns a boolean if a field has been set.
func (o *RestRepositoryMirrorEvent) HasUpstreamRepoId() bool {
	if o != nil && !IsNil(o.UpstreamRepoId) {
		return true
	}

	return false
}

// SetUpstreamRepoId gets a reference to the given string and assigns it to the UpstreamRepoId field.
func (o *RestRepositoryMirrorEvent) SetUpstreamRepoId(v string) {
	o.UpstreamRepoId = &v
}

func (o RestRepositoryMirrorEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestRepositoryMirrorEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MirrorRepoId) {
		toSerialize["mirrorRepoId"] = o.MirrorRepoId
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.UpstreamRepoId) {
		toSerialize["upstreamRepoId"] = o.UpstreamRepoId
	}
	return toSerialize, nil
}

type NullableRestRepositoryMirrorEvent struct {
	value *RestRepositoryMirrorEvent
	isSet bool
}

func (v NullableRestRepositoryMirrorEvent) Get() *RestRepositoryMirrorEvent {
	return v.value
}

func (v *NullableRestRepositoryMirrorEvent) Set(val *RestRepositoryMirrorEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableRestRepositoryMirrorEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableRestRepositoryMirrorEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestRepositoryMirrorEvent(val *RestRepositoryMirrorEvent) *NullableRestRepositoryMirrorEvent {
	return &NullableRestRepositoryMirrorEvent{value: val, isSet: true}
}

func (v NullableRestRepositoryMirrorEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestRepositoryMirrorEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


