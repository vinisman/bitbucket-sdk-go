/*
Bitbucket Data Center

This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).

API version: 9.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RestRepositoryRefChangeActivity type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestRepositoryRefChangeActivity{}

// RestRepositoryRefChangeActivity struct for RestRepositoryRefChangeActivity
type RestRepositoryRefChangeActivity struct {
	CreatedDate *int64 `json:"createdDate,omitempty"`
	Id *int64 `json:"id,omitempty"`
	RefChange *RestRepositoryRefChangeActivityRefChange `json:"refChange,omitempty"`
	Repository *RestChangesetRepository `json:"repository,omitempty"`
	Trigger *string `json:"trigger,omitempty"`
	User *RestCommentAnchorPullRequestAuthorUser `json:"user,omitempty"`
}

// NewRestRepositoryRefChangeActivity instantiates a new RestRepositoryRefChangeActivity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestRepositoryRefChangeActivity() *RestRepositoryRefChangeActivity {
	this := RestRepositoryRefChangeActivity{}
	return &this
}

// NewRestRepositoryRefChangeActivityWithDefaults instantiates a new RestRepositoryRefChangeActivity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestRepositoryRefChangeActivityWithDefaults() *RestRepositoryRefChangeActivity {
	this := RestRepositoryRefChangeActivity{}
	return &this
}

// GetCreatedDate returns the CreatedDate field value if set, zero value otherwise.
func (o *RestRepositoryRefChangeActivity) GetCreatedDate() int64 {
	if o == nil || IsNil(o.CreatedDate) {
		var ret int64
		return ret
	}
	return *o.CreatedDate
}

// GetCreatedDateOk returns a tuple with the CreatedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRepositoryRefChangeActivity) GetCreatedDateOk() (*int64, bool) {
	if o == nil || IsNil(o.CreatedDate) {
		return nil, false
	}
	return o.CreatedDate, true
}

// HasCreatedDate returns a boolean if a field has been set.
func (o *RestRepositoryRefChangeActivity) HasCreatedDate() bool {
	if o != nil && !IsNil(o.CreatedDate) {
		return true
	}

	return false
}

// SetCreatedDate gets a reference to the given int64 and assigns it to the CreatedDate field.
func (o *RestRepositoryRefChangeActivity) SetCreatedDate(v int64) {
	o.CreatedDate = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RestRepositoryRefChangeActivity) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRepositoryRefChangeActivity) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RestRepositoryRefChangeActivity) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *RestRepositoryRefChangeActivity) SetId(v int64) {
	o.Id = &v
}

// GetRefChange returns the RefChange field value if set, zero value otherwise.
func (o *RestRepositoryRefChangeActivity) GetRefChange() RestRepositoryRefChangeActivityRefChange {
	if o == nil || IsNil(o.RefChange) {
		var ret RestRepositoryRefChangeActivityRefChange
		return ret
	}
	return *o.RefChange
}

// GetRefChangeOk returns a tuple with the RefChange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRepositoryRefChangeActivity) GetRefChangeOk() (*RestRepositoryRefChangeActivityRefChange, bool) {
	if o == nil || IsNil(o.RefChange) {
		return nil, false
	}
	return o.RefChange, true
}

// HasRefChange returns a boolean if a field has been set.
func (o *RestRepositoryRefChangeActivity) HasRefChange() bool {
	if o != nil && !IsNil(o.RefChange) {
		return true
	}

	return false
}

// SetRefChange gets a reference to the given RestRepositoryRefChangeActivityRefChange and assigns it to the RefChange field.
func (o *RestRepositoryRefChangeActivity) SetRefChange(v RestRepositoryRefChangeActivityRefChange) {
	o.RefChange = &v
}

// GetRepository returns the Repository field value if set, zero value otherwise.
func (o *RestRepositoryRefChangeActivity) GetRepository() RestChangesetRepository {
	if o == nil || IsNil(o.Repository) {
		var ret RestChangesetRepository
		return ret
	}
	return *o.Repository
}

// GetRepositoryOk returns a tuple with the Repository field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRepositoryRefChangeActivity) GetRepositoryOk() (*RestChangesetRepository, bool) {
	if o == nil || IsNil(o.Repository) {
		return nil, false
	}
	return o.Repository, true
}

// HasRepository returns a boolean if a field has been set.
func (o *RestRepositoryRefChangeActivity) HasRepository() bool {
	if o != nil && !IsNil(o.Repository) {
		return true
	}

	return false
}

// SetRepository gets a reference to the given RestChangesetRepository and assigns it to the Repository field.
func (o *RestRepositoryRefChangeActivity) SetRepository(v RestChangesetRepository) {
	o.Repository = &v
}

// GetTrigger returns the Trigger field value if set, zero value otherwise.
func (o *RestRepositoryRefChangeActivity) GetTrigger() string {
	if o == nil || IsNil(o.Trigger) {
		var ret string
		return ret
	}
	return *o.Trigger
}

// GetTriggerOk returns a tuple with the Trigger field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRepositoryRefChangeActivity) GetTriggerOk() (*string, bool) {
	if o == nil || IsNil(o.Trigger) {
		return nil, false
	}
	return o.Trigger, true
}

// HasTrigger returns a boolean if a field has been set.
func (o *RestRepositoryRefChangeActivity) HasTrigger() bool {
	if o != nil && !IsNil(o.Trigger) {
		return true
	}

	return false
}

// SetTrigger gets a reference to the given string and assigns it to the Trigger field.
func (o *RestRepositoryRefChangeActivity) SetTrigger(v string) {
	o.Trigger = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *RestRepositoryRefChangeActivity) GetUser() RestCommentAnchorPullRequestAuthorUser {
	if o == nil || IsNil(o.User) {
		var ret RestCommentAnchorPullRequestAuthorUser
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRepositoryRefChangeActivity) GetUserOk() (*RestCommentAnchorPullRequestAuthorUser, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *RestRepositoryRefChangeActivity) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given RestCommentAnchorPullRequestAuthorUser and assigns it to the User field.
func (o *RestRepositoryRefChangeActivity) SetUser(v RestCommentAnchorPullRequestAuthorUser) {
	o.User = &v
}

func (o RestRepositoryRefChangeActivity) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestRepositoryRefChangeActivity) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CreatedDate) {
		toSerialize["createdDate"] = o.CreatedDate
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.RefChange) {
		toSerialize["refChange"] = o.RefChange
	}
	if !IsNil(o.Repository) {
		toSerialize["repository"] = o.Repository
	}
	if !IsNil(o.Trigger) {
		toSerialize["trigger"] = o.Trigger
	}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	return toSerialize, nil
}

type NullableRestRepositoryRefChangeActivity struct {
	value *RestRepositoryRefChangeActivity
	isSet bool
}

func (v NullableRestRepositoryRefChangeActivity) Get() *RestRepositoryRefChangeActivity {
	return v.value
}

func (v *NullableRestRepositoryRefChangeActivity) Set(val *RestRepositoryRefChangeActivity) {
	v.value = val
	v.isSet = true
}

func (v NullableRestRepositoryRefChangeActivity) IsSet() bool {
	return v.isSet
}

func (v *NullableRestRepositoryRefChangeActivity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestRepositoryRefChangeActivity(val *RestRepositoryRefChangeActivity) *NullableRestRepositoryRefChangeActivity {
	return &NullableRestRepositoryRefChangeActivity{value: val, isSet: true}
}

func (v NullableRestRepositoryRefChangeActivity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestRepositoryRefChangeActivity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


