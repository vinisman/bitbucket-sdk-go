/*
Bitbucket Data Center

This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).

API version: 9.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RestRepositorySelector type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestRepositorySelector{}

// RestRepositorySelector struct for RestRepositorySelector
type RestRepositorySelector struct {
	ProjectKey *string `json:"projectKey,omitempty"`
	Slug *string `json:"slug,omitempty"`
}

// NewRestRepositorySelector instantiates a new RestRepositorySelector object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestRepositorySelector() *RestRepositorySelector {
	this := RestRepositorySelector{}
	return &this
}

// NewRestRepositorySelectorWithDefaults instantiates a new RestRepositorySelector object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestRepositorySelectorWithDefaults() *RestRepositorySelector {
	this := RestRepositorySelector{}
	return &this
}

// GetProjectKey returns the ProjectKey field value if set, zero value otherwise.
func (o *RestRepositorySelector) GetProjectKey() string {
	if o == nil || IsNil(o.ProjectKey) {
		var ret string
		return ret
	}
	return *o.ProjectKey
}

// GetProjectKeyOk returns a tuple with the ProjectKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRepositorySelector) GetProjectKeyOk() (*string, bool) {
	if o == nil || IsNil(o.ProjectKey) {
		return nil, false
	}
	return o.ProjectKey, true
}

// HasProjectKey returns a boolean if a field has been set.
func (o *RestRepositorySelector) HasProjectKey() bool {
	if o != nil && !IsNil(o.ProjectKey) {
		return true
	}

	return false
}

// SetProjectKey gets a reference to the given string and assigns it to the ProjectKey field.
func (o *RestRepositorySelector) SetProjectKey(v string) {
	o.ProjectKey = &v
}

// GetSlug returns the Slug field value if set, zero value otherwise.
func (o *RestRepositorySelector) GetSlug() string {
	if o == nil || IsNil(o.Slug) {
		var ret string
		return ret
	}
	return *o.Slug
}

// GetSlugOk returns a tuple with the Slug field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRepositorySelector) GetSlugOk() (*string, bool) {
	if o == nil || IsNil(o.Slug) {
		return nil, false
	}
	return o.Slug, true
}

// HasSlug returns a boolean if a field has been set.
func (o *RestRepositorySelector) HasSlug() bool {
	if o != nil && !IsNil(o.Slug) {
		return true
	}

	return false
}

// SetSlug gets a reference to the given string and assigns it to the Slug field.
func (o *RestRepositorySelector) SetSlug(v string) {
	o.Slug = &v
}

func (o RestRepositorySelector) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestRepositorySelector) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ProjectKey) {
		toSerialize["projectKey"] = o.ProjectKey
	}
	if !IsNil(o.Slug) {
		toSerialize["slug"] = o.Slug
	}
	return toSerialize, nil
}

type NullableRestRepositorySelector struct {
	value *RestRepositorySelector
	isSet bool
}

func (v NullableRestRepositorySelector) Get() *RestRepositorySelector {
	return v.value
}

func (v *NullableRestRepositorySelector) Set(val *RestRepositorySelector) {
	v.value = val
	v.isSet = true
}

func (v NullableRestRepositorySelector) IsSet() bool {
	return v.isSet
}

func (v *NullableRestRepositorySelector) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestRepositorySelector(val *RestRepositorySelector) *NullableRestRepositorySelector {
	return &NullableRestRepositorySelector{value: val, isSet: true}
}

func (v NullableRestRepositorySelector) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestRepositorySelector) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


