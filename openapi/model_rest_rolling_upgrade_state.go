/*
Bitbucket Data Center

This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).

API version: 9.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RestRollingUpgradeState type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestRollingUpgradeState{}

// RestRollingUpgradeState struct for RestRollingUpgradeState
type RestRollingUpgradeState struct {
	RollingUpgradeEnabled *bool `json:"rollingUpgradeEnabled,omitempty"`
	Version *string `json:"version,omitempty"`
}

// NewRestRollingUpgradeState instantiates a new RestRollingUpgradeState object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestRollingUpgradeState() *RestRollingUpgradeState {
	this := RestRollingUpgradeState{}
	return &this
}

// NewRestRollingUpgradeStateWithDefaults instantiates a new RestRollingUpgradeState object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestRollingUpgradeStateWithDefaults() *RestRollingUpgradeState {
	this := RestRollingUpgradeState{}
	return &this
}

// GetRollingUpgradeEnabled returns the RollingUpgradeEnabled field value if set, zero value otherwise.
func (o *RestRollingUpgradeState) GetRollingUpgradeEnabled() bool {
	if o == nil || IsNil(o.RollingUpgradeEnabled) {
		var ret bool
		return ret
	}
	return *o.RollingUpgradeEnabled
}

// GetRollingUpgradeEnabledOk returns a tuple with the RollingUpgradeEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRollingUpgradeState) GetRollingUpgradeEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.RollingUpgradeEnabled) {
		return nil, false
	}
	return o.RollingUpgradeEnabled, true
}

// HasRollingUpgradeEnabled returns a boolean if a field has been set.
func (o *RestRollingUpgradeState) HasRollingUpgradeEnabled() bool {
	if o != nil && !IsNil(o.RollingUpgradeEnabled) {
		return true
	}

	return false
}

// SetRollingUpgradeEnabled gets a reference to the given bool and assigns it to the RollingUpgradeEnabled field.
func (o *RestRollingUpgradeState) SetRollingUpgradeEnabled(v bool) {
	o.RollingUpgradeEnabled = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *RestRollingUpgradeState) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestRollingUpgradeState) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *RestRollingUpgradeState) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *RestRollingUpgradeState) SetVersion(v string) {
	o.Version = &v
}

func (o RestRollingUpgradeState) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestRollingUpgradeState) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RollingUpgradeEnabled) {
		toSerialize["rollingUpgradeEnabled"] = o.RollingUpgradeEnabled
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

type NullableRestRollingUpgradeState struct {
	value *RestRollingUpgradeState
	isSet bool
}

func (v NullableRestRollingUpgradeState) Get() *RestRollingUpgradeState {
	return v.value
}

func (v *NullableRestRollingUpgradeState) Set(val *RestRollingUpgradeState) {
	v.value = val
	v.isSet = true
}

func (v NullableRestRollingUpgradeState) IsSet() bool {
	return v.isSet
}

func (v *NullableRestRollingUpgradeState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestRollingUpgradeState(val *RestRollingUpgradeState) *NullableRestRollingUpgradeState {
	return &NullableRestRollingUpgradeState{value: val, isSet: true}
}

func (v NullableRestRollingUpgradeState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestRollingUpgradeState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


