/*
Bitbucket Data Center

This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).

API version: 9.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RestSecretScanningRuleScope type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestSecretScanningRuleScope{}

// RestSecretScanningRuleScope The scope in which this rule was configured for.
type RestSecretScanningRuleScope struct {
	ResourceId *int32 `json:"resourceId,omitempty"`
	Type *string `json:"type,omitempty"`
}

// NewRestSecretScanningRuleScope instantiates a new RestSecretScanningRuleScope object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestSecretScanningRuleScope() *RestSecretScanningRuleScope {
	this := RestSecretScanningRuleScope{}
	return &this
}

// NewRestSecretScanningRuleScopeWithDefaults instantiates a new RestSecretScanningRuleScope object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestSecretScanningRuleScopeWithDefaults() *RestSecretScanningRuleScope {
	this := RestSecretScanningRuleScope{}
	return &this
}

// GetResourceId returns the ResourceId field value if set, zero value otherwise.
func (o *RestSecretScanningRuleScope) GetResourceId() int32 {
	if o == nil || IsNil(o.ResourceId) {
		var ret int32
		return ret
	}
	return *o.ResourceId
}

// GetResourceIdOk returns a tuple with the ResourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestSecretScanningRuleScope) GetResourceIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ResourceId) {
		return nil, false
	}
	return o.ResourceId, true
}

// HasResourceId returns a boolean if a field has been set.
func (o *RestSecretScanningRuleScope) HasResourceId() bool {
	if o != nil && !IsNil(o.ResourceId) {
		return true
	}

	return false
}

// SetResourceId gets a reference to the given int32 and assigns it to the ResourceId field.
func (o *RestSecretScanningRuleScope) SetResourceId(v int32) {
	o.ResourceId = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *RestSecretScanningRuleScope) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestSecretScanningRuleScope) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *RestSecretScanningRuleScope) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *RestSecretScanningRuleScope) SetType(v string) {
	o.Type = &v
}

func (o RestSecretScanningRuleScope) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestSecretScanningRuleScope) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ResourceId) {
		toSerialize["resourceId"] = o.ResourceId
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableRestSecretScanningRuleScope struct {
	value *RestSecretScanningRuleScope
	isSet bool
}

func (v NullableRestSecretScanningRuleScope) Get() *RestSecretScanningRuleScope {
	return v.value
}

func (v *NullableRestSecretScanningRuleScope) Set(val *RestSecretScanningRuleScope) {
	v.value = val
	v.isSet = true
}

func (v NullableRestSecretScanningRuleScope) IsSet() bool {
	return v.isSet
}

func (v *NullableRestSecretScanningRuleScope) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestSecretScanningRuleScope(val *RestSecretScanningRuleScope) *NullableRestSecretScanningRuleScope {
	return &NullableRestSecretScanningRuleScope{value: val, isSet: true}
}

func (v NullableRestSecretScanningRuleScope) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestSecretScanningRuleScope) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


