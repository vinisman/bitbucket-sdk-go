/*
Bitbucket Data Center

This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).

API version: 9.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RestSingleAddInsightAnnotationRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestSingleAddInsightAnnotationRequest{}

// RestSingleAddInsightAnnotationRequest struct for RestSingleAddInsightAnnotationRequest
type RestSingleAddInsightAnnotationRequest struct {
	ExternalId *string `json:"externalId,omitempty"`
	Line *int32 `json:"line,omitempty"`
	Link *string `json:"link,omitempty"`
	Message string `json:"message"`
	Path *string `json:"path,omitempty"`
	Severity string `json:"severity" validate:"regexp=LOW|MEDIUM|HIGH"`
	Type *string `json:"type,omitempty" validate:"regexp=VULNERABILITY|CODE_SMELL|BUG"`
}

type _RestSingleAddInsightAnnotationRequest RestSingleAddInsightAnnotationRequest

// NewRestSingleAddInsightAnnotationRequest instantiates a new RestSingleAddInsightAnnotationRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestSingleAddInsightAnnotationRequest(message string, severity string) *RestSingleAddInsightAnnotationRequest {
	this := RestSingleAddInsightAnnotationRequest{}
	this.Message = message
	this.Severity = severity
	return &this
}

// NewRestSingleAddInsightAnnotationRequestWithDefaults instantiates a new RestSingleAddInsightAnnotationRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestSingleAddInsightAnnotationRequestWithDefaults() *RestSingleAddInsightAnnotationRequest {
	this := RestSingleAddInsightAnnotationRequest{}
	return &this
}

// GetExternalId returns the ExternalId field value if set, zero value otherwise.
func (o *RestSingleAddInsightAnnotationRequest) GetExternalId() string {
	if o == nil || IsNil(o.ExternalId) {
		var ret string
		return ret
	}
	return *o.ExternalId
}

// GetExternalIdOk returns a tuple with the ExternalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestSingleAddInsightAnnotationRequest) GetExternalIdOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalId) {
		return nil, false
	}
	return o.ExternalId, true
}

// HasExternalId returns a boolean if a field has been set.
func (o *RestSingleAddInsightAnnotationRequest) HasExternalId() bool {
	if o != nil && !IsNil(o.ExternalId) {
		return true
	}

	return false
}

// SetExternalId gets a reference to the given string and assigns it to the ExternalId field.
func (o *RestSingleAddInsightAnnotationRequest) SetExternalId(v string) {
	o.ExternalId = &v
}

// GetLine returns the Line field value if set, zero value otherwise.
func (o *RestSingleAddInsightAnnotationRequest) GetLine() int32 {
	if o == nil || IsNil(o.Line) {
		var ret int32
		return ret
	}
	return *o.Line
}

// GetLineOk returns a tuple with the Line field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestSingleAddInsightAnnotationRequest) GetLineOk() (*int32, bool) {
	if o == nil || IsNil(o.Line) {
		return nil, false
	}
	return o.Line, true
}

// HasLine returns a boolean if a field has been set.
func (o *RestSingleAddInsightAnnotationRequest) HasLine() bool {
	if o != nil && !IsNil(o.Line) {
		return true
	}

	return false
}

// SetLine gets a reference to the given int32 and assigns it to the Line field.
func (o *RestSingleAddInsightAnnotationRequest) SetLine(v int32) {
	o.Line = &v
}

// GetLink returns the Link field value if set, zero value otherwise.
func (o *RestSingleAddInsightAnnotationRequest) GetLink() string {
	if o == nil || IsNil(o.Link) {
		var ret string
		return ret
	}
	return *o.Link
}

// GetLinkOk returns a tuple with the Link field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestSingleAddInsightAnnotationRequest) GetLinkOk() (*string, bool) {
	if o == nil || IsNil(o.Link) {
		return nil, false
	}
	return o.Link, true
}

// HasLink returns a boolean if a field has been set.
func (o *RestSingleAddInsightAnnotationRequest) HasLink() bool {
	if o != nil && !IsNil(o.Link) {
		return true
	}

	return false
}

// SetLink gets a reference to the given string and assigns it to the Link field.
func (o *RestSingleAddInsightAnnotationRequest) SetLink(v string) {
	o.Link = &v
}

// GetMessage returns the Message field value
func (o *RestSingleAddInsightAnnotationRequest) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *RestSingleAddInsightAnnotationRequest) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *RestSingleAddInsightAnnotationRequest) SetMessage(v string) {
	o.Message = v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *RestSingleAddInsightAnnotationRequest) GetPath() string {
	if o == nil || IsNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestSingleAddInsightAnnotationRequest) GetPathOk() (*string, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *RestSingleAddInsightAnnotationRequest) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *RestSingleAddInsightAnnotationRequest) SetPath(v string) {
	o.Path = &v
}

// GetSeverity returns the Severity field value
func (o *RestSingleAddInsightAnnotationRequest) GetSeverity() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Severity
}

// GetSeverityOk returns a tuple with the Severity field value
// and a boolean to check if the value has been set.
func (o *RestSingleAddInsightAnnotationRequest) GetSeverityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Severity, true
}

// SetSeverity sets field value
func (o *RestSingleAddInsightAnnotationRequest) SetSeverity(v string) {
	o.Severity = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *RestSingleAddInsightAnnotationRequest) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestSingleAddInsightAnnotationRequest) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *RestSingleAddInsightAnnotationRequest) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *RestSingleAddInsightAnnotationRequest) SetType(v string) {
	o.Type = &v
}

func (o RestSingleAddInsightAnnotationRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestSingleAddInsightAnnotationRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ExternalId) {
		toSerialize["externalId"] = o.ExternalId
	}
	if !IsNil(o.Line) {
		toSerialize["line"] = o.Line
	}
	if !IsNil(o.Link) {
		toSerialize["link"] = o.Link
	}
	toSerialize["message"] = o.Message
	if !IsNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	toSerialize["severity"] = o.Severity
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

func (o *RestSingleAddInsightAnnotationRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"message",
		"severity",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRestSingleAddInsightAnnotationRequest := _RestSingleAddInsightAnnotationRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRestSingleAddInsightAnnotationRequest)

	if err != nil {
		return err
	}

	*o = RestSingleAddInsightAnnotationRequest(varRestSingleAddInsightAnnotationRequest)

	return err
}

type NullableRestSingleAddInsightAnnotationRequest struct {
	value *RestSingleAddInsightAnnotationRequest
	isSet bool
}

func (v NullableRestSingleAddInsightAnnotationRequest) Get() *RestSingleAddInsightAnnotationRequest {
	return v.value
}

func (v *NullableRestSingleAddInsightAnnotationRequest) Set(val *RestSingleAddInsightAnnotationRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableRestSingleAddInsightAnnotationRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRestSingleAddInsightAnnotationRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestSingleAddInsightAnnotationRequest(val *RestSingleAddInsightAnnotationRequest) *NullableRestSingleAddInsightAnnotationRequest {
	return &NullableRestSingleAddInsightAnnotationRequest{value: val, isSet: true}
}

func (v NullableRestSingleAddInsightAnnotationRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestSingleAddInsightAnnotationRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


