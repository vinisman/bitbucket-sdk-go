/*
Bitbucket Data Center

This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).

API version: 9.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RestSshAccessKey type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestSshAccessKey{}

// RestSshAccessKey struct for RestSshAccessKey
type RestSshAccessKey struct {
	Key *AddSshKeyRequest `json:"key,omitempty"`
	Permission *string `json:"permission,omitempty"`
	Project *RestChangesetRepositoryOriginProject `json:"project,omitempty"`
	Repository *RestChangesetRepository `json:"repository,omitempty"`
}

// NewRestSshAccessKey instantiates a new RestSshAccessKey object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestSshAccessKey() *RestSshAccessKey {
	this := RestSshAccessKey{}
	return &this
}

// NewRestSshAccessKeyWithDefaults instantiates a new RestSshAccessKey object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestSshAccessKeyWithDefaults() *RestSshAccessKey {
	this := RestSshAccessKey{}
	return &this
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *RestSshAccessKey) GetKey() AddSshKeyRequest {
	if o == nil || IsNil(o.Key) {
		var ret AddSshKeyRequest
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestSshAccessKey) GetKeyOk() (*AddSshKeyRequest, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *RestSshAccessKey) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given AddSshKeyRequest and assigns it to the Key field.
func (o *RestSshAccessKey) SetKey(v AddSshKeyRequest) {
	o.Key = &v
}

// GetPermission returns the Permission field value if set, zero value otherwise.
func (o *RestSshAccessKey) GetPermission() string {
	if o == nil || IsNil(o.Permission) {
		var ret string
		return ret
	}
	return *o.Permission
}

// GetPermissionOk returns a tuple with the Permission field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestSshAccessKey) GetPermissionOk() (*string, bool) {
	if o == nil || IsNil(o.Permission) {
		return nil, false
	}
	return o.Permission, true
}

// HasPermission returns a boolean if a field has been set.
func (o *RestSshAccessKey) HasPermission() bool {
	if o != nil && !IsNil(o.Permission) {
		return true
	}

	return false
}

// SetPermission gets a reference to the given string and assigns it to the Permission field.
func (o *RestSshAccessKey) SetPermission(v string) {
	o.Permission = &v
}

// GetProject returns the Project field value if set, zero value otherwise.
func (o *RestSshAccessKey) GetProject() RestChangesetRepositoryOriginProject {
	if o == nil || IsNil(o.Project) {
		var ret RestChangesetRepositoryOriginProject
		return ret
	}
	return *o.Project
}

// GetProjectOk returns a tuple with the Project field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestSshAccessKey) GetProjectOk() (*RestChangesetRepositoryOriginProject, bool) {
	if o == nil || IsNil(o.Project) {
		return nil, false
	}
	return o.Project, true
}

// HasProject returns a boolean if a field has been set.
func (o *RestSshAccessKey) HasProject() bool {
	if o != nil && !IsNil(o.Project) {
		return true
	}

	return false
}

// SetProject gets a reference to the given RestChangesetRepositoryOriginProject and assigns it to the Project field.
func (o *RestSshAccessKey) SetProject(v RestChangesetRepositoryOriginProject) {
	o.Project = &v
}

// GetRepository returns the Repository field value if set, zero value otherwise.
func (o *RestSshAccessKey) GetRepository() RestChangesetRepository {
	if o == nil || IsNil(o.Repository) {
		var ret RestChangesetRepository
		return ret
	}
	return *o.Repository
}

// GetRepositoryOk returns a tuple with the Repository field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestSshAccessKey) GetRepositoryOk() (*RestChangesetRepository, bool) {
	if o == nil || IsNil(o.Repository) {
		return nil, false
	}
	return o.Repository, true
}

// HasRepository returns a boolean if a field has been set.
func (o *RestSshAccessKey) HasRepository() bool {
	if o != nil && !IsNil(o.Repository) {
		return true
	}

	return false
}

// SetRepository gets a reference to the given RestChangesetRepository and assigns it to the Repository field.
func (o *RestSshAccessKey) SetRepository(v RestChangesetRepository) {
	o.Repository = &v
}

func (o RestSshAccessKey) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestSshAccessKey) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !IsNil(o.Permission) {
		toSerialize["permission"] = o.Permission
	}
	if !IsNil(o.Project) {
		toSerialize["project"] = o.Project
	}
	if !IsNil(o.Repository) {
		toSerialize["repository"] = o.Repository
	}
	return toSerialize, nil
}

type NullableRestSshAccessKey struct {
	value *RestSshAccessKey
	isSet bool
}

func (v NullableRestSshAccessKey) Get() *RestSshAccessKey {
	return v.value
}

func (v *NullableRestSshAccessKey) Set(val *RestSshAccessKey) {
	v.value = val
	v.isSet = true
}

func (v NullableRestSshAccessKey) IsSet() bool {
	return v.isSet
}

func (v *NullableRestSshAccessKey) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestSshAccessKey(val *RestSshAccessKey) *NullableRestSshAccessKey {
	return &NullableRestSshAccessKey{value: val, isSet: true}
}

func (v NullableRestSshAccessKey) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestSshAccessKey) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


