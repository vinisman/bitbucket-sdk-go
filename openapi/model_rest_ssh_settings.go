/*
Bitbucket Data Center

This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).

API version: 9.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RestSshSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestSshSettings{}

// RestSshSettings struct for RestSshSettings
type RestSshSettings struct {
	AccessKeysEnabled *bool `json:"accessKeysEnabled,omitempty"`
	BaseUrl *string `json:"baseUrl,omitempty"`
	Enabled *bool `json:"enabled,omitempty"`
	Fingerprint *SimpleSshKeyFingerprint `json:"fingerprint,omitempty"`
	Port *int32 `json:"port,omitempty"`
}

// NewRestSshSettings instantiates a new RestSshSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestSshSettings() *RestSshSettings {
	this := RestSshSettings{}
	return &this
}

// NewRestSshSettingsWithDefaults instantiates a new RestSshSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestSshSettingsWithDefaults() *RestSshSettings {
	this := RestSshSettings{}
	return &this
}

// GetAccessKeysEnabled returns the AccessKeysEnabled field value if set, zero value otherwise.
func (o *RestSshSettings) GetAccessKeysEnabled() bool {
	if o == nil || IsNil(o.AccessKeysEnabled) {
		var ret bool
		return ret
	}
	return *o.AccessKeysEnabled
}

// GetAccessKeysEnabledOk returns a tuple with the AccessKeysEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestSshSettings) GetAccessKeysEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.AccessKeysEnabled) {
		return nil, false
	}
	return o.AccessKeysEnabled, true
}

// HasAccessKeysEnabled returns a boolean if a field has been set.
func (o *RestSshSettings) HasAccessKeysEnabled() bool {
	if o != nil && !IsNil(o.AccessKeysEnabled) {
		return true
	}

	return false
}

// SetAccessKeysEnabled gets a reference to the given bool and assigns it to the AccessKeysEnabled field.
func (o *RestSshSettings) SetAccessKeysEnabled(v bool) {
	o.AccessKeysEnabled = &v
}

// GetBaseUrl returns the BaseUrl field value if set, zero value otherwise.
func (o *RestSshSettings) GetBaseUrl() string {
	if o == nil || IsNil(o.BaseUrl) {
		var ret string
		return ret
	}
	return *o.BaseUrl
}

// GetBaseUrlOk returns a tuple with the BaseUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestSshSettings) GetBaseUrlOk() (*string, bool) {
	if o == nil || IsNil(o.BaseUrl) {
		return nil, false
	}
	return o.BaseUrl, true
}

// HasBaseUrl returns a boolean if a field has been set.
func (o *RestSshSettings) HasBaseUrl() bool {
	if o != nil && !IsNil(o.BaseUrl) {
		return true
	}

	return false
}

// SetBaseUrl gets a reference to the given string and assigns it to the BaseUrl field.
func (o *RestSshSettings) SetBaseUrl(v string) {
	o.BaseUrl = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *RestSshSettings) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestSshSettings) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *RestSshSettings) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *RestSshSettings) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetFingerprint returns the Fingerprint field value if set, zero value otherwise.
func (o *RestSshSettings) GetFingerprint() SimpleSshKeyFingerprint {
	if o == nil || IsNil(o.Fingerprint) {
		var ret SimpleSshKeyFingerprint
		return ret
	}
	return *o.Fingerprint
}

// GetFingerprintOk returns a tuple with the Fingerprint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestSshSettings) GetFingerprintOk() (*SimpleSshKeyFingerprint, bool) {
	if o == nil || IsNil(o.Fingerprint) {
		return nil, false
	}
	return o.Fingerprint, true
}

// HasFingerprint returns a boolean if a field has been set.
func (o *RestSshSettings) HasFingerprint() bool {
	if o != nil && !IsNil(o.Fingerprint) {
		return true
	}

	return false
}

// SetFingerprint gets a reference to the given SimpleSshKeyFingerprint and assigns it to the Fingerprint field.
func (o *RestSshSettings) SetFingerprint(v SimpleSshKeyFingerprint) {
	o.Fingerprint = &v
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *RestSshSettings) GetPort() int32 {
	if o == nil || IsNil(o.Port) {
		var ret int32
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestSshSettings) GetPortOk() (*int32, bool) {
	if o == nil || IsNil(o.Port) {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *RestSshSettings) HasPort() bool {
	if o != nil && !IsNil(o.Port) {
		return true
	}

	return false
}

// SetPort gets a reference to the given int32 and assigns it to the Port field.
func (o *RestSshSettings) SetPort(v int32) {
	o.Port = &v
}

func (o RestSshSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestSshSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccessKeysEnabled) {
		toSerialize["accessKeysEnabled"] = o.AccessKeysEnabled
	}
	if !IsNil(o.BaseUrl) {
		toSerialize["baseUrl"] = o.BaseUrl
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Fingerprint) {
		toSerialize["fingerprint"] = o.Fingerprint
	}
	if !IsNil(o.Port) {
		toSerialize["port"] = o.Port
	}
	return toSerialize, nil
}

type NullableRestSshSettings struct {
	value *RestSshSettings
	isSet bool
}

func (v NullableRestSshSettings) Get() *RestSshSettings {
	return v.value
}

func (v *NullableRestSshSettings) Set(val *RestSshSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableRestSshSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableRestSshSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestSshSettings(val *RestSshSettings) *NullableRestSshSettings {
	return &NullableRestSshSettings{value: val, isSet: true}
}

func (v NullableRestSshSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestSshSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


