/*
Bitbucket Data Center

This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).

API version: 9.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RestUpstreamSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestUpstreamSettings{}

// RestUpstreamSettings struct for RestUpstreamSettings
type RestUpstreamSettings struct {
	Mode *string `json:"mode,omitempty"`
	ProjectIds []string `json:"projectIds,omitempty"`
}

// NewRestUpstreamSettings instantiates a new RestUpstreamSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestUpstreamSettings() *RestUpstreamSettings {
	this := RestUpstreamSettings{}
	return &this
}

// NewRestUpstreamSettingsWithDefaults instantiates a new RestUpstreamSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestUpstreamSettingsWithDefaults() *RestUpstreamSettings {
	this := RestUpstreamSettings{}
	return &this
}

// GetMode returns the Mode field value if set, zero value otherwise.
func (o *RestUpstreamSettings) GetMode() string {
	if o == nil || IsNil(o.Mode) {
		var ret string
		return ret
	}
	return *o.Mode
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestUpstreamSettings) GetModeOk() (*string, bool) {
	if o == nil || IsNil(o.Mode) {
		return nil, false
	}
	return o.Mode, true
}

// HasMode returns a boolean if a field has been set.
func (o *RestUpstreamSettings) HasMode() bool {
	if o != nil && !IsNil(o.Mode) {
		return true
	}

	return false
}

// SetMode gets a reference to the given string and assigns it to the Mode field.
func (o *RestUpstreamSettings) SetMode(v string) {
	o.Mode = &v
}

// GetProjectIds returns the ProjectIds field value if set, zero value otherwise.
func (o *RestUpstreamSettings) GetProjectIds() []string {
	if o == nil || IsNil(o.ProjectIds) {
		var ret []string
		return ret
	}
	return o.ProjectIds
}

// GetProjectIdsOk returns a tuple with the ProjectIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestUpstreamSettings) GetProjectIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.ProjectIds) {
		return nil, false
	}
	return o.ProjectIds, true
}

// HasProjectIds returns a boolean if a field has been set.
func (o *RestUpstreamSettings) HasProjectIds() bool {
	if o != nil && !IsNil(o.ProjectIds) {
		return true
	}

	return false
}

// SetProjectIds gets a reference to the given []string and assigns it to the ProjectIds field.
func (o *RestUpstreamSettings) SetProjectIds(v []string) {
	o.ProjectIds = v
}

func (o RestUpstreamSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestUpstreamSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Mode) {
		toSerialize["mode"] = o.Mode
	}
	if !IsNil(o.ProjectIds) {
		toSerialize["projectIds"] = o.ProjectIds
	}
	return toSerialize, nil
}

type NullableRestUpstreamSettings struct {
	value *RestUpstreamSettings
	isSet bool
}

func (v NullableRestUpstreamSettings) Get() *RestUpstreamSettings {
	return v.value
}

func (v *NullableRestUpstreamSettings) Set(val *RestUpstreamSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableRestUpstreamSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableRestUpstreamSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestUpstreamSettings(val *RestUpstreamSettings) *NullableRestUpstreamSettings {
	return &NullableRestUpstreamSettings{value: val, isSet: true}
}

func (v NullableRestUpstreamSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestUpstreamSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


