/*
Bitbucket Data Center

This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).

API version: 9.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RestUserReactionEmoticon type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestUserReactionEmoticon{}

// RestUserReactionEmoticon struct for RestUserReactionEmoticon
type RestUserReactionEmoticon struct {
	Shortcut *string `json:"shortcut,omitempty"`
	Url *string `json:"url,omitempty"`
	Value *string `json:"value,omitempty"`
}

// NewRestUserReactionEmoticon instantiates a new RestUserReactionEmoticon object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestUserReactionEmoticon() *RestUserReactionEmoticon {
	this := RestUserReactionEmoticon{}
	return &this
}

// NewRestUserReactionEmoticonWithDefaults instantiates a new RestUserReactionEmoticon object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestUserReactionEmoticonWithDefaults() *RestUserReactionEmoticon {
	this := RestUserReactionEmoticon{}
	return &this
}

// GetShortcut returns the Shortcut field value if set, zero value otherwise.
func (o *RestUserReactionEmoticon) GetShortcut() string {
	if o == nil || IsNil(o.Shortcut) {
		var ret string
		return ret
	}
	return *o.Shortcut
}

// GetShortcutOk returns a tuple with the Shortcut field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestUserReactionEmoticon) GetShortcutOk() (*string, bool) {
	if o == nil || IsNil(o.Shortcut) {
		return nil, false
	}
	return o.Shortcut, true
}

// HasShortcut returns a boolean if a field has been set.
func (o *RestUserReactionEmoticon) HasShortcut() bool {
	if o != nil && !IsNil(o.Shortcut) {
		return true
	}

	return false
}

// SetShortcut gets a reference to the given string and assigns it to the Shortcut field.
func (o *RestUserReactionEmoticon) SetShortcut(v string) {
	o.Shortcut = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *RestUserReactionEmoticon) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestUserReactionEmoticon) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *RestUserReactionEmoticon) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *RestUserReactionEmoticon) SetUrl(v string) {
	o.Url = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *RestUserReactionEmoticon) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestUserReactionEmoticon) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *RestUserReactionEmoticon) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *RestUserReactionEmoticon) SetValue(v string) {
	o.Value = &v
}

func (o RestUserReactionEmoticon) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestUserReactionEmoticon) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Shortcut) {
		toSerialize["shortcut"] = o.Shortcut
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableRestUserReactionEmoticon struct {
	value *RestUserReactionEmoticon
	isSet bool
}

func (v NullableRestUserReactionEmoticon) Get() *RestUserReactionEmoticon {
	return v.value
}

func (v *NullableRestUserReactionEmoticon) Set(val *RestUserReactionEmoticon) {
	v.value = val
	v.isSet = true
}

func (v NullableRestUserReactionEmoticon) IsSet() bool {
	return v.isSet
}

func (v *NullableRestUserReactionEmoticon) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestUserReactionEmoticon(val *RestUserReactionEmoticon) *NullableRestUserReactionEmoticon {
	return &NullableRestUserReactionEmoticon{value: val, isSet: true}
}

func (v NullableRestUserReactionEmoticon) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestUserReactionEmoticon) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


