/*
Bitbucket Data Center

This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).

API version: 9.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RestWebhook type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestWebhook{}

// RestWebhook struct for RestWebhook
type RestWebhook struct {
	Id *int32 `json:"id,omitempty"`
	Active *bool `json:"active,omitempty"`
	Configuration map[string]interface{} `json:"configuration,omitempty"`
	Credentials *RestWebhookCredentials `json:"credentials,omitempty"`
	Events []string `json:"events,omitempty"`
	Name *string `json:"name,omitempty"`
	ScopeType *string `json:"scopeType,omitempty"`
	SslVerificationRequired *bool `json:"sslVerificationRequired,omitempty"`
	Statistics map[string]interface{} `json:"statistics,omitempty"`
	Url *string `json:"url,omitempty"`
}

// NewRestWebhook instantiates a new RestWebhook object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestWebhook() *RestWebhook {
	this := RestWebhook{}
	return &this
}

// NewRestWebhookWithDefaults instantiates a new RestWebhook object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestWebhookWithDefaults() *RestWebhook {
	this := RestWebhook{}
	return &this
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *RestWebhook) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestWebhook) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *RestWebhook) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *RestWebhook) SetActive(v bool) {
	o.Active = &v
}

// GetConfiguration returns the Configuration field value if set, zero value otherwise.
func (o *RestWebhook) GetConfiguration() map[string]interface{} {
	if o == nil || IsNil(o.Configuration) {
		var ret map[string]interface{}
		return ret
	}
	return o.Configuration
}

// GetConfigurationOk returns a tuple with the Configuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestWebhook) GetConfigurationOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Configuration) {
		return map[string]interface{}{}, false
	}
	return o.Configuration, true
}

// HasConfiguration returns a boolean if a field has been set.
func (o *RestWebhook) HasConfiguration() bool {
	if o != nil && !IsNil(o.Configuration) {
		return true
	}

	return false
}

// SetConfiguration gets a reference to the given map[string]interface{} and assigns it to the Configuration field.
func (o *RestWebhook) SetConfiguration(v map[string]interface{}) {
	o.Configuration = v
}

// GetCredentials returns the Credentials field value if set, zero value otherwise.
func (o *RestWebhook) GetCredentials() RestWebhookCredentials {
	if o == nil || IsNil(o.Credentials) {
		var ret RestWebhookCredentials
		return ret
	}
	return *o.Credentials
}

// GetCredentialsOk returns a tuple with the Credentials field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestWebhook) GetCredentialsOk() (*RestWebhookCredentials, bool) {
	if o == nil || IsNil(o.Credentials) {
		return nil, false
	}
	return o.Credentials, true
}

// HasCredentials returns a boolean if a field has been set.
func (o *RestWebhook) HasCredentials() bool {
	if o != nil && !IsNil(o.Credentials) {
		return true
	}

	return false
}

// SetCredentials gets a reference to the given RestWebhookCredentials and assigns it to the Credentials field.
func (o *RestWebhook) SetCredentials(v RestWebhookCredentials) {
	o.Credentials = &v
}

// GetEvents returns the Events field value if set, zero value otherwise.
func (o *RestWebhook) GetEvents() []string {
	if o == nil || IsNil(o.Events) {
		var ret []string
		return ret
	}
	return o.Events
}

// GetEventsOk returns a tuple with the Events field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestWebhook) GetEventsOk() ([]string, bool) {
	if o == nil || IsNil(o.Events) {
		return nil, false
	}
	return o.Events, true
}

// HasEvents returns a boolean if a field has been set.
func (o *RestWebhook) HasEvents() bool {
	if o != nil && !IsNil(o.Events) {
		return true
	}

	return false
}

// SetEvents gets a reference to the given []string and assigns it to the Events field.
func (o *RestWebhook) SetEvents(v []string) {
	o.Events = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RestWebhook) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestWebhook) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RestWebhook) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RestWebhook) SetName(v string) {
	o.Name = &v
}

// GetScopeType returns the ScopeType field value if set, zero value otherwise.
func (o *RestWebhook) GetScopeType() string {
	if o == nil || IsNil(o.ScopeType) {
		var ret string
		return ret
	}
	return *o.ScopeType
}

// GetScopeTypeOk returns a tuple with the ScopeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestWebhook) GetScopeTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ScopeType) {
		return nil, false
	}
	return o.ScopeType, true
}

// HasScopeType returns a boolean if a field has been set.
func (o *RestWebhook) HasScopeType() bool {
	if o != nil && !IsNil(o.ScopeType) {
		return true
	}

	return false
}

// SetScopeType gets a reference to the given string and assigns it to the ScopeType field.
func (o *RestWebhook) SetScopeType(v string) {
	o.ScopeType = &v
}

// GetSslVerificationRequired returns the SslVerificationRequired field value if set, zero value otherwise.
func (o *RestWebhook) GetSslVerificationRequired() bool {
	if o == nil || IsNil(o.SslVerificationRequired) {
		var ret bool
		return ret
	}
	return *o.SslVerificationRequired
}

// GetSslVerificationRequiredOk returns a tuple with the SslVerificationRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestWebhook) GetSslVerificationRequiredOk() (*bool, bool) {
	if o == nil || IsNil(o.SslVerificationRequired) {
		return nil, false
	}
	return o.SslVerificationRequired, true
}

// HasSslVerificationRequired returns a boolean if a field has been set.
func (o *RestWebhook) HasSslVerificationRequired() bool {
	if o != nil && !IsNil(o.SslVerificationRequired) {
		return true
	}

	return false
}

// SetSslVerificationRequired gets a reference to the given bool and assigns it to the SslVerificationRequired field.
func (o *RestWebhook) SetSslVerificationRequired(v bool) {
	o.SslVerificationRequired = &v
}

// GetStatistics returns the Statistics field value if set, zero value otherwise.
func (o *RestWebhook) GetStatistics() map[string]interface{} {
	if o == nil || IsNil(o.Statistics) {
		var ret map[string]interface{}
		return ret
	}
	return o.Statistics
}

// GetStatisticsOk returns a tuple with the Statistics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestWebhook) GetStatisticsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Statistics) {
		return map[string]interface{}{}, false
	}
	return o.Statistics, true
}

// HasStatistics returns a boolean if a field has been set.
func (o *RestWebhook) HasStatistics() bool {
	if o != nil && !IsNil(o.Statistics) {
		return true
	}

	return false
}

// SetStatistics gets a reference to the given map[string]interface{} and assigns it to the Statistics field.
func (o *RestWebhook) SetStatistics(v map[string]interface{}) {
	o.Statistics = v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *RestWebhook) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestWebhook) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *RestWebhook) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *RestWebhook) SetUrl(v string) {
	o.Url = &v
}

func (o RestWebhook) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestWebhook) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.Configuration) {
		toSerialize["configuration"] = o.Configuration
	}
	if !IsNil(o.Credentials) {
		toSerialize["credentials"] = o.Credentials
	}
	if !IsNil(o.Events) {
		toSerialize["events"] = o.Events
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.ScopeType) {
		toSerialize["scopeType"] = o.ScopeType
	}
	if !IsNil(o.SslVerificationRequired) {
		toSerialize["sslVerificationRequired"] = o.SslVerificationRequired
	}
	if !IsNil(o.Statistics) {
		toSerialize["statistics"] = o.Statistics
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	return toSerialize, nil
}

type NullableRestWebhook struct {
	value *RestWebhook
	isSet bool
}

func (v NullableRestWebhook) Get() *RestWebhook {
	return v.value
}

func (v *NullableRestWebhook) Set(val *RestWebhook) {
	v.value = val
	v.isSet = true
}

func (v NullableRestWebhook) IsSet() bool {
	return v.isSet
}

func (v *NullableRestWebhook) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestWebhook(val *RestWebhook) *NullableRestWebhook {
	return &NullableRestWebhook{value: val, isSet: true}
}

func (v NullableRestWebhook) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestWebhook) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


