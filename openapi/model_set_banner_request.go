/*
Bitbucket Data Center

This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).

API version: 9.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SetBannerRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SetBannerRequest{}

// SetBannerRequest struct for SetBannerRequest
type SetBannerRequest struct {
	Audience string `json:"audience"`
	Enabled *bool `json:"enabled,omitempty"`
	Message *string `json:"message,omitempty"`
}

type _SetBannerRequest SetBannerRequest

// NewSetBannerRequest instantiates a new SetBannerRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSetBannerRequest(audience string) *SetBannerRequest {
	this := SetBannerRequest{}
	this.Audience = audience
	return &this
}

// NewSetBannerRequestWithDefaults instantiates a new SetBannerRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSetBannerRequestWithDefaults() *SetBannerRequest {
	this := SetBannerRequest{}
	return &this
}

// GetAudience returns the Audience field value
func (o *SetBannerRequest) GetAudience() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Audience
}

// GetAudienceOk returns a tuple with the Audience field value
// and a boolean to check if the value has been set.
func (o *SetBannerRequest) GetAudienceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Audience, true
}

// SetAudience sets field value
func (o *SetBannerRequest) SetAudience(v string) {
	o.Audience = v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *SetBannerRequest) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SetBannerRequest) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *SetBannerRequest) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *SetBannerRequest) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *SetBannerRequest) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SetBannerRequest) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *SetBannerRequest) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *SetBannerRequest) SetMessage(v string) {
	o.Message = &v
}

func (o SetBannerRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SetBannerRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["audience"] = o.Audience
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	return toSerialize, nil
}

func (o *SetBannerRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"audience",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSetBannerRequest := _SetBannerRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSetBannerRequest)

	if err != nil {
		return err
	}

	*o = SetBannerRequest(varSetBannerRequest)

	return err
}

type NullableSetBannerRequest struct {
	value *SetBannerRequest
	isSet bool
}

func (v NullableSetBannerRequest) Get() *SetBannerRequest {
	return v.value
}

func (v *NullableSetBannerRequest) Set(val *SetBannerRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSetBannerRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSetBannerRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSetBannerRequest(val *SetBannerRequest) *NullableSetBannerRequest {
	return &NullableSetBannerRequest{value: val, isSet: true}
}

func (v NullableSetBannerRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSetBannerRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


