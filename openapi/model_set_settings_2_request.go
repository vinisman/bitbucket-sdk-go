/*
Bitbucket Data Center

This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).

API version: 9.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SetSettings2Request type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SetSettings2Request{}

// SetSettings2Request struct for SetSettings2Request
type SetSettings2Request struct {
	DebugLoggingEnabled bool `json:"debugLoggingEnabled"`
	ProfilingEnabled bool `json:"profilingEnabled"`
}

type _SetSettings2Request SetSettings2Request

// NewSetSettings2Request instantiates a new SetSettings2Request object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSetSettings2Request(debugLoggingEnabled bool, profilingEnabled bool) *SetSettings2Request {
	this := SetSettings2Request{}
	this.DebugLoggingEnabled = debugLoggingEnabled
	this.ProfilingEnabled = profilingEnabled
	return &this
}

// NewSetSettings2RequestWithDefaults instantiates a new SetSettings2Request object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSetSettings2RequestWithDefaults() *SetSettings2Request {
	this := SetSettings2Request{}
	return &this
}

// GetDebugLoggingEnabled returns the DebugLoggingEnabled field value
func (o *SetSettings2Request) GetDebugLoggingEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.DebugLoggingEnabled
}

// GetDebugLoggingEnabledOk returns a tuple with the DebugLoggingEnabled field value
// and a boolean to check if the value has been set.
func (o *SetSettings2Request) GetDebugLoggingEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DebugLoggingEnabled, true
}

// SetDebugLoggingEnabled sets field value
func (o *SetSettings2Request) SetDebugLoggingEnabled(v bool) {
	o.DebugLoggingEnabled = v
}

// GetProfilingEnabled returns the ProfilingEnabled field value
func (o *SetSettings2Request) GetProfilingEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ProfilingEnabled
}

// GetProfilingEnabledOk returns a tuple with the ProfilingEnabled field value
// and a boolean to check if the value has been set.
func (o *SetSettings2Request) GetProfilingEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProfilingEnabled, true
}

// SetProfilingEnabled sets field value
func (o *SetSettings2Request) SetProfilingEnabled(v bool) {
	o.ProfilingEnabled = v
}

func (o SetSettings2Request) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SetSettings2Request) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["debugLoggingEnabled"] = o.DebugLoggingEnabled
	toSerialize["profilingEnabled"] = o.ProfilingEnabled
	return toSerialize, nil
}

func (o *SetSettings2Request) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"debugLoggingEnabled",
		"profilingEnabled",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSetSettings2Request := _SetSettings2Request{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSetSettings2Request)

	if err != nil {
		return err
	}

	*o = SetSettings2Request(varSetSettings2Request)

	return err
}

type NullableSetSettings2Request struct {
	value *SetSettings2Request
	isSet bool
}

func (v NullableSetSettings2Request) Get() *SetSettings2Request {
	return v.value
}

func (v *NullableSetSettings2Request) Set(val *SetSettings2Request) {
	v.value = val
	v.isSet = true
}

func (v NullableSetSettings2Request) IsSet() bool {
	return v.isSet
}

func (v *NullableSetSettings2Request) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSetSettings2Request(val *SetSettings2Request) *NullableSetSettings2Request {
	return &NullableSetSettings2Request{value: val, isSet: true}
}

func (v NullableSetSettings2Request) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSetSettings2Request) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


