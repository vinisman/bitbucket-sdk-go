/*
Bitbucket Data Center

This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).

API version: 9.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the StatusDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StatusDTO{}

// StatusDTO struct for StatusDTO
type StatusDTO struct {
	IsTwoSVActive *bool `json:"isTwoSVActive,omitempty"`
	Methods []MethodStateDTO `json:"methods,omitempty"`
	TwoSVActive *bool `json:"twoSVActive,omitempty"`
}

// NewStatusDTO instantiates a new StatusDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStatusDTO() *StatusDTO {
	this := StatusDTO{}
	return &this
}

// NewStatusDTOWithDefaults instantiates a new StatusDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStatusDTOWithDefaults() *StatusDTO {
	this := StatusDTO{}
	return &this
}

// GetIsTwoSVActive returns the IsTwoSVActive field value if set, zero value otherwise.
func (o *StatusDTO) GetIsTwoSVActive() bool {
	if o == nil || IsNil(o.IsTwoSVActive) {
		var ret bool
		return ret
	}
	return *o.IsTwoSVActive
}

// GetIsTwoSVActiveOk returns a tuple with the IsTwoSVActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatusDTO) GetIsTwoSVActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.IsTwoSVActive) {
		return nil, false
	}
	return o.IsTwoSVActive, true
}

// HasIsTwoSVActive returns a boolean if a field has been set.
func (o *StatusDTO) HasIsTwoSVActive() bool {
	if o != nil && !IsNil(o.IsTwoSVActive) {
		return true
	}

	return false
}

// SetIsTwoSVActive gets a reference to the given bool and assigns it to the IsTwoSVActive field.
func (o *StatusDTO) SetIsTwoSVActive(v bool) {
	o.IsTwoSVActive = &v
}

// GetMethods returns the Methods field value if set, zero value otherwise.
func (o *StatusDTO) GetMethods() []MethodStateDTO {
	if o == nil || IsNil(o.Methods) {
		var ret []MethodStateDTO
		return ret
	}
	return o.Methods
}

// GetMethodsOk returns a tuple with the Methods field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatusDTO) GetMethodsOk() ([]MethodStateDTO, bool) {
	if o == nil || IsNil(o.Methods) {
		return nil, false
	}
	return o.Methods, true
}

// HasMethods returns a boolean if a field has been set.
func (o *StatusDTO) HasMethods() bool {
	if o != nil && !IsNil(o.Methods) {
		return true
	}

	return false
}

// SetMethods gets a reference to the given []MethodStateDTO and assigns it to the Methods field.
func (o *StatusDTO) SetMethods(v []MethodStateDTO) {
	o.Methods = v
}

// GetTwoSVActive returns the TwoSVActive field value if set, zero value otherwise.
func (o *StatusDTO) GetTwoSVActive() bool {
	if o == nil || IsNil(o.TwoSVActive) {
		var ret bool
		return ret
	}
	return *o.TwoSVActive
}

// GetTwoSVActiveOk returns a tuple with the TwoSVActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatusDTO) GetTwoSVActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.TwoSVActive) {
		return nil, false
	}
	return o.TwoSVActive, true
}

// HasTwoSVActive returns a boolean if a field has been set.
func (o *StatusDTO) HasTwoSVActive() bool {
	if o != nil && !IsNil(o.TwoSVActive) {
		return true
	}

	return false
}

// SetTwoSVActive gets a reference to the given bool and assigns it to the TwoSVActive field.
func (o *StatusDTO) SetTwoSVActive(v bool) {
	o.TwoSVActive = &v
}

func (o StatusDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StatusDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IsTwoSVActive) {
		toSerialize["isTwoSVActive"] = o.IsTwoSVActive
	}
	if !IsNil(o.Methods) {
		toSerialize["methods"] = o.Methods
	}
	if !IsNil(o.TwoSVActive) {
		toSerialize["twoSVActive"] = o.TwoSVActive
	}
	return toSerialize, nil
}

type NullableStatusDTO struct {
	value *StatusDTO
	isSet bool
}

func (v NullableStatusDTO) Get() *StatusDTO {
	return v.value
}

func (v *NullableStatusDTO) Set(val *StatusDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableStatusDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableStatusDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatusDTO(val *StatusDTO) *NullableStatusDTO {
	return &NullableStatusDTO{value: val, isSet: true}
}

func (v NullableStatusDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatusDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


