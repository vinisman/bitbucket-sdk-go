/*
Bitbucket Data Center

This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).

API version: 9.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the TotpUserEnrollmentDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TotpUserEnrollmentDTO{}

// TotpUserEnrollmentDTO struct for TotpUserEnrollmentDTO
type TotpUserEnrollmentDTO struct {
	ConversationId *string `json:"conversationId,omitempty"`
	Secret *string `json:"secret,omitempty"`
	Url *string `json:"url,omitempty"`
	UserName *string `json:"userName,omitempty"`
}

// NewTotpUserEnrollmentDTO instantiates a new TotpUserEnrollmentDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTotpUserEnrollmentDTO() *TotpUserEnrollmentDTO {
	this := TotpUserEnrollmentDTO{}
	return &this
}

// NewTotpUserEnrollmentDTOWithDefaults instantiates a new TotpUserEnrollmentDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTotpUserEnrollmentDTOWithDefaults() *TotpUserEnrollmentDTO {
	this := TotpUserEnrollmentDTO{}
	return &this
}

// GetConversationId returns the ConversationId field value if set, zero value otherwise.
func (o *TotpUserEnrollmentDTO) GetConversationId() string {
	if o == nil || IsNil(o.ConversationId) {
		var ret string
		return ret
	}
	return *o.ConversationId
}

// GetConversationIdOk returns a tuple with the ConversationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TotpUserEnrollmentDTO) GetConversationIdOk() (*string, bool) {
	if o == nil || IsNil(o.ConversationId) {
		return nil, false
	}
	return o.ConversationId, true
}

// HasConversationId returns a boolean if a field has been set.
func (o *TotpUserEnrollmentDTO) HasConversationId() bool {
	if o != nil && !IsNil(o.ConversationId) {
		return true
	}

	return false
}

// SetConversationId gets a reference to the given string and assigns it to the ConversationId field.
func (o *TotpUserEnrollmentDTO) SetConversationId(v string) {
	o.ConversationId = &v
}

// GetSecret returns the Secret field value if set, zero value otherwise.
func (o *TotpUserEnrollmentDTO) GetSecret() string {
	if o == nil || IsNil(o.Secret) {
		var ret string
		return ret
	}
	return *o.Secret
}

// GetSecretOk returns a tuple with the Secret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TotpUserEnrollmentDTO) GetSecretOk() (*string, bool) {
	if o == nil || IsNil(o.Secret) {
		return nil, false
	}
	return o.Secret, true
}

// HasSecret returns a boolean if a field has been set.
func (o *TotpUserEnrollmentDTO) HasSecret() bool {
	if o != nil && !IsNil(o.Secret) {
		return true
	}

	return false
}

// SetSecret gets a reference to the given string and assigns it to the Secret field.
func (o *TotpUserEnrollmentDTO) SetSecret(v string) {
	o.Secret = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *TotpUserEnrollmentDTO) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TotpUserEnrollmentDTO) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *TotpUserEnrollmentDTO) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *TotpUserEnrollmentDTO) SetUrl(v string) {
	o.Url = &v
}

// GetUserName returns the UserName field value if set, zero value otherwise.
func (o *TotpUserEnrollmentDTO) GetUserName() string {
	if o == nil || IsNil(o.UserName) {
		var ret string
		return ret
	}
	return *o.UserName
}

// GetUserNameOk returns a tuple with the UserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TotpUserEnrollmentDTO) GetUserNameOk() (*string, bool) {
	if o == nil || IsNil(o.UserName) {
		return nil, false
	}
	return o.UserName, true
}

// HasUserName returns a boolean if a field has been set.
func (o *TotpUserEnrollmentDTO) HasUserName() bool {
	if o != nil && !IsNil(o.UserName) {
		return true
	}

	return false
}

// SetUserName gets a reference to the given string and assigns it to the UserName field.
func (o *TotpUserEnrollmentDTO) SetUserName(v string) {
	o.UserName = &v
}

func (o TotpUserEnrollmentDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TotpUserEnrollmentDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ConversationId) {
		toSerialize["conversationId"] = o.ConversationId
	}
	if !IsNil(o.Secret) {
		toSerialize["secret"] = o.Secret
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.UserName) {
		toSerialize["userName"] = o.UserName
	}
	return toSerialize, nil
}

type NullableTotpUserEnrollmentDTO struct {
	value *TotpUserEnrollmentDTO
	isSet bool
}

func (v NullableTotpUserEnrollmentDTO) Get() *TotpUserEnrollmentDTO {
	return v.value
}

func (v *NullableTotpUserEnrollmentDTO) Set(val *TotpUserEnrollmentDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableTotpUserEnrollmentDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableTotpUserEnrollmentDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTotpUserEnrollmentDTO(val *TotpUserEnrollmentDTO) *NullableTotpUserEnrollmentDTO {
	return &NullableTotpUserEnrollmentDTO{value: val, isSet: true}
}

func (v NullableTotpUserEnrollmentDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTotpUserEnrollmentDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


