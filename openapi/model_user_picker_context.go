/*
Bitbucket Data Center

This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).

API version: 9.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UserPickerContext type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserPickerContext{}

// UserPickerContext struct for UserPickerContext
type UserPickerContext struct {
	Context *string `json:"context,omitempty"`
	ItemName *string `json:"itemName,omitempty"`
}

// NewUserPickerContext instantiates a new UserPickerContext object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserPickerContext() *UserPickerContext {
	this := UserPickerContext{}
	return &this
}

// NewUserPickerContextWithDefaults instantiates a new UserPickerContext object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserPickerContextWithDefaults() *UserPickerContext {
	this := UserPickerContext{}
	return &this
}

// GetContext returns the Context field value if set, zero value otherwise.
func (o *UserPickerContext) GetContext() string {
	if o == nil || IsNil(o.Context) {
		var ret string
		return ret
	}
	return *o.Context
}

// GetContextOk returns a tuple with the Context field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPickerContext) GetContextOk() (*string, bool) {
	if o == nil || IsNil(o.Context) {
		return nil, false
	}
	return o.Context, true
}

// HasContext returns a boolean if a field has been set.
func (o *UserPickerContext) HasContext() bool {
	if o != nil && !IsNil(o.Context) {
		return true
	}

	return false
}

// SetContext gets a reference to the given string and assigns it to the Context field.
func (o *UserPickerContext) SetContext(v string) {
	o.Context = &v
}

// GetItemName returns the ItemName field value if set, zero value otherwise.
func (o *UserPickerContext) GetItemName() string {
	if o == nil || IsNil(o.ItemName) {
		var ret string
		return ret
	}
	return *o.ItemName
}

// GetItemNameOk returns a tuple with the ItemName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPickerContext) GetItemNameOk() (*string, bool) {
	if o == nil || IsNil(o.ItemName) {
		return nil, false
	}
	return o.ItemName, true
}

// HasItemName returns a boolean if a field has been set.
func (o *UserPickerContext) HasItemName() bool {
	if o != nil && !IsNil(o.ItemName) {
		return true
	}

	return false
}

// SetItemName gets a reference to the given string and assigns it to the ItemName field.
func (o *UserPickerContext) SetItemName(v string) {
	o.ItemName = &v
}

func (o UserPickerContext) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserPickerContext) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Context) {
		toSerialize["context"] = o.Context
	}
	if !IsNil(o.ItemName) {
		toSerialize["itemName"] = o.ItemName
	}
	return toSerialize, nil
}

type NullableUserPickerContext struct {
	value *UserPickerContext
	isSet bool
}

func (v NullableUserPickerContext) Get() *UserPickerContext {
	return v.value
}

func (v *NullableUserPickerContext) Set(val *UserPickerContext) {
	v.value = val
	v.isSet = true
}

func (v NullableUserPickerContext) IsSet() bool {
	return v.isSet
}

func (v *NullableUserPickerContext) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserPickerContext(val *UserPickerContext) *NullableUserPickerContext {
	return &NullableUserPickerContext{value: val, isSet: true}
}

func (v NullableUserPickerContext) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserPickerContext) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


