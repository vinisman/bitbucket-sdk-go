/*
Bitbucket Data Center

Testing AuthenticationAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package test

import (
	"context"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	openapiclient "github.com/vinisman/bitbucket-sdk-go/openapi"
)

func Test_openapi_AuthenticationAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test AuthenticationAPIService AGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.AuthenticationAPI.AGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticationAPIService AddForProject", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string

		resp, httpRes, err := apiClient.AuthenticationAPI.AddForProject(context.Background(), projectKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticationAPIService AddForRepository", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var repositorySlug string

		resp, httpRes, err := apiClient.AuthenticationAPI.AddForRepository(context.Background(), projectKey, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticationAPIService AddIdp", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.AuthenticationAPI.AddIdp(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticationAPIService AddSshKey", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.AuthenticationAPI.AddSshKey(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticationAPIService Authenticate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.AuthenticationAPI.Authenticate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticationAPIService AuthenticateWithRecoveryCode", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.AuthenticationAPI.AuthenticateWithRecoveryCode(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticationAPIService CompleteAuthenticationChange", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.AuthenticationAPI.CompleteAuthenticationChange(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticationAPIService CompleteEnforcedEnrollment", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.AuthenticationAPI.CompleteEnforcedEnrollment(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticationAPIService CompleteVoluntaryEnrollment", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.AuthenticationAPI.CompleteVoluntaryEnrollment(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticationAPIService CreateAccessToken", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string

		resp, httpRes, err := apiClient.AuthenticationAPI.CreateAccessToken(context.Background(), projectKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticationAPIService CreateAccessToken1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var repositorySlug string

		resp, httpRes, err := apiClient.AuthenticationAPI.CreateAccessToken1(context.Background(), projectKey, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticationAPIService CreateAccessToken2", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var userSlug string

		resp, httpRes, err := apiClient.AuthenticationAPI.CreateAccessToken2(context.Background(), userSlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticationAPIService DeleteById", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var tokenId string

		httpRes, err := apiClient.AuthenticationAPI.DeleteById(context.Background(), projectKey, tokenId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticationAPIService DeleteById1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var tokenId string
		var repositorySlug string

		httpRes, err := apiClient.AuthenticationAPI.DeleteById1(context.Background(), projectKey, tokenId, repositorySlug).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticationAPIService DeleteById2", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tokenId string
		var userSlug string

		httpRes, err := apiClient.AuthenticationAPI.DeleteById2(context.Background(), tokenId, userSlug).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticationAPIService DeleteSshKey", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var keyId string

		httpRes, err := apiClient.AuthenticationAPI.DeleteSshKey(context.Background(), keyId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticationAPIService DeleteSshKeys", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.AuthenticationAPI.DeleteSshKeys(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticationAPIService ElevatePermissionsWithPassword", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.AuthenticationAPI.ElevatePermissionsWithPassword(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticationAPIService ElevatePermissionsWithRecoveryCode", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.AuthenticationAPI.ElevatePermissionsWithRecoveryCode(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticationAPIService ElevatePermissionsWithTotp", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.AuthenticationAPI.ElevatePermissionsWithTotp(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticationAPIService GetAllAccessTokens", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string

		resp, httpRes, err := apiClient.AuthenticationAPI.GetAllAccessTokens(context.Background(), projectKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticationAPIService GetAllAccessTokens1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var repositorySlug string

		resp, httpRes, err := apiClient.AuthenticationAPI.GetAllAccessTokens1(context.Background(), projectKey, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticationAPIService GetAllAccessTokens2", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var userSlug string

		resp, httpRes, err := apiClient.AuthenticationAPI.GetAllAccessTokens2(context.Background(), userSlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticationAPIService GetById", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var tokenId string

		resp, httpRes, err := apiClient.AuthenticationAPI.GetById(context.Background(), projectKey, tokenId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticationAPIService GetById1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var tokenId string
		var repositorySlug string

		resp, httpRes, err := apiClient.AuthenticationAPI.GetById1(context.Background(), projectKey, tokenId, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticationAPIService GetById2", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tokenId string
		var userSlug string

		resp, httpRes, err := apiClient.AuthenticationAPI.GetById2(context.Background(), tokenId, userSlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticationAPIService GetCaptchaData", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.AuthenticationAPI.GetCaptchaData(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticationAPIService GetConfig", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.AuthenticationAPI.GetConfig(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticationAPIService GetElevatedPermissionStatus", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.AuthenticationAPI.GetElevatedPermissionStatus(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticationAPIService GetForProject", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var keyId string

		resp, httpRes, err := apiClient.AuthenticationAPI.GetForProject(context.Background(), projectKey, keyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticationAPIService GetForProjects", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var keyId int32

		httpRes, err := apiClient.AuthenticationAPI.GetForProjects(context.Background(), keyId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticationAPIService GetForRepositories", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var keyId string

		httpRes, err := apiClient.AuthenticationAPI.GetForRepositories(context.Background(), keyId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticationAPIService GetForRepository", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var keyId string
		var repositorySlug string

		resp, httpRes, err := apiClient.AuthenticationAPI.GetForRepository(context.Background(), projectKey, keyId, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticationAPIService GetForRepository1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var repositorySlug string

		resp, httpRes, err := apiClient.AuthenticationAPI.GetForRepository1(context.Background(), projectKey, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticationAPIService GetIdp", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string

		resp, httpRes, err := apiClient.AuthenticationAPI.GetIdp(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticationAPIService GetIdps", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.AuthenticationAPI.GetIdps(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticationAPIService GetJitProvisionedUsers", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.AuthenticationAPI.GetJitProvisionedUsers(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticationAPIService GetLoginOptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.AuthenticationAPI.GetLoginOptions(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticationAPIService GetSshKey", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var keyId string

		resp, httpRes, err := apiClient.AuthenticationAPI.GetSshKey(context.Background(), keyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticationAPIService GetSshKeys", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.AuthenticationAPI.GetSshKeys(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticationAPIService GetSshKeysForProject", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string

		resp, httpRes, err := apiClient.AuthenticationAPI.GetSshKeysForProject(context.Background(), projectKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticationAPIService GetSsoManagementStatus", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.AuthenticationAPI.GetSsoManagementStatus(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticationAPIService GetStatus", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.AuthenticationAPI.GetStatus(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticationAPIService Put", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.AuthenticationAPI.Put(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticationAPIService RemoveIdp", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string

		resp, httpRes, err := apiClient.AuthenticationAPI.RemoveIdp(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticationAPIService RevokeForProject", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var keyId string

		httpRes, err := apiClient.AuthenticationAPI.RevokeForProject(context.Background(), projectKey, keyId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticationAPIService RevokeForRepository", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var keyId string
		var repositorySlug string

		httpRes, err := apiClient.AuthenticationAPI.RevokeForRepository(context.Background(), projectKey, keyId, repositorySlug).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticationAPIService RevokeMany", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var keyId string

		httpRes, err := apiClient.AuthenticationAPI.RevokeMany(context.Background(), keyId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticationAPIService RotateRecoverCode", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.AuthenticationAPI.RotateRecoverCode(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticationAPIService SshSettings", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.AuthenticationAPI.SshSettings(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticationAPIService StartEnforcedEnrollment", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.AuthenticationAPI.StartEnforcedEnrollment(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticationAPIService StartEnrollmentUpdate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.AuthenticationAPI.StartEnrollmentUpdate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticationAPIService StartVoluntaryEnrollment", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.AuthenticationAPI.StartVoluntaryEnrollment(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticationAPIService Unenroll", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.AuthenticationAPI.Unenroll(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticationAPIService UnenrollUser", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var userName string

		httpRes, err := apiClient.AuthenticationAPI.UnenrollUser(context.Background(), userName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticationAPIService UpdateAccessToken", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var tokenId string

		resp, httpRes, err := apiClient.AuthenticationAPI.UpdateAccessToken(context.Background(), projectKey, tokenId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticationAPIService UpdateAccessToken1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var tokenId string
		var repositorySlug string

		resp, httpRes, err := apiClient.AuthenticationAPI.UpdateAccessToken1(context.Background(), projectKey, tokenId, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticationAPIService UpdateAccessToken2", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tokenId string
		var userSlug string

		resp, httpRes, err := apiClient.AuthenticationAPI.UpdateAccessToken2(context.Background(), tokenId, userSlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticationAPIService UpdateConfig", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.AuthenticationAPI.UpdateConfig(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticationAPIService UpdateIdp", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string

		resp, httpRes, err := apiClient.AuthenticationAPI.UpdateIdp(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticationAPIService UpdatePermission", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var keyId string
		var permission string

		resp, httpRes, err := apiClient.AuthenticationAPI.UpdatePermission(context.Background(), projectKey, keyId, permission).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticationAPIService UpdatePermission1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var keyId string
		var permission string
		var repositorySlug string

		resp, httpRes, err := apiClient.AuthenticationAPI.UpdatePermission1(context.Background(), projectKey, keyId, permission, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticationAPIService VerifyCode", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.AuthenticationAPI.VerifyCode(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
