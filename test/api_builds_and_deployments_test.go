/*
Bitbucket Data Center

Testing BuildsAndDeploymentsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package test

import (
	"context"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	openapiclient "github.com/vinisman/bitbucket-sdk-go/openapi"
)

func Test_openapi_BuildsAndDeploymentsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test BuildsAndDeploymentsAPIService Add", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var commitId string
		var repositorySlug string

		httpRes, err := apiClient.BuildsAndDeploymentsAPI.Add(context.Background(), projectKey, commitId, repositorySlug).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BuildsAndDeploymentsAPIService AddAnnotations", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var commitId string
		var repositorySlug string
		var key string

		httpRes, err := apiClient.BuildsAndDeploymentsAPI.AddAnnotations(context.Background(), projectKey, commitId, repositorySlug, key).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BuildsAndDeploymentsAPIService CreateOrUpdateDeployment", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var commitId string
		var repositorySlug string

		resp, httpRes, err := apiClient.BuildsAndDeploymentsAPI.CreateOrUpdateDeployment(context.Background(), projectKey, commitId, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BuildsAndDeploymentsAPIService CreateRequiredBuildsMergeCheck", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var repositorySlug string

		resp, httpRes, err := apiClient.BuildsAndDeploymentsAPI.CreateRequiredBuildsMergeCheck(context.Background(), projectKey, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BuildsAndDeploymentsAPIService Delete", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var commitId string
		var repositorySlug string

		httpRes, err := apiClient.BuildsAndDeploymentsAPI.Delete(context.Background(), projectKey, commitId, repositorySlug).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BuildsAndDeploymentsAPIService Delete1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var commitId string
		var repositorySlug string

		httpRes, err := apiClient.BuildsAndDeploymentsAPI.Delete1(context.Background(), projectKey, commitId, repositorySlug).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BuildsAndDeploymentsAPIService DeleteACodeInsightsReport", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var commitId string
		var repositorySlug string
		var key string

		httpRes, err := apiClient.BuildsAndDeploymentsAPI.DeleteACodeInsightsReport(context.Background(), projectKey, commitId, repositorySlug, key).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BuildsAndDeploymentsAPIService DeleteAnnotations", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var commitId string
		var repositorySlug string
		var key string

		httpRes, err := apiClient.BuildsAndDeploymentsAPI.DeleteAnnotations(context.Background(), projectKey, commitId, repositorySlug, key).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BuildsAndDeploymentsAPIService DeleteRequiredBuildsMergeCheck", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var id int64
		var repositorySlug string

		httpRes, err := apiClient.BuildsAndDeploymentsAPI.DeleteRequiredBuildsMergeCheck(context.Background(), projectKey, id, repositorySlug).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BuildsAndDeploymentsAPIService Get", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var commitId string
		var repositorySlug string

		resp, httpRes, err := apiClient.BuildsAndDeploymentsAPI.Get(context.Background(), projectKey, commitId, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BuildsAndDeploymentsAPIService Get1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var commitId string
		var repositorySlug string

		resp, httpRes, err := apiClient.BuildsAndDeploymentsAPI.Get1(context.Background(), projectKey, commitId, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BuildsAndDeploymentsAPIService GetACodeInsightsReport", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var commitId string
		var repositorySlug string
		var key string

		resp, httpRes, err := apiClient.BuildsAndDeploymentsAPI.GetACodeInsightsReport(context.Background(), projectKey, commitId, repositorySlug, key).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BuildsAndDeploymentsAPIService GetAnnotations", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var commitId string
		var repositorySlug string
		var key string

		resp, httpRes, err := apiClient.BuildsAndDeploymentsAPI.GetAnnotations(context.Background(), projectKey, commitId, repositorySlug, key).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BuildsAndDeploymentsAPIService GetAnnotations1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var commitId string
		var repositorySlug string

		resp, httpRes, err := apiClient.BuildsAndDeploymentsAPI.GetAnnotations1(context.Background(), projectKey, commitId, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BuildsAndDeploymentsAPIService GetBuildStatusStats", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var commitId string

		resp, httpRes, err := apiClient.BuildsAndDeploymentsAPI.GetBuildStatusStats(context.Background(), commitId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BuildsAndDeploymentsAPIService GetMultipleBuildStatusStats", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.BuildsAndDeploymentsAPI.GetMultipleBuildStatusStats(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BuildsAndDeploymentsAPIService GetPageOfRequiredBuildsMergeChecks", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var repositorySlug string

		resp, httpRes, err := apiClient.BuildsAndDeploymentsAPI.GetPageOfRequiredBuildsMergeChecks(context.Background(), projectKey, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BuildsAndDeploymentsAPIService GetReports", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var commitId string
		var repositorySlug string

		resp, httpRes, err := apiClient.BuildsAndDeploymentsAPI.GetReports(context.Background(), projectKey, commitId, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BuildsAndDeploymentsAPIService SetACodeInsightsReport", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var commitId string
		var repositorySlug string
		var key string

		resp, httpRes, err := apiClient.BuildsAndDeploymentsAPI.SetACodeInsightsReport(context.Background(), projectKey, commitId, repositorySlug, key).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BuildsAndDeploymentsAPIService SetAnnotation", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var externalId string
		var commitId string
		var repositorySlug string
		var key string

		httpRes, err := apiClient.BuildsAndDeploymentsAPI.SetAnnotation(context.Background(), projectKey, externalId, commitId, repositorySlug, key).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BuildsAndDeploymentsAPIService UpdateRequiredBuildsMergeCheck", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var id int64
		var repositorySlug string

		resp, httpRes, err := apiClient.BuildsAndDeploymentsAPI.UpdateRequiredBuildsMergeCheck(context.Background(), projectKey, id, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
