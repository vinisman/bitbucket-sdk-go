/*
Bitbucket Data Center

Testing MirroringMirrorAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package test

import (
	"context"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	openapiclient "github.com/vinisman/bitbucket-sdk-go/openapi"
)

func Test_openapi_MirroringMirrorAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test MirroringMirrorAPIService EndRollingUpgrade", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.MirroringMirrorAPI.EndRollingUpgrade(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MirroringMirrorAPIService GetDelayedSyncRepositories", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.MirroringMirrorAPI.GetDelayedSyncRepositories(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MirroringMirrorAPIService GetFarmNodes", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.MirroringMirrorAPI.GetFarmNodes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MirroringMirrorAPIService GetMirrorMode", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.MirroringMirrorAPI.GetMirrorMode(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MirroringMirrorAPIService GetMirrorSettings", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.MirroringMirrorAPI.GetMirrorSettings(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MirroringMirrorAPIService GetMirroredProjects", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.MirroringMirrorAPI.GetMirroredProjects(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MirroringMirrorAPIService GetMirroredRepository", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var externalRepositoryId string

		resp, httpRes, err := apiClient.MirroringMirrorAPI.GetMirroredRepository(context.Background(), externalRepositoryId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MirroringMirrorAPIService GetRefChangesQueue", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.MirroringMirrorAPI.GetRefChangesQueue(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MirroringMirrorAPIService GetRefChangesQueueCount", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.MirroringMirrorAPI.GetRefChangesQueueCount(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MirroringMirrorAPIService GetRepoSyncStatus", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.MirroringMirrorAPI.GetRepoSyncStatus(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MirroringMirrorAPIService GetRepoSyncStatus1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var repositorySlug string

		resp, httpRes, err := apiClient.MirroringMirrorAPI.GetRepoSyncStatus1(context.Background(), projectKey, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MirroringMirrorAPIService GetRepositoryLockOwner", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var repositorySlug string

		resp, httpRes, err := apiClient.MirroringMirrorAPI.GetRepositoryLockOwner(context.Background(), projectKey, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MirroringMirrorAPIService GetRepositoryLockOwners", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.MirroringMirrorAPI.GetRepositoryLockOwners(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MirroringMirrorAPIService GetSynchronizationProgress", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.MirroringMirrorAPI.GetSynchronizationProgress(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MirroringMirrorAPIService GetUpstreamServer", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.MirroringMirrorAPI.GetUpstreamServer(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MirroringMirrorAPIService SetMirrorMode", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.MirroringMirrorAPI.SetMirrorMode(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MirroringMirrorAPIService SetMirrorSettings", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.MirroringMirrorAPI.SetMirrorSettings(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MirroringMirrorAPIService StartMirroringProject", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string

		httpRes, err := apiClient.MirroringMirrorAPI.StartMirroringProject(context.Background(), projectId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MirroringMirrorAPIService StartMirroringProjects", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.MirroringMirrorAPI.StartMirroringProjects(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MirroringMirrorAPIService StartRollingUpgrade", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.MirroringMirrorAPI.StartRollingUpgrade(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MirroringMirrorAPIService StopMirroringProject", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string

		httpRes, err := apiClient.MirroringMirrorAPI.StopMirroringProject(context.Background(), projectId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
