/*
Bitbucket Data Center

Testing MirroringUpstreamAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package test

import (
	"context"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	openapiclient "github.com/vinisman/bitbucket-sdk-go/openapi"
)

func Test_openapi_MirroringUpstreamAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test MirroringUpstreamAPIService Accept", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var mirroringRequestId string

		resp, httpRes, err := apiClient.MirroringUpstreamAPI.Accept(context.Background(), mirroringRequestId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MirroringUpstreamAPIService AnalyticsSettings", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.MirroringUpstreamAPI.AnalyticsSettings(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MirroringUpstreamAPIService DeleteMirroringRequest", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var mirroringRequestId string

		httpRes, err := apiClient.MirroringUpstreamAPI.DeleteMirroringRequest(context.Background(), mirroringRequestId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MirroringUpstreamAPIService DeletePreferredMirrorId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.MirroringUpstreamAPI.DeletePreferredMirrorId(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MirroringUpstreamAPIService GetAllContentHashes", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.MirroringUpstreamAPI.GetAllContentHashes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MirroringUpstreamAPIService GetAllReposForProject", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string

		resp, httpRes, err := apiClient.MirroringUpstreamAPI.GetAllReposForProject(context.Background(), projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MirroringUpstreamAPIService GetContentHashById", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var repoId string

		resp, httpRes, err := apiClient.MirroringUpstreamAPI.GetContentHashById(context.Background(), repoId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MirroringUpstreamAPIService GetMirror", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var mirrorId string

		resp, httpRes, err := apiClient.MirroringUpstreamAPI.GetMirror(context.Background(), mirrorId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MirroringUpstreamAPIService GetMirroringRequest", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var mirroringRequestId string

		resp, httpRes, err := apiClient.MirroringUpstreamAPI.GetMirroringRequest(context.Background(), mirroringRequestId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MirroringUpstreamAPIService GetPreferredMirrorId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.MirroringUpstreamAPI.GetPreferredMirrorId(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MirroringUpstreamAPIService GetProjectById", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectId string

		resp, httpRes, err := apiClient.MirroringUpstreamAPI.GetProjectById(context.Background(), projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MirroringUpstreamAPIService GetRepositoryMirrors", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var repoId string

		resp, httpRes, err := apiClient.MirroringUpstreamAPI.GetRepositoryMirrors(context.Background(), repoId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MirroringUpstreamAPIService ListMirrors", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.MirroringUpstreamAPI.ListMirrors(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MirroringUpstreamAPIService ListRequests", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.MirroringUpstreamAPI.ListRequests(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MirroringUpstreamAPIService MAuthenticate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.MirroringUpstreamAPI.MAuthenticate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MirroringUpstreamAPIService PublishEvent", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var mirrorId string

		httpRes, err := apiClient.MirroringUpstreamAPI.PublishEvent(context.Background(), mirrorId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MirroringUpstreamAPIService Register", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.MirroringUpstreamAPI.Register(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MirroringUpstreamAPIService Reject", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var mirroringRequestId string

		resp, httpRes, err := apiClient.MirroringUpstreamAPI.Reject(context.Background(), mirroringRequestId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MirroringUpstreamAPIService Remove", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var mirrorId string

		httpRes, err := apiClient.MirroringUpstreamAPI.Remove(context.Background(), mirrorId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MirroringUpstreamAPIService SetPreferredMirrorId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.MirroringUpstreamAPI.SetPreferredMirrorId(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MirroringUpstreamAPIService Upgrade", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var mirrorId string

		resp, httpRes, err := apiClient.MirroringUpstreamAPI.Upgrade(context.Background(), mirrorId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
