/*
Bitbucket Data Center

Testing PermissionManagementAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package test

import (
	"context"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	openapiclient "github.com/vinisman/bitbucket-sdk-go/openapi"
)

func Test_openapi_PermissionManagementAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test PermissionManagementAPIService AddGroupToUser", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.PermissionManagementAPI.AddGroupToUser(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PermissionManagementAPIService AddUserToGroup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.PermissionManagementAPI.AddUserToGroup(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PermissionManagementAPIService AddUserToGroups", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.PermissionManagementAPI.AddUserToGroups(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PermissionManagementAPIService AddUsersToGroup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.PermissionManagementAPI.AddUsersToGroup(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PermissionManagementAPIService ClearUserCaptchaChallenge", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.PermissionManagementAPI.ClearUserCaptchaChallenge(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PermissionManagementAPIService CreateGroup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.PermissionManagementAPI.CreateGroup(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PermissionManagementAPIService CreateUser", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.PermissionManagementAPI.CreateUser(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PermissionManagementAPIService DeleteGroup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.PermissionManagementAPI.DeleteGroup(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PermissionManagementAPIService DeleteUser", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.PermissionManagementAPI.DeleteUser(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PermissionManagementAPIService EraseUser", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.PermissionManagementAPI.EraseUser(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PermissionManagementAPIService FindGroupsForUser", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.PermissionManagementAPI.FindGroupsForUser(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PermissionManagementAPIService FindOtherGroupsForUser", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.PermissionManagementAPI.FindOtherGroupsForUser(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PermissionManagementAPIService FindUsersInGroup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.PermissionManagementAPI.FindUsersInGroup(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PermissionManagementAPIService FindUsersNotInGroup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.PermissionManagementAPI.FindUsersNotInGroup(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PermissionManagementAPIService GetGroups", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.PermissionManagementAPI.GetGroups(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PermissionManagementAPIService GetGroups1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.PermissionManagementAPI.GetGroups1(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PermissionManagementAPIService GetGroupsWithAnyPermission", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.PermissionManagementAPI.GetGroupsWithAnyPermission(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PermissionManagementAPIService GetGroupsWithAnyPermission2", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var repositorySlug string

		resp, httpRes, err := apiClient.PermissionManagementAPI.GetGroupsWithAnyPermission2(context.Background(), projectKey, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PermissionManagementAPIService GetGroupsWithoutAnyPermission", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.PermissionManagementAPI.GetGroupsWithoutAnyPermission(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PermissionManagementAPIService GetGroupsWithoutAnyPermission2", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var repositorySlug string

		resp, httpRes, err := apiClient.PermissionManagementAPI.GetGroupsWithoutAnyPermission2(context.Background(), projectKey, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PermissionManagementAPIService GetUserDirectories", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.PermissionManagementAPI.GetUserDirectories(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PermissionManagementAPIService GetUsers1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.PermissionManagementAPI.GetUsers1(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PermissionManagementAPIService GetUsersWithAnyPermission", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.PermissionManagementAPI.GetUsersWithAnyPermission(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PermissionManagementAPIService GetUsersWithAnyPermission2", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var repositorySlug string

		resp, httpRes, err := apiClient.PermissionManagementAPI.GetUsersWithAnyPermission2(context.Background(), projectKey, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PermissionManagementAPIService GetUsersWithoutAnyPermission", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.PermissionManagementAPI.GetUsersWithoutAnyPermission(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PermissionManagementAPIService GetUsersWithoutPermission1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var repositorySlug string

		resp, httpRes, err := apiClient.PermissionManagementAPI.GetUsersWithoutPermission1(context.Background(), projectKey, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PermissionManagementAPIService RemoveGroupFromUser", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.PermissionManagementAPI.RemoveGroupFromUser(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PermissionManagementAPIService RemoveUserFromGroup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.PermissionManagementAPI.RemoveUserFromGroup(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PermissionManagementAPIService RenameUser", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.PermissionManagementAPI.RenameUser(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PermissionManagementAPIService RevokePermissions1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var repositorySlug string

		httpRes, err := apiClient.PermissionManagementAPI.RevokePermissions1(context.Background(), projectKey, repositorySlug).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PermissionManagementAPIService RevokePermissionsForGroup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.PermissionManagementAPI.RevokePermissionsForGroup(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PermissionManagementAPIService RevokePermissionsForGroup2", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var repositorySlug string

		httpRes, err := apiClient.PermissionManagementAPI.RevokePermissionsForGroup2(context.Background(), projectKey, repositorySlug).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PermissionManagementAPIService RevokePermissionsForUser", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.PermissionManagementAPI.RevokePermissionsForUser(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PermissionManagementAPIService RevokePermissionsForUser2", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var repositorySlug string

		httpRes, err := apiClient.PermissionManagementAPI.RevokePermissionsForUser2(context.Background(), projectKey, repositorySlug).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PermissionManagementAPIService SearchPermissions1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var repositorySlug string

		httpRes, err := apiClient.PermissionManagementAPI.SearchPermissions1(context.Background(), projectKey, repositorySlug).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PermissionManagementAPIService SetPermissionForGroup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var repositorySlug string

		httpRes, err := apiClient.PermissionManagementAPI.SetPermissionForGroup(context.Background(), projectKey, repositorySlug).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PermissionManagementAPIService SetPermissionForGroups", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.PermissionManagementAPI.SetPermissionForGroups(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PermissionManagementAPIService SetPermissionForUser", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var repositorySlug string

		httpRes, err := apiClient.PermissionManagementAPI.SetPermissionForUser(context.Background(), projectKey, repositorySlug).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PermissionManagementAPIService SetPermissionForUsers", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.PermissionManagementAPI.SetPermissionForUsers(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PermissionManagementAPIService UpdateUserDetails", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.PermissionManagementAPI.UpdateUserDetails(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PermissionManagementAPIService UpdateUserPassword", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.PermissionManagementAPI.UpdateUserPassword(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PermissionManagementAPIService ValidateErasable", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.PermissionManagementAPI.ValidateErasable(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
