/*
Bitbucket Data Center

Testing ProjectAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package test

import (
	"context"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	openapiclient "github.com/vinisman/bitbucket-sdk-go/openapi"
)

func Test_openapi_ProjectAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ProjectAPIService AddDefaultTask", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string

		resp, httpRes, err := apiClient.ProjectAPI.AddDefaultTask(context.Background(), projectKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService Create3", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string

		resp, httpRes, err := apiClient.ProjectAPI.Create3(context.Background(), projectKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService CreateProject", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ProjectAPI.CreateProject(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService CreateRepository", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string

		resp, httpRes, err := apiClient.ProjectAPI.CreateRepository(context.Background(), projectKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService CreateRestrictions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string

		resp, httpRes, err := apiClient.ProjectAPI.CreateRestrictions(context.Background(), projectKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService CreateWebhook", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string

		resp, httpRes, err := apiClient.ProjectAPI.CreateWebhook(context.Background(), projectKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService Delete4", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string

		httpRes, err := apiClient.ProjectAPI.Delete4(context.Background(), projectKey).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService Delete9", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string

		httpRes, err := apiClient.ProjectAPI.Delete9(context.Background(), projectKey).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService DeleteAllDefaultTasks", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string

		httpRes, err := apiClient.ProjectAPI.DeleteAllDefaultTasks(context.Background(), projectKey).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService DeleteAutoDeclineSettings", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string

		httpRes, err := apiClient.ProjectAPI.DeleteAutoDeclineSettings(context.Background(), projectKey).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService DeleteDefaultTask", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var taskId string

		httpRes, err := apiClient.ProjectAPI.DeleteDefaultTask(context.Background(), projectKey, taskId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService DeleteProject", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string

		httpRes, err := apiClient.ProjectAPI.DeleteProject(context.Background(), projectKey).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService DeleteRepository", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var repositorySlug string

		httpRes, err := apiClient.ProjectAPI.DeleteRepository(context.Background(), projectKey, repositorySlug).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService DeleteRestriction", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var id string

		httpRes, err := apiClient.ProjectAPI.DeleteRestriction(context.Background(), projectKey, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService DeleteWebhook", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var webhookId string

		httpRes, err := apiClient.ProjectAPI.DeleteWebhook(context.Background(), projectKey, webhookId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService DisableHook", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var hookKey string

		resp, httpRes, err := apiClient.ProjectAPI.DisableHook(context.Background(), projectKey, hookKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService EnableHook", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var hookKey string

		resp, httpRes, err := apiClient.ProjectAPI.EnableHook(context.Background(), projectKey, hookKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService FindWebhooks", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string

		httpRes, err := apiClient.ProjectAPI.FindWebhooks(context.Background(), projectKey).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService ForkRepository", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var repositorySlug string

		resp, httpRes, err := apiClient.ProjectAPI.ForkRepository(context.Background(), projectKey, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService Get4", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string

		resp, httpRes, err := apiClient.ProjectAPI.Get4(context.Background(), projectKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService Get7", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string

		resp, httpRes, err := apiClient.ProjectAPI.Get7(context.Background(), projectKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService GetAll", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string

		resp, httpRes, err := apiClient.ProjectAPI.GetAll(context.Background(), projectKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService GetAutoDeclineSettings", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string

		resp, httpRes, err := apiClient.ProjectAPI.GetAutoDeclineSettings(context.Background(), projectKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService GetAvatar", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var hookKey string

		httpRes, err := apiClient.ProjectAPI.GetAvatar(context.Background(), hookKey).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService GetConfigurations", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string

		resp, httpRes, err := apiClient.ProjectAPI.GetConfigurations(context.Background(), projectKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService GetDefaultBranch2", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var repositorySlug string

		resp, httpRes, err := apiClient.ProjectAPI.GetDefaultBranch2(context.Background(), projectKey, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService GetDefaultTasks", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string

		resp, httpRes, err := apiClient.ProjectAPI.GetDefaultTasks(context.Background(), projectKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService GetForkedRepositories", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var repositorySlug string

		resp, httpRes, err := apiClient.ProjectAPI.GetForkedRepositories(context.Background(), projectKey, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService GetGroupsWithAnyPermission1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string

		resp, httpRes, err := apiClient.ProjectAPI.GetGroupsWithAnyPermission1(context.Background(), projectKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService GetGroupsWithoutAnyPermission1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string

		resp, httpRes, err := apiClient.ProjectAPI.GetGroupsWithoutAnyPermission1(context.Background(), projectKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService GetLatestInvocation", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var webhookId string

		resp, httpRes, err := apiClient.ProjectAPI.GetLatestInvocation(context.Background(), projectKey, webhookId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService GetProject", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string

		resp, httpRes, err := apiClient.ProjectAPI.GetProject(context.Background(), projectKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService GetProjectAvatar", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string

		httpRes, err := apiClient.ProjectAPI.GetProjectAvatar(context.Background(), projectKey).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService GetProjects", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ProjectAPI.GetProjects(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService GetPullRequestSettings", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var scmId string

		resp, httpRes, err := apiClient.ProjectAPI.GetPullRequestSettings(context.Background(), projectKey, scmId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService GetRelatedRepositories", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var repositorySlug string

		resp, httpRes, err := apiClient.ProjectAPI.GetRelatedRepositories(context.Background(), projectKey, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService GetRepositories", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string

		resp, httpRes, err := apiClient.ProjectAPI.GetRepositories(context.Background(), projectKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService GetRepository", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var repositorySlug string

		resp, httpRes, err := apiClient.ProjectAPI.GetRepository(context.Background(), projectKey, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService GetRepositoryHook", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var hookKey string

		resp, httpRes, err := apiClient.ProjectAPI.GetRepositoryHook(context.Background(), projectKey, hookKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService GetRepositoryHooks", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string

		resp, httpRes, err := apiClient.ProjectAPI.GetRepositoryHooks(context.Background(), projectKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService GetRestriction", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var id string

		resp, httpRes, err := apiClient.ProjectAPI.GetRestriction(context.Background(), projectKey, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService GetRestrictions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string

		resp, httpRes, err := apiClient.ProjectAPI.GetRestrictions(context.Background(), projectKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService GetSettings", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var hookKey string

		resp, httpRes, err := apiClient.ProjectAPI.GetSettings(context.Background(), projectKey, hookKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService GetStatistics", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var webhookId string

		resp, httpRes, err := apiClient.ProjectAPI.GetStatistics(context.Background(), projectKey, webhookId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService GetStatisticsSummary", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var webhookId string

		resp, httpRes, err := apiClient.ProjectAPI.GetStatisticsSummary(context.Background(), projectKey, webhookId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService GetUsersWithAnyPermission1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string

		resp, httpRes, err := apiClient.ProjectAPI.GetUsersWithAnyPermission1(context.Background(), projectKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService GetUsersWithoutPermission", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string

		resp, httpRes, err := apiClient.ProjectAPI.GetUsersWithoutPermission(context.Background(), projectKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService GetWebhook", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var webhookId string

		resp, httpRes, err := apiClient.ProjectAPI.GetWebhook(context.Background(), projectKey, webhookId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService HasAllUserPermission", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var permission string

		resp, httpRes, err := apiClient.ProjectAPI.HasAllUserPermission(context.Background(), projectKey, permission).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService ModifyAllUserPermission", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var permission string

		httpRes, err := apiClient.ProjectAPI.ModifyAllUserPermission(context.Background(), projectKey, permission).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService RemoveConfiguration", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var scriptId string

		httpRes, err := apiClient.ProjectAPI.RemoveConfiguration(context.Background(), projectKey, scriptId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService RetryCreateRepository", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var repositorySlug string

		resp, httpRes, err := apiClient.ProjectAPI.RetryCreateRepository(context.Background(), projectKey, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService RevokePermissions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string

		httpRes, err := apiClient.ProjectAPI.RevokePermissions(context.Background(), projectKey).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService RevokePermissionsForGroup1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string

		httpRes, err := apiClient.ProjectAPI.RevokePermissionsForGroup1(context.Background(), projectKey).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService RevokePermissionsForUser1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string

		httpRes, err := apiClient.ProjectAPI.RevokePermissionsForUser1(context.Background(), projectKey).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService SearchPermissions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string

		httpRes, err := apiClient.ProjectAPI.SearchPermissions(context.Background(), projectKey).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService Set", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string

		resp, httpRes, err := apiClient.ProjectAPI.Set(context.Background(), projectKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService SetAutoDeclineSettings", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string

		resp, httpRes, err := apiClient.ProjectAPI.SetAutoDeclineSettings(context.Background(), projectKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService SetConfiguration", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var scriptId string

		resp, httpRes, err := apiClient.ProjectAPI.SetConfiguration(context.Background(), projectKey, scriptId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService SetDefaultBranch2", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var repositorySlug string

		httpRes, err := apiClient.ProjectAPI.SetDefaultBranch2(context.Background(), projectKey, repositorySlug).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService SetPermissionForGroups1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string

		httpRes, err := apiClient.ProjectAPI.SetPermissionForGroups1(context.Background(), projectKey).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService SetPermissionForUsers1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string

		httpRes, err := apiClient.ProjectAPI.SetPermissionForUsers1(context.Background(), projectKey).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService SetSettings", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var hookKey string

		resp, httpRes, err := apiClient.ProjectAPI.SetSettings(context.Background(), projectKey, hookKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService StreamContributing", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var repositorySlug string

		httpRes, err := apiClient.ProjectAPI.StreamContributing(context.Background(), projectKey, repositorySlug).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService StreamLicense", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var repositorySlug string

		httpRes, err := apiClient.ProjectAPI.StreamLicense(context.Background(), projectKey, repositorySlug).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService StreamReadme", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var repositorySlug string

		httpRes, err := apiClient.ProjectAPI.StreamReadme(context.Background(), projectKey, repositorySlug).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService TestWebhook", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string

		resp, httpRes, err := apiClient.ProjectAPI.TestWebhook(context.Background(), projectKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService UpdateDefaultTask", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var taskId string

		resp, httpRes, err := apiClient.ProjectAPI.UpdateDefaultTask(context.Background(), projectKey, taskId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService UpdateProject", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string

		resp, httpRes, err := apiClient.ProjectAPI.UpdateProject(context.Background(), projectKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService UpdatePullRequestSettings", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var scmId string

		resp, httpRes, err := apiClient.ProjectAPI.UpdatePullRequestSettings(context.Background(), projectKey, scmId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService UpdateRepository", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var repositorySlug string

		resp, httpRes, err := apiClient.ProjectAPI.UpdateRepository(context.Background(), projectKey, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService UpdateWebhook", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var webhookId string

		resp, httpRes, err := apiClient.ProjectAPI.UpdateWebhook(context.Background(), projectKey, webhookId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService UploadAvatar", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string

		httpRes, err := apiClient.ProjectAPI.UploadAvatar(context.Background(), projectKey).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
