/*
Bitbucket Data Center

Testing PullRequestsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package test

import (
	"context"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	openapiclient "github.com/vinisman/bitbucket-sdk-go/openapi"
)

func Test_openapi_PullRequestsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test PullRequestsAPIService ApplySuggestion", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var commentId string
		var pullRequestId string
		var repositorySlug string

		httpRes, err := apiClient.PullRequestsAPI.ApplySuggestion(context.Background(), projectKey, commentId, pullRequestId, repositorySlug).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PullRequestsAPIService Approve", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var pullRequestId string
		var repositorySlug string

		resp, httpRes, err := apiClient.PullRequestsAPI.Approve(context.Background(), projectKey, pullRequestId, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PullRequestsAPIService AssignParticipantRole", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var pullRequestId string
		var repositorySlug string

		resp, httpRes, err := apiClient.PullRequestsAPI.AssignParticipantRole(context.Background(), projectKey, pullRequestId, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PullRequestsAPIService CanMerge", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var pullRequestId string
		var repositorySlug string

		resp, httpRes, err := apiClient.PullRequestsAPI.CanMerge(context.Background(), projectKey, pullRequestId, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PullRequestsAPIService CanRebase", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var pullRequestId string
		var repositorySlug string

		resp, httpRes, err := apiClient.PullRequestsAPI.CanRebase(context.Background(), projectKey, pullRequestId, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PullRequestsAPIService CancelAutoMerge", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var pullRequestId string
		var repositorySlug string

		httpRes, err := apiClient.PullRequestsAPI.CancelAutoMerge(context.Background(), projectKey, pullRequestId, repositorySlug).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PullRequestsAPIService Create", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var repositorySlug string

		resp, httpRes, err := apiClient.PullRequestsAPI.Create(context.Background(), projectKey, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PullRequestsAPIService Create1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string

		resp, httpRes, err := apiClient.PullRequestsAPI.Create1(context.Background(), projectKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PullRequestsAPIService Create2", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var repositorySlug string

		resp, httpRes, err := apiClient.PullRequestsAPI.Create2(context.Background(), projectKey, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PullRequestsAPIService CreateComment1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var pullRequestId string
		var repositorySlug string

		resp, httpRes, err := apiClient.PullRequestsAPI.CreateComment1(context.Background(), projectKey, pullRequestId, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PullRequestsAPIService CreateComment2", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var pullRequestId string
		var repositorySlug string

		resp, httpRes, err := apiClient.PullRequestsAPI.CreateComment2(context.Background(), projectKey, pullRequestId, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PullRequestsAPIService CreatePullRequestCondition", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string

		resp, httpRes, err := apiClient.PullRequestsAPI.CreatePullRequestCondition(context.Background(), projectKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PullRequestsAPIService CreatePullRequestCondition1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var repositorySlug string

		resp, httpRes, err := apiClient.PullRequestsAPI.CreatePullRequestCondition1(context.Background(), projectKey, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PullRequestsAPIService Decline", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var pullRequestId string
		var repositorySlug string

		resp, httpRes, err := apiClient.PullRequestsAPI.Decline(context.Background(), projectKey, pullRequestId, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PullRequestsAPIService Delete3", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var pullRequestId string
		var repositorySlug string

		httpRes, err := apiClient.PullRequestsAPI.Delete3(context.Background(), projectKey, pullRequestId, repositorySlug).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PullRequestsAPIService Delete6", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var id string

		httpRes, err := apiClient.PullRequestsAPI.Delete6(context.Background(), projectKey, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PullRequestsAPIService Delete7", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var id string
		var repositorySlug string

		httpRes, err := apiClient.PullRequestsAPI.Delete7(context.Background(), projectKey, id, repositorySlug).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PullRequestsAPIService DeleteComment1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var commentId string
		var pullRequestId string
		var repositorySlug string

		httpRes, err := apiClient.PullRequestsAPI.DeleteComment1(context.Background(), projectKey, commentId, pullRequestId, repositorySlug).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PullRequestsAPIService DeleteComment2", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var commentId string
		var pullRequestId string
		var repositorySlug string

		httpRes, err := apiClient.PullRequestsAPI.DeleteComment2(context.Background(), projectKey, commentId, pullRequestId, repositorySlug).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PullRequestsAPIService DeletePullRequestCondition", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var id string

		httpRes, err := apiClient.PullRequestsAPI.DeletePullRequestCondition(context.Background(), projectKey, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PullRequestsAPIService DeletePullRequestCondition1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var id int32
		var repositorySlug string

		httpRes, err := apiClient.PullRequestsAPI.DeletePullRequestCondition1(context.Background(), projectKey, id, repositorySlug).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PullRequestsAPIService DiscardReview", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var pullRequestId string
		var repositorySlug string

		httpRes, err := apiClient.PullRequestsAPI.DiscardReview(context.Background(), projectKey, pullRequestId, repositorySlug).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PullRequestsAPIService FinishReview", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var pullRequestId string
		var repositorySlug string

		httpRes, err := apiClient.PullRequestsAPI.FinishReview(context.Background(), projectKey, pullRequestId, repositorySlug).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PullRequestsAPIService Get3", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var pullRequestId string
		var repositorySlug string

		resp, httpRes, err := apiClient.PullRequestsAPI.Get3(context.Background(), projectKey, pullRequestId, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PullRequestsAPIService GetActivities", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var pullRequestId string
		var repositorySlug string

		resp, httpRes, err := apiClient.PullRequestsAPI.GetActivities(context.Background(), projectKey, pullRequestId, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PullRequestsAPIService GetAutoMergeRequest", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var pullRequestId string
		var repositorySlug string

		resp, httpRes, err := apiClient.PullRequestsAPI.GetAutoMergeRequest(context.Background(), projectKey, pullRequestId, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PullRequestsAPIService GetComment1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var commentId string
		var pullRequestId string
		var repositorySlug string

		resp, httpRes, err := apiClient.PullRequestsAPI.GetComment1(context.Background(), projectKey, commentId, pullRequestId, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PullRequestsAPIService GetComment2", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var commentId string
		var pullRequestId string
		var repositorySlug string

		resp, httpRes, err := apiClient.PullRequestsAPI.GetComment2(context.Background(), projectKey, commentId, pullRequestId, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PullRequestsAPIService GetComments1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var pullRequestId string
		var repositorySlug string

		resp, httpRes, err := apiClient.PullRequestsAPI.GetComments1(context.Background(), projectKey, pullRequestId, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PullRequestsAPIService GetComments2", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var pullRequestId string
		var repositorySlug string

		resp, httpRes, err := apiClient.PullRequestsAPI.GetComments2(context.Background(), projectKey, pullRequestId, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PullRequestsAPIService GetCommitMessageSuggestion", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var pullRequestId string
		var repositorySlug string

		resp, httpRes, err := apiClient.PullRequestsAPI.GetCommitMessageSuggestion(context.Background(), projectKey, pullRequestId, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PullRequestsAPIService GetCommits1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var pullRequestId string
		var repositorySlug string

		resp, httpRes, err := apiClient.PullRequestsAPI.GetCommits1(context.Background(), projectKey, pullRequestId, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PullRequestsAPIService GetDiffStatsSummary2", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var path string
		var projectKey string
		var pullRequestId string
		var repositorySlug string

		resp, httpRes, err := apiClient.PullRequestsAPI.GetDiffStatsSummary2(context.Background(), path, projectKey, pullRequestId, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PullRequestsAPIService GetMergeBase1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var pullRequestId string
		var repositorySlug string

		resp, httpRes, err := apiClient.PullRequestsAPI.GetMergeBase1(context.Background(), projectKey, pullRequestId, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PullRequestsAPIService GetMergeConfig", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var scmId string

		resp, httpRes, err := apiClient.PullRequestsAPI.GetMergeConfig(context.Background(), scmId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PullRequestsAPIService GetPage", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var repositorySlug string

		resp, httpRes, err := apiClient.PullRequestsAPI.GetPage(context.Background(), projectKey, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PullRequestsAPIService GetPullRequestConditions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string

		resp, httpRes, err := apiClient.PullRequestsAPI.GetPullRequestConditions(context.Background(), projectKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PullRequestsAPIService GetPullRequestConditions1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var repositorySlug string

		resp, httpRes, err := apiClient.PullRequestsAPI.GetPullRequestConditions1(context.Background(), projectKey, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PullRequestsAPIService GetPullRequests", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var commitId string
		var repositorySlug string

		resp, httpRes, err := apiClient.PullRequestsAPI.GetPullRequests(context.Background(), projectKey, commitId, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PullRequestsAPIService GetReview", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var pullRequestId string
		var repositorySlug string

		resp, httpRes, err := apiClient.PullRequestsAPI.GetReview(context.Background(), projectKey, pullRequestId, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PullRequestsAPIService GetReviewerGroup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var id string

		resp, httpRes, err := apiClient.PullRequestsAPI.GetReviewerGroup(context.Background(), projectKey, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PullRequestsAPIService GetReviewerGroup1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var id string
		var repositorySlug string

		resp, httpRes, err := apiClient.PullRequestsAPI.GetReviewerGroup1(context.Background(), projectKey, id, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PullRequestsAPIService GetReviewerGroups", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string

		resp, httpRes, err := apiClient.PullRequestsAPI.GetReviewerGroups(context.Background(), projectKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PullRequestsAPIService GetReviewerGroups1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var repositorySlug string

		resp, httpRes, err := apiClient.PullRequestsAPI.GetReviewerGroups1(context.Background(), projectKey, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PullRequestsAPIService GetReviewers", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var repositorySlug string

		resp, httpRes, err := apiClient.PullRequestsAPI.GetReviewers(context.Background(), projectKey, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PullRequestsAPIService GetUsers", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var id string
		var repositorySlug string

		resp, httpRes, err := apiClient.PullRequestsAPI.GetUsers(context.Background(), projectKey, id, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PullRequestsAPIService ListParticipants", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var pullRequestId string
		var repositorySlug string

		resp, httpRes, err := apiClient.PullRequestsAPI.ListParticipants(context.Background(), projectKey, pullRequestId, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PullRequestsAPIService Merge", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var pullRequestId string
		var repositorySlug string

		resp, httpRes, err := apiClient.PullRequestsAPI.Merge(context.Background(), projectKey, pullRequestId, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PullRequestsAPIService React1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var commentId string
		var pullRequestId string
		var emoticon string
		var repositorySlug string

		resp, httpRes, err := apiClient.PullRequestsAPI.React1(context.Background(), projectKey, commentId, pullRequestId, emoticon, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PullRequestsAPIService Rebase", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var pullRequestId string
		var repositorySlug string

		resp, httpRes, err := apiClient.PullRequestsAPI.Rebase(context.Background(), projectKey, pullRequestId, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PullRequestsAPIService Reopen", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var pullRequestId string
		var repositorySlug string

		resp, httpRes, err := apiClient.PullRequestsAPI.Reopen(context.Background(), projectKey, pullRequestId, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PullRequestsAPIService Search", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var repositorySlug string

		resp, httpRes, err := apiClient.PullRequestsAPI.Search(context.Background(), projectKey, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PullRequestsAPIService SetMergeConfig", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var scmId string

		resp, httpRes, err := apiClient.PullRequestsAPI.SetMergeConfig(context.Background(), scmId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PullRequestsAPIService StreamChanges1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var pullRequestId string
		var repositorySlug string

		resp, httpRes, err := apiClient.PullRequestsAPI.StreamChanges1(context.Background(), projectKey, pullRequestId, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PullRequestsAPIService StreamDiff2", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var path string
		var projectKey string
		var pullRequestId string
		var repositorySlug string

		resp, httpRes, err := apiClient.PullRequestsAPI.StreamDiff2(context.Background(), path, projectKey, pullRequestId, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PullRequestsAPIService StreamPatch1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var pullRequestId string
		var repositorySlug string

		httpRes, err := apiClient.PullRequestsAPI.StreamPatch1(context.Background(), projectKey, pullRequestId, repositorySlug).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PullRequestsAPIService StreamRawDiff2", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var pullRequestId string
		var repositorySlug string

		httpRes, err := apiClient.PullRequestsAPI.StreamRawDiff2(context.Background(), projectKey, pullRequestId, repositorySlug).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PullRequestsAPIService TryAutoMerge", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var pullRequestId string
		var repositorySlug string

		resp, httpRes, err := apiClient.PullRequestsAPI.TryAutoMerge(context.Background(), projectKey, pullRequestId, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PullRequestsAPIService UnReact1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var commentId string
		var pullRequestId string
		var emoticon string
		var repositorySlug string

		httpRes, err := apiClient.PullRequestsAPI.UnReact1(context.Background(), projectKey, commentId, pullRequestId, emoticon, repositorySlug).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PullRequestsAPIService UnassignParticipantRole", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var userSlug string
		var pullRequestId string
		var repositorySlug string

		httpRes, err := apiClient.PullRequestsAPI.UnassignParticipantRole(context.Background(), projectKey, userSlug, pullRequestId, repositorySlug).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PullRequestsAPIService UnassignParticipantRole1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var pullRequestId string
		var repositorySlug string

		httpRes, err := apiClient.PullRequestsAPI.UnassignParticipantRole1(context.Background(), projectKey, pullRequestId, repositorySlug).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PullRequestsAPIService Unwatch1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var pullRequestId string
		var repositorySlug string

		httpRes, err := apiClient.PullRequestsAPI.Unwatch1(context.Background(), projectKey, pullRequestId, repositorySlug).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PullRequestsAPIService Update", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var pullRequestId string
		var repositorySlug string

		resp, httpRes, err := apiClient.PullRequestsAPI.Update(context.Background(), projectKey, pullRequestId, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PullRequestsAPIService Update1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var id string

		resp, httpRes, err := apiClient.PullRequestsAPI.Update1(context.Background(), projectKey, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PullRequestsAPIService Update2", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var id string
		var repositorySlug string

		resp, httpRes, err := apiClient.PullRequestsAPI.Update2(context.Background(), projectKey, id, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PullRequestsAPIService UpdateComment1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var commentId string
		var pullRequestId string
		var repositorySlug string

		resp, httpRes, err := apiClient.PullRequestsAPI.UpdateComment1(context.Background(), projectKey, commentId, pullRequestId, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PullRequestsAPIService UpdateComment2", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var commentId string
		var pullRequestId string
		var repositorySlug string

		resp, httpRes, err := apiClient.PullRequestsAPI.UpdateComment2(context.Background(), projectKey, commentId, pullRequestId, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PullRequestsAPIService UpdatePullRequestCondition", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var id string

		resp, httpRes, err := apiClient.PullRequestsAPI.UpdatePullRequestCondition(context.Background(), projectKey, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PullRequestsAPIService UpdatePullRequestCondition1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var id string
		var repositorySlug string

		resp, httpRes, err := apiClient.PullRequestsAPI.UpdatePullRequestCondition1(context.Background(), projectKey, id, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PullRequestsAPIService UpdateStatus", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var userSlug string
		var pullRequestId string
		var repositorySlug string

		resp, httpRes, err := apiClient.PullRequestsAPI.UpdateStatus(context.Background(), projectKey, userSlug, pullRequestId, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PullRequestsAPIService Watch1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var pullRequestId string
		var repositorySlug string

		httpRes, err := apiClient.PullRequestsAPI.Watch1(context.Background(), projectKey, pullRequestId, repositorySlug).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PullRequestsAPIService WithdrawApproval", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var pullRequestId string
		var repositorySlug string

		resp, httpRes, err := apiClient.PullRequestsAPI.WithdrawApproval(context.Background(), projectKey, pullRequestId, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
