/*
Bitbucket Data Center

Testing RepositoryAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package test

import (
	"context"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	openapiclient "github.com/vinisman/bitbucket-sdk-go/openapi"
)

func Test_openapi_RepositoryAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test RepositoryAPIService AddDefaultTask1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var repositorySlug string

		resp, httpRes, err := apiClient.RepositoryAPI.AddDefaultTask1(context.Background(), projectKey, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService AddLabel", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var repositorySlug string

		resp, httpRes, err := apiClient.RepositoryAPI.AddLabel(context.Background(), projectKey, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService CreateBranch", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var repositorySlug string

		resp, httpRes, err := apiClient.RepositoryAPI.CreateBranch(context.Background(), projectKey, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService CreateBranchForRepository", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var repositorySlug string

		resp, httpRes, err := apiClient.RepositoryAPI.CreateBranchForRepository(context.Background(), projectKey, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService CreateComment", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var commitId string
		var repositorySlug string

		resp, httpRes, err := apiClient.RepositoryAPI.CreateComment(context.Background(), projectKey, commitId, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService CreateRestrictions1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var repositorySlug string

		resp, httpRes, err := apiClient.RepositoryAPI.CreateRestrictions1(context.Background(), projectKey, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService CreateTag", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var repositorySlug string

		resp, httpRes, err := apiClient.RepositoryAPI.CreateTag(context.Background(), projectKey, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService CreateTagForRepository", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var repositorySlug string

		resp, httpRes, err := apiClient.RepositoryAPI.CreateTagForRepository(context.Background(), projectKey, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService CreateWebhook1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var repositorySlug string

		resp, httpRes, err := apiClient.RepositoryAPI.CreateWebhook1(context.Background(), projectKey, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService Delete5", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var repositorySlug string

		httpRes, err := apiClient.RepositoryAPI.Delete5(context.Background(), projectKey, repositorySlug).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService DeleteAllDefaultTasks1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var repositorySlug string

		httpRes, err := apiClient.RepositoryAPI.DeleteAllDefaultTasks1(context.Background(), projectKey, repositorySlug).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService DeleteAttachment", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var attachmentId string
		var repositorySlug string

		httpRes, err := apiClient.RepositoryAPI.DeleteAttachment(context.Background(), projectKey, attachmentId, repositorySlug).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService DeleteAttachmentMetadata", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var attachmentId string
		var repositorySlug string

		httpRes, err := apiClient.RepositoryAPI.DeleteAttachmentMetadata(context.Background(), projectKey, attachmentId, repositorySlug).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService DeleteAutoDeclineSettings1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var repositorySlug string

		httpRes, err := apiClient.RepositoryAPI.DeleteAutoDeclineSettings1(context.Background(), projectKey, repositorySlug).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService DeleteBranch", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var repositorySlug string

		httpRes, err := apiClient.RepositoryAPI.DeleteBranch(context.Background(), projectKey, repositorySlug).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService DeleteComment", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var commentId string
		var commitId string
		var repositorySlug string

		httpRes, err := apiClient.RepositoryAPI.DeleteComment(context.Background(), projectKey, commentId, commitId, repositorySlug).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService DeleteDefaultTask1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var repositorySlug string
		var taskId string

		httpRes, err := apiClient.RepositoryAPI.DeleteDefaultTask1(context.Background(), projectKey, repositorySlug, taskId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService DeleteRepositoryHook", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var hookKey string
		var repositorySlug string

		httpRes, err := apiClient.RepositoryAPI.DeleteRepositoryHook(context.Background(), projectKey, hookKey, repositorySlug).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService DeleteRestriction1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var id string
		var repositorySlug string

		httpRes, err := apiClient.RepositoryAPI.DeleteRestriction1(context.Background(), projectKey, id, repositorySlug).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService DeleteTag", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var name string
		var repositorySlug string

		httpRes, err := apiClient.RepositoryAPI.DeleteTag(context.Background(), projectKey, name, repositorySlug).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService DeleteWebhook1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var webhookId string
		var repositorySlug string

		httpRes, err := apiClient.RepositoryAPI.DeleteWebhook1(context.Background(), projectKey, webhookId, repositorySlug).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService DisableHook1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var hookKey string
		var repositorySlug string

		resp, httpRes, err := apiClient.RepositoryAPI.DisableHook1(context.Background(), projectKey, hookKey, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService EditFile", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var path string
		var projectKey string
		var repositorySlug string

		resp, httpRes, err := apiClient.RepositoryAPI.EditFile(context.Background(), path, projectKey, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService EnableHook1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var hookKey string
		var repositorySlug string

		resp, httpRes, err := apiClient.RepositoryAPI.EnableHook1(context.Background(), projectKey, hookKey, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService FindBranches", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var repositorySlug string

		resp, httpRes, err := apiClient.RepositoryAPI.FindBranches(context.Background(), projectKey, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService FindByCommit", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var commitId string
		var repositorySlug string

		resp, httpRes, err := apiClient.RepositoryAPI.FindByCommit(context.Background(), projectKey, commitId, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService FindWebhooks1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var repositorySlug string

		httpRes, err := apiClient.RepositoryAPI.FindWebhooks1(context.Background(), projectKey, repositorySlug).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService Get5", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var repositorySlug string

		resp, httpRes, err := apiClient.RepositoryAPI.Get5(context.Background(), projectKey, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService GetAllLabelsForRepository", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var repositorySlug string

		resp, httpRes, err := apiClient.RepositoryAPI.GetAllLabelsForRepository(context.Background(), projectKey, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService GetArchive", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var repositorySlug string

		httpRes, err := apiClient.RepositoryAPI.GetArchive(context.Background(), projectKey, repositorySlug).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService GetAttachment", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var attachmentId string
		var repositorySlug string

		httpRes, err := apiClient.RepositoryAPI.GetAttachment(context.Background(), projectKey, attachmentId, repositorySlug).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService GetAttachmentMetadata", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var attachmentId string
		var repositorySlug string

		resp, httpRes, err := apiClient.RepositoryAPI.GetAttachmentMetadata(context.Background(), projectKey, attachmentId, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService GetAutoDeclineSettings1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var repositorySlug string

		resp, httpRes, err := apiClient.RepositoryAPI.GetAutoDeclineSettings1(context.Background(), projectKey, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService GetBranches", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var repositorySlug string

		resp, httpRes, err := apiClient.RepositoryAPI.GetBranches(context.Background(), projectKey, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService GetChanges", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var commitId string
		var repositorySlug string

		resp, httpRes, err := apiClient.RepositoryAPI.GetChanges(context.Background(), projectKey, commitId, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService GetChanges1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var repositorySlug string

		resp, httpRes, err := apiClient.RepositoryAPI.GetChanges1(context.Background(), projectKey, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService GetComment", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var commentId string
		var commitId string
		var repositorySlug string

		resp, httpRes, err := apiClient.RepositoryAPI.GetComment(context.Background(), projectKey, commentId, commitId, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService GetComments", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var commitId string
		var repositorySlug string

		resp, httpRes, err := apiClient.RepositoryAPI.GetComments(context.Background(), projectKey, commitId, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService GetCommit", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var commitId string
		var repositorySlug string

		resp, httpRes, err := apiClient.RepositoryAPI.GetCommit(context.Background(), projectKey, commitId, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService GetCommits", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var repositorySlug string

		resp, httpRes, err := apiClient.RepositoryAPI.GetCommits(context.Background(), projectKey, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService GetConfigurations1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var repositorySlug string

		resp, httpRes, err := apiClient.RepositoryAPI.GetConfigurations1(context.Background(), projectKey, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService GetContent", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var repositorySlug string

		httpRes, err := apiClient.RepositoryAPI.GetContent(context.Background(), projectKey, repositorySlug).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService GetContent1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var path string
		var projectKey string
		var repositorySlug string

		httpRes, err := apiClient.RepositoryAPI.GetContent1(context.Background(), path, projectKey, repositorySlug).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService GetDefaultBranch1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var repositorySlug string

		resp, httpRes, err := apiClient.RepositoryAPI.GetDefaultBranch1(context.Background(), projectKey, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService GetDefaultTasks1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var repositorySlug string

		resp, httpRes, err := apiClient.RepositoryAPI.GetDefaultTasks1(context.Background(), projectKey, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService GetDiffStatsSummary", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var path string
		var projectKey string
		var commitId string
		var repositorySlug string

		resp, httpRes, err := apiClient.RepositoryAPI.GetDiffStatsSummary(context.Background(), path, projectKey, commitId, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService GetDiffStatsSummary1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var path string
		var projectKey string
		var repositorySlug string

		resp, httpRes, err := apiClient.RepositoryAPI.GetDiffStatsSummary1(context.Background(), path, projectKey, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService GetLatestInvocation1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var webhookId string
		var repositorySlug string

		resp, httpRes, err := apiClient.RepositoryAPI.GetLatestInvocation1(context.Background(), projectKey, webhookId, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService GetMergeBase", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var commitId string
		var repositorySlug string

		resp, httpRes, err := apiClient.RepositoryAPI.GetMergeBase(context.Background(), projectKey, commitId, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService GetPullRequestSettings1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var repositorySlug string

		resp, httpRes, err := apiClient.RepositoryAPI.GetPullRequestSettings1(context.Background(), projectKey, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService GetRefChangeActivity", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var repositorySlug string

		resp, httpRes, err := apiClient.RepositoryAPI.GetRefChangeActivity(context.Background(), projectKey, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService GetRepositories1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.RepositoryAPI.GetRepositories1(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService GetRepositoriesRecentlyAccessed", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.RepositoryAPI.GetRepositoriesRecentlyAccessed(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService GetRepositoryHook1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var hookKey string
		var repositorySlug string

		resp, httpRes, err := apiClient.RepositoryAPI.GetRepositoryHook1(context.Background(), projectKey, hookKey, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService GetRepositoryHooks1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var repositorySlug string

		resp, httpRes, err := apiClient.RepositoryAPI.GetRepositoryHooks1(context.Background(), projectKey, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService GetRestriction1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var id string
		var repositorySlug string

		resp, httpRes, err := apiClient.RepositoryAPI.GetRestriction1(context.Background(), projectKey, id, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService GetRestrictions1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var repositorySlug string

		resp, httpRes, err := apiClient.RepositoryAPI.GetRestrictions1(context.Background(), projectKey, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService GetSettings1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var hookKey string
		var repositorySlug string

		resp, httpRes, err := apiClient.RepositoryAPI.GetSettings1(context.Background(), projectKey, hookKey, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService GetStatistics1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var webhookId string
		var repositorySlug string

		resp, httpRes, err := apiClient.RepositoryAPI.GetStatistics1(context.Background(), projectKey, webhookId, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService GetStatisticsSummary1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var webhookId string
		var repositorySlug string

		resp, httpRes, err := apiClient.RepositoryAPI.GetStatisticsSummary1(context.Background(), projectKey, webhookId, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService GetTag", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var name string
		var repositorySlug string

		resp, httpRes, err := apiClient.RepositoryAPI.GetTag(context.Background(), projectKey, name, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService GetTags", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var repositorySlug string

		resp, httpRes, err := apiClient.RepositoryAPI.GetTags(context.Background(), projectKey, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService GetWebhook1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var webhookId string
		var repositorySlug string

		resp, httpRes, err := apiClient.RepositoryAPI.GetWebhook1(context.Background(), projectKey, webhookId, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService MGetStatus", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var repositorySlug string

		resp, httpRes, err := apiClient.RepositoryAPI.MGetStatus(context.Background(), projectKey, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService React", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var commentId string
		var commitId string
		var emoticon string
		var repositorySlug string

		resp, httpRes, err := apiClient.RepositoryAPI.React(context.Background(), projectKey, commentId, commitId, emoticon, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService RemoveConfiguration1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var scriptId string
		var repositorySlug string

		httpRes, err := apiClient.RepositoryAPI.RemoveConfiguration1(context.Background(), projectKey, scriptId, repositorySlug).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService RemoveLabel", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var labelName string
		var repositorySlug string

		httpRes, err := apiClient.RepositoryAPI.RemoveLabel(context.Background(), projectKey, labelName, repositorySlug).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService SaveAttachmentMetadata", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var attachmentId string
		var repositorySlug string

		httpRes, err := apiClient.RepositoryAPI.SaveAttachmentMetadata(context.Background(), projectKey, attachmentId, repositorySlug).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService SearchWebhooks", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var repositorySlug string

		httpRes, err := apiClient.RepositoryAPI.SearchWebhooks(context.Background(), projectKey, repositorySlug).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService Set1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var repositorySlug string

		resp, httpRes, err := apiClient.RepositoryAPI.Set1(context.Background(), projectKey, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService SetAutoDeclineSettings1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var repositorySlug string

		resp, httpRes, err := apiClient.RepositoryAPI.SetAutoDeclineSettings1(context.Background(), projectKey, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService SetConfiguration1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var scriptId string
		var repositorySlug string

		resp, httpRes, err := apiClient.RepositoryAPI.SetConfiguration1(context.Background(), projectKey, scriptId, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService SetDefaultBranch1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var repositorySlug string

		httpRes, err := apiClient.RepositoryAPI.SetDefaultBranch1(context.Background(), projectKey, repositorySlug).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService SetEnabled", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var repositorySlug string

		resp, httpRes, err := apiClient.RepositoryAPI.SetEnabled(context.Background(), projectKey, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService SetSettings1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var hookKey string
		var repositorySlug string

		resp, httpRes, err := apiClient.RepositoryAPI.SetSettings1(context.Background(), projectKey, hookKey, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService Stream", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var repositorySlug string

		resp, httpRes, err := apiClient.RepositoryAPI.Stream(context.Background(), projectKey, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService Stream1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var path string
		var projectKey string
		var repositorySlug string

		resp, httpRes, err := apiClient.RepositoryAPI.Stream1(context.Background(), path, projectKey, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService StreamChanges", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var repositorySlug string

		resp, httpRes, err := apiClient.RepositoryAPI.StreamChanges(context.Background(), projectKey, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService StreamCommits", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var repositorySlug string

		resp, httpRes, err := apiClient.RepositoryAPI.StreamCommits(context.Background(), projectKey, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService StreamDiff", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var commitId string
		var repositorySlug string
		var path string
		var projectKey string

		resp, httpRes, err := apiClient.RepositoryAPI.StreamDiff(context.Background(), commitId, repositorySlug, path, projectKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService StreamDiff1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var path string
		var projectKey string
		var repositorySlug string

		resp, httpRes, err := apiClient.RepositoryAPI.StreamDiff1(context.Background(), path, projectKey, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService StreamFiles", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var repositorySlug string

		resp, httpRes, err := apiClient.RepositoryAPI.StreamFiles(context.Background(), projectKey, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService StreamFiles1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var path string
		var projectKey string
		var repositorySlug string

		resp, httpRes, err := apiClient.RepositoryAPI.StreamFiles1(context.Background(), path, projectKey, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService StreamPatch", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var repositorySlug string

		httpRes, err := apiClient.RepositoryAPI.StreamPatch(context.Background(), projectKey, repositorySlug).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService StreamRaw", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var path string
		var projectKey string
		var repositorySlug string

		httpRes, err := apiClient.RepositoryAPI.StreamRaw(context.Background(), path, projectKey, repositorySlug).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService StreamRawDiff", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var repositorySlug string

		httpRes, err := apiClient.RepositoryAPI.StreamRawDiff(context.Background(), projectKey, repositorySlug).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService StreamRawDiff1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var path string
		var projectKey string
		var repositorySlug string

		httpRes, err := apiClient.RepositoryAPI.StreamRawDiff1(context.Background(), path, projectKey, repositorySlug).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService Synchronize", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var repositorySlug string

		resp, httpRes, err := apiClient.RepositoryAPI.Synchronize(context.Background(), projectKey, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService TestWebhook1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var repositorySlug string

		resp, httpRes, err := apiClient.RepositoryAPI.TestWebhook1(context.Background(), projectKey, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService UnReact", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var commentId string
		var commitId string
		var emoticon string
		var repositorySlug string

		httpRes, err := apiClient.RepositoryAPI.UnReact(context.Background(), projectKey, commentId, commitId, emoticon, repositorySlug).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService Unwatch", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var commitId string
		var repositorySlug string

		httpRes, err := apiClient.RepositoryAPI.Unwatch(context.Background(), projectKey, commitId, repositorySlug).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService Unwatch2", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var repositorySlug string

		httpRes, err := apiClient.RepositoryAPI.Unwatch2(context.Background(), projectKey, repositorySlug).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService UpdateComment", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var commentId string
		var commitId string
		var repositorySlug string

		resp, httpRes, err := apiClient.RepositoryAPI.UpdateComment(context.Background(), projectKey, commentId, commitId, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService UpdateDefaultTask1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var repositorySlug string
		var taskId string

		resp, httpRes, err := apiClient.RepositoryAPI.UpdateDefaultTask1(context.Background(), projectKey, repositorySlug, taskId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService UpdatePullRequestSettings1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var repositorySlug string

		resp, httpRes, err := apiClient.RepositoryAPI.UpdatePullRequestSettings1(context.Background(), projectKey, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService UpdateWebhook1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var webhookId string
		var repositorySlug string

		resp, httpRes, err := apiClient.RepositoryAPI.UpdateWebhook1(context.Background(), projectKey, webhookId, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService Watch", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var commitId string
		var repositorySlug string

		httpRes, err := apiClient.RepositoryAPI.Watch(context.Background(), projectKey, commitId, repositorySlug).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService Watch2", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var repositorySlug string

		httpRes, err := apiClient.RepositoryAPI.Watch2(context.Background(), projectKey, repositorySlug).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
