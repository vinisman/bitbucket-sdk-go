/*
Bitbucket Data Center

Testing SecurityAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package test

import (
	"context"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	openapiclient "github.com/vinisman/bitbucket-sdk-go/openapi"
)

func Test_openapi_SecurityAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test SecurityAPIService AddExemptRepo", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var repositorySlug string
		var projectKey string

		httpRes, err := apiClient.SecurityAPI.AddExemptRepo(context.Background(), repositorySlug, projectKey).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityAPIService AddKey", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SecurityAPI.AddKey(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityAPIService BulkAddExemptRepositories", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.SecurityAPI.BulkAddExemptRepositories(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityAPIService BulkAddExemptRepositories1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string

		httpRes, err := apiClient.SecurityAPI.BulkAddExemptRepositories1(context.Background(), projectKey).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityAPIService CreateAllowlistRule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string

		resp, httpRes, err := apiClient.SecurityAPI.CreateAllowlistRule(context.Background(), projectKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityAPIService CreateAllowlistRule1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var repositorySlug string

		resp, httpRes, err := apiClient.SecurityAPI.CreateAllowlistRule1(context.Background(), projectKey, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityAPIService CreateCertificate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SecurityAPI.CreateCertificate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityAPIService CreateRule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string

		resp, httpRes, err := apiClient.SecurityAPI.CreateRule(context.Background(), projectKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityAPIService CreateRule1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var repositorySlug string

		resp, httpRes, err := apiClient.SecurityAPI.CreateRule1(context.Background(), projectKey, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityAPIService CreateRule2", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SecurityAPI.CreateRule2(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityAPIService DeleteAllowlistRule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var id string

		httpRes, err := apiClient.SecurityAPI.DeleteAllowlistRule(context.Background(), projectKey, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityAPIService DeleteAllowlistRule1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var id string
		var repositorySlug string

		httpRes, err := apiClient.SecurityAPI.DeleteAllowlistRule1(context.Background(), projectKey, id, repositorySlug).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityAPIService DeleteCertificate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string

		resp, httpRes, err := apiClient.SecurityAPI.DeleteCertificate(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityAPIService DeleteExemptRepo", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var repositorySlug string
		var projectKey string

		httpRes, err := apiClient.SecurityAPI.DeleteExemptRepo(context.Background(), repositorySlug, projectKey).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityAPIService DeleteForUser", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.SecurityAPI.DeleteForUser(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityAPIService DeleteInactiveKeys", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.SecurityAPI.DeleteInactiveKeys(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityAPIService DeleteKey", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var fingerprintOrId string

		httpRes, err := apiClient.SecurityAPI.DeleteKey(context.Background(), fingerprintOrId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityAPIService DeleteRule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var id string

		httpRes, err := apiClient.SecurityAPI.DeleteRule(context.Background(), projectKey, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityAPIService DeleteRule1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var id string
		var repositorySlug string

		httpRes, err := apiClient.SecurityAPI.DeleteRule1(context.Background(), projectKey, id, repositorySlug).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityAPIService DeleteRule2", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string

		httpRes, err := apiClient.SecurityAPI.DeleteRule2(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityAPIService EditAllowlistRule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var id string

		resp, httpRes, err := apiClient.SecurityAPI.EditAllowlistRule(context.Background(), projectKey, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityAPIService EditAllowlistRule1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var id string
		var repositorySlug string

		resp, httpRes, err := apiClient.SecurityAPI.EditAllowlistRule1(context.Background(), projectKey, id, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityAPIService EditRule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var id string

		resp, httpRes, err := apiClient.SecurityAPI.EditRule(context.Background(), projectKey, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityAPIService EditRule1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var id string
		var repositorySlug string

		resp, httpRes, err := apiClient.SecurityAPI.EditRule1(context.Background(), projectKey, id, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityAPIService EditRule2", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string

		resp, httpRes, err := apiClient.SecurityAPI.EditRule2(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityAPIService FindExemptReposByProject", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string

		resp, httpRes, err := apiClient.SecurityAPI.FindExemptReposByProject(context.Background(), projectKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityAPIService FindExemptReposByScope", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SecurityAPI.FindExemptReposByScope(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityAPIService GetAllCertificates", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SecurityAPI.GetAllCertificates(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityAPIService GetAllowlistRule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var id string

		resp, httpRes, err := apiClient.SecurityAPI.GetAllowlistRule(context.Background(), projectKey, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityAPIService GetAllowlistRule1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var id string
		var repositorySlug string

		resp, httpRes, err := apiClient.SecurityAPI.GetAllowlistRule1(context.Background(), projectKey, id, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityAPIService GetInactiveKeys", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.SecurityAPI.GetInactiveKeys(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityAPIService GetKeysForUser", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SecurityAPI.GetKeysForUser(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityAPIService GetRule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var id string

		resp, httpRes, err := apiClient.SecurityAPI.GetRule(context.Background(), projectKey, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityAPIService GetRule1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var id string
		var repositorySlug string

		resp, httpRes, err := apiClient.SecurityAPI.GetRule1(context.Background(), projectKey, id, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityAPIService GetRule2", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string

		resp, httpRes, err := apiClient.SecurityAPI.GetRule2(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityAPIService GetSystemSigningConfiguration", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SecurityAPI.GetSystemSigningConfiguration(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityAPIService IsRepoExempt", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var repositorySlug string
		var projectKey string

		httpRes, err := apiClient.SecurityAPI.IsRepoExempt(context.Background(), repositorySlug, projectKey).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityAPIService RotateKey", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.SecurityAPI.RotateKey(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityAPIService Search1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string

		resp, httpRes, err := apiClient.SecurityAPI.Search1(context.Background(), projectKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityAPIService Search2", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string
		var repositorySlug string

		resp, httpRes, err := apiClient.SecurityAPI.Search2(context.Background(), projectKey, repositorySlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityAPIService Search3", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var repositorySlug string
		var projectKey string

		resp, httpRes, err := apiClient.SecurityAPI.Search3(context.Background(), repositorySlug, projectKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityAPIService Search4", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SecurityAPI.Search4(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityAPIService SearchAllowlistRule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectKey string

		resp, httpRes, err := apiClient.SecurityAPI.SearchAllowlistRule(context.Background(), projectKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityAPIService UpdateCertificateRevocationListEntries", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string

		httpRes, err := apiClient.SecurityAPI.UpdateCertificateRevocationListEntries(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityAPIService UpdateSystemSigningConfiguration", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SecurityAPI.UpdateSystemSigningConfiguration(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
