/*
Bitbucket Data Center

Testing SystemMaintenanceAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package test

import (
	"context"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	openapiclient "github.com/vinisman/bitbucket-sdk-go/openapi"
)

func Test_openapi_SystemMaintenanceAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test SystemMaintenanceAPIService CancelExportJob", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var jobId string

		httpRes, err := apiClient.SystemMaintenanceAPI.CancelExportJob(context.Background(), jobId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SystemMaintenanceAPIService CancelImportJob", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var jobId string

		httpRes, err := apiClient.SystemMaintenanceAPI.CancelImportJob(context.Background(), jobId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SystemMaintenanceAPIService CancelMeshMigrationJob", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var jobId string

		httpRes, err := apiClient.SystemMaintenanceAPI.CancelMeshMigrationJob(context.Background(), jobId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SystemMaintenanceAPIService ClearDefaultBranch", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.SystemMaintenanceAPI.ClearDefaultBranch(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SystemMaintenanceAPIService ClearSenderAddress", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.SystemMaintenanceAPI.ClearSenderAddress(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SystemMaintenanceAPIService Connectivity", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SystemMaintenanceAPI.Connectivity(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SystemMaintenanceAPIService CreateHookScript", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SystemMaintenanceAPI.CreateHookScript(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SystemMaintenanceAPIService Delete2", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int64

		httpRes, err := apiClient.SystemMaintenanceAPI.Delete2(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SystemMaintenanceAPIService Delete8", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var userSlug string

		httpRes, err := apiClient.SystemMaintenanceAPI.Delete8(context.Background(), userSlug).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SystemMaintenanceAPIService DeleteAvatar", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var userSlug string

		resp, httpRes, err := apiClient.SystemMaintenanceAPI.DeleteAvatar(context.Background(), userSlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SystemMaintenanceAPIService DeleteBanner", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.SystemMaintenanceAPI.DeleteBanner(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SystemMaintenanceAPIService DeleteHookScript", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var scriptId string

		httpRes, err := apiClient.SystemMaintenanceAPI.DeleteHookScript(context.Background(), scriptId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SystemMaintenanceAPIService DeleteMailConfig", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.SystemMaintenanceAPI.DeleteMailConfig(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SystemMaintenanceAPIService DismissRetentionConfigReviewNotification", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.SystemMaintenanceAPI.DismissRetentionConfigReviewNotification(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SystemMaintenanceAPIService Get2", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SystemMaintenanceAPI.Get2(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SystemMaintenanceAPIService Get6", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var userSlug string

		resp, httpRes, err := apiClient.SystemMaintenanceAPI.Get6(context.Background(), userSlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SystemMaintenanceAPIService GetActiveMeshMigrationSummary", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SystemMaintenanceAPI.GetActiveMeshMigrationSummary(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SystemMaintenanceAPIService GetAllMeshMigrationSummaries", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SystemMaintenanceAPI.GetAllMeshMigrationSummaries(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SystemMaintenanceAPIService GetAllRateLimitSettings", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SystemMaintenanceAPI.GetAllRateLimitSettings(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SystemMaintenanceAPIService GetAllRegisteredMeshNodes", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SystemMaintenanceAPI.GetAllRegisteredMeshNodes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SystemMaintenanceAPIService GetApplicationProperties", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SystemMaintenanceAPI.GetApplicationProperties(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SystemMaintenanceAPIService GetBanner", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SystemMaintenanceAPI.GetBanner(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SystemMaintenanceAPIService GetControlPlanePublicKey", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.SystemMaintenanceAPI.GetControlPlanePublicKey(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SystemMaintenanceAPIService GetDefaultBranch", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.SystemMaintenanceAPI.GetDefaultBranch(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SystemMaintenanceAPIService GetExportJob", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var jobId string

		resp, httpRes, err := apiClient.SystemMaintenanceAPI.GetExportJob(context.Background(), jobId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SystemMaintenanceAPIService GetExportJobMessages", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var jobId string

		resp, httpRes, err := apiClient.SystemMaintenanceAPI.GetExportJobMessages(context.Background(), jobId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SystemMaintenanceAPIService GetGlobalSettings", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SystemMaintenanceAPI.GetGlobalSettings(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SystemMaintenanceAPIService GetHistory", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SystemMaintenanceAPI.GetHistory(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SystemMaintenanceAPIService GetHookScript", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var scriptId string

		resp, httpRes, err := apiClient.SystemMaintenanceAPI.GetHookScript(context.Background(), scriptId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SystemMaintenanceAPIService GetImportJob", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var jobId string

		resp, httpRes, err := apiClient.SystemMaintenanceAPI.GetImportJob(context.Background(), jobId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SystemMaintenanceAPIService GetImportJobMessages", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var jobId string

		resp, httpRes, err := apiClient.SystemMaintenanceAPI.GetImportJobMessages(context.Background(), jobId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SystemMaintenanceAPIService GetInformation", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SystemMaintenanceAPI.GetInformation(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SystemMaintenanceAPIService GetLabel", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var labelName string

		resp, httpRes, err := apiClient.SystemMaintenanceAPI.GetLabel(context.Background(), labelName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SystemMaintenanceAPIService GetLabelables", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var labelName string

		resp, httpRes, err := apiClient.SystemMaintenanceAPI.GetLabelables(context.Background(), labelName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SystemMaintenanceAPIService GetLabels", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SystemMaintenanceAPI.GetLabels(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SystemMaintenanceAPIService GetLevel", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var loggerName string

		resp, httpRes, err := apiClient.SystemMaintenanceAPI.GetLevel(context.Background(), loggerName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SystemMaintenanceAPIService GetMailConfig", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SystemMaintenanceAPI.GetMailConfig(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SystemMaintenanceAPIService GetMeshMigrationJob", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var jobId string

		httpRes, err := apiClient.SystemMaintenanceAPI.GetMeshMigrationJob(context.Background(), jobId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SystemMaintenanceAPIService GetMeshMigrationJobMessages", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var jobId string

		resp, httpRes, err := apiClient.SystemMaintenanceAPI.GetMeshMigrationJobMessages(context.Background(), jobId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SystemMaintenanceAPIService GetMeshMigrationJobSummary", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var jobId string

		resp, httpRes, err := apiClient.SystemMaintenanceAPI.GetMeshMigrationJobSummary(context.Background(), jobId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SystemMaintenanceAPIService GetRegisteredMeshNodeById", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string

		resp, httpRes, err := apiClient.SystemMaintenanceAPI.GetRegisteredMeshNodeById(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SystemMaintenanceAPIService GetRepositoryArchivePolicy", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SystemMaintenanceAPI.GetRepositoryArchivePolicy(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SystemMaintenanceAPIService GetRepositoryDeletePolicy", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SystemMaintenanceAPI.GetRepositoryDeletePolicy(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SystemMaintenanceAPIService GetRootLevel", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SystemMaintenanceAPI.GetRootLevel(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SystemMaintenanceAPIService GetSenderAddress", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.SystemMaintenanceAPI.GetSenderAddress(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SystemMaintenanceAPIService GetSettings2", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SystemMaintenanceAPI.GetSettings2(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SystemMaintenanceAPIService GetSettings3", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SystemMaintenanceAPI.GetSettings3(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SystemMaintenanceAPIService GetSupportZip", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string

		httpRes, err := apiClient.SystemMaintenanceAPI.GetSupportZip(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SystemMaintenanceAPIService GetSupportZips", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.SystemMaintenanceAPI.GetSupportZips(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SystemMaintenanceAPIService GetSupportedKeyTypes", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.SystemMaintenanceAPI.GetSupportedKeyTypes(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SystemMaintenanceAPIService GetUser", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var userSlug string

		resp, httpRes, err := apiClient.SystemMaintenanceAPI.GetUser(context.Background(), userSlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SystemMaintenanceAPIService GetUserSettings", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var userSlug string

		resp, httpRes, err := apiClient.SystemMaintenanceAPI.GetUserSettings(context.Background(), userSlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SystemMaintenanceAPIService GetUsers2", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SystemMaintenanceAPI.GetUsers2(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SystemMaintenanceAPIService PreviewExport", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SystemMaintenanceAPI.PreviewExport(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SystemMaintenanceAPIService PreviewMeshMigration", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SystemMaintenanceAPI.PreviewMeshMigration(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SystemMaintenanceAPIService Read", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var scriptId string

		httpRes, err := apiClient.SystemMaintenanceAPI.Read(context.Background(), scriptId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SystemMaintenanceAPIService RegisterNewMeshNode", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SystemMaintenanceAPI.RegisterNewMeshNode(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SystemMaintenanceAPIService SearchMeshMigrationRepos", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SystemMaintenanceAPI.SearchMeshMigrationRepos(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SystemMaintenanceAPIService Set2", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SystemMaintenanceAPI.Set2(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SystemMaintenanceAPIService Set3", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var userSlug string

		resp, httpRes, err := apiClient.SystemMaintenanceAPI.Set3(context.Background(), userSlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SystemMaintenanceAPIService SetBanner", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.SystemMaintenanceAPI.SetBanner(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SystemMaintenanceAPIService SetDefaultBranch", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.SystemMaintenanceAPI.SetDefaultBranch(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SystemMaintenanceAPIService SetLevel", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var levelName string
		var loggerName string

		httpRes, err := apiClient.SystemMaintenanceAPI.SetLevel(context.Background(), levelName, loggerName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SystemMaintenanceAPIService SetMailConfig", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SystemMaintenanceAPI.SetMailConfig(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SystemMaintenanceAPIService SetRepositoryArchivePolicy", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SystemMaintenanceAPI.SetRepositoryArchivePolicy(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SystemMaintenanceAPIService SetRepositoryDeletePolicy", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SystemMaintenanceAPI.SetRepositoryDeletePolicy(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SystemMaintenanceAPIService SetRootLevel", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var levelName string

		httpRes, err := apiClient.SystemMaintenanceAPI.SetRootLevel(context.Background(), levelName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SystemMaintenanceAPIService SetSenderAddress", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.SystemMaintenanceAPI.SetSenderAddress(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SystemMaintenanceAPIService SetSettings2", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SystemMaintenanceAPI.SetSettings2(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SystemMaintenanceAPIService SetSettings3", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SystemMaintenanceAPI.SetSettings3(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SystemMaintenanceAPIService StartExport", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SystemMaintenanceAPI.StartExport(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SystemMaintenanceAPIService StartImport", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SystemMaintenanceAPI.StartImport(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SystemMaintenanceAPIService StartMeshMigration", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SystemMaintenanceAPI.StartMeshMigration(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SystemMaintenanceAPIService UpdateGlobalSettings", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.SystemMaintenanceAPI.UpdateGlobalSettings(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SystemMaintenanceAPIService UpdateHookScript", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var scriptId string

		resp, httpRes, err := apiClient.SystemMaintenanceAPI.UpdateHookScript(context.Background(), scriptId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SystemMaintenanceAPIService UpdateLicense", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SystemMaintenanceAPI.UpdateLicense(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SystemMaintenanceAPIService UpdateMeshNode", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string

		resp, httpRes, err := apiClient.SystemMaintenanceAPI.UpdateMeshNode(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SystemMaintenanceAPIService UpdateSettings", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var userSlug string

		httpRes, err := apiClient.SystemMaintenanceAPI.UpdateSettings(context.Background(), userSlug).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SystemMaintenanceAPIService UpdateUserDetails1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SystemMaintenanceAPI.UpdateUserDetails1(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SystemMaintenanceAPIService UpdateUserPassword1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.SystemMaintenanceAPI.UpdateUserPassword1(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SystemMaintenanceAPIService UploadAvatar1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var userSlug string

		httpRes, err := apiClient.SystemMaintenanceAPI.UploadAvatar1(context.Background(), userSlug).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
